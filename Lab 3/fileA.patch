diff -ruN xv6-public/.git/config xv6-publica/.git/config
--- xv6-public/.git/config	2024-10-15 22:20:29.402270319 +0530
+++ xv6-publica/.git/config	2024-10-15 10:20:22.467891947 +0530
@@ -9,3 +9,4 @@
 [branch "master"]
 	remote = origin
 	merge = refs/heads/master
+	vscode-merge-base = origin/master
Binary files xv6-public/.git/index and xv6-publica/.git/index differ
diff -ruN xv6-public/.git/logs/HEAD xv6-publica/.git/logs/HEAD
--- xv6-public/.git/logs/HEAD	2024-10-15 22:20:29.392270319 +0530
+++ xv6-publica/.git/logs/HEAD	2024-10-15 10:04:44.847889766 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 aadityos <aadityos@DESKTOP-TOLJKGE> 1729011029 +0530	clone: from https://github.com/mit-pdos/xv6-public
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 aadityos <aadityos@DESKTOP-TOLJKGE> 1728966884 +0530	clone: from https://github.com/mit-pdos/xv6-public
diff -ruN xv6-public/.git/logs/refs/heads/master xv6-publica/.git/logs/refs/heads/master
--- xv6-public/.git/logs/refs/heads/master	2024-10-15 22:20:29.402270319 +0530
+++ xv6-publica/.git/logs/refs/heads/master	2024-10-15 10:04:44.847889766 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 aadityos <aadityos@DESKTOP-TOLJKGE> 1729011029 +0530	clone: from https://github.com/mit-pdos/xv6-public
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 aadityos <aadityos@DESKTOP-TOLJKGE> 1728966884 +0530	clone: from https://github.com/mit-pdos/xv6-public
diff -ruN xv6-public/.git/logs/refs/remotes/origin/HEAD xv6-publica/.git/logs/refs/remotes/origin/HEAD
--- xv6-public/.git/logs/refs/remotes/origin/HEAD	2024-10-15 22:20:29.392270319 +0530
+++ xv6-publica/.git/logs/refs/remotes/origin/HEAD	2024-10-15 10:04:44.847889766 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 aadityos <aadityos@DESKTOP-TOLJKGE> 1729011029 +0530	clone: from https://github.com/mit-pdos/xv6-public
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 aadityos <aadityos@DESKTOP-TOLJKGE> 1728966884 +0530	clone: from https://github.com/mit-pdos/xv6-public
Binary files xv6-public/_cat and xv6-publica/_cat differ
Binary files xv6-public/_echo and xv6-publica/_echo differ
Binary files xv6-public/_forktest and xv6-publica/_forktest differ
Binary files xv6-public/_grep and xv6-publica/_grep differ
Binary files xv6-public/_init and xv6-publica/_init differ
Binary files xv6-public/_kill and xv6-publica/_kill differ
Binary files xv6-public/_ln and xv6-publica/_ln differ
Binary files xv6-public/_ls and xv6-publica/_ls differ
Binary files xv6-public/_mkdir and xv6-publica/_mkdir differ
Binary files xv6-public/_rm and xv6-publica/_rm differ
Binary files xv6-public/_sh and xv6-publica/_sh differ
Binary files xv6-public/_stressfs and xv6-publica/_stressfs differ
Binary files xv6-public/_usertests and xv6-publica/_usertests differ
Binary files xv6-public/_wc and xv6-publica/_wc differ
Binary files xv6-public/_zombie and xv6-publica/_zombie differ
diff -ruN xv6-public/bio.d xv6-publica/bio.d
--- xv6-public/bio.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/bio.d	2024-10-15 10:58:38.947888501 +0530
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/bio.o and xv6-publica/bio.o differ
diff -ruN xv6-public/bootasm.d xv6-publica/bootasm.d
--- xv6-public/bootasm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/bootasm.d	2024-10-15 10:58:38.877888499 +0530
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files xv6-public/bootasm.o and xv6-publica/bootasm.o differ
Binary files xv6-public/bootblock and xv6-publica/bootblock differ
diff -ruN xv6-public/bootblock.asm xv6-publica/bootblock.asm
--- xv6-public/bootblock.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/bootblock.asm	2024-10-15 10:58:38.887888499 +0530
@@ -0,0 +1,355 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0x12>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 f0 00 00 00       	call   7d3d <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c7e:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c83:	ec                   	in     (%dx),%al
+
+void
+waitdisk(void)
+{
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c84:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c87:	3c 40                	cmp    $0x40,%al
+    7c89:	75 f8                	jne    7c83 <waitdisk+0x5>
+    ;
+}
+    7c8b:	c3                   	ret    
+
+00007c8c <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 e5                	mov    %esp,%ebp
+    7c8f:	57                   	push   %edi
+    7c90:	53                   	push   %ebx
+    7c91:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c94:	e8 e5 ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7c99:	b8 01 00 00 00       	mov    $0x1,%eax
+    7c9e:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca3:	ee                   	out    %al,(%dx)
+    7ca4:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7ca9:	89 d8                	mov    %ebx,%eax
+    7cab:	ee                   	out    %al,(%dx)
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+    7cac:	89 d8                	mov    %ebx,%eax
+    7cae:	c1 e8 08             	shr    $0x8,%eax
+    7cb1:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cb6:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+    7cb7:	89 d8                	mov    %ebx,%eax
+    7cb9:	c1 e8 10             	shr    $0x10,%eax
+    7cbc:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc1:	ee                   	out    %al,(%dx)
+  outb(0x1F6, (offset >> 24) | 0xE0);
+    7cc2:	89 d8                	mov    %ebx,%eax
+    7cc4:	c1 e8 18             	shr    $0x18,%eax
+    7cc7:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cca:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7ccf:	ee                   	out    %al,(%dx)
+    7cd0:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cd5:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cda:	ee                   	out    %al,(%dx)
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7cdb:	e8 9e ff ff ff       	call   7c7e <waitdisk>
+  asm volatile("cld; rep insl" :
+    7ce0:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ce3:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7ce8:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7ced:	fc                   	cld    
+    7cee:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf0:	5b                   	pop    %ebx
+    7cf1:	5f                   	pop    %edi
+    7cf2:	5d                   	pop    %ebp
+    7cf3:	c3                   	ret    
+
+00007cf4 <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cf4:	55                   	push   %ebp
+    7cf5:	89 e5                	mov    %esp,%ebp
+    7cf7:	57                   	push   %edi
+    7cf8:	56                   	push   %esi
+    7cf9:	53                   	push   %ebx
+    7cfa:	83 ec 0c             	sub    $0xc,%esp
+    7cfd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d00:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d03:	89 df                	mov    %ebx,%edi
+    7d05:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d08:	89 f0                	mov    %esi,%eax
+    7d0a:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d0f:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d11:	c1 ee 09             	shr    $0x9,%esi
+    7d14:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d17:	39 df                	cmp    %ebx,%edi
+    7d19:	76 1a                	jbe    7d35 <readseg+0x41>
+    readsect(pa, offset);
+    7d1b:	83 ec 08             	sub    $0x8,%esp
+    7d1e:	56                   	push   %esi
+    7d1f:	53                   	push   %ebx
+    7d20:	e8 67 ff ff ff       	call   7c8c <readsect>
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d25:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d2b:	83 c6 01             	add    $0x1,%esi
+    7d2e:	83 c4 10             	add    $0x10,%esp
+    7d31:	39 df                	cmp    %ebx,%edi
+    7d33:	77 e6                	ja     7d1b <readseg+0x27>
+}
+    7d35:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d38:	5b                   	pop    %ebx
+    7d39:	5e                   	pop    %esi
+    7d3a:	5f                   	pop    %edi
+    7d3b:	5d                   	pop    %ebp
+    7d3c:	c3                   	ret    
+
+00007d3d <bootmain>:
+{
+    7d3d:	55                   	push   %ebp
+    7d3e:	89 e5                	mov    %esp,%ebp
+    7d40:	57                   	push   %edi
+    7d41:	56                   	push   %esi
+    7d42:	53                   	push   %ebx
+    7d43:	83 ec 10             	sub    $0x10,%esp
+  readseg((uchar*)elf, 4096, 0);
+    7d46:	6a 00                	push   $0x0
+    7d48:	68 00 10 00 00       	push   $0x1000
+    7d4d:	68 00 00 01 00       	push   $0x10000
+    7d52:	e8 9d ff ff ff       	call   7cf4 <readseg>
+  if(elf->magic != ELF_MAGIC)
+    7d57:	83 c4 10             	add    $0x10,%esp
+    7d5a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d61:	45 4c 46 
+    7d64:	75 21                	jne    7d87 <bootmain+0x4a>
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d66:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d6b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d71:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d78:	c1 e6 05             	shl    $0x5,%esi
+    7d7b:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d7d:	39 f3                	cmp    %esi,%ebx
+    7d7f:	72 15                	jb     7d96 <bootmain+0x59>
+  entry();
+    7d81:	ff 15 18 00 01 00    	call   *0x10018
+}
+    7d87:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d8a:	5b                   	pop    %ebx
+    7d8b:	5e                   	pop    %esi
+    7d8c:	5f                   	pop    %edi
+    7d8d:	5d                   	pop    %ebp
+    7d8e:	c3                   	ret    
+  for(; ph < eph; ph++){
+    7d8f:	83 c3 20             	add    $0x20,%ebx
+    7d92:	39 de                	cmp    %ebx,%esi
+    7d94:	76 eb                	jbe    7d81 <bootmain+0x44>
+    pa = (uchar*)ph->paddr;
+    7d96:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7d99:	83 ec 04             	sub    $0x4,%esp
+    7d9c:	ff 73 04             	push   0x4(%ebx)
+    7d9f:	ff 73 10             	push   0x10(%ebx)
+    7da2:	57                   	push   %edi
+    7da3:	e8 4c ff ff ff       	call   7cf4 <readseg>
+    if(ph->memsz > ph->filesz)
+    7da8:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7dab:	8b 43 10             	mov    0x10(%ebx),%eax
+    7dae:	83 c4 10             	add    $0x10,%esp
+    7db1:	39 c1                	cmp    %eax,%ecx
+    7db3:	76 da                	jbe    7d8f <bootmain+0x52>
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+    7db5:	01 c7                	add    %eax,%edi
+    7db7:	29 c1                	sub    %eax,%ecx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7db9:	b8 00 00 00 00       	mov    $0x0,%eax
+    7dbe:	fc                   	cld    
+    7dbf:	f3 aa                	rep stos %al,%es:(%edi)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+    7dc1:	eb cc                	jmp    7d8f <bootmain+0x52>
Binary files xv6-public/bootblock.o and xv6-publica/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-publica/bootblockother.o differ
diff -ruN xv6-public/bootmain.d xv6-publica/bootmain.d
--- xv6-public/bootmain.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/bootmain.d	2024-10-15 10:58:38.857888498 +0530
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files xv6-public/bootmain.o and xv6-publica/bootmain.o differ
diff -ruN xv6-public/cat.asm xv6-publica/cat.asm
--- xv6-public/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/cat.asm	2024-10-15 10:58:37.257888481 +0530
@@ -0,0 +1,1236 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	be 01 00 00 00       	mov    $0x1,%esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  21:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  24:	83 f8 01             	cmp    $0x1,%eax
+  27:	7e 54                	jle    7d <main+0x7d>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	push   (%ebx)
+  37:	e8 67 03 00 00       	call   3a3 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 2f 03 00 00       	call   38b <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 fa 02 00 00       	call   363 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	push   (%ebx)
+  6c:	68 0b 08 00 00       	push   $0x80b
+  71:	6a 01                	push   $0x1
+  73:	e8 48 04 00 00       	call   4c0 <printf>
+      exit();
+  78:	e8 e6 02 00 00       	call   363 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 d7 02 00 00       	call   363 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	8b 75 08             	mov    0x8(%ebp),%esi
+  97:	53                   	push   %ebx
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  98:	eb 1d                	jmp    b7 <cat+0x27>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 80 0b 00 00       	push   $0xb80
+  a9:	6a 01                	push   $0x1
+  ab:	e8 d3 02 00 00       	call   383 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 25                	jne    dc <cat+0x4c>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 80 0b 00 00       	push   $0xb80
+  c4:	56                   	push   %esi
+  c5:	e8 b1 02 00 00       	call   37b <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	89 c3                	mov    %eax,%ebx
+  cf:	85 c0                	test   %eax,%eax
+  d1:	7f cd                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d3:	75 1b                	jne    f0 <cat+0x60>
+}
+  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d8:	5b                   	pop    %ebx
+  d9:	5e                   	pop    %esi
+  da:	5d                   	pop    %ebp
+  db:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dc:	83 ec 08             	sub    $0x8,%esp
+  df:	68 e8 07 00 00       	push   $0x7e8
+  e4:	6a 01                	push   $0x1
+  e6:	e8 d5 03 00 00       	call   4c0 <printf>
+      exit();
+  eb:	e8 73 02 00 00       	call   363 <exit>
+    printf(1, "cat: read error\n");
+  f0:	50                   	push   %eax
+  f1:	50                   	push   %eax
+  f2:	68 fa 07 00 00       	push   $0x7fa
+  f7:	6a 01                	push   $0x1
+  f9:	e8 c2 03 00 00       	call   4c0 <printf>
+    exit();
+  fe:	e8 60 02 00 00       	call   363 <exit>
+ 103:	66 90                	xchg   %ax,%ax
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 111:	31 c0                	xor    %eax,%eax
+{
+ 113:	89 e5                	mov    %esp,%ebp
+ 115:	53                   	push   %ebx
+ 116:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 119:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 127:	83 c0 01             	add    $0x1,%eax
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 12e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 131:	89 c8                	mov    %ecx,%eax
+ 133:	c9                   	leave  
+ 134:	c3                   	ret    
+ 135:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 14a:	0f b6 02             	movzbl (%edx),%eax
+ 14d:	84 c0                	test   %al,%al
+ 14f:	75 17                	jne    168 <strcmp+0x28>
+ 151:	eb 3a                	jmp    18d <strcmp+0x4d>
+ 153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 157:	90                   	nop
+ 158:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 15c:	83 c2 01             	add    $0x1,%edx
+ 15f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 162:	84 c0                	test   %al,%al
+ 164:	74 1a                	je     180 <strcmp+0x40>
+    p++, q++;
+ 166:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 168:	0f b6 19             	movzbl (%ecx),%ebx
+ 16b:	38 c3                	cmp    %al,%bl
+ 16d:	74 e9                	je     158 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 16f:	29 d8                	sub    %ebx,%eax
+}
+ 171:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 174:	c9                   	leave  
+ 175:	c3                   	ret    
+ 176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 180:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 184:	31 c0                	xor    %eax,%eax
+ 186:	29 d8                	sub    %ebx,%eax
+}
+ 188:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 18b:	c9                   	leave  
+ 18c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 18d:	0f b6 19             	movzbl (%ecx),%ebx
+ 190:	31 c0                	xor    %eax,%eax
+ 192:	eb db                	jmp    16f <strcmp+0x2f>
+ 194:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+
+000001a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1a6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1a9:	74 15                	je     1c0 <strlen+0x20>
+ 1ab:	31 c0                	xor    %eax,%eax
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 1b0:	83 c0 01             	add    $0x1,%eax
+ 1b3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1b7:	89 c1                	mov    %eax,%ecx
+ 1b9:	75 f5                	jne    1b0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1bb:	89 c8                	mov    %ecx,%eax
+ 1bd:	5d                   	pop    %ebp
+ 1be:	c3                   	ret    
+ 1bf:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1c0:	31 c9                	xor    %ecx,%ecx
+}
+ 1c2:	5d                   	pop    %ebp
+ 1c3:	89 c8                	mov    %ecx,%eax
+ 1c5:	c3                   	ret    
+ 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	57                   	push   %edi
+ 1d4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1d7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1da:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1dd:	89 d7                	mov    %edx,%edi
+ 1df:	fc                   	cld    
+ 1e0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1e2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 1e5:	89 d0                	mov    %edx,%eax
+ 1e7:	c9                   	leave  
+ 1e8:	c3                   	ret    
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1fa:	0f b6 10             	movzbl (%eax),%edx
+ 1fd:	84 d2                	test   %dl,%dl
+ 1ff:	75 12                	jne    213 <strchr+0x23>
+ 201:	eb 1d                	jmp    220 <strchr+0x30>
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 20c:	83 c0 01             	add    $0x1,%eax
+ 20f:	84 d2                	test   %dl,%dl
+ 211:	74 0d                	je     220 <strchr+0x30>
+    if(*s == c)
+ 213:	38 d1                	cmp    %dl,%cl
+ 215:	75 f1                	jne    208 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 217:	5d                   	pop    %ebp
+ 218:	c3                   	ret    
+ 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 220:	31 c0                	xor    %eax,%eax
+}
+ 222:	5d                   	pop    %ebp
+ 223:	c3                   	ret    
+ 224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 235:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 238:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 239:	31 db                	xor    %ebx,%ebx
+{
+ 23b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 23e:	eb 27                	jmp    267 <gets+0x37>
+    cc = read(0, &c, 1);
+ 240:	83 ec 04             	sub    $0x4,%esp
+ 243:	6a 01                	push   $0x1
+ 245:	57                   	push   %edi
+ 246:	6a 00                	push   $0x0
+ 248:	e8 2e 01 00 00       	call   37b <read>
+    if(cc < 1)
+ 24d:	83 c4 10             	add    $0x10,%esp
+ 250:	85 c0                	test   %eax,%eax
+ 252:	7e 1d                	jle    271 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 254:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+ 25b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 25f:	3c 0a                	cmp    $0xa,%al
+ 261:	74 1d                	je     280 <gets+0x50>
+ 263:	3c 0d                	cmp    $0xd,%al
+ 265:	74 19                	je     280 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 267:	89 de                	mov    %ebx,%esi
+ 269:	83 c3 01             	add    $0x1,%ebx
+ 26c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 26f:	7c cf                	jl     240 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 271:	8b 45 08             	mov    0x8(%ebp),%eax
+ 274:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 278:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 27b:	5b                   	pop    %ebx
+ 27c:	5e                   	pop    %esi
+ 27d:	5f                   	pop    %edi
+ 27e:	5d                   	pop    %ebp
+ 27f:	c3                   	ret    
+  buf[i] = '\0';
+ 280:	8b 45 08             	mov    0x8(%ebp),%eax
+ 283:	89 de                	mov    %ebx,%esi
+ 285:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 289:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28c:	5b                   	pop    %ebx
+ 28d:	5e                   	pop    %esi
+ 28e:	5f                   	pop    %edi
+ 28f:	5d                   	pop    %ebp
+ 290:	c3                   	ret    
+ 291:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 298:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+
+000002a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2a5:	83 ec 08             	sub    $0x8,%esp
+ 2a8:	6a 00                	push   $0x0
+ 2aa:	ff 75 08             	push   0x8(%ebp)
+ 2ad:	e8 f1 00 00 00       	call   3a3 <open>
+  if(fd < 0)
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 27                	js     2e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	ff 75 0c             	push   0xc(%ebp)
+ 2bf:	89 c3                	mov    %eax,%ebx
+ 2c1:	50                   	push   %eax
+ 2c2:	e8 f4 00 00 00       	call   3bb <fstat>
+  close(fd);
+ 2c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2cc:	e8 ba 00 00 00       	call   38b <close>
+  return r;
+ 2d1:	83 c4 10             	add    $0x10,%esp
+}
+ 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2d7:	89 f0                	mov    %esi,%eax
+ 2d9:	5b                   	pop    %ebx
+ 2da:	5e                   	pop    %esi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2e5:	eb ed                	jmp    2d4 <stat+0x34>
+ 2e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ee:	66 90                	xchg   %ax,%ax
+
+000002f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2f0:	55                   	push   %ebp
+ 2f1:	89 e5                	mov    %esp,%ebp
+ 2f3:	53                   	push   %ebx
+ 2f4:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2f7:	0f be 02             	movsbl (%edx),%eax
+ 2fa:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2fd:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 300:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 305:	77 1e                	ja     325 <atoi+0x35>
+ 307:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 310:	83 c2 01             	add    $0x1,%edx
+ 313:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 316:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 31a:	0f be 02             	movsbl (%edx),%eax
+ 31d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 320:	80 fb 09             	cmp    $0x9,%bl
+ 323:	76 eb                	jbe    310 <atoi+0x20>
+  return n;
+}
+ 325:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 328:	89 c8                	mov    %ecx,%eax
+ 32a:	c9                   	leave  
+ 32b:	c3                   	ret    
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000330 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	8b 45 10             	mov    0x10(%ebp),%eax
+ 337:	8b 55 08             	mov    0x8(%ebp),%edx
+ 33a:	56                   	push   %esi
+ 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 33e:	85 c0                	test   %eax,%eax
+ 340:	7e 13                	jle    355 <memmove+0x25>
+ 342:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 344:	89 d7                	mov    %edx,%edi
+ 346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 350:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 351:	39 f8                	cmp    %edi,%eax
+ 353:	75 fb                	jne    350 <memmove+0x20>
+  return vdst;
+}
+ 355:	5e                   	pop    %esi
+ 356:	89 d0                	mov    %edx,%eax
+ 358:	5f                   	pop    %edi
+ 359:	5d                   	pop    %ebp
+ 35a:	c3                   	ret    
+
+0000035b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 35b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <exit>:
+SYSCALL(exit)
+ 363:	b8 02 00 00 00       	mov    $0x2,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <wait>:
+SYSCALL(wait)
+ 36b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <pipe>:
+SYSCALL(pipe)
+ 373:	b8 04 00 00 00       	mov    $0x4,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <read>:
+SYSCALL(read)
+ 37b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <write>:
+SYSCALL(write)
+ 383:	b8 10 00 00 00       	mov    $0x10,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <close>:
+SYSCALL(close)
+ 38b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <kill>:
+SYSCALL(kill)
+ 393:	b8 06 00 00 00       	mov    $0x6,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <exec>:
+SYSCALL(exec)
+ 39b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <open>:
+SYSCALL(open)
+ 3a3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <mknod>:
+SYSCALL(mknod)
+ 3ab:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <unlink>:
+SYSCALL(unlink)
+ 3b3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <fstat>:
+SYSCALL(fstat)
+ 3bb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <link>:
+SYSCALL(link)
+ 3c3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <mkdir>:
+SYSCALL(mkdir)
+ 3cb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <chdir>:
+SYSCALL(chdir)
+ 3d3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <dup>:
+SYSCALL(dup)
+ 3db:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <getpid>:
+SYSCALL(getpid)
+ 3e3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <sbrk>:
+SYSCALL(sbrk)
+ 3eb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <sleep>:
+SYSCALL(sleep)
+ 3f3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <uptime>:
+SYSCALL(uptime)
+ 3fb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+ 403:	66 90                	xchg   %ax,%ax
+ 405:	66 90                	xchg   %ax,%ax
+ 407:	66 90                	xchg   %ax,%ax
+ 409:	66 90                	xchg   %ax,%ax
+ 40b:	66 90                	xchg   %ax,%ax
+ 40d:	66 90                	xchg   %ax,%ax
+ 40f:	90                   	nop
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+ 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 41c:	89 d1                	mov    %edx,%ecx
+{
+ 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 421:	85 d2                	test   %edx,%edx
+ 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
+ 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 42d:	74 79                	je     4a8 <printint+0x98>
+    neg = 1;
+ 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 436:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 438:	31 db                	xor    %ebx,%ebx
+ 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 440:	89 c8                	mov    %ecx,%eax
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	89 cf                	mov    %ecx,%edi
+ 446:	f7 75 c4             	divl   -0x3c(%ebp)
+ 449:	0f b6 92 80 08 00 00 	movzbl 0x880(%edx),%edx
+ 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 453:	89 d8                	mov    %ebx,%eax
+ 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 461:	76 dd                	jbe    440 <printint+0x30>
+  if(neg)
+ 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 466:	85 c9                	test   %ecx,%ecx
+ 468:	74 0c                	je     476 <printint+0x66>
+    buf[i++] = '-';
+ 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 46f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 47d:	eb 07                	jmp    486 <printint+0x76>
+ 47f:	90                   	nop
+    putc(fd, buf[i]);
+ 480:	0f b6 13             	movzbl (%ebx),%edx
+ 483:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 486:	83 ec 04             	sub    $0x4,%esp
+ 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 48c:	6a 01                	push   $0x1
+ 48e:	56                   	push   %esi
+ 48f:	57                   	push   %edi
+ 490:	e8 ee fe ff ff       	call   383 <write>
+  while(--i >= 0)
+ 495:	83 c4 10             	add    $0x10,%esp
+ 498:	39 de                	cmp    %ebx,%esi
+ 49a:	75 e4                	jne    480 <printint+0x70>
+}
+ 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49f:	5b                   	pop    %ebx
+ 4a0:	5e                   	pop    %esi
+ 4a1:	5f                   	pop    %edi
+ 4a2:	5d                   	pop    %ebp
+ 4a3:	c3                   	ret    
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4af:	eb 87                	jmp    438 <printint+0x28>
+ 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+
+000004c0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
+ 4c4:	56                   	push   %esi
+ 4c5:	53                   	push   %ebx
+ 4c6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 4cc:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 4cf:	0f b6 13             	movzbl (%ebx),%edx
+ 4d2:	84 d2                	test   %dl,%dl
+ 4d4:	74 6a                	je     540 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 4d6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4d9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 4dc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4df:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 4e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4e4:	eb 36                	jmp    51c <printf+0x5c>
+ 4e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 4f0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4f3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	74 15                	je     512 <printf+0x52>
+  write(fd, &c, 1);
+ 4fd:	83 ec 04             	sub    $0x4,%esp
+ 500:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	56                   	push   %esi
+ 507:	e8 77 fe ff ff       	call   383 <write>
+ 50c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 50f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 13             	movzbl (%ebx),%edx
+ 515:	83 c3 01             	add    $0x1,%ebx
+ 518:	84 d2                	test   %dl,%dl
+ 51a:	74 24                	je     540 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 51c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 51f:	85 c9                	test   %ecx,%ecx
+ 521:	74 cd                	je     4f0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 523:	83 f9 25             	cmp    $0x25,%ecx
+ 526:	75 ea                	jne    512 <printf+0x52>
+      if(c == 'd'){
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	0f 84 07 01 00 00    	je     638 <printf+0x178>
+ 531:	83 e8 63             	sub    $0x63,%eax
+ 534:	83 f8 15             	cmp    $0x15,%eax
+ 537:	77 17                	ja     550 <printf+0x90>
+ 539:	ff 24 85 28 08 00 00 	jmp    *0x828(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 540:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 543:	5b                   	pop    %ebx
+ 544:	5e                   	pop    %esi
+ 545:	5f                   	pop    %edi
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+  write(fd, &c, 1);
+ 550:	83 ec 04             	sub    $0x4,%esp
+ 553:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 556:	6a 01                	push   $0x1
+ 558:	57                   	push   %edi
+ 559:	56                   	push   %esi
+ 55a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 55e:	e8 20 fe ff ff       	call   383 <write>
+        putc(fd, c);
+ 563:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 567:	83 c4 0c             	add    $0xc,%esp
+ 56a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 56d:	6a 01                	push   $0x1
+ 56f:	57                   	push   %edi
+ 570:	56                   	push   %esi
+ 571:	e8 0d fe ff ff       	call   383 <write>
+        putc(fd, c);
+ 576:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 579:	31 c9                	xor    %ecx,%ecx
+ 57b:	eb 95                	jmp    512 <printf+0x52>
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 588:	6a 00                	push   $0x0
+ 58a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 58d:	8b 10                	mov    (%eax),%edx
+ 58f:	89 f0                	mov    %esi,%eax
+ 591:	e8 7a fe ff ff       	call   410 <printint>
+        ap++;
+ 596:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 59a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59d:	31 c9                	xor    %ecx,%ecx
+ 59f:	e9 6e ff ff ff       	jmp    512 <printf+0x52>
+ 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5ab:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 5ad:	83 c0 04             	add    $0x4,%eax
+ 5b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5b3:	85 d2                	test   %edx,%edx
+ 5b5:	0f 84 8d 00 00 00    	je     648 <printf+0x188>
+        while(*s != 0){
+ 5bb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 5be:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 5c0:	84 c0                	test   %al,%al
+ 5c2:	0f 84 4a ff ff ff    	je     512 <printf+0x52>
+ 5c8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5cb:	89 d3                	mov    %edx,%ebx
+ 5cd:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5d3:	83 c3 01             	add    $0x1,%ebx
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	56                   	push   %esi
+ 5dd:	e8 a1 fd ff ff       	call   383 <write>
+        while(*s != 0){
+ 5e2:	0f b6 03             	movzbl (%ebx),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x110>
+      state = 0;
+ 5ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5ef:	31 c9                	xor    %ecx,%ecx
+ 5f1:	e9 1c ff ff ff       	jmp    512 <printf+0x52>
+ 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	e9 7b ff ff ff       	jmp    58a <printf+0xca>
+ 60f:	90                   	nop
+        putc(fd, *ap);
+ 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 616:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 618:	6a 01                	push   $0x1
+ 61a:	57                   	push   %edi
+ 61b:	56                   	push   %esi
+        putc(fd, *ap);
+ 61c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 61f:	e8 5f fd ff ff       	call   383 <write>
+        ap++;
+ 624:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 628:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 62b:	31 c9                	xor    %ecx,%ecx
+ 62d:	e9 e0 fe ff ff       	jmp    512 <printf+0x52>
+ 632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 638:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 63b:	83 ec 04             	sub    $0x4,%esp
+ 63e:	e9 2a ff ff ff       	jmp    56d <printf+0xad>
+ 643:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 647:	90                   	nop
+          s = "(null)";
+ 648:	ba 20 08 00 00       	mov    $0x820,%edx
+        while(*s != 0){
+ 64d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 650:	b8 28 00 00 00       	mov    $0x28,%eax
+ 655:	89 d3                	mov    %edx,%ebx
+ 657:	e9 74 ff ff ff       	jmp    5d0 <printf+0x110>
+ 65c:	66 90                	xchg   %ax,%ax
+ 65e:	66 90                	xchg   %ax,%ax
+
+00000660 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 660:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 661:	a1 80 0d 00 00       	mov    0xd80,%eax
+{
+ 666:	89 e5                	mov    %esp,%ebp
+ 668:	57                   	push   %edi
+ 669:	56                   	push   %esi
+ 66a:	53                   	push   %ebx
+ 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 66e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 678:	89 c2                	mov    %eax,%edx
+ 67a:	8b 00                	mov    (%eax),%eax
+ 67c:	39 ca                	cmp    %ecx,%edx
+ 67e:	73 30                	jae    6b0 <free+0x50>
+ 680:	39 c1                	cmp    %eax,%ecx
+ 682:	72 04                	jb     688 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 684:	39 c2                	cmp    %eax,%edx
+ 686:	72 f0                	jb     678 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 688:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 68b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 68e:	39 f8                	cmp    %edi,%eax
+ 690:	74 30                	je     6c2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 692:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 695:	8b 42 04             	mov    0x4(%edx),%eax
+ 698:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 69b:	39 f1                	cmp    %esi,%ecx
+ 69d:	74 3a                	je     6d9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 69f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6a1:	5b                   	pop    %ebx
+  freep = p;
+ 6a2:	89 15 80 0d 00 00    	mov    %edx,0xd80
+}
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b0:	39 c2                	cmp    %eax,%edx
+ 6b2:	72 c4                	jb     678 <free+0x18>
+ 6b4:	39 c1                	cmp    %eax,%ecx
+ 6b6:	73 c0                	jae    678 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6be:	39 f8                	cmp    %edi,%eax
+ 6c0:	75 d0                	jne    692 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 6c2:	03 70 04             	add    0x4(%eax),%esi
+ 6c5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6c8:	8b 02                	mov    (%edx),%eax
+ 6ca:	8b 00                	mov    (%eax),%eax
+ 6cc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6cf:	8b 42 04             	mov    0x4(%edx),%eax
+ 6d2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	75 c6                	jne    69f <free+0x3f>
+    p->s.size += bp->s.size;
+ 6d9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 6dc:	89 15 80 0d 00 00    	mov    %edx,0xd80
+    p->s.size += bp->s.size;
+ 6e2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 6e5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6e8:	89 0a                	mov    %ecx,(%edx)
+}
+ 6ea:	5b                   	pop    %ebx
+ 6eb:	5e                   	pop    %esi
+ 6ec:	5f                   	pop    %edi
+ 6ed:	5d                   	pop    %ebp
+ 6ee:	c3                   	ret    
+ 6ef:	90                   	nop
+
+000006f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6fc:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 702:	8d 70 07             	lea    0x7(%eax),%esi
+ 705:	c1 ee 03             	shr    $0x3,%esi
+ 708:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 70b:	85 ff                	test   %edi,%edi
+ 70d:	0f 84 9d 00 00 00    	je     7b0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 713:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 715:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 718:	39 f1                	cmp    %esi,%ecx
+ 71a:	73 6a                	jae    786 <malloc+0x96>
+ 71c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 721:	39 de                	cmp    %ebx,%esi
+ 723:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 726:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 72d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 730:	eb 17                	jmp    749 <malloc+0x59>
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 738:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 73a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 73d:	39 f1                	cmp    %esi,%ecx
+ 73f:	73 4f                	jae    790 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 741:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+ 747:	89 c2                	mov    %eax,%edx
+ 749:	39 d7                	cmp    %edx,%edi
+ 74b:	75 eb                	jne    738 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 74d:	83 ec 0c             	sub    $0xc,%esp
+ 750:	ff 75 e4             	push   -0x1c(%ebp)
+ 753:	e8 93 fc ff ff       	call   3eb <sbrk>
+  if(p == (char*)-1)
+ 758:	83 c4 10             	add    $0x10,%esp
+ 75b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 75e:	74 1c                	je     77c <malloc+0x8c>
+  hp->s.size = nu;
+ 760:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 763:	83 ec 0c             	sub    $0xc,%esp
+ 766:	83 c0 08             	add    $0x8,%eax
+ 769:	50                   	push   %eax
+ 76a:	e8 f1 fe ff ff       	call   660 <free>
+  return freep;
+ 76f:	8b 15 80 0d 00 00    	mov    0xd80,%edx
+      if((p = morecore(nunits)) == 0)
+ 775:	83 c4 10             	add    $0x10,%esp
+ 778:	85 d2                	test   %edx,%edx
+ 77a:	75 bc                	jne    738 <malloc+0x48>
+        return 0;
+  }
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 77f:	31 c0                	xor    %eax,%eax
+}
+ 781:	5b                   	pop    %ebx
+ 782:	5e                   	pop    %esi
+ 783:	5f                   	pop    %edi
+ 784:	5d                   	pop    %ebp
+ 785:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 786:	89 d0                	mov    %edx,%eax
+ 788:	89 fa                	mov    %edi,%edx
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 790:	39 ce                	cmp    %ecx,%esi
+ 792:	74 4c                	je     7e0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 794:	29 f1                	sub    %esi,%ecx
+ 796:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 799:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 79c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 79f:	89 15 80 0d 00 00    	mov    %edx,0xd80
+}
+ 7a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7a8:	83 c0 08             	add    $0x8,%eax
+}
+ 7ab:	5b                   	pop    %ebx
+ 7ac:	5e                   	pop    %esi
+ 7ad:	5f                   	pop    %edi
+ 7ae:	5d                   	pop    %ebp
+ 7af:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 7b0:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
+ 7b7:	0d 00 00 
+    base.s.size = 0;
+ 7ba:	bf 84 0d 00 00       	mov    $0xd84,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7bf:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
+ 7c6:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7cb:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
+ 7d2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7d5:	e9 42 ff ff ff       	jmp    71c <malloc+0x2c>
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7e0:	8b 08                	mov    (%eax),%ecx
+ 7e2:	89 0a                	mov    %ecx,(%edx)
+ 7e4:	eb b9                	jmp    79f <malloc+0xaf>
diff -ruN xv6-public/cat.d xv6-publica/cat.d
--- xv6-public/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/cat.d	2024-10-15 10:58:37.047888488 +0530
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/cat.o and xv6-publica/cat.o differ
diff -ruN xv6-public/cat.sym xv6-publica/cat.sym
--- xv6-public/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/cat.sym	2024-10-15 10:58:37.267888481 +0530
@@ -0,0 +1,47 @@
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000880 digits.0
+00000000 umalloc.c
+00000d80 freep
+00000d84 base
+00000110 strcpy
+000004c0 printf
+00000330 memmove
+000003ab mknod
+00000230 gets
+000003e3 getpid
+00000090 cat
+000006f0 malloc
+000003f3 sleep
+00000373 pipe
+00000383 write
+000003bb fstat
+00000393 kill
+000003d3 chdir
+0000039b exec
+0000036b wait
+0000037b read
+000003b3 unlink
+0000035b fork
+000003eb sbrk
+000003fb uptime
+00000b64 __bss_start
+000001d0 memset
+00000000 main
+00000140 strcmp
+000003db dup
+00000b80 buf
+000002a0 stat
+00000b64 _edata
+00000d8c _end
+000003c3 link
+00000363 exit
+000002f0 atoi
+000001a0 strlen
+000003a3 open
+000001f0 strchr
+000003cb mkdir
+0000038b close
+00000660 free
diff -ruN xv6-public/console.d xv6-publica/console.d
--- xv6-public/console.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/console.d	2024-10-15 10:58:39.067888505 +0530
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
+ x86.h
Binary files xv6-public/console.o and xv6-publica/console.o differ
diff -ruN xv6-public/echo.asm xv6-publica/echo.asm
--- xv6-public/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/echo.asm	2024-10-15 10:58:37.317888479 +0530
@@ -0,0 +1,1149 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 08             	sub    $0x8,%esp
+  14:	8b 31                	mov    (%ecx),%esi
+  16:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  for(i = 1; i < argc; i++)
+  19:	83 fe 01             	cmp    $0x1,%esi
+  1c:	7e 47                	jle    65 <main+0x65>
+  1e:	bb 01 00 00 00       	mov    $0x1,%ebx
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  23:	83 c3 01             	add    $0x1,%ebx
+  26:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
+  2a:	39 f3                	cmp    %esi,%ebx
+  2c:	74 22                	je     50 <main+0x50>
+  2e:	66 90                	xchg   %ax,%ax
+  30:	68 48 07 00 00       	push   $0x748
+  35:	83 c3 01             	add    $0x1,%ebx
+  38:	50                   	push   %eax
+  39:	68 4a 07 00 00       	push   $0x74a
+  3e:	6a 01                	push   $0x1
+  40:	e8 db 03 00 00       	call   420 <printf>
+  45:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
+  49:	83 c4 10             	add    $0x10,%esp
+  4c:	39 f3                	cmp    %esi,%ebx
+  4e:	75 e0                	jne    30 <main+0x30>
+  50:	68 4f 07 00 00       	push   $0x74f
+  55:	50                   	push   %eax
+  56:	68 4a 07 00 00       	push   $0x74a
+  5b:	6a 01                	push   $0x1
+  5d:	e8 be 03 00 00       	call   420 <printf>
+  62:	83 c4 10             	add    $0x10,%esp
+  exit();
+  65:	e8 59 02 00 00       	call   2c3 <exit>
+  6a:	66 90                	xchg   %ax,%ax
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  71:	31 c0                	xor    %eax,%eax
+{
+  73:	89 e5                	mov    %esp,%ebp
+  75:	53                   	push   %ebx
+  76:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  79:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  87:	83 c0 01             	add    $0x1,%eax
+  8a:	84 d2                	test   %dl,%dl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  91:	89 c8                	mov    %ecx,%eax
+  93:	c9                   	leave  
+  94:	c3                   	ret    
+  95:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	53                   	push   %ebx
+  a4:	8b 55 08             	mov    0x8(%ebp),%edx
+  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  aa:	0f b6 02             	movzbl (%edx),%eax
+  ad:	84 c0                	test   %al,%al
+  af:	75 17                	jne    c8 <strcmp+0x28>
+  b1:	eb 3a                	jmp    ed <strcmp+0x4d>
+  b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  b7:	90                   	nop
+  b8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  bc:	83 c2 01             	add    $0x1,%edx
+  bf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  c2:	84 c0                	test   %al,%al
+  c4:	74 1a                	je     e0 <strcmp+0x40>
+    p++, q++;
+  c6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  c8:	0f b6 19             	movzbl (%ecx),%ebx
+  cb:	38 c3                	cmp    %al,%bl
+  cd:	74 e9                	je     b8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  cf:	29 d8                	sub    %ebx,%eax
+}
+  d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d4:	c9                   	leave  
+  d5:	c3                   	ret    
+  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  e0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  e4:	31 c0                	xor    %eax,%eax
+  e6:	29 d8                	sub    %ebx,%eax
+}
+  e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  eb:	c9                   	leave  
+  ec:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  ed:	0f b6 19             	movzbl (%ecx),%ebx
+  f0:	31 c0                	xor    %eax,%eax
+  f2:	eb db                	jmp    cf <strcmp+0x2f>
+  f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ff:	90                   	nop
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 3a 00             	cmpb   $0x0,(%edx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 c0                	xor    %eax,%eax
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c0 01             	add    $0x1,%eax
+ 113:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 117:	89 c1                	mov    %eax,%ecx
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	89 c8                	mov    %ecx,%eax
+ 11d:	5d                   	pop    %ebp
+ 11e:	c3                   	ret    
+ 11f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 120:	31 c9                	xor    %ecx,%ecx
+}
+ 122:	5d                   	pop    %ebp
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	c3                   	ret    
+ 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 145:	89 d0                	mov    %edx,%eax
+ 147:	c9                   	leave  
+ 148:	c3                   	ret    
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	8b 45 08             	mov    0x8(%ebp),%eax
+ 156:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	75 12                	jne    173 <strchr+0x23>
+ 161:	eb 1d                	jmp    180 <strchr+0x30>
+ 163:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 167:	90                   	nop
+ 168:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 16c:	83 c0 01             	add    $0x1,%eax
+ 16f:	84 d2                	test   %dl,%dl
+ 171:	74 0d                	je     180 <strchr+0x30>
+    if(*s == c)
+ 173:	38 d1                	cmp    %dl,%cl
+ 175:	75 f1                	jne    168 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 177:	5d                   	pop    %ebp
+ 178:	c3                   	ret    
+ 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 180:	31 c0                	xor    %eax,%eax
+}
+ 182:	5d                   	pop    %ebp
+ 183:	c3                   	ret    
+ 184:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 18f:	90                   	nop
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 195:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 198:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 199:	31 db                	xor    %ebx,%ebx
+{
+ 19b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 19e:	eb 27                	jmp    1c7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	6a 01                	push   $0x1
+ 1a5:	57                   	push   %edi
+ 1a6:	6a 00                	push   $0x0
+ 1a8:	e8 2e 01 00 00       	call   2db <read>
+    if(cc < 1)
+ 1ad:	83 c4 10             	add    $0x10,%esp
+ 1b0:	85 c0                	test   %eax,%eax
+ 1b2:	7e 1d                	jle    1d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1bb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1bf:	3c 0a                	cmp    $0xa,%al
+ 1c1:	74 1d                	je     1e0 <gets+0x50>
+ 1c3:	3c 0d                	cmp    $0xd,%al
+ 1c5:	74 19                	je     1e0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1c7:	89 de                	mov    %ebx,%esi
+ 1c9:	83 c3 01             	add    $0x1,%ebx
+ 1cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1cf:	7c cf                	jl     1a0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1db:	5b                   	pop    %ebx
+ 1dc:	5e                   	pop    %esi
+ 1dd:	5f                   	pop    %edi
+ 1de:	5d                   	pop    %ebp
+ 1df:	c3                   	ret    
+  buf[i] = '\0';
+ 1e0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e3:	89 de                	mov    %ebx,%esi
+ 1e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ec:	5b                   	pop    %ebx
+ 1ed:	5e                   	pop    %esi
+ 1ee:	5f                   	pop    %edi
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ff:	90                   	nop
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	push   0x8(%ebp)
+ 20d:	e8 f1 00 00 00       	call   303 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	push   0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f4 00 00 00       	call   31b <fstat>
+  close(fd);
+ 227:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 22c:	e8 ba 00 00 00       	call   2eb <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+}
+ 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 237:	89 f0                	mov    %esi,%eax
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 245:	eb ed                	jmp    234 <stat+0x34>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 02             	movsbl (%edx),%eax
+ 25a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 25d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 260:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 265:	77 1e                	ja     285 <atoi+0x35>
+ 267:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 270:	83 c2 01             	add    $0x1,%edx
+ 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 02             	movsbl (%edx),%eax
+ 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 288:	89 c8                	mov    %ecx,%eax
+ 28a:	c9                   	leave  
+ 28b:	c3                   	ret    
+ 28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	8b 45 10             	mov    0x10(%ebp),%eax
+ 297:	8b 55 08             	mov    0x8(%ebp),%edx
+ 29a:	56                   	push   %esi
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 c0                	test   %eax,%eax
+ 2a0:	7e 13                	jle    2b5 <memmove+0x25>
+ 2a2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2a4:	89 d7                	mov    %edx,%edi
+ 2a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 f8                	cmp    %edi,%eax
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	89 d0                	mov    %edx,%eax
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+
+000002bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <exit>:
+SYSCALL(exit)
+ 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <wait>:
+SYSCALL(wait)
+ 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <pipe>:
+SYSCALL(pipe)
+ 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <read>:
+SYSCALL(read)
+ 2db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <write>:
+SYSCALL(write)
+ 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <close>:
+SYSCALL(close)
+ 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <kill>:
+SYSCALL(kill)
+ 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <exec>:
+SYSCALL(exec)
+ 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <open>:
+SYSCALL(open)
+ 303:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <mknod>:
+SYSCALL(mknod)
+ 30b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <unlink>:
+SYSCALL(unlink)
+ 313:	b8 12 00 00 00       	mov    $0x12,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <fstat>:
+SYSCALL(fstat)
+ 31b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <link>:
+SYSCALL(link)
+ 323:	b8 13 00 00 00       	mov    $0x13,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mkdir>:
+SYSCALL(mkdir)
+ 32b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <chdir>:
+SYSCALL(chdir)
+ 333:	b8 09 00 00 00       	mov    $0x9,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <dup>:
+SYSCALL(dup)
+ 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getpid>:
+SYSCALL(getpid)
+ 343:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <sbrk>:
+SYSCALL(sbrk)
+ 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <sleep>:
+SYSCALL(sleep)
+ 353:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <uptime>:
+SYSCALL(uptime)
+ 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+ 363:	66 90                	xchg   %ax,%ax
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+ 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 37c:	89 d1                	mov    %edx,%ecx
+{
+ 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 381:	85 d2                	test   %edx,%edx
+ 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
+ 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 38d:	74 79                	je     408 <printint+0x98>
+    neg = 1;
+ 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 396:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 398:	31 db                	xor    %ebx,%ebx
+ 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 39d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	89 c8                	mov    %ecx,%eax
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	89 cf                	mov    %ecx,%edi
+ 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3a9:	0f b6 92 b0 07 00 00 	movzbl 0x7b0(%edx),%edx
+ 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3b3:	89 d8                	mov    %ebx,%eax
+ 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+  if(neg)
+ 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3c6:	85 c9                	test   %ecx,%ecx
+ 3c8:	74 0c                	je     3d6 <printint+0x66>
+    buf[i++] = '-';
+ 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3dd:	eb 07                	jmp    3e6 <printint+0x76>
+ 3df:	90                   	nop
+    putc(fd, buf[i]);
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 ee fe ff ff       	call   2e3 <write>
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x70>
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 40f:	eb 87                	jmp    398 <printint+0x28>
+ 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 429:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 42c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 42f:	0f b6 13             	movzbl (%ebx),%edx
+ 432:	84 d2                	test   %dl,%dl
+ 434:	74 6a                	je     4a0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 436:	8d 45 10             	lea    0x10(%ebp),%eax
+ 439:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 43c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 43f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 441:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 444:	eb 36                	jmp    47c <printf+0x5c>
+ 446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44d:	8d 76 00             	lea    0x0(%esi),%esi
+ 450:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 453:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 15                	je     472 <printf+0x52>
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	56                   	push   %esi
+ 467:	e8 77 fe ff ff       	call   2e3 <write>
+ 46c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 46f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 472:	0f b6 13             	movzbl (%ebx),%edx
+ 475:	83 c3 01             	add    $0x1,%ebx
+ 478:	84 d2                	test   %dl,%dl
+ 47a:	74 24                	je     4a0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 47c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 47f:	85 c9                	test   %ecx,%ecx
+ 481:	74 cd                	je     450 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 483:	83 f9 25             	cmp    $0x25,%ecx
+ 486:	75 ea                	jne    472 <printf+0x52>
+      if(c == 'd'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	0f 84 07 01 00 00    	je     598 <printf+0x178>
+ 491:	83 e8 63             	sub    $0x63,%eax
+ 494:	83 f8 15             	cmp    $0x15,%eax
+ 497:	77 17                	ja     4b0 <printf+0x90>
+ 499:	ff 24 85 58 07 00 00 	jmp    *0x758(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4a3:	5b                   	pop    %ebx
+ 4a4:	5e                   	pop    %esi
+ 4a5:	5f                   	pop    %edi
+ 4a6:	5d                   	pop    %ebp
+ 4a7:	c3                   	ret    
+ 4a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4af:	90                   	nop
+  write(fd, &c, 1);
+ 4b0:	83 ec 04             	sub    $0x4,%esp
+ 4b3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4b6:	6a 01                	push   $0x1
+ 4b8:	57                   	push   %edi
+ 4b9:	56                   	push   %esi
+ 4ba:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4be:	e8 20 fe ff ff       	call   2e3 <write>
+        putc(fd, c);
+ 4c3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4c7:	83 c4 0c             	add    $0xc,%esp
+ 4ca:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4cd:	6a 01                	push   $0x1
+ 4cf:	57                   	push   %edi
+ 4d0:	56                   	push   %esi
+ 4d1:	e8 0d fe ff ff       	call   2e3 <write>
+        putc(fd, c);
+ 4d6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4d9:	31 c9                	xor    %ecx,%ecx
+ 4db:	eb 95                	jmp    472 <printf+0x52>
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4e0:	83 ec 0c             	sub    $0xc,%esp
+ 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e8:	6a 00                	push   $0x0
+ 4ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4ed:	8b 10                	mov    (%eax),%edx
+ 4ef:	89 f0                	mov    %esi,%eax
+ 4f1:	e8 7a fe ff ff       	call   370 <printint>
+        ap++;
+ 4f6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4fa:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4fd:	31 c9                	xor    %ecx,%ecx
+ 4ff:	e9 6e ff ff ff       	jmp    472 <printf+0x52>
+ 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 508:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 50b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 50d:	83 c0 04             	add    $0x4,%eax
+ 510:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 513:	85 d2                	test   %edx,%edx
+ 515:	0f 84 8d 00 00 00    	je     5a8 <printf+0x188>
+        while(*s != 0){
+ 51b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 51e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 520:	84 c0                	test   %al,%al
+ 522:	0f 84 4a ff ff ff    	je     472 <printf+0x52>
+ 528:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 52b:	89 d3                	mov    %edx,%ebx
+ 52d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 530:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 533:	83 c3 01             	add    $0x1,%ebx
+ 536:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 539:	6a 01                	push   $0x1
+ 53b:	57                   	push   %edi
+ 53c:	56                   	push   %esi
+ 53d:	e8 a1 fd ff ff       	call   2e3 <write>
+        while(*s != 0){
+ 542:	0f b6 03             	movzbl (%ebx),%eax
+ 545:	83 c4 10             	add    $0x10,%esp
+ 548:	84 c0                	test   %al,%al
+ 54a:	75 e4                	jne    530 <printf+0x110>
+      state = 0;
+ 54c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 54f:	31 c9                	xor    %ecx,%ecx
+ 551:	e9 1c ff ff ff       	jmp    472 <printf+0x52>
+ 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	e9 7b ff ff ff       	jmp    4ea <printf+0xca>
+ 56f:	90                   	nop
+        putc(fd, *ap);
+ 570:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+ 57a:	57                   	push   %edi
+ 57b:	56                   	push   %esi
+        putc(fd, *ap);
+ 57c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 57f:	e8 5f fd ff ff       	call   2e3 <write>
+        ap++;
+ 584:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 588:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58b:	31 c9                	xor    %ecx,%ecx
+ 58d:	e9 e0 fe ff ff       	jmp    472 <printf+0x52>
+ 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 598:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 59b:	83 ec 04             	sub    $0x4,%esp
+ 59e:	e9 2a ff ff ff       	jmp    4cd <printf+0xad>
+ 5a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5a7:	90                   	nop
+          s = "(null)";
+ 5a8:	ba 51 07 00 00       	mov    $0x751,%edx
+        while(*s != 0){
+ 5ad:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5b0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b5:	89 d3                	mov    %edx,%ebx
+ 5b7:	e9 74 ff ff ff       	jmp    530 <printf+0x110>
+ 5bc:	66 90                	xchg   %ax,%ax
+ 5be:	66 90                	xchg   %ax,%ax
+
+000005c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	a1 64 0a 00 00       	mov    0xa64,%eax
+{
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5d8:	89 c2                	mov    %eax,%edx
+ 5da:	8b 00                	mov    (%eax),%eax
+ 5dc:	39 ca                	cmp    %ecx,%edx
+ 5de:	73 30                	jae    610 <free+0x50>
+ 5e0:	39 c1                	cmp    %eax,%ecx
+ 5e2:	72 04                	jb     5e8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e4:	39 c2                	cmp    %eax,%edx
+ 5e6:	72 f0                	jb     5d8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5ee:	39 f8                	cmp    %edi,%eax
+ 5f0:	74 30                	je     622 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5f2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5f5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5f8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5fb:	39 f1                	cmp    %esi,%ecx
+ 5fd:	74 3a                	je     639 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 5ff:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 601:	5b                   	pop    %ebx
+  freep = p;
+ 602:	89 15 64 0a 00 00    	mov    %edx,0xa64
+}
+ 608:	5e                   	pop    %esi
+ 609:	5f                   	pop    %edi
+ 60a:	5d                   	pop    %ebp
+ 60b:	c3                   	ret    
+ 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	39 c2                	cmp    %eax,%edx
+ 612:	72 c4                	jb     5d8 <free+0x18>
+ 614:	39 c1                	cmp    %eax,%ecx
+ 616:	73 c0                	jae    5d8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 f8                	cmp    %edi,%eax
+ 620:	75 d0                	jne    5f2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 622:	03 70 04             	add    0x4(%eax),%esi
+ 625:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 628:	8b 02                	mov    (%edx),%eax
+ 62a:	8b 00                	mov    (%eax),%eax
+ 62c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 62f:	8b 42 04             	mov    0x4(%edx),%eax
+ 632:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 635:	39 f1                	cmp    %esi,%ecx
+ 637:	75 c6                	jne    5ff <free+0x3f>
+    p->s.size += bp->s.size;
+ 639:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 63c:	89 15 64 0a 00 00    	mov    %edx,0xa64
+    p->s.size += bp->s.size;
+ 642:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 645:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 648:	89 0a                	mov    %ecx,(%edx)
+}
+ 64a:	5b                   	pop    %ebx
+ 64b:	5e                   	pop    %esi
+ 64c:	5f                   	pop    %edi
+ 64d:	5d                   	pop    %ebp
+ 64e:	c3                   	ret    
+ 64f:	90                   	nop
+
+00000650 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 65c:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 662:	8d 70 07             	lea    0x7(%eax),%esi
+ 665:	c1 ee 03             	shr    $0x3,%esi
+ 668:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 66b:	85 ff                	test   %edi,%edi
+ 66d:	0f 84 9d 00 00 00    	je     710 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 673:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 675:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 678:	39 f1                	cmp    %esi,%ecx
+ 67a:	73 6a                	jae    6e6 <malloc+0x96>
+ 67c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 681:	39 de                	cmp    %ebx,%esi
+ 683:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 686:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 68d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 690:	eb 17                	jmp    6a9 <malloc+0x59>
+ 692:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 698:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 69a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69d:	39 f1                	cmp    %esi,%ecx
+ 69f:	73 4f                	jae    6f0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6a1:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6a7:	89 c2                	mov    %eax,%edx
+ 6a9:	39 d7                	cmp    %edx,%edi
+ 6ab:	75 eb                	jne    698 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6ad:	83 ec 0c             	sub    $0xc,%esp
+ 6b0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6b3:	e8 93 fc ff ff       	call   34b <sbrk>
+  if(p == (char*)-1)
+ 6b8:	83 c4 10             	add    $0x10,%esp
+ 6bb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6be:	74 1c                	je     6dc <malloc+0x8c>
+  hp->s.size = nu;
+ 6c0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6c3:	83 ec 0c             	sub    $0xc,%esp
+ 6c6:	83 c0 08             	add    $0x8,%eax
+ 6c9:	50                   	push   %eax
+ 6ca:	e8 f1 fe ff ff       	call   5c0 <free>
+  return freep;
+ 6cf:	8b 15 64 0a 00 00    	mov    0xa64,%edx
+      if((p = morecore(nunits)) == 0)
+ 6d5:	83 c4 10             	add    $0x10,%esp
+ 6d8:	85 d2                	test   %edx,%edx
+ 6da:	75 bc                	jne    698 <malloc+0x48>
+        return 0;
+  }
+}
+ 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6df:	31 c0                	xor    %eax,%eax
+}
+ 6e1:	5b                   	pop    %ebx
+ 6e2:	5e                   	pop    %esi
+ 6e3:	5f                   	pop    %edi
+ 6e4:	5d                   	pop    %ebp
+ 6e5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6e6:	89 d0                	mov    %edx,%eax
+ 6e8:	89 fa                	mov    %edi,%edx
+ 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6f0:	39 ce                	cmp    %ecx,%esi
+ 6f2:	74 4c                	je     740 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6f4:	29 f1                	sub    %esi,%ecx
+ 6f6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6fc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 6ff:	89 15 64 0a 00 00    	mov    %edx,0xa64
+}
+ 705:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 708:	83 c0 08             	add    $0x8,%eax
+}
+ 70b:	5b                   	pop    %ebx
+ 70c:	5e                   	pop    %esi
+ 70d:	5f                   	pop    %edi
+ 70e:	5d                   	pop    %ebp
+ 70f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 710:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
+ 717:	0a 00 00 
+    base.s.size = 0;
+ 71a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+    base.s.ptr = freep = prevp = &base;
+ 71f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
+ 726:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 729:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 72b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
+ 732:	00 00 00 
+    if(p->s.size >= nunits){
+ 735:	e9 42 ff ff ff       	jmp    67c <malloc+0x2c>
+ 73a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 740:	8b 08                	mov    (%eax),%ecx
+ 742:	89 0a                	mov    %ecx,(%edx)
+ 744:	eb b9                	jmp    6ff <malloc+0xaf>
diff -ruN xv6-public/echo.d xv6-publica/echo.d
--- xv6-public/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/echo.d	2024-10-15 10:58:37.297888480 +0530
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/echo.o and xv6-publica/echo.o differ
diff -ruN xv6-public/echo.sym xv6-publica/echo.sym
--- xv6-public/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/echo.sym	2024-10-15 10:58:37.317888479 +0530
@@ -0,0 +1,45 @@
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+000007b0 digits.0
+00000000 umalloc.c
+00000a64 freep
+00000a68 base
+00000070 strcpy
+00000420 printf
+00000290 memmove
+0000030b mknod
+00000190 gets
+00000343 getpid
+00000650 malloc
+00000353 sleep
+000002d3 pipe
+000002e3 write
+0000031b fstat
+000002f3 kill
+00000333 chdir
+000002fb exec
+000002cb wait
+000002db read
+00000313 unlink
+000002bb fork
+0000034b sbrk
+0000035b uptime
+00000a64 __bss_start
+00000130 memset
+00000000 main
+000000a0 strcmp
+0000033b dup
+00000200 stat
+00000a64 _edata
+00000a70 _end
+00000323 link
+000002c3 exit
+00000250 atoi
+00000100 strlen
+00000303 open
+00000150 strchr
+0000032b mkdir
+000002eb close
+000005c0 free
Binary files xv6-public/entry.o and xv6-publica/entry.o differ
Binary files xv6-public/entryother and xv6-publica/entryother differ
diff -ruN xv6-public/entryother.asm xv6-publica/entryother.asm
--- xv6-public/entryother.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/entryother.asm	2024-10-15 10:58:40.997888561 +0530
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -ruN xv6-public/entryother.d xv6-publica/entryother.d
--- xv6-public/entryother.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/entryother.d	2024-10-15 10:58:40.977888560 +0530
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files xv6-public/entryother.o and xv6-publica/entryother.o differ
diff -ruN xv6-public/exec.d xv6-publica/exec.d
--- xv6-public/exec.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/exec.d	2024-10-15 10:58:39.137888507 +0530
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files xv6-public/exec.o and xv6-publica/exec.o differ
diff -ruN xv6-public/file.d xv6-publica/file.d
--- xv6-public/file.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/file.d	2024-10-15 10:58:39.207888509 +0530
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files xv6-public/file.o and xv6-publica/file.o differ
diff -ruN xv6-public/forktest.asm xv6-publica/forktest.asm
--- xv6-public/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/forktest.asm	2024-10-15 10:58:37.387888477 +0530
@@ -0,0 +1,661 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	83 e4 f0             	and    $0xfffffff0,%esp
+  forktest();
+   6:	e8 35 00 00 00       	call   40 <forktest>
+  exit();
+   b:	e8 63 03 00 00       	call   373 <exit>
+
+00000010 <printf>:
+{
+  10:	55                   	push   %ebp
+  11:	89 e5                	mov    %esp,%ebp
+  13:	53                   	push   %ebx
+  14:	83 ec 10             	sub    $0x10,%esp
+  17:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  1a:	53                   	push   %ebx
+  1b:	e8 90 01 00 00       	call   1b0 <strlen>
+  20:	83 c4 0c             	add    $0xc,%esp
+  23:	50                   	push   %eax
+  24:	53                   	push   %ebx
+  25:	ff 75 08             	push   0x8(%ebp)
+  28:	e8 66 03 00 00       	call   393 <write>
+}
+  2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  30:	83 c4 10             	add    $0x10,%esp
+  33:	c9                   	leave  
+  34:	c3                   	ret    
+  35:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000040 <forktest>:
+{
+  40:	55                   	push   %ebp
+  41:	89 e5                	mov    %esp,%ebp
+  43:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  44:	31 db                	xor    %ebx,%ebx
+{
+  46:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  49:	68 14 04 00 00       	push   $0x414
+  4e:	e8 5d 01 00 00       	call   1b0 <strlen>
+  53:	83 c4 0c             	add    $0xc,%esp
+  56:	50                   	push   %eax
+  57:	68 14 04 00 00       	push   $0x414
+  5c:	6a 01                	push   $0x1
+  5e:	e8 30 03 00 00       	call   393 <write>
+  63:	83 c4 10             	add    $0x10,%esp
+  66:	eb 19                	jmp    81 <forktest+0x41>
+  68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6f:	90                   	nop
+    if(pid == 0)
+  70:	74 58                	je     ca <forktest+0x8a>
+  for(n=0; n<N; n++){
+  72:	83 c3 01             	add    $0x1,%ebx
+  75:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  7b:	0f 84 83 00 00 00    	je     104 <forktest+0xc4>
+    pid = fork();
+  81:	e8 e5 02 00 00       	call   36b <fork>
+    if(pid < 0)
+  86:	85 c0                	test   %eax,%eax
+  88:	79 e6                	jns    70 <forktest+0x30>
+  for(; n > 0; n--){
+  8a:	85 db                	test   %ebx,%ebx
+  8c:	74 10                	je     9e <forktest+0x5e>
+  8e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  90:	e8 e6 02 00 00       	call   37b <wait>
+  95:	85 c0                	test   %eax,%eax
+  97:	78 36                	js     cf <forktest+0x8f>
+  for(; n > 0; n--){
+  99:	83 eb 01             	sub    $0x1,%ebx
+  9c:	75 f2                	jne    90 <forktest+0x50>
+  if(wait() != -1){
+  9e:	e8 d8 02 00 00       	call   37b <wait>
+  a3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  a6:	75 49                	jne    f1 <forktest+0xb1>
+  write(fd, s, strlen(s));
+  a8:	83 ec 0c             	sub    $0xc,%esp
+  ab:	68 46 04 00 00       	push   $0x446
+  b0:	e8 fb 00 00 00       	call   1b0 <strlen>
+  b5:	83 c4 0c             	add    $0xc,%esp
+  b8:	50                   	push   %eax
+  b9:	68 46 04 00 00       	push   $0x446
+  be:	6a 01                	push   $0x1
+  c0:	e8 ce 02 00 00       	call   393 <write>
+}
+  c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c8:	c9                   	leave  
+  c9:	c3                   	ret    
+      exit();
+  ca:	e8 a4 02 00 00       	call   373 <exit>
+  write(fd, s, strlen(s));
+  cf:	83 ec 0c             	sub    $0xc,%esp
+  d2:	68 1f 04 00 00       	push   $0x41f
+  d7:	e8 d4 00 00 00       	call   1b0 <strlen>
+  dc:	83 c4 0c             	add    $0xc,%esp
+  df:	50                   	push   %eax
+  e0:	68 1f 04 00 00       	push   $0x41f
+  e5:	6a 01                	push   $0x1
+  e7:	e8 a7 02 00 00       	call   393 <write>
+      exit();
+  ec:	e8 82 02 00 00       	call   373 <exit>
+    printf(1, "wait got too many\n");
+  f1:	52                   	push   %edx
+  f2:	52                   	push   %edx
+  f3:	68 33 04 00 00       	push   $0x433
+  f8:	6a 01                	push   $0x1
+  fa:	e8 11 ff ff ff       	call   10 <printf>
+    exit();
+  ff:	e8 6f 02 00 00       	call   373 <exit>
+    printf(1, "fork claimed to work N times!\n", N);
+ 104:	50                   	push   %eax
+ 105:	68 e8 03 00 00       	push   $0x3e8
+ 10a:	68 54 04 00 00       	push   $0x454
+ 10f:	6a 01                	push   $0x1
+ 111:	e8 fa fe ff ff       	call   10 <printf>
+    exit();
+ 116:	e8 58 02 00 00       	call   373 <exit>
+ 11b:	66 90                	xchg   %ax,%ax
+ 11d:	66 90                	xchg   %ax,%ax
+ 11f:	90                   	nop
+
+00000120 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 120:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 121:	31 c0                	xor    %eax,%eax
+{
+ 123:	89 e5                	mov    %esp,%ebp
+ 125:	53                   	push   %ebx
+ 126:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 129:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 12c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 130:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 134:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 137:	83 c0 01             	add    $0x1,%eax
+ 13a:	84 d2                	test   %dl,%dl
+ 13c:	75 f2                	jne    130 <strcpy+0x10>
+    ;
+  return os;
+}
+ 13e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 141:	89 c8                	mov    %ecx,%eax
+ 143:	c9                   	leave  
+ 144:	c3                   	ret    
+ 145:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 55 08             	mov    0x8(%ebp),%edx
+ 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 15a:	0f b6 02             	movzbl (%edx),%eax
+ 15d:	84 c0                	test   %al,%al
+ 15f:	75 17                	jne    178 <strcmp+0x28>
+ 161:	eb 3a                	jmp    19d <strcmp+0x4d>
+ 163:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 167:	90                   	nop
+ 168:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 16c:	83 c2 01             	add    $0x1,%edx
+ 16f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 172:	84 c0                	test   %al,%al
+ 174:	74 1a                	je     190 <strcmp+0x40>
+    p++, q++;
+ 176:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 178:	0f b6 19             	movzbl (%ecx),%ebx
+ 17b:	38 c3                	cmp    %al,%bl
+ 17d:	74 e9                	je     168 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 17f:	29 d8                	sub    %ebx,%eax
+}
+ 181:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 184:	c9                   	leave  
+ 185:	c3                   	ret    
+ 186:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 190:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 194:	31 c0                	xor    %eax,%eax
+ 196:	29 d8                	sub    %ebx,%eax
+}
+ 198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 19b:	c9                   	leave  
+ 19c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 19d:	0f b6 19             	movzbl (%ecx),%ebx
+ 1a0:	31 c0                	xor    %eax,%eax
+ 1a2:	eb db                	jmp    17f <strcmp+0x2f>
+ 1a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1af:	90                   	nop
+
+000001b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1b6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1b9:	74 15                	je     1d0 <strlen+0x20>
+ 1bb:	31 c0                	xor    %eax,%eax
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1c0:	83 c0 01             	add    $0x1,%eax
+ 1c3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1c7:	89 c1                	mov    %eax,%ecx
+ 1c9:	75 f5                	jne    1c0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1cb:	89 c8                	mov    %ecx,%eax
+ 1cd:	5d                   	pop    %ebp
+ 1ce:	c3                   	ret    
+ 1cf:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1d0:	31 c9                	xor    %ecx,%ecx
+}
+ 1d2:	5d                   	pop    %ebp
+ 1d3:	89 c8                	mov    %ecx,%eax
+ 1d5:	c3                   	ret    
+ 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	57                   	push   %edi
+ 1e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ed:	89 d7                	mov    %edx,%edi
+ 1ef:	fc                   	cld    
+ 1f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1f2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 1f5:	89 d0                	mov    %edx,%eax
+ 1f7:	c9                   	leave  
+ 1f8:	c3                   	ret    
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	8b 45 08             	mov    0x8(%ebp),%eax
+ 206:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 20a:	0f b6 10             	movzbl (%eax),%edx
+ 20d:	84 d2                	test   %dl,%dl
+ 20f:	75 12                	jne    223 <strchr+0x23>
+ 211:	eb 1d                	jmp    230 <strchr+0x30>
+ 213:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 217:	90                   	nop
+ 218:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 21c:	83 c0 01             	add    $0x1,%eax
+ 21f:	84 d2                	test   %dl,%dl
+ 221:	74 0d                	je     230 <strchr+0x30>
+    if(*s == c)
+ 223:	38 d1                	cmp    %dl,%cl
+ 225:	75 f1                	jne    218 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 227:	5d                   	pop    %ebp
+ 228:	c3                   	ret    
+ 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 230:	31 c0                	xor    %eax,%eax
+}
+ 232:	5d                   	pop    %ebp
+ 233:	c3                   	ret    
+ 234:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+
+00000240 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	57                   	push   %edi
+ 244:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 245:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 248:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 249:	31 db                	xor    %ebx,%ebx
+{
+ 24b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 24e:	eb 27                	jmp    277 <gets+0x37>
+    cc = read(0, &c, 1);
+ 250:	83 ec 04             	sub    $0x4,%esp
+ 253:	6a 01                	push   $0x1
+ 255:	57                   	push   %edi
+ 256:	6a 00                	push   $0x0
+ 258:	e8 2e 01 00 00       	call   38b <read>
+    if(cc < 1)
+ 25d:	83 c4 10             	add    $0x10,%esp
+ 260:	85 c0                	test   %eax,%eax
+ 262:	7e 1d                	jle    281 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 264:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 268:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 26f:	3c 0a                	cmp    $0xa,%al
+ 271:	74 1d                	je     290 <gets+0x50>
+ 273:	3c 0d                	cmp    $0xd,%al
+ 275:	74 19                	je     290 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 277:	89 de                	mov    %ebx,%esi
+ 279:	83 c3 01             	add    $0x1,%ebx
+ 27c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 27f:	7c cf                	jl     250 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 281:	8b 45 08             	mov    0x8(%ebp),%eax
+ 284:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 288:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28b:	5b                   	pop    %ebx
+ 28c:	5e                   	pop    %esi
+ 28d:	5f                   	pop    %edi
+ 28e:	5d                   	pop    %ebp
+ 28f:	c3                   	ret    
+  buf[i] = '\0';
+ 290:	8b 45 08             	mov    0x8(%ebp),%eax
+ 293:	89 de                	mov    %ebx,%esi
+ 295:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 299:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 29c:	5b                   	pop    %ebx
+ 29d:	5e                   	pop    %esi
+ 29e:	5f                   	pop    %edi
+ 29f:	5d                   	pop    %ebp
+ 2a0:	c3                   	ret    
+ 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2af:	90                   	nop
+
+000002b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2b0:	55                   	push   %ebp
+ 2b1:	89 e5                	mov    %esp,%ebp
+ 2b3:	56                   	push   %esi
+ 2b4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2b5:	83 ec 08             	sub    $0x8,%esp
+ 2b8:	6a 00                	push   $0x0
+ 2ba:	ff 75 08             	push   0x8(%ebp)
+ 2bd:	e8 f1 00 00 00       	call   3b3 <open>
+  if(fd < 0)
+ 2c2:	83 c4 10             	add    $0x10,%esp
+ 2c5:	85 c0                	test   %eax,%eax
+ 2c7:	78 27                	js     2f0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2c9:	83 ec 08             	sub    $0x8,%esp
+ 2cc:	ff 75 0c             	push   0xc(%ebp)
+ 2cf:	89 c3                	mov    %eax,%ebx
+ 2d1:	50                   	push   %eax
+ 2d2:	e8 f4 00 00 00       	call   3cb <fstat>
+  close(fd);
+ 2d7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2da:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2dc:	e8 ba 00 00 00       	call   39b <close>
+  return r;
+ 2e1:	83 c4 10             	add    $0x10,%esp
+}
+ 2e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2e7:	89 f0                	mov    %esi,%eax
+ 2e9:	5b                   	pop    %ebx
+ 2ea:	5e                   	pop    %esi
+ 2eb:	5d                   	pop    %ebp
+ 2ec:	c3                   	ret    
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2f0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2f5:	eb ed                	jmp    2e4 <stat+0x34>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+
+00000300 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 300:	55                   	push   %ebp
+ 301:	89 e5                	mov    %esp,%ebp
+ 303:	53                   	push   %ebx
+ 304:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 307:	0f be 02             	movsbl (%edx),%eax
+ 30a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 30d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 310:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 315:	77 1e                	ja     335 <atoi+0x35>
+ 317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 320:	83 c2 01             	add    $0x1,%edx
+ 323:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 326:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 32a:	0f be 02             	movsbl (%edx),%eax
+ 32d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 330:	80 fb 09             	cmp    $0x9,%bl
+ 333:	76 eb                	jbe    320 <atoi+0x20>
+  return n;
+}
+ 335:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 338:	89 c8                	mov    %ecx,%eax
+ 33a:	c9                   	leave  
+ 33b:	c3                   	ret    
+ 33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000340 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 340:	55                   	push   %ebp
+ 341:	89 e5                	mov    %esp,%ebp
+ 343:	57                   	push   %edi
+ 344:	8b 45 10             	mov    0x10(%ebp),%eax
+ 347:	8b 55 08             	mov    0x8(%ebp),%edx
+ 34a:	56                   	push   %esi
+ 34b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 34e:	85 c0                	test   %eax,%eax
+ 350:	7e 13                	jle    365 <memmove+0x25>
+ 352:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 354:	89 d7                	mov    %edx,%edi
+ 356:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 360:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 361:	39 f8                	cmp    %edi,%eax
+ 363:	75 fb                	jne    360 <memmove+0x20>
+  return vdst;
+}
+ 365:	5e                   	pop    %esi
+ 366:	89 d0                	mov    %edx,%eax
+ 368:	5f                   	pop    %edi
+ 369:	5d                   	pop    %ebp
+ 36a:	c3                   	ret    
+
+0000036b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 36b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <exit>:
+SYSCALL(exit)
+ 373:	b8 02 00 00 00       	mov    $0x2,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <wait>:
+SYSCALL(wait)
+ 37b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <pipe>:
+SYSCALL(pipe)
+ 383:	b8 04 00 00 00       	mov    $0x4,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <read>:
+SYSCALL(read)
+ 38b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <write>:
+SYSCALL(write)
+ 393:	b8 10 00 00 00       	mov    $0x10,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <close>:
+SYSCALL(close)
+ 39b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <kill>:
+SYSCALL(kill)
+ 3a3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <exec>:
+SYSCALL(exec)
+ 3ab:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <open>:
+SYSCALL(open)
+ 3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mknod>:
+SYSCALL(mknod)
+ 3bb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <unlink>:
+SYSCALL(unlink)
+ 3c3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <fstat>:
+SYSCALL(fstat)
+ 3cb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <link>:
+SYSCALL(link)
+ 3d3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mkdir>:
+SYSCALL(mkdir)
+ 3db:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <chdir>:
+SYSCALL(chdir)
+ 3e3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <dup>:
+SYSCALL(dup)
+ 3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getpid>:
+SYSCALL(getpid)
+ 3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <sbrk>:
+SYSCALL(sbrk)
+ 3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <sleep>:
+SYSCALL(sleep)
+ 403:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <uptime>:
+SYSCALL(uptime)
+ 40b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
diff -ruN xv6-public/forktest.d xv6-publica/forktest.d
--- xv6-public/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/forktest.d	2024-10-15 10:58:37.357888478 +0530
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/forktest.o and xv6-publica/forktest.o differ
diff -ruN xv6-public/fs.d xv6-publica/fs.d
--- xv6-public/fs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/fs.d	2024-10-15 10:58:39.417888515 +0530
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files xv6-public/fs.img and xv6-publica/fs.img differ
Binary files xv6-public/fs.o and xv6-publica/fs.o differ
diff -ruN xv6-public/grep.asm xv6-publica/grep.asm
--- xv6-public/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/grep.asm	2024-10-15 10:58:37.487888474 +0530
@@ -0,0 +1,1559 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 18             	sub    $0x18,%esp
+  14:	8b 01                	mov    (%ecx),%eax
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 6f                	jle    90 <main+0x90>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  21:	8b 43 04             	mov    0x4(%ebx),%eax
+  24:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  27:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  2b:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  30:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  33:	75 2d                	jne    62 <main+0x62>
+  35:	eb 6c                	jmp    a3 <main+0xa3>
+  37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  3e:	66 90                	xchg   %ax,%ax
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  40:	83 ec 08             	sub    $0x8,%esp
+  for(i = 2; i < argc; i++){
+  43:	83 c6 01             	add    $0x1,%esi
+  46:	83 c3 04             	add    $0x4,%ebx
+    grep(pattern, fd);
+  49:	50                   	push   %eax
+  4a:	ff 75 e0             	push   -0x20(%ebp)
+  4d:	e8 7e 01 00 00       	call   1d0 <grep>
+    close(fd);
+  52:	89 3c 24             	mov    %edi,(%esp)
+  55:	e8 91 05 00 00       	call   5eb <close>
+  for(i = 2; i < argc; i++){
+  5a:	83 c4 10             	add    $0x10,%esp
+  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  60:	7e 29                	jle    8b <main+0x8b>
+    if((fd = open(argv[i], 0)) < 0){
+  62:	83 ec 08             	sub    $0x8,%esp
+  65:	6a 00                	push   $0x0
+  67:	ff 33                	push   (%ebx)
+  69:	e8 95 05 00 00       	call   603 <open>
+  6e:	83 c4 10             	add    $0x10,%esp
+  71:	89 c7                	mov    %eax,%edi
+  73:	85 c0                	test   %eax,%eax
+  75:	79 c9                	jns    40 <main+0x40>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  77:	50                   	push   %eax
+  78:	ff 33                	push   (%ebx)
+  7a:	68 68 0a 00 00       	push   $0xa68
+  7f:	6a 01                	push   $0x1
+  81:	e8 9a 06 00 00       	call   720 <printf>
+      exit();
+  86:	e8 38 05 00 00       	call   5c3 <exit>
+  }
+  exit();
+  8b:	e8 33 05 00 00       	call   5c3 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  90:	51                   	push   %ecx
+  91:	51                   	push   %ecx
+  92:	68 48 0a 00 00       	push   $0xa48
+  97:	6a 02                	push   $0x2
+  99:	e8 82 06 00 00       	call   720 <printf>
+    exit();
+  9e:	e8 20 05 00 00       	call   5c3 <exit>
+    grep(pattern, 0);
+  a3:	52                   	push   %edx
+  a4:	52                   	push   %edx
+  a5:	6a 00                	push   $0x0
+  a7:	50                   	push   %eax
+  a8:	e8 23 01 00 00       	call   1d0 <grep>
+    exit();
+  ad:	e8 11 05 00 00       	call   5c3 <exit>
+  b2:	66 90                	xchg   %ax,%ax
+  b4:	66 90                	xchg   %ax,%ax
+  b6:	66 90                	xchg   %ax,%ax
+  b8:	66 90                	xchg   %ax,%ax
+  ba:	66 90                	xchg   %ax,%ax
+  bc:	66 90                	xchg   %ax,%ax
+  be:	66 90                	xchg   %ax,%ax
+
+000000c0 <matchhere>:
+  return 0;
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	57                   	push   %edi
+  c4:	56                   	push   %esi
+  c5:	53                   	push   %ebx
+  c6:	83 ec 0c             	sub    $0xc,%esp
+  c9:	8b 75 08             	mov    0x8(%ebp),%esi
+  cc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+  cf:	0f b6 06             	movzbl (%esi),%eax
+  d2:	84 c0                	test   %al,%al
+  d4:	75 2d                	jne    103 <matchhere+0x43>
+  d6:	e9 7d 00 00 00       	jmp    158 <matchhere+0x98>
+  db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  df:	90                   	nop
+    return 1;
+  if(re[1] == '*')
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  e0:	0f b6 0f             	movzbl (%edi),%ecx
+  if(re[0] == '$' && re[1] == '\0')
+  e3:	80 fb 24             	cmp    $0x24,%bl
+  e6:	75 04                	jne    ec <matchhere+0x2c>
+  e8:	84 c0                	test   %al,%al
+  ea:	74 79                	je     165 <matchhere+0xa5>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  ec:	84 c9                	test   %cl,%cl
+  ee:	74 58                	je     148 <matchhere+0x88>
+  f0:	38 d9                	cmp    %bl,%cl
+  f2:	74 05                	je     f9 <matchhere+0x39>
+  f4:	80 fb 2e             	cmp    $0x2e,%bl
+  f7:	75 4f                	jne    148 <matchhere+0x88>
+    return matchhere(re+1, text+1);
+  f9:	83 c7 01             	add    $0x1,%edi
+  fc:	83 c6 01             	add    $0x1,%esi
+  if(re[0] == '\0')
+  ff:	84 c0                	test   %al,%al
+ 101:	74 55                	je     158 <matchhere+0x98>
+  if(re[1] == '*')
+ 103:	0f be d8             	movsbl %al,%ebx
+ 106:	0f b6 46 01          	movzbl 0x1(%esi),%eax
+ 10a:	3c 2a                	cmp    $0x2a,%al
+ 10c:	75 d2                	jne    e0 <matchhere+0x20>
+    return matchstar(re[0], re+2, text);
+ 10e:	83 c6 02             	add    $0x2,%esi
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+ 118:	83 ec 08             	sub    $0x8,%esp
+ 11b:	57                   	push   %edi
+ 11c:	56                   	push   %esi
+ 11d:	e8 9e ff ff ff       	call   c0 <matchhere>
+ 122:	83 c4 10             	add    $0x10,%esp
+ 125:	85 c0                	test   %eax,%eax
+ 127:	75 2f                	jne    158 <matchhere+0x98>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+ 129:	0f be 17             	movsbl (%edi),%edx
+ 12c:	84 d2                	test   %dl,%dl
+ 12e:	74 0c                	je     13c <matchhere+0x7c>
+ 130:	83 c7 01             	add    $0x1,%edi
+ 133:	83 fb 2e             	cmp    $0x2e,%ebx
+ 136:	74 e0                	je     118 <matchhere+0x58>
+ 138:	39 da                	cmp    %ebx,%edx
+ 13a:	74 dc                	je     118 <matchhere+0x58>
+}
+ 13c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 13f:	5b                   	pop    %ebx
+ 140:	5e                   	pop    %esi
+ 141:	5f                   	pop    %edi
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+ 144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 148:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 14b:	31 c0                	xor    %eax,%eax
+}
+ 14d:	5b                   	pop    %ebx
+ 14e:	5e                   	pop    %esi
+ 14f:	5f                   	pop    %edi
+ 150:	5d                   	pop    %ebp
+ 151:	c3                   	ret    
+ 152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 158:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 1;
+ 15b:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5e                   	pop    %esi
+ 162:	5f                   	pop    %edi
+ 163:	5d                   	pop    %ebp
+ 164:	c3                   	ret    
+    return *text == '\0';
+ 165:	31 c0                	xor    %eax,%eax
+ 167:	84 c9                	test   %cl,%cl
+ 169:	0f 94 c0             	sete   %al
+ 16c:	eb ce                	jmp    13c <matchhere+0x7c>
+ 16e:	66 90                	xchg   %ax,%ax
+
+00000170 <match>:
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	56                   	push   %esi
+ 174:	53                   	push   %ebx
+ 175:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 178:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(re[0] == '^')
+ 17b:	80 3b 5e             	cmpb   $0x5e,(%ebx)
+ 17e:	75 11                	jne    191 <match+0x21>
+ 180:	eb 2e                	jmp    1b0 <match+0x40>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 188:	83 c6 01             	add    $0x1,%esi
+ 18b:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 18f:	74 16                	je     1a7 <match+0x37>
+    if(matchhere(re, text))
+ 191:	83 ec 08             	sub    $0x8,%esp
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+ 196:	e8 25 ff ff ff       	call   c0 <matchhere>
+ 19b:	83 c4 10             	add    $0x10,%esp
+ 19e:	85 c0                	test   %eax,%eax
+ 1a0:	74 e6                	je     188 <match+0x18>
+      return 1;
+ 1a2:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1a7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1aa:	5b                   	pop    %ebx
+ 1ab:	5e                   	pop    %esi
+ 1ac:	5d                   	pop    %ebp
+ 1ad:	c3                   	ret    
+ 1ae:	66 90                	xchg   %ax,%ax
+    return matchhere(re+1, text);
+ 1b0:	83 c3 01             	add    $0x1,%ebx
+ 1b3:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+ 1b6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1b9:	5b                   	pop    %ebx
+ 1ba:	5e                   	pop    %esi
+ 1bb:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 1bc:	e9 ff fe ff ff       	jmp    c0 <matchhere>
+ 1c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <grep>:
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	57                   	push   %edi
+ 1d4:	56                   	push   %esi
+ 1d5:	53                   	push   %ebx
+ 1d6:	83 ec 1c             	sub    $0x1c,%esp
+ 1d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+  m = 0;
+ 1dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    return matchhere(re+1, text);
+ 1e3:	8d 47 01             	lea    0x1(%edi),%eax
+ 1e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 1f0:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+ 1f3:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 1f8:	83 ec 04             	sub    $0x4,%esp
+ 1fb:	29 c8                	sub    %ecx,%eax
+ 1fd:	50                   	push   %eax
+ 1fe:	8d 81 80 0e 00 00    	lea    0xe80(%ecx),%eax
+ 204:	50                   	push   %eax
+ 205:	ff 75 0c             	push   0xc(%ebp)
+ 208:	e8 ce 03 00 00       	call   5db <read>
+ 20d:	83 c4 10             	add    $0x10,%esp
+ 210:	85 c0                	test   %eax,%eax
+ 212:	0f 8e e5 00 00 00    	jle    2fd <grep+0x12d>
+    m += n;
+ 218:	01 45 dc             	add    %eax,-0x24(%ebp)
+ 21b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+    p = buf;
+ 21e:	c7 45 e4 80 0e 00 00 	movl   $0xe80,-0x1c(%ebp)
+    buf[m] = '\0';
+ 225:	c6 81 80 0e 00 00 00 	movb   $0x0,0xe80(%ecx)
+    while((q = strchr(p, '\n')) != 0){
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 230:	83 ec 08             	sub    $0x8,%esp
+ 233:	6a 0a                	push   $0xa
+ 235:	ff 75 e4             	push   -0x1c(%ebp)
+ 238:	e8 13 02 00 00       	call   450 <strchr>
+ 23d:	83 c4 10             	add    $0x10,%esp
+ 240:	89 c3                	mov    %eax,%ebx
+ 242:	85 c0                	test   %eax,%eax
+ 244:	74 72                	je     2b8 <grep+0xe8>
+      *q = 0;
+ 246:	c6 03 00             	movb   $0x0,(%ebx)
+        write(1, p, q+1 - p);
+ 249:	8d 43 01             	lea    0x1(%ebx),%eax
+  if(re[0] == '^')
+ 24c:	80 3f 5e             	cmpb   $0x5e,(%edi)
+        write(1, p, q+1 - p);
+ 24f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ 252:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+  if(re[0] == '^')
+ 255:	75 12                	jne    269 <grep+0x99>
+ 257:	eb 47                	jmp    2a0 <grep+0xd0>
+ 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  }while(*text++ != '\0');
+ 260:	83 c6 01             	add    $0x1,%esi
+ 263:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 267:	74 2b                	je     294 <grep+0xc4>
+    if(matchhere(re, text))
+ 269:	83 ec 08             	sub    $0x8,%esp
+ 26c:	56                   	push   %esi
+ 26d:	57                   	push   %edi
+ 26e:	e8 4d fe ff ff       	call   c0 <matchhere>
+ 273:	83 c4 10             	add    $0x10,%esp
+ 276:	85 c0                	test   %eax,%eax
+ 278:	74 e6                	je     260 <grep+0x90>
+        write(1, p, q+1 - p);
+ 27a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 27d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+ 280:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 283:	c6 03 0a             	movb   $0xa,(%ebx)
+        write(1, p, q+1 - p);
+ 286:	29 d0                	sub    %edx,%eax
+ 288:	50                   	push   %eax
+ 289:	52                   	push   %edx
+ 28a:	6a 01                	push   $0x1
+ 28c:	e8 52 03 00 00       	call   5e3 <write>
+ 291:	83 c4 10             	add    $0x10,%esp
+      p = q+1;
+ 294:	8b 45 e0             	mov    -0x20(%ebp),%eax
+ 297:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 29a:	eb 94                	jmp    230 <grep+0x60>
+ 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return matchhere(re+1, text);
+ 2a0:	83 ec 08             	sub    $0x8,%esp
+ 2a3:	56                   	push   %esi
+ 2a4:	ff 75 d8             	push   -0x28(%ebp)
+ 2a7:	e8 14 fe ff ff       	call   c0 <matchhere>
+ 2ac:	83 c4 10             	add    $0x10,%esp
+      if(match(pattern, p)){
+ 2af:	85 c0                	test   %eax,%eax
+ 2b1:	74 e1                	je     294 <grep+0xc4>
+ 2b3:	eb c5                	jmp    27a <grep+0xaa>
+ 2b5:	8d 76 00             	lea    0x0(%esi),%esi
+    if(p == buf)
+ 2b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 2bb:	81 fa 80 0e 00 00    	cmp    $0xe80,%edx
+ 2c1:	74 2e                	je     2f1 <grep+0x121>
+    if(m > 0){
+ 2c3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+ 2c6:	85 c9                	test   %ecx,%ecx
+ 2c8:	0f 8e 22 ff ff ff    	jle    1f0 <grep+0x20>
+      m -= p - buf;
+ 2ce:	89 d0                	mov    %edx,%eax
+      memmove(buf, p, m);
+ 2d0:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2d3:	2d 80 0e 00 00       	sub    $0xe80,%eax
+ 2d8:	29 c1                	sub    %eax,%ecx
+      memmove(buf, p, m);
+ 2da:	51                   	push   %ecx
+ 2db:	52                   	push   %edx
+ 2dc:	68 80 0e 00 00       	push   $0xe80
+      m -= p - buf;
+ 2e1:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+      memmove(buf, p, m);
+ 2e4:	e8 a7 02 00 00       	call   590 <memmove>
+ 2e9:	83 c4 10             	add    $0x10,%esp
+ 2ec:	e9 ff fe ff ff       	jmp    1f0 <grep+0x20>
+      m = 0;
+ 2f1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+ 2f8:	e9 f3 fe ff ff       	jmp    1f0 <grep+0x20>
+}
+ 2fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 300:	5b                   	pop    %ebx
+ 301:	5e                   	pop    %esi
+ 302:	5f                   	pop    %edi
+ 303:	5d                   	pop    %ebp
+ 304:	c3                   	ret    
+ 305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <matchstar>:
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	56                   	push   %esi
+ 315:	53                   	push   %ebx
+ 316:	83 ec 0c             	sub    $0xc,%esp
+ 319:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 31c:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 31f:	8b 7d 10             	mov    0x10(%ebp),%edi
+ 322:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(matchhere(re, text))
+ 328:	83 ec 08             	sub    $0x8,%esp
+ 32b:	57                   	push   %edi
+ 32c:	56                   	push   %esi
+ 32d:	e8 8e fd ff ff       	call   c0 <matchhere>
+ 332:	83 c4 10             	add    $0x10,%esp
+ 335:	85 c0                	test   %eax,%eax
+ 337:	75 1f                	jne    358 <matchstar+0x48>
+  }while(*text!='\0' && (*text++==c || c=='.'));
+ 339:	0f be 17             	movsbl (%edi),%edx
+ 33c:	84 d2                	test   %dl,%dl
+ 33e:	74 0c                	je     34c <matchstar+0x3c>
+ 340:	83 c7 01             	add    $0x1,%edi
+ 343:	39 da                	cmp    %ebx,%edx
+ 345:	74 e1                	je     328 <matchstar+0x18>
+ 347:	83 fb 2e             	cmp    $0x2e,%ebx
+ 34a:	74 dc                	je     328 <matchstar+0x18>
+}
+ 34c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 34f:	5b                   	pop    %ebx
+ 350:	5e                   	pop    %esi
+ 351:	5f                   	pop    %edi
+ 352:	5d                   	pop    %ebp
+ 353:	c3                   	ret    
+ 354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 358:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+ 35b:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 360:	5b                   	pop    %ebx
+ 361:	5e                   	pop    %esi
+ 362:	5f                   	pop    %edi
+ 363:	5d                   	pop    %ebp
+ 364:	c3                   	ret    
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 370:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 371:	31 c0                	xor    %eax,%eax
+{
+ 373:	89 e5                	mov    %esp,%ebp
+ 375:	53                   	push   %ebx
+ 376:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 379:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 37c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 380:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 384:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 387:	83 c0 01             	add    $0x1,%eax
+ 38a:	84 d2                	test   %dl,%dl
+ 38c:	75 f2                	jne    380 <strcpy+0x10>
+    ;
+  return os;
+}
+ 38e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 391:	89 c8                	mov    %ecx,%eax
+ 393:	c9                   	leave  
+ 394:	c3                   	ret    
+ 395:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 39c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	53                   	push   %ebx
+ 3a4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 3aa:	0f b6 02             	movzbl (%edx),%eax
+ 3ad:	84 c0                	test   %al,%al
+ 3af:	75 17                	jne    3c8 <strcmp+0x28>
+ 3b1:	eb 3a                	jmp    3ed <strcmp+0x4d>
+ 3b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3b7:	90                   	nop
+ 3b8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 3bc:	83 c2 01             	add    $0x1,%edx
+ 3bf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 3c2:	84 c0                	test   %al,%al
+ 3c4:	74 1a                	je     3e0 <strcmp+0x40>
+    p++, q++;
+ 3c6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 3c8:	0f b6 19             	movzbl (%ecx),%ebx
+ 3cb:	38 c3                	cmp    %al,%bl
+ 3cd:	74 e9                	je     3b8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 3cf:	29 d8                	sub    %ebx,%eax
+}
+ 3d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3d4:	c9                   	leave  
+ 3d5:	c3                   	ret    
+ 3d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 3e0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 3e4:	31 c0                	xor    %eax,%eax
+ 3e6:	29 d8                	sub    %ebx,%eax
+}
+ 3e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3eb:	c9                   	leave  
+ 3ec:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 3ed:	0f b6 19             	movzbl (%ecx),%ebx
+ 3f0:	31 c0                	xor    %eax,%eax
+ 3f2:	eb db                	jmp    3cf <strcmp+0x2f>
+ 3f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ff:	90                   	nop
+
+00000400 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 406:	80 3a 00             	cmpb   $0x0,(%edx)
+ 409:	74 15                	je     420 <strlen+0x20>
+ 40b:	31 c0                	xor    %eax,%eax
+ 40d:	8d 76 00             	lea    0x0(%esi),%esi
+ 410:	83 c0 01             	add    $0x1,%eax
+ 413:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 417:	89 c1                	mov    %eax,%ecx
+ 419:	75 f5                	jne    410 <strlen+0x10>
+    ;
+  return n;
+}
+ 41b:	89 c8                	mov    %ecx,%eax
+ 41d:	5d                   	pop    %ebp
+ 41e:	c3                   	ret    
+ 41f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 420:	31 c9                	xor    %ecx,%ecx
+}
+ 422:	5d                   	pop    %ebp
+ 423:	89 c8                	mov    %ecx,%eax
+ 425:	c3                   	ret    
+ 426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000430 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 437:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 43a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 43d:	89 d7                	mov    %edx,%edi
+ 43f:	fc                   	cld    
+ 440:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 442:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 445:	89 d0                	mov    %edx,%eax
+ 447:	c9                   	leave  
+ 448:	c3                   	ret    
+ 449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000450 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	8b 45 08             	mov    0x8(%ebp),%eax
+ 456:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 45a:	0f b6 10             	movzbl (%eax),%edx
+ 45d:	84 d2                	test   %dl,%dl
+ 45f:	75 12                	jne    473 <strchr+0x23>
+ 461:	eb 1d                	jmp    480 <strchr+0x30>
+ 463:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 467:	90                   	nop
+ 468:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 46c:	83 c0 01             	add    $0x1,%eax
+ 46f:	84 d2                	test   %dl,%dl
+ 471:	74 0d                	je     480 <strchr+0x30>
+    if(*s == c)
+ 473:	38 d1                	cmp    %dl,%cl
+ 475:	75 f1                	jne    468 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 477:	5d                   	pop    %ebp
+ 478:	c3                   	ret    
+ 479:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 480:	31 c0                	xor    %eax,%eax
+}
+ 482:	5d                   	pop    %ebp
+ 483:	c3                   	ret    
+ 484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+
+00000490 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 495:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 498:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 499:	31 db                	xor    %ebx,%ebx
+{
+ 49b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 49e:	eb 27                	jmp    4c7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 4a0:	83 ec 04             	sub    $0x4,%esp
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	6a 00                	push   $0x0
+ 4a8:	e8 2e 01 00 00       	call   5db <read>
+    if(cc < 1)
+ 4ad:	83 c4 10             	add    $0x10,%esp
+ 4b0:	85 c0                	test   %eax,%eax
+ 4b2:	7e 1d                	jle    4d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 4b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 4b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 4bb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 4bf:	3c 0a                	cmp    $0xa,%al
+ 4c1:	74 1d                	je     4e0 <gets+0x50>
+ 4c3:	3c 0d                	cmp    $0xd,%al
+ 4c5:	74 19                	je     4e0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 4c7:	89 de                	mov    %ebx,%esi
+ 4c9:	83 c3 01             	add    $0x1,%ebx
+ 4cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4cf:	7c cf                	jl     4a0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 4d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 4d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4db:	5b                   	pop    %ebx
+ 4dc:	5e                   	pop    %esi
+ 4dd:	5f                   	pop    %edi
+ 4de:	5d                   	pop    %ebp
+ 4df:	c3                   	ret    
+  buf[i] = '\0';
+ 4e0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4e3:	89 de                	mov    %ebx,%esi
+ 4e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 4e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ec:	5b                   	pop    %ebx
+ 4ed:	5e                   	pop    %esi
+ 4ee:	5f                   	pop    %edi
+ 4ef:	5d                   	pop    %ebp
+ 4f0:	c3                   	ret    
+ 4f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+
+00000500 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 500:	55                   	push   %ebp
+ 501:	89 e5                	mov    %esp,%ebp
+ 503:	56                   	push   %esi
+ 504:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 505:	83 ec 08             	sub    $0x8,%esp
+ 508:	6a 00                	push   $0x0
+ 50a:	ff 75 08             	push   0x8(%ebp)
+ 50d:	e8 f1 00 00 00       	call   603 <open>
+  if(fd < 0)
+ 512:	83 c4 10             	add    $0x10,%esp
+ 515:	85 c0                	test   %eax,%eax
+ 517:	78 27                	js     540 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 519:	83 ec 08             	sub    $0x8,%esp
+ 51c:	ff 75 0c             	push   0xc(%ebp)
+ 51f:	89 c3                	mov    %eax,%ebx
+ 521:	50                   	push   %eax
+ 522:	e8 f4 00 00 00       	call   61b <fstat>
+  close(fd);
+ 527:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 52a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 52c:	e8 ba 00 00 00       	call   5eb <close>
+  return r;
+ 531:	83 c4 10             	add    $0x10,%esp
+}
+ 534:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 537:	89 f0                	mov    %esi,%eax
+ 539:	5b                   	pop    %ebx
+ 53a:	5e                   	pop    %esi
+ 53b:	5d                   	pop    %ebp
+ 53c:	c3                   	ret    
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 540:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 545:	eb ed                	jmp    534 <stat+0x34>
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
+
+00000550 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	53                   	push   %ebx
+ 554:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 557:	0f be 02             	movsbl (%edx),%eax
+ 55a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 55d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 560:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 565:	77 1e                	ja     585 <atoi+0x35>
+ 567:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 570:	83 c2 01             	add    $0x1,%edx
+ 573:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 576:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 57a:	0f be 02             	movsbl (%edx),%eax
+ 57d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 580:	80 fb 09             	cmp    $0x9,%bl
+ 583:	76 eb                	jbe    570 <atoi+0x20>
+  return n;
+}
+ 585:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 588:	89 c8                	mov    %ecx,%eax
+ 58a:	c9                   	leave  
+ 58b:	c3                   	ret    
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000590 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 590:	55                   	push   %ebp
+ 591:	89 e5                	mov    %esp,%ebp
+ 593:	57                   	push   %edi
+ 594:	8b 45 10             	mov    0x10(%ebp),%eax
+ 597:	8b 55 08             	mov    0x8(%ebp),%edx
+ 59a:	56                   	push   %esi
+ 59b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 59e:	85 c0                	test   %eax,%eax
+ 5a0:	7e 13                	jle    5b5 <memmove+0x25>
+ 5a2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 5a4:	89 d7                	mov    %edx,%edi
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 5b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 5b1:	39 f8                	cmp    %edi,%eax
+ 5b3:	75 fb                	jne    5b0 <memmove+0x20>
+  return vdst;
+}
+ 5b5:	5e                   	pop    %esi
+ 5b6:	89 d0                	mov    %edx,%eax
+ 5b8:	5f                   	pop    %edi
+ 5b9:	5d                   	pop    %ebp
+ 5ba:	c3                   	ret    
+
+000005bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 5bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <exit>:
+SYSCALL(exit)
+ 5c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <wait>:
+SYSCALL(wait)
+ 5cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <pipe>:
+SYSCALL(pipe)
+ 5d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <read>:
+SYSCALL(read)
+ 5db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <write>:
+SYSCALL(write)
+ 5e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <close>:
+SYSCALL(close)
+ 5eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <kill>:
+SYSCALL(kill)
+ 5f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <exec>:
+SYSCALL(exec)
+ 5fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <open>:
+SYSCALL(open)
+ 603:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mknod>:
+SYSCALL(mknod)
+ 60b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <unlink>:
+SYSCALL(unlink)
+ 613:	b8 12 00 00 00       	mov    $0x12,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <fstat>:
+SYSCALL(fstat)
+ 61b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <link>:
+SYSCALL(link)
+ 623:	b8 13 00 00 00       	mov    $0x13,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <mkdir>:
+SYSCALL(mkdir)
+ 62b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <chdir>:
+SYSCALL(chdir)
+ 633:	b8 09 00 00 00       	mov    $0x9,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <dup>:
+SYSCALL(dup)
+ 63b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getpid>:
+SYSCALL(getpid)
+ 643:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <sbrk>:
+SYSCALL(sbrk)
+ 64b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <sleep>:
+SYSCALL(sleep)
+ 653:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <uptime>:
+SYSCALL(uptime)
+ 65b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+ 663:	66 90                	xchg   %ax,%ax
+ 665:	66 90                	xchg   %ax,%ax
+ 667:	66 90                	xchg   %ax,%ax
+ 669:	66 90                	xchg   %ax,%ax
+ 66b:	66 90                	xchg   %ax,%ax
+ 66d:	66 90                	xchg   %ax,%ax
+ 66f:	90                   	nop
+
+00000670 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 3c             	sub    $0x3c,%esp
+ 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 67c:	89 d1                	mov    %edx,%ecx
+{
+ 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 681:	85 d2                	test   %edx,%edx
+ 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
+ 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 68d:	74 79                	je     708 <printint+0x98>
+    neg = 1;
+ 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 696:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 698:	31 db                	xor    %ebx,%ebx
+ 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 69d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	89 c8                	mov    %ecx,%eax
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	89 cf                	mov    %ecx,%edi
+ 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6a9:	0f b6 92 e0 0a 00 00 	movzbl 0xae0(%edx),%edx
+ 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6b3:	89 d8                	mov    %ebx,%eax
+ 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6c1:	76 dd                	jbe    6a0 <printint+0x30>
+  if(neg)
+ 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6c6:	85 c9                	test   %ecx,%ecx
+ 6c8:	74 0c                	je     6d6 <printint+0x66>
+    buf[i++] = '-';
+ 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6dd:	eb 07                	jmp    6e6 <printint+0x76>
+ 6df:	90                   	nop
+    putc(fd, buf[i]);
+ 6e0:	0f b6 13             	movzbl (%ebx),%edx
+ 6e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6e6:	83 ec 04             	sub    $0x4,%esp
+ 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6ec:	6a 01                	push   $0x1
+ 6ee:	56                   	push   %esi
+ 6ef:	57                   	push   %edi
+ 6f0:	e8 ee fe ff ff       	call   5e3 <write>
+  while(--i >= 0)
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	39 de                	cmp    %ebx,%esi
+ 6fa:	75 e4                	jne    6e0 <printint+0x70>
+}
+ 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ff:	5b                   	pop    %ebx
+ 700:	5e                   	pop    %esi
+ 701:	5f                   	pop    %edi
+ 702:	5d                   	pop    %ebp
+ 703:	c3                   	ret    
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 70f:	eb 87                	jmp    698 <printint+0x28>
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+
+00000720 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 720:	55                   	push   %ebp
+ 721:	89 e5                	mov    %esp,%ebp
+ 723:	57                   	push   %edi
+ 724:	56                   	push   %esi
+ 725:	53                   	push   %ebx
+ 726:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 729:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 72c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 72f:	0f b6 13             	movzbl (%ebx),%edx
+ 732:	84 d2                	test   %dl,%dl
+ 734:	74 6a                	je     7a0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 736:	8d 45 10             	lea    0x10(%ebp),%eax
+ 739:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 73c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 73f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 741:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 744:	eb 36                	jmp    77c <printf+0x5c>
+ 746:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74d:	8d 76 00             	lea    0x0(%esi),%esi
+ 750:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 753:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	74 15                	je     772 <printf+0x52>
+  write(fd, &c, 1);
+ 75d:	83 ec 04             	sub    $0x4,%esp
+ 760:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 763:	6a 01                	push   $0x1
+ 765:	57                   	push   %edi
+ 766:	56                   	push   %esi
+ 767:	e8 77 fe ff ff       	call   5e3 <write>
+ 76c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 76f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 772:	0f b6 13             	movzbl (%ebx),%edx
+ 775:	83 c3 01             	add    $0x1,%ebx
+ 778:	84 d2                	test   %dl,%dl
+ 77a:	74 24                	je     7a0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 77c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 77f:	85 c9                	test   %ecx,%ecx
+ 781:	74 cd                	je     750 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 783:	83 f9 25             	cmp    $0x25,%ecx
+ 786:	75 ea                	jne    772 <printf+0x52>
+      if(c == 'd'){
+ 788:	83 f8 25             	cmp    $0x25,%eax
+ 78b:	0f 84 07 01 00 00    	je     898 <printf+0x178>
+ 791:	83 e8 63             	sub    $0x63,%eax
+ 794:	83 f8 15             	cmp    $0x15,%eax
+ 797:	77 17                	ja     7b0 <printf+0x90>
+ 799:	ff 24 85 88 0a 00 00 	jmp    *0xa88(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 7a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7a3:	5b                   	pop    %ebx
+ 7a4:	5e                   	pop    %esi
+ 7a5:	5f                   	pop    %edi
+ 7a6:	5d                   	pop    %ebp
+ 7a7:	c3                   	ret    
+ 7a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7af:	90                   	nop
+  write(fd, &c, 1);
+ 7b0:	83 ec 04             	sub    $0x4,%esp
+ 7b3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 7b6:	6a 01                	push   $0x1
+ 7b8:	57                   	push   %edi
+ 7b9:	56                   	push   %esi
+ 7ba:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7be:	e8 20 fe ff ff       	call   5e3 <write>
+        putc(fd, c);
+ 7c3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 7c7:	83 c4 0c             	add    $0xc,%esp
+ 7ca:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7cd:	6a 01                	push   $0x1
+ 7cf:	57                   	push   %edi
+ 7d0:	56                   	push   %esi
+ 7d1:	e8 0d fe ff ff       	call   5e3 <write>
+        putc(fd, c);
+ 7d6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7d9:	31 c9                	xor    %ecx,%ecx
+ 7db:	eb 95                	jmp    772 <printf+0x52>
+ 7dd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 7e0:	83 ec 0c             	sub    $0xc,%esp
+ 7e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7e8:	6a 00                	push   $0x0
+ 7ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7ed:	8b 10                	mov    (%eax),%edx
+ 7ef:	89 f0                	mov    %esi,%eax
+ 7f1:	e8 7a fe ff ff       	call   670 <printint>
+        ap++;
+ 7f6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 7fa:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7fd:	31 c9                	xor    %ecx,%ecx
+ 7ff:	e9 6e ff ff ff       	jmp    772 <printf+0x52>
+ 804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 808:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 80b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 80d:	83 c0 04             	add    $0x4,%eax
+ 810:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 813:	85 d2                	test   %edx,%edx
+ 815:	0f 84 8d 00 00 00    	je     8a8 <printf+0x188>
+        while(*s != 0){
+ 81b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 81e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 820:	84 c0                	test   %al,%al
+ 822:	0f 84 4a ff ff ff    	je     772 <printf+0x52>
+ 828:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 82b:	89 d3                	mov    %edx,%ebx
+ 82d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 830:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 833:	83 c3 01             	add    $0x1,%ebx
+ 836:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 839:	6a 01                	push   $0x1
+ 83b:	57                   	push   %edi
+ 83c:	56                   	push   %esi
+ 83d:	e8 a1 fd ff ff       	call   5e3 <write>
+        while(*s != 0){
+ 842:	0f b6 03             	movzbl (%ebx),%eax
+ 845:	83 c4 10             	add    $0x10,%esp
+ 848:	84 c0                	test   %al,%al
+ 84a:	75 e4                	jne    830 <printf+0x110>
+      state = 0;
+ 84c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 84f:	31 c9                	xor    %ecx,%ecx
+ 851:	e9 1c ff ff ff       	jmp    772 <printf+0x52>
+ 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 860:	83 ec 0c             	sub    $0xc,%esp
+ 863:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 868:	6a 01                	push   $0x1
+ 86a:	e9 7b ff ff ff       	jmp    7ea <printf+0xca>
+ 86f:	90                   	nop
+        putc(fd, *ap);
+ 870:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 873:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 876:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 878:	6a 01                	push   $0x1
+ 87a:	57                   	push   %edi
+ 87b:	56                   	push   %esi
+        putc(fd, *ap);
+ 87c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 87f:	e8 5f fd ff ff       	call   5e3 <write>
+        ap++;
+ 884:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 888:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 88b:	31 c9                	xor    %ecx,%ecx
+ 88d:	e9 e0 fe ff ff       	jmp    772 <printf+0x52>
+ 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 898:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 89b:	83 ec 04             	sub    $0x4,%esp
+ 89e:	e9 2a ff ff ff       	jmp    7cd <printf+0xad>
+ 8a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8a7:	90                   	nop
+          s = "(null)";
+ 8a8:	ba 7e 0a 00 00       	mov    $0xa7e,%edx
+        while(*s != 0){
+ 8ad:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 8b0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8b5:	89 d3                	mov    %edx,%ebx
+ 8b7:	e9 74 ff ff ff       	jmp    830 <printf+0x110>
+ 8bc:	66 90                	xchg   %ax,%ax
+ 8be:	66 90                	xchg   %ax,%ax
+
+000008c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8c1:	a1 80 12 00 00       	mov    0x1280,%eax
+{
+ 8c6:	89 e5                	mov    %esp,%ebp
+ 8c8:	57                   	push   %edi
+ 8c9:	56                   	push   %esi
+ 8ca:	53                   	push   %ebx
+ 8cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 8ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8d8:	89 c2                	mov    %eax,%edx
+ 8da:	8b 00                	mov    (%eax),%eax
+ 8dc:	39 ca                	cmp    %ecx,%edx
+ 8de:	73 30                	jae    910 <free+0x50>
+ 8e0:	39 c1                	cmp    %eax,%ecx
+ 8e2:	72 04                	jb     8e8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8e4:	39 c2                	cmp    %eax,%edx
+ 8e6:	72 f0                	jb     8d8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8ee:	39 f8                	cmp    %edi,%eax
+ 8f0:	74 30                	je     922 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8f2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 8f5:	8b 42 04             	mov    0x4(%edx),%eax
+ 8f8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 8fb:	39 f1                	cmp    %esi,%ecx
+ 8fd:	74 3a                	je     939 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 8ff:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 901:	5b                   	pop    %ebx
+  freep = p;
+ 902:	89 15 80 12 00 00    	mov    %edx,0x1280
+}
+ 908:	5e                   	pop    %esi
+ 909:	5f                   	pop    %edi
+ 90a:	5d                   	pop    %ebp
+ 90b:	c3                   	ret    
+ 90c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 910:	39 c2                	cmp    %eax,%edx
+ 912:	72 c4                	jb     8d8 <free+0x18>
+ 914:	39 c1                	cmp    %eax,%ecx
+ 916:	73 c0                	jae    8d8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 918:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 91b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 91e:	39 f8                	cmp    %edi,%eax
+ 920:	75 d0                	jne    8f2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 922:	03 70 04             	add    0x4(%eax),%esi
+ 925:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 928:	8b 02                	mov    (%edx),%eax
+ 92a:	8b 00                	mov    (%eax),%eax
+ 92c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 92f:	8b 42 04             	mov    0x4(%edx),%eax
+ 932:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 935:	39 f1                	cmp    %esi,%ecx
+ 937:	75 c6                	jne    8ff <free+0x3f>
+    p->s.size += bp->s.size;
+ 939:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 93c:	89 15 80 12 00 00    	mov    %edx,0x1280
+    p->s.size += bp->s.size;
+ 942:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 945:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 948:	89 0a                	mov    %ecx,(%edx)
+}
+ 94a:	5b                   	pop    %ebx
+ 94b:	5e                   	pop    %esi
+ 94c:	5f                   	pop    %edi
+ 94d:	5d                   	pop    %ebp
+ 94e:	c3                   	ret    
+ 94f:	90                   	nop
+
+00000950 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 950:	55                   	push   %ebp
+ 951:	89 e5                	mov    %esp,%ebp
+ 953:	57                   	push   %edi
+ 954:	56                   	push   %esi
+ 955:	53                   	push   %ebx
+ 956:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 959:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 95c:	8b 3d 80 12 00 00    	mov    0x1280,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 962:	8d 70 07             	lea    0x7(%eax),%esi
+ 965:	c1 ee 03             	shr    $0x3,%esi
+ 968:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 96b:	85 ff                	test   %edi,%edi
+ 96d:	0f 84 9d 00 00 00    	je     a10 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 973:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 975:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 978:	39 f1                	cmp    %esi,%ecx
+ 97a:	73 6a                	jae    9e6 <malloc+0x96>
+ 97c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 981:	39 de                	cmp    %ebx,%esi
+ 983:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 986:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 98d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 990:	eb 17                	jmp    9a9 <malloc+0x59>
+ 992:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 998:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 99a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 99d:	39 f1                	cmp    %esi,%ecx
+ 99f:	73 4f                	jae    9f0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9a1:	8b 3d 80 12 00 00    	mov    0x1280,%edi
+ 9a7:	89 c2                	mov    %eax,%edx
+ 9a9:	39 d7                	cmp    %edx,%edi
+ 9ab:	75 eb                	jne    998 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 9ad:	83 ec 0c             	sub    $0xc,%esp
+ 9b0:	ff 75 e4             	push   -0x1c(%ebp)
+ 9b3:	e8 93 fc ff ff       	call   64b <sbrk>
+  if(p == (char*)-1)
+ 9b8:	83 c4 10             	add    $0x10,%esp
+ 9bb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9be:	74 1c                	je     9dc <malloc+0x8c>
+  hp->s.size = nu;
+ 9c0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9c3:	83 ec 0c             	sub    $0xc,%esp
+ 9c6:	83 c0 08             	add    $0x8,%eax
+ 9c9:	50                   	push   %eax
+ 9ca:	e8 f1 fe ff ff       	call   8c0 <free>
+  return freep;
+ 9cf:	8b 15 80 12 00 00    	mov    0x1280,%edx
+      if((p = morecore(nunits)) == 0)
+ 9d5:	83 c4 10             	add    $0x10,%esp
+ 9d8:	85 d2                	test   %edx,%edx
+ 9da:	75 bc                	jne    998 <malloc+0x48>
+        return 0;
+  }
+}
+ 9dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9df:	31 c0                	xor    %eax,%eax
+}
+ 9e1:	5b                   	pop    %ebx
+ 9e2:	5e                   	pop    %esi
+ 9e3:	5f                   	pop    %edi
+ 9e4:	5d                   	pop    %ebp
+ 9e5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 9e6:	89 d0                	mov    %edx,%eax
+ 9e8:	89 fa                	mov    %edi,%edx
+ 9ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 9f0:	39 ce                	cmp    %ecx,%esi
+ 9f2:	74 4c                	je     a40 <malloc+0xf0>
+        p->s.size -= nunits;
+ 9f4:	29 f1                	sub    %esi,%ecx
+ 9f6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 9f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 9fc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 9ff:	89 15 80 12 00 00    	mov    %edx,0x1280
+}
+ a05:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a08:	83 c0 08             	add    $0x8,%eax
+}
+ a0b:	5b                   	pop    %ebx
+ a0c:	5e                   	pop    %esi
+ a0d:	5f                   	pop    %edi
+ a0e:	5d                   	pop    %ebp
+ a0f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ a10:	c7 05 80 12 00 00 84 	movl   $0x1284,0x1280
+ a17:	12 00 00 
+    base.s.size = 0;
+ a1a:	bf 84 12 00 00       	mov    $0x1284,%edi
+    base.s.ptr = freep = prevp = &base;
+ a1f:	c7 05 84 12 00 00 84 	movl   $0x1284,0x1284
+ a26:	12 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a29:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ a2b:	c7 05 88 12 00 00 00 	movl   $0x0,0x1288
+ a32:	00 00 00 
+    if(p->s.size >= nunits){
+ a35:	e9 42 ff ff ff       	jmp    97c <malloc+0x2c>
+ a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a40:	8b 08                	mov    (%eax),%ecx
+ a42:	89 0a                	mov    %ecx,(%edx)
+ a44:	eb b9                	jmp    9ff <malloc+0xaf>
diff -ruN xv6-public/grep.d xv6-publica/grep.d
--- xv6-public/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/grep.d	2024-10-15 10:58:37.457888474 +0530
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/grep.o and xv6-publica/grep.o differ
diff -ruN xv6-public/grep.sym xv6-publica/grep.sym
--- xv6-public/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/grep.sym	2024-10-15 10:58:37.497888473 +0530
@@ -0,0 +1,50 @@
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000670 printint
+00000ae0 digits.0
+00000000 umalloc.c
+00001280 freep
+00001284 base
+00000370 strcpy
+00000720 printf
+00000590 memmove
+000000c0 matchhere
+0000060b mknod
+00000490 gets
+00000643 getpid
+000001d0 grep
+00000950 malloc
+00000653 sleep
+000005d3 pipe
+000005e3 write
+0000061b fstat
+000005f3 kill
+00000633 chdir
+000005fb exec
+000005cb wait
+000005db read
+00000613 unlink
+000005bb fork
+0000064b sbrk
+0000065b uptime
+00000e80 __bss_start
+00000430 memset
+00000000 main
+00000310 matchstar
+000003a0 strcmp
+0000063b dup
+00000e80 buf
+00000500 stat
+00000e80 _edata
+0000128c _end
+00000170 match
+00000623 link
+000005c3 exit
+00000550 atoi
+00000400 strlen
+00000603 open
+00000450 strchr
+0000062b mkdir
+000005eb close
+000008c0 free
diff -ruN xv6-public/ide.d xv6-publica/ide.d
--- xv6-public/ide.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ide.d	2024-10-15 10:58:39.487888517 +0530
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files xv6-public/ide.o and xv6-publica/ide.o differ
diff -ruN xv6-public/init.asm xv6-publica/init.asm
--- xv6-public/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/init.asm	2024-10-15 10:58:37.567888471 +0530
@@ -0,0 +1,1211 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   f:	83 ec 08             	sub    $0x8,%esp
+  12:	6a 02                	push   $0x2
+  14:	68 c8 07 00 00       	push   $0x7c8
+  19:	e8 65 03 00 00       	call   383 <open>
+  1e:	83 c4 10             	add    $0x10,%esp
+  21:	85 c0                	test   %eax,%eax
+  23:	0f 88 9f 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  29:	83 ec 0c             	sub    $0xc,%esp
+  2c:	6a 00                	push   $0x0
+  2e:	e8 88 03 00 00       	call   3bb <dup>
+  dup(0);  // stderr
+  33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3a:	e8 7c 03 00 00       	call   3bb <dup>
+  3f:	83 c4 10             	add    $0x10,%esp
+  42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  48:	83 ec 08             	sub    $0x8,%esp
+  4b:	68 d0 07 00 00       	push   $0x7d0
+  50:	6a 01                	push   $0x1
+  52:	e8 49 04 00 00       	call   4a0 <printf>
+    pid = fork();
+  57:	e8 df 02 00 00       	call   33b <fork>
+    if(pid < 0){
+  5c:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  5f:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  61:	85 c0                	test   %eax,%eax
+  63:	78 2c                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  65:	74 3d                	je     a4 <main+0xa4>
+  67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6e:	66 90                	xchg   %ax,%ax
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 d6 02 00 00       	call   34b <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 cf                	js     48 <main+0x48>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 cb                	je     48 <main+0x48>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 0f 08 00 00       	push   $0x80f
+  85:	6a 01                	push   $0x1
+  87:	e8 14 04 00 00       	call   4a0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 e3 07 00 00       	push   $0x7e3
+  98:	6a 01                	push   $0x1
+  9a:	e8 01 04 00 00       	call   4a0 <printf>
+      exit();
+  9f:	e8 9f 02 00 00       	call   343 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 24 0b 00 00       	push   $0xb24
+  ab:	68 f6 07 00 00       	push   $0x7f6
+  b0:	e8 c6 02 00 00       	call   37b <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 f9 07 00 00       	push   $0x7f9
+  bc:	6a 01                	push   $0x1
+  be:	e8 dd 03 00 00       	call   4a0 <printf>
+      exit();
+  c3:	e8 7b 02 00 00       	call   343 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 c8 07 00 00       	push   $0x7c8
+  d2:	e8 b4 02 00 00       	call   38b <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 c8 07 00 00       	push   $0x7c8
+  e0:	e8 9e 02 00 00       	call   383 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f1:	31 c0                	xor    %eax,%eax
+{
+  f3:	89 e5                	mov    %esp,%ebp
+  f5:	53                   	push   %ebx
+  f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 107:	83 c0 01             	add    $0x1,%eax
+ 10a:	84 d2                	test   %dl,%dl
+ 10c:	75 f2                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 10e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 111:	89 c8                	mov    %ecx,%eax
+ 113:	c9                   	leave  
+ 114:	c3                   	ret    
+ 115:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	53                   	push   %ebx
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+ 127:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 12a:	0f b6 02             	movzbl (%edx),%eax
+ 12d:	84 c0                	test   %al,%al
+ 12f:	75 17                	jne    148 <strcmp+0x28>
+ 131:	eb 3a                	jmp    16d <strcmp+0x4d>
+ 133:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 137:	90                   	nop
+ 138:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 13c:	83 c2 01             	add    $0x1,%edx
+ 13f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 142:	84 c0                	test   %al,%al
+ 144:	74 1a                	je     160 <strcmp+0x40>
+    p++, q++;
+ 146:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 148:	0f b6 19             	movzbl (%ecx),%ebx
+ 14b:	38 c3                	cmp    %al,%bl
+ 14d:	74 e9                	je     138 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 14f:	29 d8                	sub    %ebx,%eax
+}
+ 151:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 154:	c9                   	leave  
+ 155:	c3                   	ret    
+ 156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 160:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 164:	31 c0                	xor    %eax,%eax
+ 166:	29 d8                	sub    %ebx,%eax
+}
+ 168:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 16b:	c9                   	leave  
+ 16c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 16d:	0f b6 19             	movzbl (%ecx),%ebx
+ 170:	31 c0                	xor    %eax,%eax
+ 172:	eb db                	jmp    14f <strcmp+0x2f>
+ 174:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+
+00000180 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 186:	80 3a 00             	cmpb   $0x0,(%edx)
+ 189:	74 15                	je     1a0 <strlen+0x20>
+ 18b:	31 c0                	xor    %eax,%eax
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+ 190:	83 c0 01             	add    $0x1,%eax
+ 193:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 197:	89 c1                	mov    %eax,%ecx
+ 199:	75 f5                	jne    190 <strlen+0x10>
+    ;
+  return n;
+}
+ 19b:	89 c8                	mov    %ecx,%eax
+ 19d:	5d                   	pop    %ebp
+ 19e:	c3                   	ret    
+ 19f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1a0:	31 c9                	xor    %ecx,%ecx
+}
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	89 c8                	mov    %ecx,%eax
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001b0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	57                   	push   %edi
+ 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1bd:	89 d7                	mov    %edx,%edi
+ 1bf:	fc                   	cld    
+ 1c0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1c2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 1c5:	89 d0                	mov    %edx,%eax
+ 1c7:	c9                   	leave  
+ 1c8:	c3                   	ret    
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001d0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1da:	0f b6 10             	movzbl (%eax),%edx
+ 1dd:	84 d2                	test   %dl,%dl
+ 1df:	75 12                	jne    1f3 <strchr+0x23>
+ 1e1:	eb 1d                	jmp    200 <strchr+0x30>
+ 1e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e7:	90                   	nop
+ 1e8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1ec:	83 c0 01             	add    $0x1,%eax
+ 1ef:	84 d2                	test   %dl,%dl
+ 1f1:	74 0d                	je     200 <strchr+0x30>
+    if(*s == c)
+ 1f3:	38 d1                	cmp    %dl,%cl
+ 1f5:	75 f1                	jne    1e8 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 1f7:	5d                   	pop    %ebp
+ 1f8:	c3                   	ret    
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 200:	31 c0                	xor    %eax,%eax
+}
+ 202:	5d                   	pop    %ebp
+ 203:	c3                   	ret    
+ 204:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	57                   	push   %edi
+ 214:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 215:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 218:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 219:	31 db                	xor    %ebx,%ebx
+{
+ 21b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 21e:	eb 27                	jmp    247 <gets+0x37>
+    cc = read(0, &c, 1);
+ 220:	83 ec 04             	sub    $0x4,%esp
+ 223:	6a 01                	push   $0x1
+ 225:	57                   	push   %edi
+ 226:	6a 00                	push   $0x0
+ 228:	e8 2e 01 00 00       	call   35b <read>
+    if(cc < 1)
+ 22d:	83 c4 10             	add    $0x10,%esp
+ 230:	85 c0                	test   %eax,%eax
+ 232:	7e 1d                	jle    251 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 234:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 238:	8b 55 08             	mov    0x8(%ebp),%edx
+ 23b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 23f:	3c 0a                	cmp    $0xa,%al
+ 241:	74 1d                	je     260 <gets+0x50>
+ 243:	3c 0d                	cmp    $0xd,%al
+ 245:	74 19                	je     260 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 247:	89 de                	mov    %ebx,%esi
+ 249:	83 c3 01             	add    $0x1,%ebx
+ 24c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 24f:	7c cf                	jl     220 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 251:	8b 45 08             	mov    0x8(%ebp),%eax
+ 254:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 258:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 25b:	5b                   	pop    %ebx
+ 25c:	5e                   	pop    %esi
+ 25d:	5f                   	pop    %edi
+ 25e:	5d                   	pop    %ebp
+ 25f:	c3                   	ret    
+  buf[i] = '\0';
+ 260:	8b 45 08             	mov    0x8(%ebp),%eax
+ 263:	89 de                	mov    %ebx,%esi
+ 265:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 269:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 26c:	5b                   	pop    %ebx
+ 26d:	5e                   	pop    %esi
+ 26e:	5f                   	pop    %edi
+ 26f:	5d                   	pop    %ebp
+ 270:	c3                   	ret    
+ 271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+
+00000280 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 285:	83 ec 08             	sub    $0x8,%esp
+ 288:	6a 00                	push   $0x0
+ 28a:	ff 75 08             	push   0x8(%ebp)
+ 28d:	e8 f1 00 00 00       	call   383 <open>
+  if(fd < 0)
+ 292:	83 c4 10             	add    $0x10,%esp
+ 295:	85 c0                	test   %eax,%eax
+ 297:	78 27                	js     2c0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	ff 75 0c             	push   0xc(%ebp)
+ 29f:	89 c3                	mov    %eax,%ebx
+ 2a1:	50                   	push   %eax
+ 2a2:	e8 f4 00 00 00       	call   39b <fstat>
+  close(fd);
+ 2a7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2aa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2ac:	e8 ba 00 00 00       	call   36b <close>
+  return r;
+ 2b1:	83 c4 10             	add    $0x10,%esp
+}
+ 2b4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2b7:	89 f0                	mov    %esi,%eax
+ 2b9:	5b                   	pop    %ebx
+ 2ba:	5e                   	pop    %esi
+ 2bb:	5d                   	pop    %ebp
+ 2bc:	c3                   	ret    
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2c0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2c5:	eb ed                	jmp    2b4 <stat+0x34>
+ 2c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ce:	66 90                	xchg   %ax,%ax
+
+000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	53                   	push   %ebx
+ 2d4:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2d7:	0f be 02             	movsbl (%edx),%eax
+ 2da:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2dd:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2e0:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2e5:	77 1e                	ja     305 <atoi+0x35>
+ 2e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ee:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 2f0:	83 c2 01             	add    $0x1,%edx
+ 2f3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2f6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2fa:	0f be 02             	movsbl (%edx),%eax
+ 2fd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 300:	80 fb 09             	cmp    $0x9,%bl
+ 303:	76 eb                	jbe    2f0 <atoi+0x20>
+  return n;
+}
+ 305:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 308:	89 c8                	mov    %ecx,%eax
+ 30a:	c9                   	leave  
+ 30b:	c3                   	ret    
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	8b 45 10             	mov    0x10(%ebp),%eax
+ 317:	8b 55 08             	mov    0x8(%ebp),%edx
+ 31a:	56                   	push   %esi
+ 31b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 31e:	85 c0                	test   %eax,%eax
+ 320:	7e 13                	jle    335 <memmove+0x25>
+ 322:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 324:	89 d7                	mov    %edx,%edi
+ 326:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 330:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 331:	39 f8                	cmp    %edi,%eax
+ 333:	75 fb                	jne    330 <memmove+0x20>
+  return vdst;
+}
+ 335:	5e                   	pop    %esi
+ 336:	89 d0                	mov    %edx,%eax
+ 338:	5f                   	pop    %edi
+ 339:	5d                   	pop    %ebp
+ 33a:	c3                   	ret    
+
+0000033b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 33b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <exit>:
+SYSCALL(exit)
+ 343:	b8 02 00 00 00       	mov    $0x2,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <wait>:
+SYSCALL(wait)
+ 34b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <pipe>:
+SYSCALL(pipe)
+ 353:	b8 04 00 00 00       	mov    $0x4,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <read>:
+SYSCALL(read)
+ 35b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <write>:
+SYSCALL(write)
+ 363:	b8 10 00 00 00       	mov    $0x10,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <close>:
+SYSCALL(close)
+ 36b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <kill>:
+SYSCALL(kill)
+ 373:	b8 06 00 00 00       	mov    $0x6,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <exec>:
+SYSCALL(exec)
+ 37b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <open>:
+SYSCALL(open)
+ 383:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <mknod>:
+SYSCALL(mknod)
+ 38b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <unlink>:
+SYSCALL(unlink)
+ 393:	b8 12 00 00 00       	mov    $0x12,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <fstat>:
+SYSCALL(fstat)
+ 39b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <link>:
+SYSCALL(link)
+ 3a3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <mkdir>:
+SYSCALL(mkdir)
+ 3ab:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <chdir>:
+SYSCALL(chdir)
+ 3b3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <dup>:
+SYSCALL(dup)
+ 3bb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getpid>:
+SYSCALL(getpid)
+ 3c3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <sbrk>:
+SYSCALL(sbrk)
+ 3cb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <sleep>:
+SYSCALL(sleep)
+ 3d3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <uptime>:
+SYSCALL(uptime)
+ 3db:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+ 3e3:	66 90                	xchg   %ax,%ax
+ 3e5:	66 90                	xchg   %ax,%ax
+ 3e7:	66 90                	xchg   %ax,%ax
+ 3e9:	66 90                	xchg   %ax,%ax
+ 3eb:	66 90                	xchg   %ax,%ax
+ 3ed:	66 90                	xchg   %ax,%ax
+ 3ef:	90                   	nop
+
+000003f0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 3c             	sub    $0x3c,%esp
+ 3f9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3fc:	89 d1                	mov    %edx,%ecx
+{
+ 3fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 401:	85 d2                	test   %edx,%edx
+ 403:	0f 89 7f 00 00 00    	jns    488 <printint+0x98>
+ 409:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 40d:	74 79                	je     488 <printint+0x98>
+    neg = 1;
+ 40f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 416:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 418:	31 db                	xor    %ebx,%ebx
+ 41a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 420:	89 c8                	mov    %ecx,%eax
+ 422:	31 d2                	xor    %edx,%edx
+ 424:	89 cf                	mov    %ecx,%edi
+ 426:	f7 75 c4             	divl   -0x3c(%ebp)
+ 429:	0f b6 92 78 08 00 00 	movzbl 0x878(%edx),%edx
+ 430:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 433:	89 d8                	mov    %ebx,%eax
+ 435:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 438:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 43b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 43e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 441:	76 dd                	jbe    420 <printint+0x30>
+  if(neg)
+ 443:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 446:	85 c9                	test   %ecx,%ecx
+ 448:	74 0c                	je     456 <printint+0x66>
+    buf[i++] = '-';
+ 44a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 44f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 451:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 456:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 459:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 45d:	eb 07                	jmp    466 <printint+0x76>
+ 45f:	90                   	nop
+    putc(fd, buf[i]);
+ 460:	0f b6 13             	movzbl (%ebx),%edx
+ 463:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 466:	83 ec 04             	sub    $0x4,%esp
+ 469:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 46c:	6a 01                	push   $0x1
+ 46e:	56                   	push   %esi
+ 46f:	57                   	push   %edi
+ 470:	e8 ee fe ff ff       	call   363 <write>
+  while(--i >= 0)
+ 475:	83 c4 10             	add    $0x10,%esp
+ 478:	39 de                	cmp    %ebx,%esi
+ 47a:	75 e4                	jne    460 <printint+0x70>
+}
+ 47c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 47f:	5b                   	pop    %ebx
+ 480:	5e                   	pop    %esi
+ 481:	5f                   	pop    %edi
+ 482:	5d                   	pop    %ebp
+ 483:	c3                   	ret    
+ 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 488:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 48f:	eb 87                	jmp    418 <printint+0x28>
+ 491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+
+000004a0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	57                   	push   %edi
+ 4a4:	56                   	push   %esi
+ 4a5:	53                   	push   %ebx
+ 4a6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4a9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 4ac:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 4af:	0f b6 13             	movzbl (%ebx),%edx
+ 4b2:	84 d2                	test   %dl,%dl
+ 4b4:	74 6a                	je     520 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 4b6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4b9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 4bc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4bf:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 4c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4c4:	eb 36                	jmp    4fc <printf+0x5c>
+ 4c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4d0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4d3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	74 15                	je     4f2 <printf+0x52>
+  write(fd, &c, 1);
+ 4dd:	83 ec 04             	sub    $0x4,%esp
+ 4e0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	56                   	push   %esi
+ 4e7:	e8 77 fe ff ff       	call   363 <write>
+ 4ec:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 4ef:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4f2:	0f b6 13             	movzbl (%ebx),%edx
+ 4f5:	83 c3 01             	add    $0x1,%ebx
+ 4f8:	84 d2                	test   %dl,%dl
+ 4fa:	74 24                	je     520 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 4fc:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 4ff:	85 c9                	test   %ecx,%ecx
+ 501:	74 cd                	je     4d0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 503:	83 f9 25             	cmp    $0x25,%ecx
+ 506:	75 ea                	jne    4f2 <printf+0x52>
+      if(c == 'd'){
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	0f 84 07 01 00 00    	je     618 <printf+0x178>
+ 511:	83 e8 63             	sub    $0x63,%eax
+ 514:	83 f8 15             	cmp    $0x15,%eax
+ 517:	77 17                	ja     530 <printf+0x90>
+ 519:	ff 24 85 20 08 00 00 	jmp    *0x820(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 520:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 523:	5b                   	pop    %ebx
+ 524:	5e                   	pop    %esi
+ 525:	5f                   	pop    %edi
+ 526:	5d                   	pop    %ebp
+ 527:	c3                   	ret    
+ 528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52f:	90                   	nop
+  write(fd, &c, 1);
+ 530:	83 ec 04             	sub    $0x4,%esp
+ 533:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 536:	6a 01                	push   $0x1
+ 538:	57                   	push   %edi
+ 539:	56                   	push   %esi
+ 53a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 53e:	e8 20 fe ff ff       	call   363 <write>
+        putc(fd, c);
+ 543:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 547:	83 c4 0c             	add    $0xc,%esp
+ 54a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 54d:	6a 01                	push   $0x1
+ 54f:	57                   	push   %edi
+ 550:	56                   	push   %esi
+ 551:	e8 0d fe ff ff       	call   363 <write>
+        putc(fd, c);
+ 556:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 559:	31 c9                	xor    %ecx,%ecx
+ 55b:	eb 95                	jmp    4f2 <printf+0x52>
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 568:	6a 00                	push   $0x0
+ 56a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 56d:	8b 10                	mov    (%eax),%edx
+ 56f:	89 f0                	mov    %esi,%eax
+ 571:	e8 7a fe ff ff       	call   3f0 <printint>
+        ap++;
+ 576:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 57a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57d:	31 c9                	xor    %ecx,%ecx
+ 57f:	e9 6e ff ff ff       	jmp    4f2 <printf+0x52>
+ 584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 588:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 58b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 58d:	83 c0 04             	add    $0x4,%eax
+ 590:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 593:	85 d2                	test   %edx,%edx
+ 595:	0f 84 8d 00 00 00    	je     628 <printf+0x188>
+        while(*s != 0){
+ 59b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 59e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 5a0:	84 c0                	test   %al,%al
+ 5a2:	0f 84 4a ff ff ff    	je     4f2 <printf+0x52>
+ 5a8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5ab:	89 d3                	mov    %edx,%ebx
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5b3:	83 c3 01             	add    $0x1,%ebx
+ 5b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	57                   	push   %edi
+ 5bc:	56                   	push   %esi
+ 5bd:	e8 a1 fd ff ff       	call   363 <write>
+        while(*s != 0){
+ 5c2:	0f b6 03             	movzbl (%ebx),%eax
+ 5c5:	83 c4 10             	add    $0x10,%esp
+ 5c8:	84 c0                	test   %al,%al
+ 5ca:	75 e4                	jne    5b0 <printf+0x110>
+      state = 0;
+ 5cc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5cf:	31 c9                	xor    %ecx,%ecx
+ 5d1:	e9 1c ff ff ff       	jmp    4f2 <printf+0x52>
+ 5d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5dd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5e8:	6a 01                	push   $0x1
+ 5ea:	e9 7b ff ff ff       	jmp    56a <printf+0xca>
+ 5ef:	90                   	nop
+        putc(fd, *ap);
+ 5f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	57                   	push   %edi
+ 5fb:	56                   	push   %esi
+        putc(fd, *ap);
+ 5fc:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ff:	e8 5f fd ff ff       	call   363 <write>
+        ap++;
+ 604:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 608:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60b:	31 c9                	xor    %ecx,%ecx
+ 60d:	e9 e0 fe ff ff       	jmp    4f2 <printf+0x52>
+ 612:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 618:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 61b:	83 ec 04             	sub    $0x4,%esp
+ 61e:	e9 2a ff ff ff       	jmp    54d <printf+0xad>
+ 623:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 627:	90                   	nop
+          s = "(null)";
+ 628:	ba 18 08 00 00       	mov    $0x818,%edx
+        while(*s != 0){
+ 62d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 630:	b8 28 00 00 00       	mov    $0x28,%eax
+ 635:	89 d3                	mov    %edx,%ebx
+ 637:	e9 74 ff ff ff       	jmp    5b0 <printf+0x110>
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 640:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 641:	a1 2c 0b 00 00       	mov    0xb2c,%eax
+{
+ 646:	89 e5                	mov    %esp,%ebp
+ 648:	57                   	push   %edi
+ 649:	56                   	push   %esi
+ 64a:	53                   	push   %ebx
+ 64b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 64e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 658:	89 c2                	mov    %eax,%edx
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	39 ca                	cmp    %ecx,%edx
+ 65e:	73 30                	jae    690 <free+0x50>
+ 660:	39 c1                	cmp    %eax,%ecx
+ 662:	72 04                	jb     668 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 664:	39 c2                	cmp    %eax,%edx
+ 666:	72 f0                	jb     658 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 f8                	cmp    %edi,%eax
+ 670:	74 30                	je     6a2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 672:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 675:	8b 42 04             	mov    0x4(%edx),%eax
+ 678:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 3a                	je     6b9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 67f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+}
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 690:	39 c2                	cmp    %eax,%edx
+ 692:	72 c4                	jb     658 <free+0x18>
+ 694:	39 c1                	cmp    %eax,%ecx
+ 696:	73 c0                	jae    658 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 698:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 69b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 69e:	39 f8                	cmp    %edi,%eax
+ 6a0:	75 d0                	jne    672 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 6a2:	03 70 04             	add    0x4(%eax),%esi
+ 6a5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6a8:	8b 02                	mov    (%edx),%eax
+ 6aa:	8b 00                	mov    (%eax),%eax
+ 6ac:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6af:	8b 42 04             	mov    0x4(%edx),%eax
+ 6b2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6b5:	39 f1                	cmp    %esi,%ecx
+ 6b7:	75 c6                	jne    67f <free+0x3f>
+    p->s.size += bp->s.size;
+ 6b9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 6bc:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+    p->s.size += bp->s.size;
+ 6c2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 6c5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6c8:	89 0a                	mov    %ecx,(%edx)
+}
+ 6ca:	5b                   	pop    %ebx
+ 6cb:	5e                   	pop    %esi
+ 6cc:	5f                   	pop    %edi
+ 6cd:	5d                   	pop    %ebp
+ 6ce:	c3                   	ret    
+ 6cf:	90                   	nop
+
+000006d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d0:	55                   	push   %ebp
+ 6d1:	89 e5                	mov    %esp,%ebp
+ 6d3:	57                   	push   %edi
+ 6d4:	56                   	push   %esi
+ 6d5:	53                   	push   %ebx
+ 6d6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6dc:	8b 3d 2c 0b 00 00    	mov    0xb2c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e5:	c1 ee 03             	shr    $0x3,%esi
+ 6e8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6eb:	85 ff                	test   %edi,%edi
+ 6ed:	0f 84 9d 00 00 00    	je     790 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6f5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6f8:	39 f1                	cmp    %esi,%ecx
+ 6fa:	73 6a                	jae    766 <malloc+0x96>
+ 6fc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 701:	39 de                	cmp    %ebx,%esi
+ 703:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 706:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 70d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 710:	eb 17                	jmp    729 <malloc+0x59>
+ 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 718:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 71a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 71d:	39 f1                	cmp    %esi,%ecx
+ 71f:	73 4f                	jae    770 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	8b 3d 2c 0b 00 00    	mov    0xb2c,%edi
+ 727:	89 c2                	mov    %eax,%edx
+ 729:	39 d7                	cmp    %edx,%edi
+ 72b:	75 eb                	jne    718 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 72d:	83 ec 0c             	sub    $0xc,%esp
+ 730:	ff 75 e4             	push   -0x1c(%ebp)
+ 733:	e8 93 fc ff ff       	call   3cb <sbrk>
+  if(p == (char*)-1)
+ 738:	83 c4 10             	add    $0x10,%esp
+ 73b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 73e:	74 1c                	je     75c <malloc+0x8c>
+  hp->s.size = nu;
+ 740:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 743:	83 ec 0c             	sub    $0xc,%esp
+ 746:	83 c0 08             	add    $0x8,%eax
+ 749:	50                   	push   %eax
+ 74a:	e8 f1 fe ff ff       	call   640 <free>
+  return freep;
+ 74f:	8b 15 2c 0b 00 00    	mov    0xb2c,%edx
+      if((p = morecore(nunits)) == 0)
+ 755:	83 c4 10             	add    $0x10,%esp
+ 758:	85 d2                	test   %edx,%edx
+ 75a:	75 bc                	jne    718 <malloc+0x48>
+        return 0;
+  }
+}
+ 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 75f:	31 c0                	xor    %eax,%eax
+}
+ 761:	5b                   	pop    %ebx
+ 762:	5e                   	pop    %esi
+ 763:	5f                   	pop    %edi
+ 764:	5d                   	pop    %ebp
+ 765:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 766:	89 d0                	mov    %edx,%eax
+ 768:	89 fa                	mov    %edi,%edx
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 770:	39 ce                	cmp    %ecx,%esi
+ 772:	74 4c                	je     7c0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 774:	29 f1                	sub    %esi,%ecx
+ 776:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 779:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 77c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 77f:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+}
+ 785:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 788:	83 c0 08             	add    $0x8,%eax
+}
+ 78b:	5b                   	pop    %ebx
+ 78c:	5e                   	pop    %esi
+ 78d:	5f                   	pop    %edi
+ 78e:	5d                   	pop    %ebp
+ 78f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 2c 0b 00 00 30 	movl   $0xb30,0xb2c
+ 797:	0b 00 00 
+    base.s.size = 0;
+ 79a:	bf 30 0b 00 00       	mov    $0xb30,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 30 0b 00 00 30 	movl   $0xb30,0xb30
+ 7a6:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7ab:	c7 05 34 0b 00 00 00 	movl   $0x0,0xb34
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 42 ff ff ff       	jmp    6fc <malloc+0x2c>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 08                	mov    (%eax),%ecx
+ 7c2:	89 0a                	mov    %ecx,(%edx)
+ 7c4:	eb b9                	jmp    77f <malloc+0xaf>
diff -ruN xv6-public/init.d xv6-publica/init.d
--- xv6-public/init.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/init.d	2024-10-15 10:58:37.527888472 +0530
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files xv6-public/init.o and xv6-publica/init.o differ
diff -ruN xv6-public/init.sym xv6-publica/init.sym
--- xv6-public/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/init.sym	2024-10-15 10:58:37.567888471 +0530
@@ -0,0 +1,46 @@
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+000003f0 printint
+00000878 digits.0
+00000000 umalloc.c
+00000b2c freep
+00000b30 base
+000000f0 strcpy
+000004a0 printf
+00000b24 argv
+00000310 memmove
+0000038b mknod
+00000210 gets
+000003c3 getpid
+000006d0 malloc
+000003d3 sleep
+00000353 pipe
+00000363 write
+0000039b fstat
+00000373 kill
+000003b3 chdir
+0000037b exec
+0000034b wait
+0000035b read
+00000393 unlink
+0000033b fork
+000003cb sbrk
+000003db uptime
+00000b2c __bss_start
+000001b0 memset
+00000000 main
+00000120 strcmp
+000003bb dup
+00000280 stat
+00000b2c _edata
+00000b38 _end
+000003a3 link
+00000343 exit
+000002d0 atoi
+00000180 strlen
+00000383 open
+000001d0 strchr
+000003ab mkdir
+0000036b close
+00000640 free
Binary files xv6-public/initcode and xv6-publica/initcode differ
diff -ruN xv6-public/initcode.asm xv6-publica/initcode.asm
--- xv6-public/initcode.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/initcode.asm	2024-10-15 10:58:41.037888562 +0530
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -ruN xv6-public/initcode.d xv6-publica/initcode.d
--- xv6-public/initcode.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/initcode.d	2024-10-15 10:58:41.017888561 +0530
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files xv6-public/initcode.o and xv6-publica/initcode.o differ
Binary files xv6-public/initcode.out and xv6-publica/initcode.out differ
diff -ruN xv6-public/ioapic.d xv6-publica/ioapic.d
--- xv6-public/ioapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ioapic.d	2024-10-15 10:58:39.527888518 +0530
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files xv6-public/ioapic.o and xv6-publica/ioapic.o differ
diff -ruN xv6-public/kalloc.d xv6-publica/kalloc.d
--- xv6-public/kalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/kalloc.d	2024-10-15 10:58:39.587888520 +0530
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files xv6-public/kalloc.o and xv6-publica/kalloc.o differ
diff -ruN xv6-public/kbd.d xv6-publica/kbd.d
--- xv6-public/kbd.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/kbd.d	2024-10-15 10:58:39.627888521 +0530
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files xv6-public/kbd.o and xv6-publica/kbd.o differ
Binary files xv6-public/kernel and xv6-publica/kernel differ
diff -ruN xv6-public/kernel.asm xv6-publica/kernel.asm
--- xv6-public/kernel.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/kernel.asm	2024-10-15 10:58:41.087888563 +0530
@@ -0,0 +1,15719 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc d0 54 11 80       	mov    $0x801154d0,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 60 30 10 80       	mov    $0x80103060,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100040:	55                   	push   %ebp
+80100041:	89 e5                	mov    %esp,%ebp
+80100043:	53                   	push   %ebx
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100044:	bb 54 a5 10 80       	mov    $0x8010a554,%ebx
+{
+80100049:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&bcache.lock, "bcache");
+8010004c:	68 20 72 10 80       	push   $0x80107220
+80100051:	68 20 a5 10 80       	push   $0x8010a520
+80100056:	e8 75 43 00 00       	call   801043d0 <initlock>
+  bcache.head.next = &bcache.head;
+8010005b:	83 c4 10             	add    $0x10,%esp
+8010005e:	b8 1c ec 10 80       	mov    $0x8010ec1c,%eax
+  bcache.head.prev = &bcache.head;
+80100063:	c7 05 6c ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec6c
+8010006a:	ec 10 80 
+  bcache.head.next = &bcache.head;
+8010006d:	c7 05 70 ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec70
+80100074:	ec 10 80 
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100077:	eb 09                	jmp    80100082 <binit+0x42>
+80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100080:	89 d3                	mov    %edx,%ebx
+    b->next = bcache.head.next;
+80100082:	89 43 54             	mov    %eax,0x54(%ebx)
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+80100085:	83 ec 08             	sub    $0x8,%esp
+80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
+    b->prev = &bcache.head;
+8010008b:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
+    initsleeplock(&b->lock, "buffer");
+80100092:	68 27 72 10 80       	push   $0x80107227
+80100097:	50                   	push   %eax
+80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+    bcache.head.next->prev = b;
+8010009d:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
+801000a8:	83 c4 10             	add    $0x10,%esp
+    bcache.head.next->prev = b;
+801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+801000ae:	89 d8                	mov    %ebx,%eax
+801000b0:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000b6:	81 fb c0 e9 10 80    	cmp    $0x8010e9c0,%ebx
+801000bc:	75 c2                	jne    80100080 <binit+0x40>
+  }
+}
+801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c1:	c9                   	leave  
+801000c2:	c3                   	ret    
+801000c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801000d0 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+801000d0:	55                   	push   %ebp
+801000d1:	89 e5                	mov    %esp,%ebp
+801000d3:	57                   	push   %edi
+801000d4:	56                   	push   %esi
+801000d5:	53                   	push   %ebx
+801000d6:	83 ec 18             	sub    $0x18,%esp
+801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
+801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  acquire(&bcache.lock);
+801000df:	68 20 a5 10 80       	push   $0x8010a520
+801000e4:	e8 b7 44 00 00       	call   801045a0 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000e9:	8b 1d 70 ec 10 80    	mov    0x8010ec70,%ebx
+801000ef:	83 c4 10             	add    $0x10,%esp
+801000f2:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+801000f8:	75 11                	jne    8010010b <bread+0x3b>
+801000fa:	eb 24                	jmp    80100120 <bread+0x50>
+801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+    if(b->dev == dev && b->blockno == blockno){
+8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 7b 08             	cmp    0x8(%ebx),%edi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+      b->refcnt++;
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010011f:	90                   	nop
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100120:	8b 1d 6c ec 10 80    	mov    0x8010ec6c,%ebx
+80100126:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 6e                	jmp    8010019e <bread+0xce>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+80100139:	74 63                	je     8010019e <bread+0xce>
+    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+      b->dev = dev;
+80100147:	89 73 04             	mov    %esi,0x4(%ebx)
+      b->blockno = blockno;
+8010014a:	89 7b 08             	mov    %edi,0x8(%ebx)
+      b->flags = 0;
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+      b->refcnt = 1;
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 20 a5 10 80       	push   $0x8010a520
+80100162:	e8 d9 43 00 00       	call   80104540 <release>
+      acquiresleep(&b->lock);
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+      return b;
+80100172:	83 c4 10             	add    $0x10,%esp
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if((b->flags & B_VALID) == 0) {
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	74 0e                	je     80100188 <bread+0xb8>
+    iderw(b);
+  }
+  return b;
+}
+8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010017d:	89 d8                	mov    %ebx,%eax
+8010017f:	5b                   	pop    %ebx
+80100180:	5e                   	pop    %esi
+80100181:	5f                   	pop    %edi
+80100182:	5d                   	pop    %ebp
+80100183:	c3                   	ret    
+80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    iderw(b);
+80100188:	83 ec 0c             	sub    $0xc,%esp
+8010018b:	53                   	push   %ebx
+8010018c:	e8 4f 21 00 00       	call   801022e0 <iderw>
+80100191:	83 c4 10             	add    $0x10,%esp
+}
+80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100197:	89 d8                	mov    %ebx,%eax
+80100199:	5b                   	pop    %ebx
+8010019a:	5e                   	pop    %esi
+8010019b:	5f                   	pop    %edi
+8010019c:	5d                   	pop    %ebp
+8010019d:	c3                   	ret    
+  panic("bget: no buffers");
+8010019e:	83 ec 0c             	sub    $0xc,%esp
+801001a1:	68 2e 72 10 80       	push   $0x8010722e
+801001a6:	e8 d5 01 00 00       	call   80100380 <panic>
+801001ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801001af:	90                   	nop
+
+801001b0 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+801001b0:	55                   	push   %ebp
+801001b1:	89 e5                	mov    %esp,%ebp
+801001b3:	53                   	push   %ebx
+801001b4:	83 ec 10             	sub    $0x10,%esp
+801001b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001ba:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001bd:	50                   	push   %eax
+801001be:	e8 bd 41 00 00       	call   80104380 <holdingsleep>
+801001c3:	83 c4 10             	add    $0x10,%esp
+801001c6:	85 c0                	test   %eax,%eax
+801001c8:	74 0f                	je     801001d9 <bwrite+0x29>
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+801001ca:	83 0b 04             	orl    $0x4,(%ebx)
+  iderw(b);
+801001cd:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801001d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001d3:	c9                   	leave  
+  iderw(b);
+801001d4:	e9 07 21 00 00       	jmp    801022e0 <iderw>
+    panic("bwrite");
+801001d9:	83 ec 0c             	sub    $0xc,%esp
+801001dc:	68 3f 72 10 80       	push   $0x8010723f
+801001e1:	e8 9a 01 00 00       	call   80100380 <panic>
+801001e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801001ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001f0 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+801001f0:	55                   	push   %ebp
+801001f1:	89 e5                	mov    %esp,%ebp
+801001f3:	56                   	push   %esi
+801001f4:	53                   	push   %ebx
+801001f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001f8:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001fb:	83 ec 0c             	sub    $0xc,%esp
+801001fe:	56                   	push   %esi
+801001ff:	e8 7c 41 00 00       	call   80104380 <holdingsleep>
+80100204:	83 c4 10             	add    $0x10,%esp
+80100207:	85 c0                	test   %eax,%eax
+80100209:	74 66                	je     80100271 <brelse+0x81>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+8010020b:	83 ec 0c             	sub    $0xc,%esp
+8010020e:	56                   	push   %esi
+8010020f:	e8 2c 41 00 00       	call   80104340 <releasesleep>
+
+  acquire(&bcache.lock);
+80100214:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010021b:	e8 80 43 00 00       	call   801045a0 <acquire>
+  b->refcnt--;
+80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
+  if (b->refcnt == 0) {
+80100223:	83 c4 10             	add    $0x10,%esp
+  b->refcnt--;
+80100226:	83 e8 01             	sub    $0x1,%eax
+80100229:	89 43 4c             	mov    %eax,0x4c(%ebx)
+  if (b->refcnt == 0) {
+8010022c:	85 c0                	test   %eax,%eax
+8010022e:	75 2f                	jne    8010025f <brelse+0x6f>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+80100230:	8b 43 54             	mov    0x54(%ebx),%eax
+80100233:	8b 53 50             	mov    0x50(%ebx),%edx
+80100236:	89 50 50             	mov    %edx,0x50(%eax)
+    b->prev->next = b->next;
+80100239:	8b 43 50             	mov    0x50(%ebx),%eax
+8010023c:	8b 53 54             	mov    0x54(%ebx),%edx
+8010023f:	89 50 54             	mov    %edx,0x54(%eax)
+    b->next = bcache.head.next;
+80100242:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
+    b->prev = &bcache.head;
+80100247:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
+    b->next = bcache.head.next;
+8010024e:	89 43 54             	mov    %eax,0x54(%ebx)
+    bcache.head.next->prev = b;
+80100251:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
+80100256:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+80100259:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
+  }
+  
+  release(&bcache.lock);
+8010025f:	c7 45 08 20 a5 10 80 	movl   $0x8010a520,0x8(%ebp)
+}
+80100266:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80100269:	5b                   	pop    %ebx
+8010026a:	5e                   	pop    %esi
+8010026b:	5d                   	pop    %ebp
+  release(&bcache.lock);
+8010026c:	e9 cf 42 00 00       	jmp    80104540 <release>
+    panic("brelse");
+80100271:	83 ec 0c             	sub    $0xc,%esp
+80100274:	68 46 72 10 80       	push   $0x80107246
+80100279:	e8 02 01 00 00       	call   80100380 <panic>
+8010027e:	66 90                	xchg   %ax,%ax
+
+80100280 <consoleread>:
+  }
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+80100280:	55                   	push   %ebp
+80100281:	89 e5                	mov    %esp,%ebp
+80100283:	57                   	push   %edi
+80100284:	56                   	push   %esi
+80100285:	53                   	push   %ebx
+80100286:	83 ec 18             	sub    $0x18,%esp
+80100289:	8b 5d 10             	mov    0x10(%ebp),%ebx
+8010028c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  uint target;
+  int c;
+
+  iunlock(ip);
+8010028f:	ff 75 08             	push   0x8(%ebp)
+  target = n;
+80100292:	89 df                	mov    %ebx,%edi
+  iunlock(ip);
+80100294:	e8 c7 15 00 00       	call   80101860 <iunlock>
+  acquire(&cons.lock);
+80100299:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
+801002a0:	e8 fb 42 00 00       	call   801045a0 <acquire>
+  while(n > 0){
+801002a5:	83 c4 10             	add    $0x10,%esp
+801002a8:	85 db                	test   %ebx,%ebx
+801002aa:	0f 8e 94 00 00 00    	jle    80100344 <consoleread+0xc4>
+    while(input.r == input.w){
+801002b0:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
+801002b5:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+801002bb:	74 25                	je     801002e2 <consoleread+0x62>
+801002bd:	eb 59                	jmp    80100318 <consoleread+0x98>
+801002bf:	90                   	nop
+      if(myproc()->killed){
+        release(&cons.lock);
+        ilock(ip);
+        return -1;
+      }
+      sleep(&input.r, &cons.lock);
+801002c0:	83 ec 08             	sub    $0x8,%esp
+801002c3:	68 20 ef 10 80       	push   $0x8010ef20
+801002c8:	68 00 ef 10 80       	push   $0x8010ef00
+801002cd:	e8 6e 3d 00 00       	call   80104040 <sleep>
+    while(input.r == input.w){
+801002d2:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
+801002d7:	83 c4 10             	add    $0x10,%esp
+801002da:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+801002e0:	75 36                	jne    80100318 <consoleread+0x98>
+      if(myproc()->killed){
+801002e2:	e8 89 36 00 00       	call   80103970 <myproc>
+801002e7:	8b 48 24             	mov    0x24(%eax),%ecx
+801002ea:	85 c9                	test   %ecx,%ecx
+801002ec:	74 d2                	je     801002c0 <consoleread+0x40>
+        release(&cons.lock);
+801002ee:	83 ec 0c             	sub    $0xc,%esp
+801002f1:	68 20 ef 10 80       	push   $0x8010ef20
+801002f6:	e8 45 42 00 00       	call   80104540 <release>
+        ilock(ip);
+801002fb:	5a                   	pop    %edx
+801002fc:	ff 75 08             	push   0x8(%ebp)
+801002ff:	e8 7c 14 00 00       	call   80101780 <ilock>
+        return -1;
+80100304:	83 c4 10             	add    $0x10,%esp
+  }
+  release(&cons.lock);
+  ilock(ip);
+
+  return target - n;
+}
+80100307:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return -1;
+8010030a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010030f:	5b                   	pop    %ebx
+80100310:	5e                   	pop    %esi
+80100311:	5f                   	pop    %edi
+80100312:	5d                   	pop    %ebp
+80100313:	c3                   	ret    
+80100314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = input.buf[input.r++ % INPUT_BUF];
+80100318:	8d 50 01             	lea    0x1(%eax),%edx
+8010031b:	89 15 00 ef 10 80    	mov    %edx,0x8010ef00
+80100321:	89 c2                	mov    %eax,%edx
+80100323:	83 e2 7f             	and    $0x7f,%edx
+80100326:	0f be 8a 80 ee 10 80 	movsbl -0x7fef1180(%edx),%ecx
+    if(c == C('D')){  // EOF
+8010032d:	80 f9 04             	cmp    $0x4,%cl
+80100330:	74 37                	je     80100369 <consoleread+0xe9>
+    *dst++ = c;
+80100332:	83 c6 01             	add    $0x1,%esi
+    --n;
+80100335:	83 eb 01             	sub    $0x1,%ebx
+    *dst++ = c;
+80100338:	88 4e ff             	mov    %cl,-0x1(%esi)
+    if(c == '\n')
+8010033b:	83 f9 0a             	cmp    $0xa,%ecx
+8010033e:	0f 85 64 ff ff ff    	jne    801002a8 <consoleread+0x28>
+  release(&cons.lock);
+80100344:	83 ec 0c             	sub    $0xc,%esp
+80100347:	68 20 ef 10 80       	push   $0x8010ef20
+8010034c:	e8 ef 41 00 00       	call   80104540 <release>
+  ilock(ip);
+80100351:	58                   	pop    %eax
+80100352:	ff 75 08             	push   0x8(%ebp)
+80100355:	e8 26 14 00 00       	call   80101780 <ilock>
+  return target - n;
+8010035a:	89 f8                	mov    %edi,%eax
+8010035c:	83 c4 10             	add    $0x10,%esp
+}
+8010035f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return target - n;
+80100362:	29 d8                	sub    %ebx,%eax
+}
+80100364:	5b                   	pop    %ebx
+80100365:	5e                   	pop    %esi
+80100366:	5f                   	pop    %edi
+80100367:	5d                   	pop    %ebp
+80100368:	c3                   	ret    
+      if(n < target){
+80100369:	39 fb                	cmp    %edi,%ebx
+8010036b:	73 d7                	jae    80100344 <consoleread+0xc4>
+        input.r--;
+8010036d:	a3 00 ef 10 80       	mov    %eax,0x8010ef00
+80100372:	eb d0                	jmp    80100344 <consoleread+0xc4>
+80100374:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010037b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010037f:	90                   	nop
+
+80100380 <panic>:
+{
+80100380:	55                   	push   %ebp
+80100381:	89 e5                	mov    %esp,%ebp
+80100383:	56                   	push   %esi
+80100384:	53                   	push   %ebx
+80100385:	83 ec 30             	sub    $0x30,%esp
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+80100388:	fa                   	cli    
+  cons.locking = 0;
+80100389:	c7 05 54 ef 10 80 00 	movl   $0x0,0x8010ef54
+80100390:	00 00 00 
+  getcallerpcs(&s, pcs);
+80100393:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+80100396:	8d 75 f8             	lea    -0x8(%ebp),%esi
+  cprintf("lapicid %d: panic: ", lapicid());
+80100399:	e8 52 25 00 00       	call   801028f0 <lapicid>
+8010039e:	83 ec 08             	sub    $0x8,%esp
+801003a1:	50                   	push   %eax
+801003a2:	68 4d 72 10 80       	push   $0x8010724d
+801003a7:	e8 f4 02 00 00       	call   801006a0 <cprintf>
+  cprintf(s);
+801003ac:	58                   	pop    %eax
+801003ad:	ff 75 08             	push   0x8(%ebp)
+801003b0:	e8 eb 02 00 00       	call   801006a0 <cprintf>
+  cprintf("\n");
+801003b5:	c7 04 24 df 7b 10 80 	movl   $0x80107bdf,(%esp)
+801003bc:	e8 df 02 00 00       	call   801006a0 <cprintf>
+  getcallerpcs(&s, pcs);
+801003c1:	8d 45 08             	lea    0x8(%ebp),%eax
+801003c4:	5a                   	pop    %edx
+801003c5:	59                   	pop    %ecx
+801003c6:	53                   	push   %ebx
+801003c7:	50                   	push   %eax
+801003c8:	e8 23 40 00 00       	call   801043f0 <getcallerpcs>
+  for(i=0; i<10; i++)
+801003cd:	83 c4 10             	add    $0x10,%esp
+    cprintf(" %p", pcs[i]);
+801003d0:	83 ec 08             	sub    $0x8,%esp
+801003d3:	ff 33                	push   (%ebx)
+  for(i=0; i<10; i++)
+801003d5:	83 c3 04             	add    $0x4,%ebx
+    cprintf(" %p", pcs[i]);
+801003d8:	68 61 72 10 80       	push   $0x80107261
+801003dd:	e8 be 02 00 00       	call   801006a0 <cprintf>
+  for(i=0; i<10; i++)
+801003e2:	83 c4 10             	add    $0x10,%esp
+801003e5:	39 f3                	cmp    %esi,%ebx
+801003e7:	75 e7                	jne    801003d0 <panic+0x50>
+  panicked = 1; // freeze other CPU
+801003e9:	c7 05 58 ef 10 80 01 	movl   $0x1,0x8010ef58
+801003f0:	00 00 00 
+  for(;;)
+801003f3:	eb fe                	jmp    801003f3 <panic+0x73>
+801003f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801003fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100400 <consputc.part.0>:
+consputc(int c)
+80100400:	55                   	push   %ebp
+80100401:	89 e5                	mov    %esp,%ebp
+80100403:	57                   	push   %edi
+80100404:	56                   	push   %esi
+80100405:	53                   	push   %ebx
+80100406:	89 c3                	mov    %eax,%ebx
+80100408:	83 ec 1c             	sub    $0x1c,%esp
+  if(c == BACKSPACE){
+8010040b:	3d 00 01 00 00       	cmp    $0x100,%eax
+80100410:	0f 84 ea 00 00 00    	je     80100500 <consputc.part.0+0x100>
+    uartputc(c);
+80100416:	83 ec 0c             	sub    $0xc,%esp
+80100419:	50                   	push   %eax
+8010041a:	e8 11 59 00 00       	call   80105d30 <uartputc>
+8010041f:	83 c4 10             	add    $0x10,%esp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100422:	bf d4 03 00 00       	mov    $0x3d4,%edi
+80100427:	b8 0e 00 00 00       	mov    $0xe,%eax
+8010042c:	89 fa                	mov    %edi,%edx
+8010042e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010042f:	be d5 03 00 00       	mov    $0x3d5,%esi
+80100434:	89 f2                	mov    %esi,%edx
+80100436:	ec                   	in     (%dx),%al
+  pos = inb(CRTPORT+1) << 8;
+80100437:	0f b6 c8             	movzbl %al,%ecx
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010043a:	89 fa                	mov    %edi,%edx
+8010043c:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100441:	c1 e1 08             	shl    $0x8,%ecx
+80100444:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100445:	89 f2                	mov    %esi,%edx
+80100447:	ec                   	in     (%dx),%al
+  pos |= inb(CRTPORT+1);
+80100448:	0f b6 c0             	movzbl %al,%eax
+8010044b:	09 c8                	or     %ecx,%eax
+  if(c == '\n')
+8010044d:	83 fb 0a             	cmp    $0xa,%ebx
+80100450:	0f 84 92 00 00 00    	je     801004e8 <consputc.part.0+0xe8>
+  else if(c == BACKSPACE){
+80100456:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
+8010045c:	74 72                	je     801004d0 <consputc.part.0+0xd0>
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+8010045e:	0f b6 db             	movzbl %bl,%ebx
+80100461:	8d 70 01             	lea    0x1(%eax),%esi
+80100464:	80 cf 07             	or     $0x7,%bh
+80100467:	66 89 9c 00 00 80 0b 	mov    %bx,-0x7ff48000(%eax,%eax,1)
+8010046e:	80 
+  if(pos < 0 || pos > 25*80)
+8010046f:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
+80100475:	0f 8f fb 00 00 00    	jg     80100576 <consputc.part.0+0x176>
+  if((pos/80) >= 24){  // Scroll up.
+8010047b:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
+80100481:	0f 8f a9 00 00 00    	jg     80100530 <consputc.part.0+0x130>
+  outb(CRTPORT+1, pos>>8);
+80100487:	89 f0                	mov    %esi,%eax
+  crt[pos] = ' ' | 0x0700;
+80100489:	8d b4 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%esi
+  outb(CRTPORT+1, pos);
+80100490:	88 45 e7             	mov    %al,-0x19(%ebp)
+  outb(CRTPORT+1, pos>>8);
+80100493:	0f b6 fc             	movzbl %ah,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100496:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+8010049b:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004a0:	89 da                	mov    %ebx,%edx
+801004a2:	ee                   	out    %al,(%dx)
+801004a3:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+801004a8:	89 f8                	mov    %edi,%eax
+801004aa:	89 ca                	mov    %ecx,%edx
+801004ac:	ee                   	out    %al,(%dx)
+801004ad:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004b2:	89 da                	mov    %ebx,%edx
+801004b4:	ee                   	out    %al,(%dx)
+801004b5:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+801004b9:	89 ca                	mov    %ecx,%edx
+801004bb:	ee                   	out    %al,(%dx)
+  crt[pos] = ' ' | 0x0700;
+801004bc:	b8 20 07 00 00       	mov    $0x720,%eax
+801004c1:	66 89 06             	mov    %ax,(%esi)
+}
+801004c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801004c7:	5b                   	pop    %ebx
+801004c8:	5e                   	pop    %esi
+801004c9:	5f                   	pop    %edi
+801004ca:	5d                   	pop    %ebp
+801004cb:	c3                   	ret    
+801004cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pos > 0) --pos;
+801004d0:	8d 70 ff             	lea    -0x1(%eax),%esi
+801004d3:	85 c0                	test   %eax,%eax
+801004d5:	75 98                	jne    8010046f <consputc.part.0+0x6f>
+801004d7:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
+801004db:	be 00 80 0b 80       	mov    $0x800b8000,%esi
+801004e0:	31 ff                	xor    %edi,%edi
+801004e2:	eb b2                	jmp    80100496 <consputc.part.0+0x96>
+801004e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    pos += 80 - pos%80;
+801004e8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+801004ed:	f7 e2                	mul    %edx
+801004ef:	c1 ea 06             	shr    $0x6,%edx
+801004f2:	8d 04 92             	lea    (%edx,%edx,4),%eax
+801004f5:	c1 e0 04             	shl    $0x4,%eax
+801004f8:	8d 70 50             	lea    0x50(%eax),%esi
+801004fb:	e9 6f ff ff ff       	jmp    8010046f <consputc.part.0+0x6f>
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+80100500:	83 ec 0c             	sub    $0xc,%esp
+80100503:	6a 08                	push   $0x8
+80100505:	e8 26 58 00 00       	call   80105d30 <uartputc>
+8010050a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+80100511:	e8 1a 58 00 00       	call   80105d30 <uartputc>
+80100516:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+8010051d:	e8 0e 58 00 00       	call   80105d30 <uartputc>
+80100522:	83 c4 10             	add    $0x10,%esp
+80100525:	e9 f8 fe ff ff       	jmp    80100422 <consputc.part.0+0x22>
+8010052a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100530:	83 ec 04             	sub    $0x4,%esp
+    pos -= 80;
+80100533:	8d 5e b0             	lea    -0x50(%esi),%ebx
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100536:	8d b4 36 60 7f 0b 80 	lea    -0x7ff480a0(%esi,%esi,1),%esi
+  outb(CRTPORT+1, pos);
+8010053d:	bf 07 00 00 00       	mov    $0x7,%edi
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100542:	68 60 0e 00 00       	push   $0xe60
+80100547:	68 a0 80 0b 80       	push   $0x800b80a0
+8010054c:	68 00 80 0b 80       	push   $0x800b8000
+80100551:	e8 aa 41 00 00       	call   80104700 <memmove>
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100556:	b8 80 07 00 00       	mov    $0x780,%eax
+8010055b:	83 c4 0c             	add    $0xc,%esp
+8010055e:	29 d8                	sub    %ebx,%eax
+80100560:	01 c0                	add    %eax,%eax
+80100562:	50                   	push   %eax
+80100563:	6a 00                	push   $0x0
+80100565:	56                   	push   %esi
+80100566:	e8 f5 40 00 00       	call   80104660 <memset>
+  outb(CRTPORT+1, pos);
+8010056b:	88 5d e7             	mov    %bl,-0x19(%ebp)
+8010056e:	83 c4 10             	add    $0x10,%esp
+80100571:	e9 20 ff ff ff       	jmp    80100496 <consputc.part.0+0x96>
+    panic("pos under/overflow");
+80100576:	83 ec 0c             	sub    $0xc,%esp
+80100579:	68 65 72 10 80       	push   $0x80107265
+8010057e:	e8 fd fd ff ff       	call   80100380 <panic>
+80100583:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100590 <consolewrite>:
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100590:	55                   	push   %ebp
+80100591:	89 e5                	mov    %esp,%ebp
+80100593:	57                   	push   %edi
+80100594:	56                   	push   %esi
+80100595:	53                   	push   %ebx
+80100596:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  iunlock(ip);
+80100599:	ff 75 08             	push   0x8(%ebp)
+{
+8010059c:	8b 75 10             	mov    0x10(%ebp),%esi
+  iunlock(ip);
+8010059f:	e8 bc 12 00 00       	call   80101860 <iunlock>
+  acquire(&cons.lock);
+801005a4:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
+801005ab:	e8 f0 3f 00 00       	call   801045a0 <acquire>
+  for(i = 0; i < n; i++)
+801005b0:	83 c4 10             	add    $0x10,%esp
+801005b3:	85 f6                	test   %esi,%esi
+801005b5:	7e 25                	jle    801005dc <consolewrite+0x4c>
+801005b7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+801005ba:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
+  if(panicked){
+801005bd:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+    consputc(buf[i] & 0xff);
+801005c3:	0f b6 03             	movzbl (%ebx),%eax
+  if(panicked){
+801005c6:	85 d2                	test   %edx,%edx
+801005c8:	74 06                	je     801005d0 <consolewrite+0x40>
+  asm volatile("cli");
+801005ca:	fa                   	cli    
+    for(;;)
+801005cb:	eb fe                	jmp    801005cb <consolewrite+0x3b>
+801005cd:	8d 76 00             	lea    0x0(%esi),%esi
+801005d0:	e8 2b fe ff ff       	call   80100400 <consputc.part.0>
+  for(i = 0; i < n; i++)
+801005d5:	83 c3 01             	add    $0x1,%ebx
+801005d8:	39 df                	cmp    %ebx,%edi
+801005da:	75 e1                	jne    801005bd <consolewrite+0x2d>
+  release(&cons.lock);
+801005dc:	83 ec 0c             	sub    $0xc,%esp
+801005df:	68 20 ef 10 80       	push   $0x8010ef20
+801005e4:	e8 57 3f 00 00       	call   80104540 <release>
+  ilock(ip);
+801005e9:	58                   	pop    %eax
+801005ea:	ff 75 08             	push   0x8(%ebp)
+801005ed:	e8 8e 11 00 00       	call   80101780 <ilock>
+
+  return n;
+}
+801005f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801005f5:	89 f0                	mov    %esi,%eax
+801005f7:	5b                   	pop    %ebx
+801005f8:	5e                   	pop    %esi
+801005f9:	5f                   	pop    %edi
+801005fa:	5d                   	pop    %ebp
+801005fb:	c3                   	ret    
+801005fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100600 <printint>:
+{
+80100600:	55                   	push   %ebp
+80100601:	89 e5                	mov    %esp,%ebp
+80100603:	57                   	push   %edi
+80100604:	56                   	push   %esi
+80100605:	53                   	push   %ebx
+80100606:	83 ec 2c             	sub    $0x2c,%esp
+80100609:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+8010060c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+  if(sign && (sign = xx < 0))
+8010060f:	85 c9                	test   %ecx,%ecx
+80100611:	74 04                	je     80100617 <printint+0x17>
+80100613:	85 c0                	test   %eax,%eax
+80100615:	78 6d                	js     80100684 <printint+0x84>
+    x = xx;
+80100617:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
+8010061e:	89 c1                	mov    %eax,%ecx
+  i = 0;
+80100620:	31 db                	xor    %ebx,%ebx
+80100622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    buf[i++] = digits[x % base];
+80100628:	89 c8                	mov    %ecx,%eax
+8010062a:	31 d2                	xor    %edx,%edx
+8010062c:	89 de                	mov    %ebx,%esi
+8010062e:	89 cf                	mov    %ecx,%edi
+80100630:	f7 75 d4             	divl   -0x2c(%ebp)
+80100633:	8d 5b 01             	lea    0x1(%ebx),%ebx
+80100636:	0f b6 92 90 72 10 80 	movzbl -0x7fef8d70(%edx),%edx
+  }while((x /= base) != 0);
+8010063d:	89 c1                	mov    %eax,%ecx
+    buf[i++] = digits[x % base];
+8010063f:	88 54 1d d7          	mov    %dl,-0x29(%ebp,%ebx,1)
+  }while((x /= base) != 0);
+80100643:	3b 7d d4             	cmp    -0x2c(%ebp),%edi
+80100646:	73 e0                	jae    80100628 <printint+0x28>
+  if(sign)
+80100648:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+8010064b:	85 c9                	test   %ecx,%ecx
+8010064d:	74 0c                	je     8010065b <printint+0x5b>
+    buf[i++] = '-';
+8010064f:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+80100654:	89 de                	mov    %ebx,%esi
+    buf[i++] = '-';
+80100656:	ba 2d 00 00 00       	mov    $0x2d,%edx
+  while(--i >= 0)
+8010065b:	8d 5c 35 d7          	lea    -0x29(%ebp,%esi,1),%ebx
+8010065f:	0f be c2             	movsbl %dl,%eax
+  if(panicked){
+80100662:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+80100668:	85 d2                	test   %edx,%edx
+8010066a:	74 04                	je     80100670 <printint+0x70>
+8010066c:	fa                   	cli    
+    for(;;)
+8010066d:	eb fe                	jmp    8010066d <printint+0x6d>
+8010066f:	90                   	nop
+80100670:	e8 8b fd ff ff       	call   80100400 <consputc.part.0>
+  while(--i >= 0)
+80100675:	8d 45 d7             	lea    -0x29(%ebp),%eax
+80100678:	39 c3                	cmp    %eax,%ebx
+8010067a:	74 0e                	je     8010068a <printint+0x8a>
+    consputc(buf[i]);
+8010067c:	0f be 03             	movsbl (%ebx),%eax
+8010067f:	83 eb 01             	sub    $0x1,%ebx
+80100682:	eb de                	jmp    80100662 <printint+0x62>
+    x = -xx;
+80100684:	f7 d8                	neg    %eax
+80100686:	89 c1                	mov    %eax,%ecx
+80100688:	eb 96                	jmp    80100620 <printint+0x20>
+}
+8010068a:	83 c4 2c             	add    $0x2c,%esp
+8010068d:	5b                   	pop    %ebx
+8010068e:	5e                   	pop    %esi
+8010068f:	5f                   	pop    %edi
+80100690:	5d                   	pop    %ebp
+80100691:	c3                   	ret    
+80100692:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801006a0 <cprintf>:
+{
+801006a0:	55                   	push   %ebp
+801006a1:	89 e5                	mov    %esp,%ebp
+801006a3:	57                   	push   %edi
+801006a4:	56                   	push   %esi
+801006a5:	53                   	push   %ebx
+801006a6:	83 ec 1c             	sub    $0x1c,%esp
+  locking = cons.locking;
+801006a9:	a1 54 ef 10 80       	mov    0x8010ef54,%eax
+801006ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(locking)
+801006b1:	85 c0                	test   %eax,%eax
+801006b3:	0f 85 27 01 00 00    	jne    801007e0 <cprintf+0x140>
+  if (fmt == 0)
+801006b9:	8b 75 08             	mov    0x8(%ebp),%esi
+801006bc:	85 f6                	test   %esi,%esi
+801006be:	0f 84 ac 01 00 00    	je     80100870 <cprintf+0x1d0>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006c4:	0f b6 06             	movzbl (%esi),%eax
+  argp = (uint*)(void*)(&fmt + 1);
+801006c7:	8d 7d 0c             	lea    0xc(%ebp),%edi
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006ca:	31 db                	xor    %ebx,%ebx
+801006cc:	85 c0                	test   %eax,%eax
+801006ce:	74 56                	je     80100726 <cprintf+0x86>
+    if(c != '%'){
+801006d0:	83 f8 25             	cmp    $0x25,%eax
+801006d3:	0f 85 cf 00 00 00    	jne    801007a8 <cprintf+0x108>
+    c = fmt[++i] & 0xff;
+801006d9:	83 c3 01             	add    $0x1,%ebx
+801006dc:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
+    if(c == 0)
+801006e0:	85 d2                	test   %edx,%edx
+801006e2:	74 42                	je     80100726 <cprintf+0x86>
+    switch(c){
+801006e4:	83 fa 70             	cmp    $0x70,%edx
+801006e7:	0f 84 90 00 00 00    	je     8010077d <cprintf+0xdd>
+801006ed:	7f 51                	jg     80100740 <cprintf+0xa0>
+801006ef:	83 fa 25             	cmp    $0x25,%edx
+801006f2:	0f 84 c0 00 00 00    	je     801007b8 <cprintf+0x118>
+801006f8:	83 fa 64             	cmp    $0x64,%edx
+801006fb:	0f 85 f4 00 00 00    	jne    801007f5 <cprintf+0x155>
+      printint(*argp++, 10, 1);
+80100701:	8d 47 04             	lea    0x4(%edi),%eax
+80100704:	b9 01 00 00 00       	mov    $0x1,%ecx
+80100709:	ba 0a 00 00 00       	mov    $0xa,%edx
+8010070e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100711:	8b 07                	mov    (%edi),%eax
+80100713:	e8 e8 fe ff ff       	call   80100600 <printint>
+80100718:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010071b:	83 c3 01             	add    $0x1,%ebx
+8010071e:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
+80100722:	85 c0                	test   %eax,%eax
+80100724:	75 aa                	jne    801006d0 <cprintf+0x30>
+  if(locking)
+80100726:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100729:	85 c0                	test   %eax,%eax
+8010072b:	0f 85 22 01 00 00    	jne    80100853 <cprintf+0x1b3>
+}
+80100731:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100734:	5b                   	pop    %ebx
+80100735:	5e                   	pop    %esi
+80100736:	5f                   	pop    %edi
+80100737:	5d                   	pop    %ebp
+80100738:	c3                   	ret    
+80100739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    switch(c){
+80100740:	83 fa 73             	cmp    $0x73,%edx
+80100743:	75 33                	jne    80100778 <cprintf+0xd8>
+      if((s = (char*)*argp++) == 0)
+80100745:	8d 47 04             	lea    0x4(%edi),%eax
+80100748:	8b 3f                	mov    (%edi),%edi
+8010074a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010074d:	85 ff                	test   %edi,%edi
+8010074f:	0f 84 e3 00 00 00    	je     80100838 <cprintf+0x198>
+      for(; *s; s++)
+80100755:	0f be 07             	movsbl (%edi),%eax
+80100758:	84 c0                	test   %al,%al
+8010075a:	0f 84 08 01 00 00    	je     80100868 <cprintf+0x1c8>
+  if(panicked){
+80100760:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+80100766:	85 d2                	test   %edx,%edx
+80100768:	0f 84 b2 00 00 00    	je     80100820 <cprintf+0x180>
+8010076e:	fa                   	cli    
+    for(;;)
+8010076f:	eb fe                	jmp    8010076f <cprintf+0xcf>
+80100771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    switch(c){
+80100778:	83 fa 78             	cmp    $0x78,%edx
+8010077b:	75 78                	jne    801007f5 <cprintf+0x155>
+      printint(*argp++, 16, 0);
+8010077d:	8d 47 04             	lea    0x4(%edi),%eax
+80100780:	31 c9                	xor    %ecx,%ecx
+80100782:	ba 10 00 00 00       	mov    $0x10,%edx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100787:	83 c3 01             	add    $0x1,%ebx
+      printint(*argp++, 16, 0);
+8010078a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010078d:	8b 07                	mov    (%edi),%eax
+8010078f:	e8 6c fe ff ff       	call   80100600 <printint>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100794:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
+      printint(*argp++, 16, 0);
+80100798:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010079b:	85 c0                	test   %eax,%eax
+8010079d:	0f 85 2d ff ff ff    	jne    801006d0 <cprintf+0x30>
+801007a3:	eb 81                	jmp    80100726 <cprintf+0x86>
+801007a5:	8d 76 00             	lea    0x0(%esi),%esi
+  if(panicked){
+801007a8:	8b 0d 58 ef 10 80    	mov    0x8010ef58,%ecx
+801007ae:	85 c9                	test   %ecx,%ecx
+801007b0:	74 14                	je     801007c6 <cprintf+0x126>
+801007b2:	fa                   	cli    
+    for(;;)
+801007b3:	eb fe                	jmp    801007b3 <cprintf+0x113>
+801007b5:	8d 76 00             	lea    0x0(%esi),%esi
+  if(panicked){
+801007b8:	a1 58 ef 10 80       	mov    0x8010ef58,%eax
+801007bd:	85 c0                	test   %eax,%eax
+801007bf:	75 6c                	jne    8010082d <cprintf+0x18d>
+801007c1:	b8 25 00 00 00       	mov    $0x25,%eax
+801007c6:	e8 35 fc ff ff       	call   80100400 <consputc.part.0>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801007cb:	83 c3 01             	add    $0x1,%ebx
+801007ce:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
+801007d2:	85 c0                	test   %eax,%eax
+801007d4:	0f 85 f6 fe ff ff    	jne    801006d0 <cprintf+0x30>
+801007da:	e9 47 ff ff ff       	jmp    80100726 <cprintf+0x86>
+801007df:	90                   	nop
+    acquire(&cons.lock);
+801007e0:	83 ec 0c             	sub    $0xc,%esp
+801007e3:	68 20 ef 10 80       	push   $0x8010ef20
+801007e8:	e8 b3 3d 00 00       	call   801045a0 <acquire>
+801007ed:	83 c4 10             	add    $0x10,%esp
+801007f0:	e9 c4 fe ff ff       	jmp    801006b9 <cprintf+0x19>
+  if(panicked){
+801007f5:	8b 0d 58 ef 10 80    	mov    0x8010ef58,%ecx
+801007fb:	85 c9                	test   %ecx,%ecx
+801007fd:	75 31                	jne    80100830 <cprintf+0x190>
+801007ff:	b8 25 00 00 00       	mov    $0x25,%eax
+80100804:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80100807:	e8 f4 fb ff ff       	call   80100400 <consputc.part.0>
+8010080c:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+80100812:	85 d2                	test   %edx,%edx
+80100814:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80100817:	74 2e                	je     80100847 <cprintf+0x1a7>
+80100819:	fa                   	cli    
+    for(;;)
+8010081a:	eb fe                	jmp    8010081a <cprintf+0x17a>
+8010081c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100820:	e8 db fb ff ff       	call   80100400 <consputc.part.0>
+      for(; *s; s++)
+80100825:	83 c7 01             	add    $0x1,%edi
+80100828:	e9 28 ff ff ff       	jmp    80100755 <cprintf+0xb5>
+8010082d:	fa                   	cli    
+    for(;;)
+8010082e:	eb fe                	jmp    8010082e <cprintf+0x18e>
+80100830:	fa                   	cli    
+80100831:	eb fe                	jmp    80100831 <cprintf+0x191>
+80100833:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100837:	90                   	nop
+        s = "(null)";
+80100838:	bf 78 72 10 80       	mov    $0x80107278,%edi
+      for(; *s; s++)
+8010083d:	b8 28 00 00 00       	mov    $0x28,%eax
+80100842:	e9 19 ff ff ff       	jmp    80100760 <cprintf+0xc0>
+80100847:	89 d0                	mov    %edx,%eax
+80100849:	e8 b2 fb ff ff       	call   80100400 <consputc.part.0>
+8010084e:	e9 c8 fe ff ff       	jmp    8010071b <cprintf+0x7b>
+    release(&cons.lock);
+80100853:	83 ec 0c             	sub    $0xc,%esp
+80100856:	68 20 ef 10 80       	push   $0x8010ef20
+8010085b:	e8 e0 3c 00 00       	call   80104540 <release>
+80100860:	83 c4 10             	add    $0x10,%esp
+}
+80100863:	e9 c9 fe ff ff       	jmp    80100731 <cprintf+0x91>
+      if((s = (char*)*argp++) == 0)
+80100868:	8b 7d e0             	mov    -0x20(%ebp),%edi
+8010086b:	e9 ab fe ff ff       	jmp    8010071b <cprintf+0x7b>
+    panic("null fmt");
+80100870:	83 ec 0c             	sub    $0xc,%esp
+80100873:	68 7f 72 10 80       	push   $0x8010727f
+80100878:	e8 03 fb ff ff       	call   80100380 <panic>
+8010087d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100880 <consoleintr>:
+{
+80100880:	55                   	push   %ebp
+80100881:	89 e5                	mov    %esp,%ebp
+80100883:	57                   	push   %edi
+80100884:	56                   	push   %esi
+  int c, doprocdump = 0;
+80100885:	31 f6                	xor    %esi,%esi
+{
+80100887:	53                   	push   %ebx
+80100888:	83 ec 18             	sub    $0x18,%esp
+8010088b:	8b 7d 08             	mov    0x8(%ebp),%edi
+  acquire(&cons.lock);
+8010088e:	68 20 ef 10 80       	push   $0x8010ef20
+80100893:	e8 08 3d 00 00       	call   801045a0 <acquire>
+  while((c = getc()) >= 0){
+80100898:	83 c4 10             	add    $0x10,%esp
+8010089b:	eb 1a                	jmp    801008b7 <consoleintr+0x37>
+8010089d:	8d 76 00             	lea    0x0(%esi),%esi
+    switch(c){
+801008a0:	83 fb 08             	cmp    $0x8,%ebx
+801008a3:	0f 84 d7 00 00 00    	je     80100980 <consoleintr+0x100>
+801008a9:	83 fb 10             	cmp    $0x10,%ebx
+801008ac:	0f 85 32 01 00 00    	jne    801009e4 <consoleintr+0x164>
+801008b2:	be 01 00 00 00       	mov    $0x1,%esi
+  while((c = getc()) >= 0){
+801008b7:	ff d7                	call   *%edi
+801008b9:	89 c3                	mov    %eax,%ebx
+801008bb:	85 c0                	test   %eax,%eax
+801008bd:	0f 88 05 01 00 00    	js     801009c8 <consoleintr+0x148>
+    switch(c){
+801008c3:	83 fb 15             	cmp    $0x15,%ebx
+801008c6:	74 78                	je     80100940 <consoleintr+0xc0>
+801008c8:	7e d6                	jle    801008a0 <consoleintr+0x20>
+801008ca:	83 fb 7f             	cmp    $0x7f,%ebx
+801008cd:	0f 84 ad 00 00 00    	je     80100980 <consoleintr+0x100>
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+801008d3:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+801008d8:	89 c2                	mov    %eax,%edx
+801008da:	2b 15 00 ef 10 80    	sub    0x8010ef00,%edx
+801008e0:	83 fa 7f             	cmp    $0x7f,%edx
+801008e3:	77 d2                	ja     801008b7 <consoleintr+0x37>
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008e5:	8d 48 01             	lea    0x1(%eax),%ecx
+  if(panicked){
+801008e8:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008ee:	83 e0 7f             	and    $0x7f,%eax
+801008f1:	89 0d 08 ef 10 80    	mov    %ecx,0x8010ef08
+        c = (c == '\r') ? '\n' : c;
+801008f7:	83 fb 0d             	cmp    $0xd,%ebx
+801008fa:	0f 84 13 01 00 00    	je     80100a13 <consoleintr+0x193>
+        input.buf[input.e++ % INPUT_BUF] = c;
+80100900:	88 98 80 ee 10 80    	mov    %bl,-0x7fef1180(%eax)
+  if(panicked){
+80100906:	85 d2                	test   %edx,%edx
+80100908:	0f 85 10 01 00 00    	jne    80100a1e <consoleintr+0x19e>
+8010090e:	89 d8                	mov    %ebx,%eax
+80100910:	e8 eb fa ff ff       	call   80100400 <consputc.part.0>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+80100915:	83 fb 0a             	cmp    $0xa,%ebx
+80100918:	0f 84 14 01 00 00    	je     80100a32 <consoleintr+0x1b2>
+8010091e:	83 fb 04             	cmp    $0x4,%ebx
+80100921:	0f 84 0b 01 00 00    	je     80100a32 <consoleintr+0x1b2>
+80100927:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
+8010092c:	83 e8 80             	sub    $0xffffff80,%eax
+8010092f:	39 05 08 ef 10 80    	cmp    %eax,0x8010ef08
+80100935:	75 80                	jne    801008b7 <consoleintr+0x37>
+80100937:	e9 fb 00 00 00       	jmp    80100a37 <consoleintr+0x1b7>
+8010093c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      while(input.e != input.w &&
+80100940:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+80100945:	39 05 04 ef 10 80    	cmp    %eax,0x8010ef04
+8010094b:	0f 84 66 ff ff ff    	je     801008b7 <consoleintr+0x37>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+80100951:	83 e8 01             	sub    $0x1,%eax
+80100954:	89 c2                	mov    %eax,%edx
+80100956:	83 e2 7f             	and    $0x7f,%edx
+      while(input.e != input.w &&
+80100959:	80 ba 80 ee 10 80 0a 	cmpb   $0xa,-0x7fef1180(%edx)
+80100960:	0f 84 51 ff ff ff    	je     801008b7 <consoleintr+0x37>
+  if(panicked){
+80100966:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+        input.e--;
+8010096c:	a3 08 ef 10 80       	mov    %eax,0x8010ef08
+  if(panicked){
+80100971:	85 d2                	test   %edx,%edx
+80100973:	74 33                	je     801009a8 <consoleintr+0x128>
+80100975:	fa                   	cli    
+    for(;;)
+80100976:	eb fe                	jmp    80100976 <consoleintr+0xf6>
+80100978:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010097f:	90                   	nop
+      if(input.e != input.w){
+80100980:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+80100985:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+8010098b:	0f 84 26 ff ff ff    	je     801008b7 <consoleintr+0x37>
+        input.e--;
+80100991:	83 e8 01             	sub    $0x1,%eax
+80100994:	a3 08 ef 10 80       	mov    %eax,0x8010ef08
+  if(panicked){
+80100999:	a1 58 ef 10 80       	mov    0x8010ef58,%eax
+8010099e:	85 c0                	test   %eax,%eax
+801009a0:	74 56                	je     801009f8 <consoleintr+0x178>
+801009a2:	fa                   	cli    
+    for(;;)
+801009a3:	eb fe                	jmp    801009a3 <consoleintr+0x123>
+801009a5:	8d 76 00             	lea    0x0(%esi),%esi
+801009a8:	b8 00 01 00 00       	mov    $0x100,%eax
+801009ad:	e8 4e fa ff ff       	call   80100400 <consputc.part.0>
+      while(input.e != input.w &&
+801009b2:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+801009b7:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+801009bd:	75 92                	jne    80100951 <consoleintr+0xd1>
+801009bf:	e9 f3 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
+801009c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  release(&cons.lock);
+801009c8:	83 ec 0c             	sub    $0xc,%esp
+801009cb:	68 20 ef 10 80       	push   $0x8010ef20
+801009d0:	e8 6b 3b 00 00       	call   80104540 <release>
+  if(doprocdump) {
+801009d5:	83 c4 10             	add    $0x10,%esp
+801009d8:	85 f6                	test   %esi,%esi
+801009da:	75 2b                	jne    80100a07 <consoleintr+0x187>
+}
+801009dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801009df:	5b                   	pop    %ebx
+801009e0:	5e                   	pop    %esi
+801009e1:	5f                   	pop    %edi
+801009e2:	5d                   	pop    %ebp
+801009e3:	c3                   	ret    
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+801009e4:	85 db                	test   %ebx,%ebx
+801009e6:	0f 84 cb fe ff ff    	je     801008b7 <consoleintr+0x37>
+801009ec:	e9 e2 fe ff ff       	jmp    801008d3 <consoleintr+0x53>
+801009f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801009f8:	b8 00 01 00 00       	mov    $0x100,%eax
+801009fd:	e8 fe f9 ff ff       	call   80100400 <consputc.part.0>
+80100a02:	e9 b0 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
+}
+80100a07:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100a0a:	5b                   	pop    %ebx
+80100a0b:	5e                   	pop    %esi
+80100a0c:	5f                   	pop    %edi
+80100a0d:	5d                   	pop    %ebp
+    procdump();  // now call procdump() wo. cons.lock held
+80100a0e:	e9 cd 37 00 00       	jmp    801041e0 <procdump>
+        input.buf[input.e++ % INPUT_BUF] = c;
+80100a13:	c6 80 80 ee 10 80 0a 	movb   $0xa,-0x7fef1180(%eax)
+  if(panicked){
+80100a1a:	85 d2                	test   %edx,%edx
+80100a1c:	74 0a                	je     80100a28 <consoleintr+0x1a8>
+80100a1e:	fa                   	cli    
+    for(;;)
+80100a1f:	eb fe                	jmp    80100a1f <consoleintr+0x19f>
+80100a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100a28:	b8 0a 00 00 00       	mov    $0xa,%eax
+80100a2d:	e8 ce f9 ff ff       	call   80100400 <consputc.part.0>
+          input.w = input.e;
+80100a32:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+          wakeup(&input.r);
+80100a37:	83 ec 0c             	sub    $0xc,%esp
+          input.w = input.e;
+80100a3a:	a3 04 ef 10 80       	mov    %eax,0x8010ef04
+          wakeup(&input.r);
+80100a3f:	68 00 ef 10 80       	push   $0x8010ef00
+80100a44:	e8 b7 36 00 00       	call   80104100 <wakeup>
+80100a49:	83 c4 10             	add    $0x10,%esp
+80100a4c:	e9 66 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
+80100a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100a58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100a5f:	90                   	nop
+
+80100a60 <consoleinit>:
+
+void
+consoleinit(void)
+{
+80100a60:	55                   	push   %ebp
+80100a61:	89 e5                	mov    %esp,%ebp
+80100a63:	83 ec 10             	sub    $0x10,%esp
+  initlock(&cons.lock, "console");
+80100a66:	68 88 72 10 80       	push   $0x80107288
+80100a6b:	68 20 ef 10 80       	push   $0x8010ef20
+80100a70:	e8 5b 39 00 00       	call   801043d0 <initlock>
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  ioapicenable(IRQ_KBD, 0);
+80100a75:	58                   	pop    %eax
+80100a76:	5a                   	pop    %edx
+80100a77:	6a 00                	push   $0x0
+80100a79:	6a 01                	push   $0x1
+  devsw[CONSOLE].write = consolewrite;
+80100a7b:	c7 05 0c f9 10 80 90 	movl   $0x80100590,0x8010f90c
+80100a82:	05 10 80 
+  devsw[CONSOLE].read = consoleread;
+80100a85:	c7 05 08 f9 10 80 80 	movl   $0x80100280,0x8010f908
+80100a8c:	02 10 80 
+  cons.locking = 1;
+80100a8f:	c7 05 54 ef 10 80 01 	movl   $0x1,0x8010ef54
+80100a96:	00 00 00 
+  ioapicenable(IRQ_KBD, 0);
+80100a99:	e8 e2 19 00 00       	call   80102480 <ioapicenable>
+}
+80100a9e:	83 c4 10             	add    $0x10,%esp
+80100aa1:	c9                   	leave  
+80100aa2:	c3                   	ret    
+80100aa3:	66 90                	xchg   %ax,%ax
+80100aa5:	66 90                	xchg   %ax,%ax
+80100aa7:	66 90                	xchg   %ax,%ax
+80100aa9:	66 90                	xchg   %ax,%ax
+80100aab:	66 90                	xchg   %ax,%ax
+80100aad:	66 90                	xchg   %ax,%ax
+80100aaf:	90                   	nop
+
+80100ab0 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+80100ab0:	55                   	push   %ebp
+80100ab1:	89 e5                	mov    %esp,%ebp
+80100ab3:	57                   	push   %edi
+80100ab4:	56                   	push   %esi
+80100ab5:	53                   	push   %ebx
+80100ab6:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+  struct proc *curproc = myproc();
+80100abc:	e8 af 2e 00 00       	call   80103970 <myproc>
+80100ac1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+
+  begin_op();
+80100ac7:	e8 94 22 00 00       	call   80102d60 <begin_op>
+
+  if((ip = namei(path)) == 0){
+80100acc:	83 ec 0c             	sub    $0xc,%esp
+80100acf:	ff 75 08             	push   0x8(%ebp)
+80100ad2:	e8 c9 15 00 00       	call   801020a0 <namei>
+80100ad7:	83 c4 10             	add    $0x10,%esp
+80100ada:	85 c0                	test   %eax,%eax
+80100adc:	0f 84 02 03 00 00    	je     80100de4 <exec+0x334>
+    end_op();
+    cprintf("exec: fail\n");
+    return -1;
+  }
+  ilock(ip);
+80100ae2:	83 ec 0c             	sub    $0xc,%esp
+80100ae5:	89 c3                	mov    %eax,%ebx
+80100ae7:	50                   	push   %eax
+80100ae8:	e8 93 0c 00 00       	call   80101780 <ilock>
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+80100aed:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+80100af3:	6a 34                	push   $0x34
+80100af5:	6a 00                	push   $0x0
+80100af7:	50                   	push   %eax
+80100af8:	53                   	push   %ebx
+80100af9:	e8 92 0f 00 00       	call   80101a90 <readi>
+80100afe:	83 c4 20             	add    $0x20,%esp
+80100b01:	83 f8 34             	cmp    $0x34,%eax
+80100b04:	74 22                	je     80100b28 <exec+0x78>
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+80100b06:	83 ec 0c             	sub    $0xc,%esp
+80100b09:	53                   	push   %ebx
+80100b0a:	e8 01 0f 00 00       	call   80101a10 <iunlockput>
+    end_op();
+80100b0f:	e8 bc 22 00 00       	call   80102dd0 <end_op>
+80100b14:	83 c4 10             	add    $0x10,%esp
+  }
+  return -1;
+80100b17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100b1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100b1f:	5b                   	pop    %ebx
+80100b20:	5e                   	pop    %esi
+80100b21:	5f                   	pop    %edi
+80100b22:	5d                   	pop    %ebp
+80100b23:	c3                   	ret    
+80100b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(elf.magic != ELF_MAGIC)
+80100b28:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+80100b2f:	45 4c 46 
+80100b32:	75 d2                	jne    80100b06 <exec+0x56>
+  if((pgdir = setupkvm()) == 0)
+80100b34:	e8 87 63 00 00       	call   80106ec0 <setupkvm>
+80100b39:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+80100b3f:	85 c0                	test   %eax,%eax
+80100b41:	74 c3                	je     80100b06 <exec+0x56>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100b43:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80100b4a:	00 
+80100b4b:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
+80100b51:	0f 84 ac 02 00 00    	je     80100e03 <exec+0x353>
+  sz = 0;
+80100b57:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
+80100b5e:	00 00 00 
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100b61:	31 ff                	xor    %edi,%edi
+80100b63:	e9 8e 00 00 00       	jmp    80100bf6 <exec+0x146>
+80100b68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100b6f:	90                   	nop
+    if(ph.type != ELF_PROG_LOAD)
+80100b70:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80100b77:	75 6c                	jne    80100be5 <exec+0x135>
+    if(ph.memsz < ph.filesz)
+80100b79:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+80100b7f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80100b85:	0f 82 87 00 00 00    	jb     80100c12 <exec+0x162>
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+80100b8b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80100b91:	72 7f                	jb     80100c12 <exec+0x162>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80100b93:	83 ec 04             	sub    $0x4,%esp
+80100b96:	50                   	push   %eax
+80100b97:	ff b5 f0 fe ff ff    	push   -0x110(%ebp)
+80100b9d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
+80100ba3:	e8 38 61 00 00       	call   80106ce0 <allocuvm>
+80100ba8:	83 c4 10             	add    $0x10,%esp
+80100bab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80100bb1:	85 c0                	test   %eax,%eax
+80100bb3:	74 5d                	je     80100c12 <exec+0x162>
+    if(ph.vaddr % PGSIZE != 0)
+80100bb5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100bbb:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80100bc0:	75 50                	jne    80100c12 <exec+0x162>
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80100bc2:	83 ec 0c             	sub    $0xc,%esp
+80100bc5:	ff b5 14 ff ff ff    	push   -0xec(%ebp)
+80100bcb:	ff b5 08 ff ff ff    	push   -0xf8(%ebp)
+80100bd1:	53                   	push   %ebx
+80100bd2:	50                   	push   %eax
+80100bd3:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
+80100bd9:	e8 12 60 00 00       	call   80106bf0 <loaduvm>
+80100bde:	83 c4 20             	add    $0x20,%esp
+80100be1:	85 c0                	test   %eax,%eax
+80100be3:	78 2d                	js     80100c12 <exec+0x162>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100be5:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+80100bec:	83 c7 01             	add    $0x1,%edi
+80100bef:	83 c6 20             	add    $0x20,%esi
+80100bf2:	39 f8                	cmp    %edi,%eax
+80100bf4:	7e 3a                	jle    80100c30 <exec+0x180>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+80100bf6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+80100bfc:	6a 20                	push   $0x20
+80100bfe:	56                   	push   %esi
+80100bff:	50                   	push   %eax
+80100c00:	53                   	push   %ebx
+80100c01:	e8 8a 0e 00 00       	call   80101a90 <readi>
+80100c06:	83 c4 10             	add    $0x10,%esp
+80100c09:	83 f8 20             	cmp    $0x20,%eax
+80100c0c:	0f 84 5e ff ff ff    	je     80100b70 <exec+0xc0>
+    freevm(pgdir);
+80100c12:	83 ec 0c             	sub    $0xc,%esp
+80100c15:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
+80100c1b:	e8 20 62 00 00       	call   80106e40 <freevm>
+  if(ip){
+80100c20:	83 c4 10             	add    $0x10,%esp
+80100c23:	e9 de fe ff ff       	jmp    80100b06 <exec+0x56>
+80100c28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100c2f:	90                   	nop
+  sz = PGROUNDUP(sz);
+80100c30:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
+80100c36:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+80100c3c:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100c42:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+  iunlockput(ip);
+80100c48:	83 ec 0c             	sub    $0xc,%esp
+80100c4b:	53                   	push   %ebx
+80100c4c:	e8 bf 0d 00 00       	call   80101a10 <iunlockput>
+  end_op();
+80100c51:	e8 7a 21 00 00       	call   80102dd0 <end_op>
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100c56:	83 c4 0c             	add    $0xc,%esp
+80100c59:	56                   	push   %esi
+80100c5a:	57                   	push   %edi
+80100c5b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80100c61:	57                   	push   %edi
+80100c62:	e8 79 60 00 00       	call   80106ce0 <allocuvm>
+80100c67:	83 c4 10             	add    $0x10,%esp
+80100c6a:	89 c6                	mov    %eax,%esi
+80100c6c:	85 c0                	test   %eax,%eax
+80100c6e:	0f 84 94 00 00 00    	je     80100d08 <exec+0x258>
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100c74:	83 ec 08             	sub    $0x8,%esp
+80100c77:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+  for(argc = 0; argv[argc]; argc++) {
+80100c7d:	89 f3                	mov    %esi,%ebx
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100c7f:	50                   	push   %eax
+80100c80:	57                   	push   %edi
+  for(argc = 0; argv[argc]; argc++) {
+80100c81:	31 ff                	xor    %edi,%edi
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100c83:	e8 d8 62 00 00       	call   80106f60 <clearpteu>
+  for(argc = 0; argv[argc]; argc++) {
+80100c88:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c8b:	83 c4 10             	add    $0x10,%esp
+80100c8e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c94:	8b 00                	mov    (%eax),%eax
+80100c96:	85 c0                	test   %eax,%eax
+80100c98:	0f 84 8b 00 00 00    	je     80100d29 <exec+0x279>
+80100c9e:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
+80100ca4:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
+80100caa:	eb 23                	jmp    80100ccf <exec+0x21f>
+80100cac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+    ustack[3+argc] = sp;
+80100cb3:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+  for(argc = 0; argv[argc]; argc++) {
+80100cba:	83 c7 01             	add    $0x1,%edi
+    ustack[3+argc] = sp;
+80100cbd:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+  for(argc = 0; argv[argc]; argc++) {
+80100cc3:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80100cc6:	85 c0                	test   %eax,%eax
+80100cc8:	74 59                	je     80100d23 <exec+0x273>
+    if(argc >= MAXARG)
+80100cca:	83 ff 20             	cmp    $0x20,%edi
+80100ccd:	74 39                	je     80100d08 <exec+0x258>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100ccf:	83 ec 0c             	sub    $0xc,%esp
+80100cd2:	50                   	push   %eax
+80100cd3:	e8 88 3b 00 00       	call   80104860 <strlen>
+80100cd8:	29 c3                	sub    %eax,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100cda:	58                   	pop    %eax
+80100cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100cde:	83 eb 01             	sub    $0x1,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100ce1:	ff 34 b8             	push   (%eax,%edi,4)
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100ce4:	83 e3 fc             	and    $0xfffffffc,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100ce7:	e8 74 3b 00 00       	call   80104860 <strlen>
+80100cec:	83 c0 01             	add    $0x1,%eax
+80100cef:	50                   	push   %eax
+80100cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100cf3:	ff 34 b8             	push   (%eax,%edi,4)
+80100cf6:	53                   	push   %ebx
+80100cf7:	56                   	push   %esi
+80100cf8:	e8 33 64 00 00       	call   80107130 <copyout>
+80100cfd:	83 c4 20             	add    $0x20,%esp
+80100d00:	85 c0                	test   %eax,%eax
+80100d02:	79 ac                	jns    80100cb0 <exec+0x200>
+80100d04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    freevm(pgdir);
+80100d08:	83 ec 0c             	sub    $0xc,%esp
+80100d0b:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
+80100d11:	e8 2a 61 00 00       	call   80106e40 <freevm>
+80100d16:	83 c4 10             	add    $0x10,%esp
+  return -1;
+80100d19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100d1e:	e9 f9 fd ff ff       	jmp    80100b1c <exec+0x6c>
+80100d23:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100d29:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+80100d30:	89 d9                	mov    %ebx,%ecx
+  ustack[3+argc] = 0;
+80100d32:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+80100d39:	00 00 00 00 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100d3d:	29 c1                	sub    %eax,%ecx
+  sp -= (3+argc+1) * 4;
+80100d3f:	83 c0 0c             	add    $0xc,%eax
+  ustack[1] = argc;
+80100d42:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+  sp -= (3+argc+1) * 4;
+80100d48:	29 c3                	sub    %eax,%ebx
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100d4a:	50                   	push   %eax
+80100d4b:	52                   	push   %edx
+80100d4c:	53                   	push   %ebx
+80100d4d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
+  ustack[0] = 0xffffffff;  // fake return PC
+80100d53:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+80100d5a:	ff ff ff 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100d5d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100d63:	e8 c8 63 00 00       	call   80107130 <copyout>
+80100d68:	83 c4 10             	add    $0x10,%esp
+80100d6b:	85 c0                	test   %eax,%eax
+80100d6d:	78 99                	js     80100d08 <exec+0x258>
+  for(last=s=path; *s; s++)
+80100d6f:	8b 45 08             	mov    0x8(%ebp),%eax
+80100d72:	8b 55 08             	mov    0x8(%ebp),%edx
+80100d75:	0f b6 00             	movzbl (%eax),%eax
+80100d78:	84 c0                	test   %al,%al
+80100d7a:	74 13                	je     80100d8f <exec+0x2df>
+80100d7c:	89 d1                	mov    %edx,%ecx
+80100d7e:	66 90                	xchg   %ax,%ax
+      last = s+1;
+80100d80:	83 c1 01             	add    $0x1,%ecx
+80100d83:	3c 2f                	cmp    $0x2f,%al
+  for(last=s=path; *s; s++)
+80100d85:	0f b6 01             	movzbl (%ecx),%eax
+      last = s+1;
+80100d88:	0f 44 d1             	cmove  %ecx,%edx
+  for(last=s=path; *s; s++)
+80100d8b:	84 c0                	test   %al,%al
+80100d8d:	75 f1                	jne    80100d80 <exec+0x2d0>
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+80100d8f:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
+80100d95:	83 ec 04             	sub    $0x4,%esp
+80100d98:	6a 10                	push   $0x10
+80100d9a:	89 f8                	mov    %edi,%eax
+80100d9c:	52                   	push   %edx
+80100d9d:	83 c0 6c             	add    $0x6c,%eax
+80100da0:	50                   	push   %eax
+80100da1:	e8 7a 3a 00 00       	call   80104820 <safestrcpy>
+  curproc->pgdir = pgdir;
+80100da6:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
+  oldpgdir = curproc->pgdir;
+80100dac:	89 f8                	mov    %edi,%eax
+80100dae:	8b 7f 04             	mov    0x4(%edi),%edi
+  curproc->sz = sz;
+80100db1:	89 30                	mov    %esi,(%eax)
+  curproc->pgdir = pgdir;
+80100db3:	89 48 04             	mov    %ecx,0x4(%eax)
+  curproc->tf->eip = elf.entry;  // main
+80100db6:	89 c1                	mov    %eax,%ecx
+80100db8:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+80100dbe:	8b 40 18             	mov    0x18(%eax),%eax
+80100dc1:	89 50 38             	mov    %edx,0x38(%eax)
+  curproc->tf->esp = sp;
+80100dc4:	8b 41 18             	mov    0x18(%ecx),%eax
+80100dc7:	89 58 44             	mov    %ebx,0x44(%eax)
+  switchuvm(curproc);
+80100dca:	89 0c 24             	mov    %ecx,(%esp)
+80100dcd:	e8 8e 5c 00 00       	call   80106a60 <switchuvm>
+  freevm(oldpgdir);
+80100dd2:	89 3c 24             	mov    %edi,(%esp)
+80100dd5:	e8 66 60 00 00       	call   80106e40 <freevm>
+  return 0;
+80100dda:	83 c4 10             	add    $0x10,%esp
+80100ddd:	31 c0                	xor    %eax,%eax
+80100ddf:	e9 38 fd ff ff       	jmp    80100b1c <exec+0x6c>
+    end_op();
+80100de4:	e8 e7 1f 00 00       	call   80102dd0 <end_op>
+    cprintf("exec: fail\n");
+80100de9:	83 ec 0c             	sub    $0xc,%esp
+80100dec:	68 a1 72 10 80       	push   $0x801072a1
+80100df1:	e8 aa f8 ff ff       	call   801006a0 <cprintf>
+    return -1;
+80100df6:	83 c4 10             	add    $0x10,%esp
+80100df9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100dfe:	e9 19 fd ff ff       	jmp    80100b1c <exec+0x6c>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100e03:	be 00 20 00 00       	mov    $0x2000,%esi
+80100e08:	31 ff                	xor    %edi,%edi
+80100e0a:	e9 39 fe ff ff       	jmp    80100c48 <exec+0x198>
+80100e0f:	90                   	nop
+
+80100e10 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+80100e10:	55                   	push   %ebp
+80100e11:	89 e5                	mov    %esp,%ebp
+80100e13:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ftable.lock, "ftable");
+80100e16:	68 ad 72 10 80       	push   $0x801072ad
+80100e1b:	68 60 ef 10 80       	push   $0x8010ef60
+80100e20:	e8 ab 35 00 00       	call   801043d0 <initlock>
+}
+80100e25:	83 c4 10             	add    $0x10,%esp
+80100e28:	c9                   	leave  
+80100e29:	c3                   	ret    
+80100e2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100e30 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+80100e30:	55                   	push   %ebp
+80100e31:	89 e5                	mov    %esp,%ebp
+80100e33:	53                   	push   %ebx
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100e34:	bb 94 ef 10 80       	mov    $0x8010ef94,%ebx
+{
+80100e39:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ftable.lock);
+80100e3c:	68 60 ef 10 80       	push   $0x8010ef60
+80100e41:	e8 5a 37 00 00       	call   801045a0 <acquire>
+80100e46:	83 c4 10             	add    $0x10,%esp
+80100e49:	eb 10                	jmp    80100e5b <filealloc+0x2b>
+80100e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100e4f:	90                   	nop
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100e50:	83 c3 18             	add    $0x18,%ebx
+80100e53:	81 fb f4 f8 10 80    	cmp    $0x8010f8f4,%ebx
+80100e59:	74 25                	je     80100e80 <filealloc+0x50>
+    if(f->ref == 0){
+80100e5b:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e5e:	85 c0                	test   %eax,%eax
+80100e60:	75 ee                	jne    80100e50 <filealloc+0x20>
+      f->ref = 1;
+      release(&ftable.lock);
+80100e62:	83 ec 0c             	sub    $0xc,%esp
+      f->ref = 1;
+80100e65:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+      release(&ftable.lock);
+80100e6c:	68 60 ef 10 80       	push   $0x8010ef60
+80100e71:	e8 ca 36 00 00       	call   80104540 <release>
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+80100e76:	89 d8                	mov    %ebx,%eax
+      return f;
+80100e78:	83 c4 10             	add    $0x10,%esp
+}
+80100e7b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e7e:	c9                   	leave  
+80100e7f:	c3                   	ret    
+  release(&ftable.lock);
+80100e80:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80100e83:	31 db                	xor    %ebx,%ebx
+  release(&ftable.lock);
+80100e85:	68 60 ef 10 80       	push   $0x8010ef60
+80100e8a:	e8 b1 36 00 00       	call   80104540 <release>
+}
+80100e8f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80100e91:	83 c4 10             	add    $0x10,%esp
+}
+80100e94:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e97:	c9                   	leave  
+80100e98:	c3                   	ret    
+80100e99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100ea0 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80100ea0:	55                   	push   %ebp
+80100ea1:	89 e5                	mov    %esp,%ebp
+80100ea3:	53                   	push   %ebx
+80100ea4:	83 ec 10             	sub    $0x10,%esp
+80100ea7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ftable.lock);
+80100eaa:	68 60 ef 10 80       	push   $0x8010ef60
+80100eaf:	e8 ec 36 00 00       	call   801045a0 <acquire>
+  if(f->ref < 1)
+80100eb4:	8b 43 04             	mov    0x4(%ebx),%eax
+80100eb7:	83 c4 10             	add    $0x10,%esp
+80100eba:	85 c0                	test   %eax,%eax
+80100ebc:	7e 1a                	jle    80100ed8 <filedup+0x38>
+    panic("filedup");
+  f->ref++;
+80100ebe:	83 c0 01             	add    $0x1,%eax
+  release(&ftable.lock);
+80100ec1:	83 ec 0c             	sub    $0xc,%esp
+  f->ref++;
+80100ec4:	89 43 04             	mov    %eax,0x4(%ebx)
+  release(&ftable.lock);
+80100ec7:	68 60 ef 10 80       	push   $0x8010ef60
+80100ecc:	e8 6f 36 00 00       	call   80104540 <release>
+  return f;
+}
+80100ed1:	89 d8                	mov    %ebx,%eax
+80100ed3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100ed6:	c9                   	leave  
+80100ed7:	c3                   	ret    
+    panic("filedup");
+80100ed8:	83 ec 0c             	sub    $0xc,%esp
+80100edb:	68 b4 72 10 80       	push   $0x801072b4
+80100ee0:	e8 9b f4 ff ff       	call   80100380 <panic>
+80100ee5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100ef0 <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+80100ef0:	55                   	push   %ebp
+80100ef1:	89 e5                	mov    %esp,%ebp
+80100ef3:	57                   	push   %edi
+80100ef4:	56                   	push   %esi
+80100ef5:	53                   	push   %ebx
+80100ef6:	83 ec 28             	sub    $0x28,%esp
+80100ef9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct file ff;
+
+  acquire(&ftable.lock);
+80100efc:	68 60 ef 10 80       	push   $0x8010ef60
+80100f01:	e8 9a 36 00 00       	call   801045a0 <acquire>
+  if(f->ref < 1)
+80100f06:	8b 53 04             	mov    0x4(%ebx),%edx
+80100f09:	83 c4 10             	add    $0x10,%esp
+80100f0c:	85 d2                	test   %edx,%edx
+80100f0e:	0f 8e a5 00 00 00    	jle    80100fb9 <fileclose+0xc9>
+    panic("fileclose");
+  if(--f->ref > 0){
+80100f14:	83 ea 01             	sub    $0x1,%edx
+80100f17:	89 53 04             	mov    %edx,0x4(%ebx)
+80100f1a:	75 44                	jne    80100f60 <fileclose+0x70>
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+80100f1c:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+80100f20:	83 ec 0c             	sub    $0xc,%esp
+  ff = *f;
+80100f23:	8b 3b                	mov    (%ebx),%edi
+  f->type = FD_NONE;
+80100f25:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  ff = *f;
+80100f2b:	8b 73 0c             	mov    0xc(%ebx),%esi
+80100f2e:	88 45 e7             	mov    %al,-0x19(%ebp)
+80100f31:	8b 43 10             	mov    0x10(%ebx),%eax
+  release(&ftable.lock);
+80100f34:	68 60 ef 10 80       	push   $0x8010ef60
+  ff = *f;
+80100f39:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  release(&ftable.lock);
+80100f3c:	e8 ff 35 00 00       	call   80104540 <release>
+
+  if(ff.type == FD_PIPE)
+80100f41:	83 c4 10             	add    $0x10,%esp
+80100f44:	83 ff 01             	cmp    $0x1,%edi
+80100f47:	74 57                	je     80100fa0 <fileclose+0xb0>
+    pipeclose(ff.pipe, ff.writable);
+  else if(ff.type == FD_INODE){
+80100f49:	83 ff 02             	cmp    $0x2,%edi
+80100f4c:	74 2a                	je     80100f78 <fileclose+0x88>
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80100f4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f51:	5b                   	pop    %ebx
+80100f52:	5e                   	pop    %esi
+80100f53:	5f                   	pop    %edi
+80100f54:	5d                   	pop    %ebp
+80100f55:	c3                   	ret    
+80100f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f5d:	8d 76 00             	lea    0x0(%esi),%esi
+    release(&ftable.lock);
+80100f60:	c7 45 08 60 ef 10 80 	movl   $0x8010ef60,0x8(%ebp)
+}
+80100f67:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f6a:	5b                   	pop    %ebx
+80100f6b:	5e                   	pop    %esi
+80100f6c:	5f                   	pop    %edi
+80100f6d:	5d                   	pop    %ebp
+    release(&ftable.lock);
+80100f6e:	e9 cd 35 00 00       	jmp    80104540 <release>
+80100f73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100f77:	90                   	nop
+    begin_op();
+80100f78:	e8 e3 1d 00 00       	call   80102d60 <begin_op>
+    iput(ff.ip);
+80100f7d:	83 ec 0c             	sub    $0xc,%esp
+80100f80:	ff 75 e0             	push   -0x20(%ebp)
+80100f83:	e8 28 09 00 00       	call   801018b0 <iput>
+    end_op();
+80100f88:	83 c4 10             	add    $0x10,%esp
+}
+80100f8b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f8e:	5b                   	pop    %ebx
+80100f8f:	5e                   	pop    %esi
+80100f90:	5f                   	pop    %edi
+80100f91:	5d                   	pop    %ebp
+    end_op();
+80100f92:	e9 39 1e 00 00       	jmp    80102dd0 <end_op>
+80100f97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f9e:	66 90                	xchg   %ax,%ax
+    pipeclose(ff.pipe, ff.writable);
+80100fa0:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80100fa4:	83 ec 08             	sub    $0x8,%esp
+80100fa7:	53                   	push   %ebx
+80100fa8:	56                   	push   %esi
+80100fa9:	e8 82 25 00 00       	call   80103530 <pipeclose>
+80100fae:	83 c4 10             	add    $0x10,%esp
+}
+80100fb1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100fb4:	5b                   	pop    %ebx
+80100fb5:	5e                   	pop    %esi
+80100fb6:	5f                   	pop    %edi
+80100fb7:	5d                   	pop    %ebp
+80100fb8:	c3                   	ret    
+    panic("fileclose");
+80100fb9:	83 ec 0c             	sub    $0xc,%esp
+80100fbc:	68 bc 72 10 80       	push   $0x801072bc
+80100fc1:	e8 ba f3 ff ff       	call   80100380 <panic>
+80100fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100fcd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100fd0 <filestat>:
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+80100fd0:	55                   	push   %ebp
+80100fd1:	89 e5                	mov    %esp,%ebp
+80100fd3:	53                   	push   %ebx
+80100fd4:	83 ec 04             	sub    $0x4,%esp
+80100fd7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(f->type == FD_INODE){
+80100fda:	83 3b 02             	cmpl   $0x2,(%ebx)
+80100fdd:	75 31                	jne    80101010 <filestat+0x40>
+    ilock(f->ip);
+80100fdf:	83 ec 0c             	sub    $0xc,%esp
+80100fe2:	ff 73 10             	push   0x10(%ebx)
+80100fe5:	e8 96 07 00 00       	call   80101780 <ilock>
+    stati(f->ip, st);
+80100fea:	58                   	pop    %eax
+80100feb:	5a                   	pop    %edx
+80100fec:	ff 75 0c             	push   0xc(%ebp)
+80100fef:	ff 73 10             	push   0x10(%ebx)
+80100ff2:	e8 69 0a 00 00       	call   80101a60 <stati>
+    iunlock(f->ip);
+80100ff7:	59                   	pop    %ecx
+80100ff8:	ff 73 10             	push   0x10(%ebx)
+80100ffb:	e8 60 08 00 00       	call   80101860 <iunlock>
+    return 0;
+  }
+  return -1;
+}
+80101000:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    return 0;
+80101003:	83 c4 10             	add    $0x10,%esp
+80101006:	31 c0                	xor    %eax,%eax
+}
+80101008:	c9                   	leave  
+80101009:	c3                   	ret    
+8010100a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101010:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  return -1;
+80101013:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80101018:	c9                   	leave  
+80101019:	c3                   	ret    
+8010101a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101020 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+80101020:	55                   	push   %ebp
+80101021:	89 e5                	mov    %esp,%ebp
+80101023:	57                   	push   %edi
+80101024:	56                   	push   %esi
+80101025:	53                   	push   %ebx
+80101026:	83 ec 0c             	sub    $0xc,%esp
+80101029:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010102c:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010102f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  int r;
+
+  if(f->readable == 0)
+80101032:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+80101036:	74 60                	je     80101098 <fileread+0x78>
+    return -1;
+  if(f->type == FD_PIPE)
+80101038:	8b 03                	mov    (%ebx),%eax
+8010103a:	83 f8 01             	cmp    $0x1,%eax
+8010103d:	74 41                	je     80101080 <fileread+0x60>
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+8010103f:	83 f8 02             	cmp    $0x2,%eax
+80101042:	75 5b                	jne    8010109f <fileread+0x7f>
+    ilock(f->ip);
+80101044:	83 ec 0c             	sub    $0xc,%esp
+80101047:	ff 73 10             	push   0x10(%ebx)
+8010104a:	e8 31 07 00 00       	call   80101780 <ilock>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+8010104f:	57                   	push   %edi
+80101050:	ff 73 14             	push   0x14(%ebx)
+80101053:	56                   	push   %esi
+80101054:	ff 73 10             	push   0x10(%ebx)
+80101057:	e8 34 0a 00 00       	call   80101a90 <readi>
+8010105c:	83 c4 20             	add    $0x20,%esp
+8010105f:	89 c6                	mov    %eax,%esi
+80101061:	85 c0                	test   %eax,%eax
+80101063:	7e 03                	jle    80101068 <fileread+0x48>
+      f->off += r;
+80101065:	01 43 14             	add    %eax,0x14(%ebx)
+    iunlock(f->ip);
+80101068:	83 ec 0c             	sub    $0xc,%esp
+8010106b:	ff 73 10             	push   0x10(%ebx)
+8010106e:	e8 ed 07 00 00       	call   80101860 <iunlock>
+    return r;
+80101073:	83 c4 10             	add    $0x10,%esp
+  }
+  panic("fileread");
+}
+80101076:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101079:	89 f0                	mov    %esi,%eax
+8010107b:	5b                   	pop    %ebx
+8010107c:	5e                   	pop    %esi
+8010107d:	5f                   	pop    %edi
+8010107e:	5d                   	pop    %ebp
+8010107f:	c3                   	ret    
+    return piperead(f->pipe, addr, n);
+80101080:	8b 43 0c             	mov    0xc(%ebx),%eax
+80101083:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80101086:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101089:	5b                   	pop    %ebx
+8010108a:	5e                   	pop    %esi
+8010108b:	5f                   	pop    %edi
+8010108c:	5d                   	pop    %ebp
+    return piperead(f->pipe, addr, n);
+8010108d:	e9 3e 26 00 00       	jmp    801036d0 <piperead>
+80101092:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80101098:	be ff ff ff ff       	mov    $0xffffffff,%esi
+8010109d:	eb d7                	jmp    80101076 <fileread+0x56>
+  panic("fileread");
+8010109f:	83 ec 0c             	sub    $0xc,%esp
+801010a2:	68 c6 72 10 80       	push   $0x801072c6
+801010a7:	e8 d4 f2 ff ff       	call   80100380 <panic>
+801010ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801010b0 <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+801010b0:	55                   	push   %ebp
+801010b1:	89 e5                	mov    %esp,%ebp
+801010b3:	57                   	push   %edi
+801010b4:	56                   	push   %esi
+801010b5:	53                   	push   %ebx
+801010b6:	83 ec 1c             	sub    $0x1c,%esp
+801010b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+801010bc:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801010bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801010c2:	8b 45 10             	mov    0x10(%ebp),%eax
+  int r;
+
+  if(f->writable == 0)
+801010c5:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
+{
+801010c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(f->writable == 0)
+801010cc:	0f 84 bd 00 00 00    	je     8010118f <filewrite+0xdf>
+    return -1;
+  if(f->type == FD_PIPE)
+801010d2:	8b 03                	mov    (%ebx),%eax
+801010d4:	83 f8 01             	cmp    $0x1,%eax
+801010d7:	0f 84 bf 00 00 00    	je     8010119c <filewrite+0xec>
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+801010dd:	83 f8 02             	cmp    $0x2,%eax
+801010e0:	0f 85 c8 00 00 00    	jne    801011ae <filewrite+0xfe>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+801010e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    int i = 0;
+801010e9:	31 f6                	xor    %esi,%esi
+    while(i < n){
+801010eb:	85 c0                	test   %eax,%eax
+801010ed:	7f 30                	jg     8010111f <filewrite+0x6f>
+801010ef:	e9 94 00 00 00       	jmp    80101188 <filewrite+0xd8>
+801010f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+801010f8:	01 43 14             	add    %eax,0x14(%ebx)
+      iunlock(f->ip);
+801010fb:	83 ec 0c             	sub    $0xc,%esp
+801010fe:	ff 73 10             	push   0x10(%ebx)
+        f->off += r;
+80101101:	89 45 e0             	mov    %eax,-0x20(%ebp)
+      iunlock(f->ip);
+80101104:	e8 57 07 00 00       	call   80101860 <iunlock>
+      end_op();
+80101109:	e8 c2 1c 00 00       	call   80102dd0 <end_op>
+
+      if(r < 0)
+        break;
+      if(r != n1)
+8010110e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101111:	83 c4 10             	add    $0x10,%esp
+80101114:	39 c7                	cmp    %eax,%edi
+80101116:	75 5c                	jne    80101174 <filewrite+0xc4>
+        panic("short filewrite");
+      i += r;
+80101118:	01 fe                	add    %edi,%esi
+    while(i < n){
+8010111a:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+8010111d:	7e 69                	jle    80101188 <filewrite+0xd8>
+      int n1 = n - i;
+8010111f:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80101122:	b8 00 06 00 00       	mov    $0x600,%eax
+80101127:	29 f7                	sub    %esi,%edi
+80101129:	39 c7                	cmp    %eax,%edi
+8010112b:	0f 4f f8             	cmovg  %eax,%edi
+      begin_op();
+8010112e:	e8 2d 1c 00 00       	call   80102d60 <begin_op>
+      ilock(f->ip);
+80101133:	83 ec 0c             	sub    $0xc,%esp
+80101136:	ff 73 10             	push   0x10(%ebx)
+80101139:	e8 42 06 00 00       	call   80101780 <ilock>
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+8010113e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101141:	57                   	push   %edi
+80101142:	ff 73 14             	push   0x14(%ebx)
+80101145:	01 f0                	add    %esi,%eax
+80101147:	50                   	push   %eax
+80101148:	ff 73 10             	push   0x10(%ebx)
+8010114b:	e8 40 0a 00 00       	call   80101b90 <writei>
+80101150:	83 c4 20             	add    $0x20,%esp
+80101153:	85 c0                	test   %eax,%eax
+80101155:	7f a1                	jg     801010f8 <filewrite+0x48>
+      iunlock(f->ip);
+80101157:	83 ec 0c             	sub    $0xc,%esp
+8010115a:	ff 73 10             	push   0x10(%ebx)
+8010115d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101160:	e8 fb 06 00 00       	call   80101860 <iunlock>
+      end_op();
+80101165:	e8 66 1c 00 00       	call   80102dd0 <end_op>
+      if(r < 0)
+8010116a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010116d:	83 c4 10             	add    $0x10,%esp
+80101170:	85 c0                	test   %eax,%eax
+80101172:	75 1b                	jne    8010118f <filewrite+0xdf>
+        panic("short filewrite");
+80101174:	83 ec 0c             	sub    $0xc,%esp
+80101177:	68 cf 72 10 80       	push   $0x801072cf
+8010117c:	e8 ff f1 ff ff       	call   80100380 <panic>
+80101181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+    return i == n ? n : -1;
+80101188:	89 f0                	mov    %esi,%eax
+8010118a:	3b 75 e4             	cmp    -0x1c(%ebp),%esi
+8010118d:	74 05                	je     80101194 <filewrite+0xe4>
+8010118f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  panic("filewrite");
+}
+80101194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101197:	5b                   	pop    %ebx
+80101198:	5e                   	pop    %esi
+80101199:	5f                   	pop    %edi
+8010119a:	5d                   	pop    %ebp
+8010119b:	c3                   	ret    
+    return pipewrite(f->pipe, addr, n);
+8010119c:	8b 43 0c             	mov    0xc(%ebx),%eax
+8010119f:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+801011a2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801011a5:	5b                   	pop    %ebx
+801011a6:	5e                   	pop    %esi
+801011a7:	5f                   	pop    %edi
+801011a8:	5d                   	pop    %ebp
+    return pipewrite(f->pipe, addr, n);
+801011a9:	e9 22 24 00 00       	jmp    801035d0 <pipewrite>
+  panic("filewrite");
+801011ae:	83 ec 0c             	sub    $0xc,%esp
+801011b1:	68 d5 72 10 80       	push   $0x801072d5
+801011b6:	e8 c5 f1 ff ff       	call   80100380 <panic>
+801011bb:	66 90                	xchg   %ax,%ax
+801011bd:	66 90                	xchg   %ax,%ax
+801011bf:	90                   	nop
+
+801011c0 <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+801011c0:	55                   	push   %ebp
+801011c1:	89 c1                	mov    %eax,%ecx
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+801011c3:	89 d0                	mov    %edx,%eax
+801011c5:	c1 e8 0c             	shr    $0xc,%eax
+801011c8:	03 05 cc 15 11 80    	add    0x801115cc,%eax
+{
+801011ce:	89 e5                	mov    %esp,%ebp
+801011d0:	56                   	push   %esi
+801011d1:	53                   	push   %ebx
+801011d2:	89 d3                	mov    %edx,%ebx
+  bp = bread(dev, BBLOCK(b, sb));
+801011d4:	83 ec 08             	sub    $0x8,%esp
+801011d7:	50                   	push   %eax
+801011d8:	51                   	push   %ecx
+801011d9:	e8 f2 ee ff ff       	call   801000d0 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+801011de:	89 d9                	mov    %ebx,%ecx
+  if((bp->data[bi/8] & m) == 0)
+801011e0:	c1 fb 03             	sar    $0x3,%ebx
+801011e3:	83 c4 10             	add    $0x10,%esp
+  bp = bread(dev, BBLOCK(b, sb));
+801011e6:	89 c6                	mov    %eax,%esi
+  m = 1 << (bi % 8);
+801011e8:	83 e1 07             	and    $0x7,%ecx
+801011eb:	b8 01 00 00 00       	mov    $0x1,%eax
+  if((bp->data[bi/8] & m) == 0)
+801011f0:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+  m = 1 << (bi % 8);
+801011f6:	d3 e0                	shl    %cl,%eax
+  if((bp->data[bi/8] & m) == 0)
+801011f8:	0f b6 4c 1e 5c       	movzbl 0x5c(%esi,%ebx,1),%ecx
+801011fd:	85 c1                	test   %eax,%ecx
+801011ff:	74 23                	je     80101224 <bfree+0x64>
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+80101201:	f7 d0                	not    %eax
+  log_write(bp);
+80101203:	83 ec 0c             	sub    $0xc,%esp
+  bp->data[bi/8] &= ~m;
+80101206:	21 c8                	and    %ecx,%eax
+80101208:	88 44 1e 5c          	mov    %al,0x5c(%esi,%ebx,1)
+  log_write(bp);
+8010120c:	56                   	push   %esi
+8010120d:	e8 2e 1d 00 00       	call   80102f40 <log_write>
+  brelse(bp);
+80101212:	89 34 24             	mov    %esi,(%esp)
+80101215:	e8 d6 ef ff ff       	call   801001f0 <brelse>
+}
+8010121a:	83 c4 10             	add    $0x10,%esp
+8010121d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101220:	5b                   	pop    %ebx
+80101221:	5e                   	pop    %esi
+80101222:	5d                   	pop    %ebp
+80101223:	c3                   	ret    
+    panic("freeing free block");
+80101224:	83 ec 0c             	sub    $0xc,%esp
+80101227:	68 df 72 10 80       	push   $0x801072df
+8010122c:	e8 4f f1 ff ff       	call   80100380 <panic>
+80101231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010123f:	90                   	nop
+
+80101240 <balloc>:
+{
+80101240:	55                   	push   %ebp
+80101241:	89 e5                	mov    %esp,%ebp
+80101243:	57                   	push   %edi
+80101244:	56                   	push   %esi
+80101245:	53                   	push   %ebx
+80101246:	83 ec 1c             	sub    $0x1c,%esp
+  for(b = 0; b < sb.size; b += BPB){
+80101249:	8b 0d b4 15 11 80    	mov    0x801115b4,%ecx
+{
+8010124f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  for(b = 0; b < sb.size; b += BPB){
+80101252:	85 c9                	test   %ecx,%ecx
+80101254:	0f 84 87 00 00 00    	je     801012e1 <balloc+0xa1>
+8010125a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    bp = bread(dev, BBLOCK(b, sb));
+80101261:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101264:	83 ec 08             	sub    $0x8,%esp
+80101267:	89 f0                	mov    %esi,%eax
+80101269:	c1 f8 0c             	sar    $0xc,%eax
+8010126c:	03 05 cc 15 11 80    	add    0x801115cc,%eax
+80101272:	50                   	push   %eax
+80101273:	ff 75 d8             	push   -0x28(%ebp)
+80101276:	e8 55 ee ff ff       	call   801000d0 <bread>
+8010127b:	83 c4 10             	add    $0x10,%esp
+8010127e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+80101281:	a1 b4 15 11 80       	mov    0x801115b4,%eax
+80101286:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101289:	31 c0                	xor    %eax,%eax
+8010128b:	eb 2f                	jmp    801012bc <balloc+0x7c>
+8010128d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 1 << (bi % 8);
+80101290:	89 c1                	mov    %eax,%ecx
+80101292:	bb 01 00 00 00       	mov    $0x1,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101297:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      m = 1 << (bi % 8);
+8010129a:	83 e1 07             	and    $0x7,%ecx
+8010129d:	d3 e3                	shl    %cl,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+8010129f:	89 c1                	mov    %eax,%ecx
+801012a1:	c1 f9 03             	sar    $0x3,%ecx
+801012a4:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+801012a9:	89 fa                	mov    %edi,%edx
+801012ab:	85 df                	test   %ebx,%edi
+801012ad:	74 41                	je     801012f0 <balloc+0xb0>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+801012af:	83 c0 01             	add    $0x1,%eax
+801012b2:	83 c6 01             	add    $0x1,%esi
+801012b5:	3d 00 10 00 00       	cmp    $0x1000,%eax
+801012ba:	74 05                	je     801012c1 <balloc+0x81>
+801012bc:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+801012bf:	77 cf                	ja     80101290 <balloc+0x50>
+    brelse(bp);
+801012c1:	83 ec 0c             	sub    $0xc,%esp
+801012c4:	ff 75 e4             	push   -0x1c(%ebp)
+801012c7:	e8 24 ef ff ff       	call   801001f0 <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+801012cc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+801012d3:	83 c4 10             	add    $0x10,%esp
+801012d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801012d9:	39 05 b4 15 11 80    	cmp    %eax,0x801115b4
+801012df:	77 80                	ja     80101261 <balloc+0x21>
+  panic("balloc: out of blocks");
+801012e1:	83 ec 0c             	sub    $0xc,%esp
+801012e4:	68 f2 72 10 80       	push   $0x801072f2
+801012e9:	e8 92 f0 ff ff       	call   80100380 <panic>
+801012ee:	66 90                	xchg   %ax,%ax
+        bp->data[bi/8] |= m;  // Mark block in use.
+801012f0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        log_write(bp);
+801012f3:	83 ec 0c             	sub    $0xc,%esp
+        bp->data[bi/8] |= m;  // Mark block in use.
+801012f6:	09 da                	or     %ebx,%edx
+801012f8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+        log_write(bp);
+801012fc:	57                   	push   %edi
+801012fd:	e8 3e 1c 00 00       	call   80102f40 <log_write>
+        brelse(bp);
+80101302:	89 3c 24             	mov    %edi,(%esp)
+80101305:	e8 e6 ee ff ff       	call   801001f0 <brelse>
+  bp = bread(dev, bno);
+8010130a:	58                   	pop    %eax
+8010130b:	5a                   	pop    %edx
+8010130c:	56                   	push   %esi
+8010130d:	ff 75 d8             	push   -0x28(%ebp)
+80101310:	e8 bb ed ff ff       	call   801000d0 <bread>
+  memset(bp->data, 0, BSIZE);
+80101315:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, bno);
+80101318:	89 c3                	mov    %eax,%ebx
+  memset(bp->data, 0, BSIZE);
+8010131a:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010131d:	68 00 02 00 00       	push   $0x200
+80101322:	6a 00                	push   $0x0
+80101324:	50                   	push   %eax
+80101325:	e8 36 33 00 00       	call   80104660 <memset>
+  log_write(bp);
+8010132a:	89 1c 24             	mov    %ebx,(%esp)
+8010132d:	e8 0e 1c 00 00       	call   80102f40 <log_write>
+  brelse(bp);
+80101332:	89 1c 24             	mov    %ebx,(%esp)
+80101335:	e8 b6 ee ff ff       	call   801001f0 <brelse>
+}
+8010133a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010133d:	89 f0                	mov    %esi,%eax
+8010133f:	5b                   	pop    %ebx
+80101340:	5e                   	pop    %esi
+80101341:	5f                   	pop    %edi
+80101342:	5d                   	pop    %ebp
+80101343:	c3                   	ret    
+80101344:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010134b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010134f:	90                   	nop
+
+80101350 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+80101350:	55                   	push   %ebp
+80101351:	89 e5                	mov    %esp,%ebp
+80101353:	57                   	push   %edi
+80101354:	89 c7                	mov    %eax,%edi
+80101356:	56                   	push   %esi
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+80101357:	31 f6                	xor    %esi,%esi
+{
+80101359:	53                   	push   %ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010135a:	bb 94 f9 10 80       	mov    $0x8010f994,%ebx
+{
+8010135f:	83 ec 28             	sub    $0x28,%esp
+80101362:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  acquire(&icache.lock);
+80101365:	68 60 f9 10 80       	push   $0x8010f960
+8010136a:	e8 31 32 00 00       	call   801045a0 <acquire>
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010136f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  acquire(&icache.lock);
+80101372:	83 c4 10             	add    $0x10,%esp
+80101375:	eb 1b                	jmp    80101392 <iget+0x42>
+80101377:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010137e:	66 90                	xchg   %ax,%ax
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101380:	39 3b                	cmp    %edi,(%ebx)
+80101382:	74 6c                	je     801013f0 <iget+0xa0>
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101384:	81 c3 90 00 00 00    	add    $0x90,%ebx
+8010138a:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
+80101390:	73 26                	jae    801013b8 <iget+0x68>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101392:	8b 43 08             	mov    0x8(%ebx),%eax
+80101395:	85 c0                	test   %eax,%eax
+80101397:	7f e7                	jg     80101380 <iget+0x30>
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+80101399:	85 f6                	test   %esi,%esi
+8010139b:	75 e7                	jne    80101384 <iget+0x34>
+8010139d:	85 c0                	test   %eax,%eax
+8010139f:	75 76                	jne    80101417 <iget+0xc7>
+801013a1:	89 de                	mov    %ebx,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+801013a3:	81 c3 90 00 00 00    	add    $0x90,%ebx
+801013a9:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
+801013af:	72 e1                	jb     80101392 <iget+0x42>
+801013b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+801013b8:	85 f6                	test   %esi,%esi
+801013ba:	74 79                	je     80101435 <iget+0xe5>
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+801013bc:	83 ec 0c             	sub    $0xc,%esp
+  ip->dev = dev;
+801013bf:	89 3e                	mov    %edi,(%esi)
+  ip->inum = inum;
+801013c1:	89 56 04             	mov    %edx,0x4(%esi)
+  ip->ref = 1;
+801013c4:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+  ip->valid = 0;
+801013cb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+  release(&icache.lock);
+801013d2:	68 60 f9 10 80       	push   $0x8010f960
+801013d7:	e8 64 31 00 00       	call   80104540 <release>
+
+  return ip;
+801013dc:	83 c4 10             	add    $0x10,%esp
+}
+801013df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801013e2:	89 f0                	mov    %esi,%eax
+801013e4:	5b                   	pop    %ebx
+801013e5:	5e                   	pop    %esi
+801013e6:	5f                   	pop    %edi
+801013e7:	5d                   	pop    %ebp
+801013e8:	c3                   	ret    
+801013e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+801013f0:	39 53 04             	cmp    %edx,0x4(%ebx)
+801013f3:	75 8f                	jne    80101384 <iget+0x34>
+      release(&icache.lock);
+801013f5:	83 ec 0c             	sub    $0xc,%esp
+      ip->ref++;
+801013f8:	83 c0 01             	add    $0x1,%eax
+      return ip;
+801013fb:	89 de                	mov    %ebx,%esi
+      release(&icache.lock);
+801013fd:	68 60 f9 10 80       	push   $0x8010f960
+      ip->ref++;
+80101402:	89 43 08             	mov    %eax,0x8(%ebx)
+      release(&icache.lock);
+80101405:	e8 36 31 00 00       	call   80104540 <release>
+      return ip;
+8010140a:	83 c4 10             	add    $0x10,%esp
+}
+8010140d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101410:	89 f0                	mov    %esi,%eax
+80101412:	5b                   	pop    %ebx
+80101413:	5e                   	pop    %esi
+80101414:	5f                   	pop    %edi
+80101415:	5d                   	pop    %ebp
+80101416:	c3                   	ret    
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101417:	81 c3 90 00 00 00    	add    $0x90,%ebx
+8010141d:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
+80101423:	73 10                	jae    80101435 <iget+0xe5>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101425:	8b 43 08             	mov    0x8(%ebx),%eax
+80101428:	85 c0                	test   %eax,%eax
+8010142a:	0f 8f 50 ff ff ff    	jg     80101380 <iget+0x30>
+80101430:	e9 68 ff ff ff       	jmp    8010139d <iget+0x4d>
+    panic("iget: no inodes");
+80101435:	83 ec 0c             	sub    $0xc,%esp
+80101438:	68 08 73 10 80       	push   $0x80107308
+8010143d:	e8 3e ef ff ff       	call   80100380 <panic>
+80101442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101450 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+80101450:	55                   	push   %ebp
+80101451:	89 e5                	mov    %esp,%ebp
+80101453:	57                   	push   %edi
+80101454:	56                   	push   %esi
+80101455:	89 c6                	mov    %eax,%esi
+80101457:	53                   	push   %ebx
+80101458:	83 ec 1c             	sub    $0x1c,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+8010145b:	83 fa 0b             	cmp    $0xb,%edx
+8010145e:	0f 86 8c 00 00 00    	jbe    801014f0 <bmap+0xa0>
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+80101464:	8d 5a f4             	lea    -0xc(%edx),%ebx
+
+  if(bn < NINDIRECT){
+80101467:	83 fb 7f             	cmp    $0x7f,%ebx
+8010146a:	0f 87 a2 00 00 00    	ja     80101512 <bmap+0xc2>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101470:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
+80101476:	85 c0                	test   %eax,%eax
+80101478:	74 5e                	je     801014d8 <bmap+0x88>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+8010147a:	83 ec 08             	sub    $0x8,%esp
+8010147d:	50                   	push   %eax
+8010147e:	ff 36                	push   (%esi)
+80101480:	e8 4b ec ff ff       	call   801000d0 <bread>
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+80101485:	83 c4 10             	add    $0x10,%esp
+80101488:	8d 5c 98 5c          	lea    0x5c(%eax,%ebx,4),%ebx
+    bp = bread(ip->dev, addr);
+8010148c:	89 c2                	mov    %eax,%edx
+    if((addr = a[bn]) == 0){
+8010148e:	8b 3b                	mov    (%ebx),%edi
+80101490:	85 ff                	test   %edi,%edi
+80101492:	74 1c                	je     801014b0 <bmap+0x60>
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+80101494:	83 ec 0c             	sub    $0xc,%esp
+80101497:	52                   	push   %edx
+80101498:	e8 53 ed ff ff       	call   801001f0 <brelse>
+8010149d:	83 c4 10             	add    $0x10,%esp
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+801014a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801014a3:	89 f8                	mov    %edi,%eax
+801014a5:	5b                   	pop    %ebx
+801014a6:	5e                   	pop    %esi
+801014a7:	5f                   	pop    %edi
+801014a8:	5d                   	pop    %ebp
+801014a9:	c3                   	ret    
+801014aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801014b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+      a[bn] = addr = balloc(ip->dev);
+801014b3:	8b 06                	mov    (%esi),%eax
+801014b5:	e8 86 fd ff ff       	call   80101240 <balloc>
+      log_write(bp);
+801014ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801014bd:	83 ec 0c             	sub    $0xc,%esp
+      a[bn] = addr = balloc(ip->dev);
+801014c0:	89 03                	mov    %eax,(%ebx)
+801014c2:	89 c7                	mov    %eax,%edi
+      log_write(bp);
+801014c4:	52                   	push   %edx
+801014c5:	e8 76 1a 00 00       	call   80102f40 <log_write>
+801014ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801014cd:	83 c4 10             	add    $0x10,%esp
+801014d0:	eb c2                	jmp    80101494 <bmap+0x44>
+801014d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+801014d8:	8b 06                	mov    (%esi),%eax
+801014da:	e8 61 fd ff ff       	call   80101240 <balloc>
+801014df:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+801014e5:	eb 93                	jmp    8010147a <bmap+0x2a>
+801014e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014ee:	66 90                	xchg   %ax,%ax
+    if((addr = ip->addrs[bn]) == 0)
+801014f0:	8d 5a 14             	lea    0x14(%edx),%ebx
+801014f3:	8b 7c 98 0c          	mov    0xc(%eax,%ebx,4),%edi
+801014f7:	85 ff                	test   %edi,%edi
+801014f9:	75 a5                	jne    801014a0 <bmap+0x50>
+      ip->addrs[bn] = addr = balloc(ip->dev);
+801014fb:	8b 00                	mov    (%eax),%eax
+801014fd:	e8 3e fd ff ff       	call   80101240 <balloc>
+80101502:	89 44 9e 0c          	mov    %eax,0xc(%esi,%ebx,4)
+80101506:	89 c7                	mov    %eax,%edi
+}
+80101508:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010150b:	5b                   	pop    %ebx
+8010150c:	89 f8                	mov    %edi,%eax
+8010150e:	5e                   	pop    %esi
+8010150f:	5f                   	pop    %edi
+80101510:	5d                   	pop    %ebp
+80101511:	c3                   	ret    
+  panic("bmap: out of range");
+80101512:	83 ec 0c             	sub    $0xc,%esp
+80101515:	68 18 73 10 80       	push   $0x80107318
+8010151a:	e8 61 ee ff ff       	call   80100380 <panic>
+8010151f:	90                   	nop
+
+80101520 <readsb>:
+{
+80101520:	55                   	push   %ebp
+80101521:	89 e5                	mov    %esp,%ebp
+80101523:	56                   	push   %esi
+80101524:	53                   	push   %ebx
+80101525:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bp = bread(dev, 1);
+80101528:	83 ec 08             	sub    $0x8,%esp
+8010152b:	6a 01                	push   $0x1
+8010152d:	ff 75 08             	push   0x8(%ebp)
+80101530:	e8 9b eb ff ff       	call   801000d0 <bread>
+  memmove(sb, bp->data, sizeof(*sb));
+80101535:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, 1);
+80101538:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+8010153a:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010153d:	6a 1c                	push   $0x1c
+8010153f:	50                   	push   %eax
+80101540:	56                   	push   %esi
+80101541:	e8 ba 31 00 00       	call   80104700 <memmove>
+  brelse(bp);
+80101546:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101549:	83 c4 10             	add    $0x10,%esp
+}
+8010154c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010154f:	5b                   	pop    %ebx
+80101550:	5e                   	pop    %esi
+80101551:	5d                   	pop    %ebp
+  brelse(bp);
+80101552:	e9 99 ec ff ff       	jmp    801001f0 <brelse>
+80101557:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010155e:	66 90                	xchg   %ax,%ax
+
+80101560 <iinit>:
+{
+80101560:	55                   	push   %ebp
+80101561:	89 e5                	mov    %esp,%ebp
+80101563:	53                   	push   %ebx
+80101564:	bb a0 f9 10 80       	mov    $0x8010f9a0,%ebx
+80101569:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&icache.lock, "icache");
+8010156c:	68 2b 73 10 80       	push   $0x8010732b
+80101571:	68 60 f9 10 80       	push   $0x8010f960
+80101576:	e8 55 2e 00 00       	call   801043d0 <initlock>
+  for(i = 0; i < NINODE; i++) {
+8010157b:	83 c4 10             	add    $0x10,%esp
+8010157e:	66 90                	xchg   %ax,%ax
+    initsleeplock(&icache.inode[i].lock, "inode");
+80101580:	83 ec 08             	sub    $0x8,%esp
+80101583:	68 32 73 10 80       	push   $0x80107332
+80101588:	53                   	push   %ebx
+  for(i = 0; i < NINODE; i++) {
+80101589:	81 c3 90 00 00 00    	add    $0x90,%ebx
+    initsleeplock(&icache.inode[i].lock, "inode");
+8010158f:	e8 0c 2d 00 00       	call   801042a0 <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+80101594:	83 c4 10             	add    $0x10,%esp
+80101597:	81 fb c0 15 11 80    	cmp    $0x801115c0,%ebx
+8010159d:	75 e1                	jne    80101580 <iinit+0x20>
+  bp = bread(dev, 1);
+8010159f:	83 ec 08             	sub    $0x8,%esp
+801015a2:	6a 01                	push   $0x1
+801015a4:	ff 75 08             	push   0x8(%ebp)
+801015a7:	e8 24 eb ff ff       	call   801000d0 <bread>
+  memmove(sb, bp->data, sizeof(*sb));
+801015ac:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, 1);
+801015af:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+801015b1:	8d 40 5c             	lea    0x5c(%eax),%eax
+801015b4:	6a 1c                	push   $0x1c
+801015b6:	50                   	push   %eax
+801015b7:	68 b4 15 11 80       	push   $0x801115b4
+801015bc:	e8 3f 31 00 00       	call   80104700 <memmove>
+  brelse(bp);
+801015c1:	89 1c 24             	mov    %ebx,(%esp)
+801015c4:	e8 27 ec ff ff       	call   801001f0 <brelse>
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+801015c9:	ff 35 cc 15 11 80    	push   0x801115cc
+801015cf:	ff 35 c8 15 11 80    	push   0x801115c8
+801015d5:	ff 35 c4 15 11 80    	push   0x801115c4
+801015db:	ff 35 c0 15 11 80    	push   0x801115c0
+801015e1:	ff 35 bc 15 11 80    	push   0x801115bc
+801015e7:	ff 35 b8 15 11 80    	push   0x801115b8
+801015ed:	ff 35 b4 15 11 80    	push   0x801115b4
+801015f3:	68 98 73 10 80       	push   $0x80107398
+801015f8:	e8 a3 f0 ff ff       	call   801006a0 <cprintf>
+}
+801015fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101600:	83 c4 30             	add    $0x30,%esp
+80101603:	c9                   	leave  
+80101604:	c3                   	ret    
+80101605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010160c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101610 <ialloc>:
+{
+80101610:	55                   	push   %ebp
+80101611:	89 e5                	mov    %esp,%ebp
+80101613:	57                   	push   %edi
+80101614:	56                   	push   %esi
+80101615:	53                   	push   %ebx
+80101616:	83 ec 1c             	sub    $0x1c,%esp
+80101619:	8b 45 0c             	mov    0xc(%ebp),%eax
+  for(inum = 1; inum < sb.ninodes; inum++){
+8010161c:	83 3d bc 15 11 80 01 	cmpl   $0x1,0x801115bc
+{
+80101623:	8b 75 08             	mov    0x8(%ebp),%esi
+80101626:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101629:	0f 86 91 00 00 00    	jbe    801016c0 <ialloc+0xb0>
+8010162f:	bf 01 00 00 00       	mov    $0x1,%edi
+80101634:	eb 21                	jmp    80101657 <ialloc+0x47>
+80101636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010163d:	8d 76 00             	lea    0x0(%esi),%esi
+    brelse(bp);
+80101640:	83 ec 0c             	sub    $0xc,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101643:	83 c7 01             	add    $0x1,%edi
+    brelse(bp);
+80101646:	53                   	push   %ebx
+80101647:	e8 a4 eb ff ff       	call   801001f0 <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+8010164c:	83 c4 10             	add    $0x10,%esp
+8010164f:	3b 3d bc 15 11 80    	cmp    0x801115bc,%edi
+80101655:	73 69                	jae    801016c0 <ialloc+0xb0>
+    bp = bread(dev, IBLOCK(inum, sb));
+80101657:	89 f8                	mov    %edi,%eax
+80101659:	83 ec 08             	sub    $0x8,%esp
+8010165c:	c1 e8 03             	shr    $0x3,%eax
+8010165f:	03 05 c8 15 11 80    	add    0x801115c8,%eax
+80101665:	50                   	push   %eax
+80101666:	56                   	push   %esi
+80101667:	e8 64 ea ff ff       	call   801000d0 <bread>
+    if(dip->type == 0){  // a free inode
+8010166c:	83 c4 10             	add    $0x10,%esp
+    bp = bread(dev, IBLOCK(inum, sb));
+8010166f:	89 c3                	mov    %eax,%ebx
+    dip = (struct dinode*)bp->data + inum%IPB;
+80101671:	89 f8                	mov    %edi,%eax
+80101673:	83 e0 07             	and    $0x7,%eax
+80101676:	c1 e0 06             	shl    $0x6,%eax
+80101679:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
+    if(dip->type == 0){  // a free inode
+8010167d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80101681:	75 bd                	jne    80101640 <ialloc+0x30>
+      memset(dip, 0, sizeof(*dip));
+80101683:	83 ec 04             	sub    $0x4,%esp
+80101686:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80101689:	6a 40                	push   $0x40
+8010168b:	6a 00                	push   $0x0
+8010168d:	51                   	push   %ecx
+8010168e:	e8 cd 2f 00 00       	call   80104660 <memset>
+      dip->type = type;
+80101693:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80101697:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010169a:	66 89 01             	mov    %ax,(%ecx)
+      log_write(bp);   // mark it allocated on the disk
+8010169d:	89 1c 24             	mov    %ebx,(%esp)
+801016a0:	e8 9b 18 00 00       	call   80102f40 <log_write>
+      brelse(bp);
+801016a5:	89 1c 24             	mov    %ebx,(%esp)
+801016a8:	e8 43 eb ff ff       	call   801001f0 <brelse>
+      return iget(dev, inum);
+801016ad:	83 c4 10             	add    $0x10,%esp
+}
+801016b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return iget(dev, inum);
+801016b3:	89 fa                	mov    %edi,%edx
+}
+801016b5:	5b                   	pop    %ebx
+      return iget(dev, inum);
+801016b6:	89 f0                	mov    %esi,%eax
+}
+801016b8:	5e                   	pop    %esi
+801016b9:	5f                   	pop    %edi
+801016ba:	5d                   	pop    %ebp
+      return iget(dev, inum);
+801016bb:	e9 90 fc ff ff       	jmp    80101350 <iget>
+  panic("ialloc: no inodes");
+801016c0:	83 ec 0c             	sub    $0xc,%esp
+801016c3:	68 38 73 10 80       	push   $0x80107338
+801016c8:	e8 b3 ec ff ff       	call   80100380 <panic>
+801016cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801016d0 <iupdate>:
+{
+801016d0:	55                   	push   %ebp
+801016d1:	89 e5                	mov    %esp,%ebp
+801016d3:	56                   	push   %esi
+801016d4:	53                   	push   %ebx
+801016d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801016d8:	8b 43 04             	mov    0x4(%ebx),%eax
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801016db:	83 c3 5c             	add    $0x5c,%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801016de:	83 ec 08             	sub    $0x8,%esp
+801016e1:	c1 e8 03             	shr    $0x3,%eax
+801016e4:	03 05 c8 15 11 80    	add    0x801115c8,%eax
+801016ea:	50                   	push   %eax
+801016eb:	ff 73 a4             	push   -0x5c(%ebx)
+801016ee:	e8 dd e9 ff ff       	call   801000d0 <bread>
+  dip->type = ip->type;
+801016f3:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801016f7:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801016fa:	89 c6                	mov    %eax,%esi
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+801016fc:	8b 43 a8             	mov    -0x58(%ebx),%eax
+801016ff:	83 e0 07             	and    $0x7,%eax
+80101702:	c1 e0 06             	shl    $0x6,%eax
+80101705:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+  dip->type = ip->type;
+80101709:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+8010170c:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+80101710:	83 c0 0c             	add    $0xc,%eax
+  dip->major = ip->major;
+80101713:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+  dip->minor = ip->minor;
+80101717:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+8010171b:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+  dip->nlink = ip->nlink;
+8010171f:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+80101723:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+  dip->size = ip->size;
+80101727:	8b 53 fc             	mov    -0x4(%ebx),%edx
+8010172a:	89 50 fc             	mov    %edx,-0x4(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010172d:	6a 34                	push   $0x34
+8010172f:	53                   	push   %ebx
+80101730:	50                   	push   %eax
+80101731:	e8 ca 2f 00 00       	call   80104700 <memmove>
+  log_write(bp);
+80101736:	89 34 24             	mov    %esi,(%esp)
+80101739:	e8 02 18 00 00       	call   80102f40 <log_write>
+  brelse(bp);
+8010173e:	89 75 08             	mov    %esi,0x8(%ebp)
+80101741:	83 c4 10             	add    $0x10,%esp
+}
+80101744:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101747:	5b                   	pop    %ebx
+80101748:	5e                   	pop    %esi
+80101749:	5d                   	pop    %ebp
+  brelse(bp);
+8010174a:	e9 a1 ea ff ff       	jmp    801001f0 <brelse>
+8010174f:	90                   	nop
+
+80101750 <idup>:
+{
+80101750:	55                   	push   %ebp
+80101751:	89 e5                	mov    %esp,%ebp
+80101753:	53                   	push   %ebx
+80101754:	83 ec 10             	sub    $0x10,%esp
+80101757:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&icache.lock);
+8010175a:	68 60 f9 10 80       	push   $0x8010f960
+8010175f:	e8 3c 2e 00 00       	call   801045a0 <acquire>
+  ip->ref++;
+80101764:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+80101768:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
+8010176f:	e8 cc 2d 00 00       	call   80104540 <release>
+}
+80101774:	89 d8                	mov    %ebx,%eax
+80101776:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101779:	c9                   	leave  
+8010177a:	c3                   	ret    
+8010177b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010177f:	90                   	nop
+
+80101780 <ilock>:
+{
+80101780:	55                   	push   %ebp
+80101781:	89 e5                	mov    %esp,%ebp
+80101783:	56                   	push   %esi
+80101784:	53                   	push   %ebx
+80101785:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || ip->ref < 1)
+80101788:	85 db                	test   %ebx,%ebx
+8010178a:	0f 84 b7 00 00 00    	je     80101847 <ilock+0xc7>
+80101790:	8b 53 08             	mov    0x8(%ebx),%edx
+80101793:	85 d2                	test   %edx,%edx
+80101795:	0f 8e ac 00 00 00    	jle    80101847 <ilock+0xc7>
+  acquiresleep(&ip->lock);
+8010179b:	83 ec 0c             	sub    $0xc,%esp
+8010179e:	8d 43 0c             	lea    0xc(%ebx),%eax
+801017a1:	50                   	push   %eax
+801017a2:	e8 39 2b 00 00       	call   801042e0 <acquiresleep>
+  if(ip->valid == 0){
+801017a7:	8b 43 4c             	mov    0x4c(%ebx),%eax
+801017aa:	83 c4 10             	add    $0x10,%esp
+801017ad:	85 c0                	test   %eax,%eax
+801017af:	74 0f                	je     801017c0 <ilock+0x40>
+}
+801017b1:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801017b4:	5b                   	pop    %ebx
+801017b5:	5e                   	pop    %esi
+801017b6:	5d                   	pop    %ebp
+801017b7:	c3                   	ret    
+801017b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801017bf:	90                   	nop
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801017c0:	8b 43 04             	mov    0x4(%ebx),%eax
+801017c3:	83 ec 08             	sub    $0x8,%esp
+801017c6:	c1 e8 03             	shr    $0x3,%eax
+801017c9:	03 05 c8 15 11 80    	add    0x801115c8,%eax
+801017cf:	50                   	push   %eax
+801017d0:	ff 33                	push   (%ebx)
+801017d2:	e8 f9 e8 ff ff       	call   801000d0 <bread>
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801017d7:	83 c4 0c             	add    $0xc,%esp
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801017da:	89 c6                	mov    %eax,%esi
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801017dc:	8b 43 04             	mov    0x4(%ebx),%eax
+801017df:	83 e0 07             	and    $0x7,%eax
+801017e2:	c1 e0 06             	shl    $0x6,%eax
+801017e5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+    ip->type = dip->type;
+801017e9:	0f b7 10             	movzwl (%eax),%edx
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801017ec:	83 c0 0c             	add    $0xc,%eax
+    ip->type = dip->type;
+801017ef:	66 89 53 50          	mov    %dx,0x50(%ebx)
+    ip->major = dip->major;
+801017f3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+801017f7:	66 89 53 52          	mov    %dx,0x52(%ebx)
+    ip->minor = dip->minor;
+801017fb:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+801017ff:	66 89 53 54          	mov    %dx,0x54(%ebx)
+    ip->nlink = dip->nlink;
+80101803:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+80101807:	66 89 53 56          	mov    %dx,0x56(%ebx)
+    ip->size = dip->size;
+8010180b:	8b 50 fc             	mov    -0x4(%eax),%edx
+8010180e:	89 53 58             	mov    %edx,0x58(%ebx)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+80101811:	6a 34                	push   $0x34
+80101813:	50                   	push   %eax
+80101814:	8d 43 5c             	lea    0x5c(%ebx),%eax
+80101817:	50                   	push   %eax
+80101818:	e8 e3 2e 00 00       	call   80104700 <memmove>
+    brelse(bp);
+8010181d:	89 34 24             	mov    %esi,(%esp)
+80101820:	e8 cb e9 ff ff       	call   801001f0 <brelse>
+    if(ip->type == 0)
+80101825:	83 c4 10             	add    $0x10,%esp
+80101828:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+    ip->valid = 1;
+8010182d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+    if(ip->type == 0)
+80101834:	0f 85 77 ff ff ff    	jne    801017b1 <ilock+0x31>
+      panic("ilock: no type");
+8010183a:	83 ec 0c             	sub    $0xc,%esp
+8010183d:	68 50 73 10 80       	push   $0x80107350
+80101842:	e8 39 eb ff ff       	call   80100380 <panic>
+    panic("ilock");
+80101847:	83 ec 0c             	sub    $0xc,%esp
+8010184a:	68 4a 73 10 80       	push   $0x8010734a
+8010184f:	e8 2c eb ff ff       	call   80100380 <panic>
+80101854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010185b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010185f:	90                   	nop
+
+80101860 <iunlock>:
+{
+80101860:	55                   	push   %ebp
+80101861:	89 e5                	mov    %esp,%ebp
+80101863:	56                   	push   %esi
+80101864:	53                   	push   %ebx
+80101865:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101868:	85 db                	test   %ebx,%ebx
+8010186a:	74 28                	je     80101894 <iunlock+0x34>
+8010186c:	83 ec 0c             	sub    $0xc,%esp
+8010186f:	8d 73 0c             	lea    0xc(%ebx),%esi
+80101872:	56                   	push   %esi
+80101873:	e8 08 2b 00 00       	call   80104380 <holdingsleep>
+80101878:	83 c4 10             	add    $0x10,%esp
+8010187b:	85 c0                	test   %eax,%eax
+8010187d:	74 15                	je     80101894 <iunlock+0x34>
+8010187f:	8b 43 08             	mov    0x8(%ebx),%eax
+80101882:	85 c0                	test   %eax,%eax
+80101884:	7e 0e                	jle    80101894 <iunlock+0x34>
+  releasesleep(&ip->lock);
+80101886:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80101889:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010188c:	5b                   	pop    %ebx
+8010188d:	5e                   	pop    %esi
+8010188e:	5d                   	pop    %ebp
+  releasesleep(&ip->lock);
+8010188f:	e9 ac 2a 00 00       	jmp    80104340 <releasesleep>
+    panic("iunlock");
+80101894:	83 ec 0c             	sub    $0xc,%esp
+80101897:	68 5f 73 10 80       	push   $0x8010735f
+8010189c:	e8 df ea ff ff       	call   80100380 <panic>
+801018a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801018a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801018af:	90                   	nop
+
+801018b0 <iput>:
+{
+801018b0:	55                   	push   %ebp
+801018b1:	89 e5                	mov    %esp,%ebp
+801018b3:	57                   	push   %edi
+801018b4:	56                   	push   %esi
+801018b5:	53                   	push   %ebx
+801018b6:	83 ec 28             	sub    $0x28,%esp
+801018b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquiresleep(&ip->lock);
+801018bc:	8d 7b 0c             	lea    0xc(%ebx),%edi
+801018bf:	57                   	push   %edi
+801018c0:	e8 1b 2a 00 00       	call   801042e0 <acquiresleep>
+  if(ip->valid && ip->nlink == 0){
+801018c5:	8b 53 4c             	mov    0x4c(%ebx),%edx
+801018c8:	83 c4 10             	add    $0x10,%esp
+801018cb:	85 d2                	test   %edx,%edx
+801018cd:	74 07                	je     801018d6 <iput+0x26>
+801018cf:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801018d4:	74 32                	je     80101908 <iput+0x58>
+  releasesleep(&ip->lock);
+801018d6:	83 ec 0c             	sub    $0xc,%esp
+801018d9:	57                   	push   %edi
+801018da:	e8 61 2a 00 00       	call   80104340 <releasesleep>
+  acquire(&icache.lock);
+801018df:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
+801018e6:	e8 b5 2c 00 00       	call   801045a0 <acquire>
+  ip->ref--;
+801018eb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+801018ef:	83 c4 10             	add    $0x10,%esp
+801018f2:	c7 45 08 60 f9 10 80 	movl   $0x8010f960,0x8(%ebp)
+}
+801018f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801018fc:	5b                   	pop    %ebx
+801018fd:	5e                   	pop    %esi
+801018fe:	5f                   	pop    %edi
+801018ff:	5d                   	pop    %ebp
+  release(&icache.lock);
+80101900:	e9 3b 2c 00 00       	jmp    80104540 <release>
+80101905:	8d 76 00             	lea    0x0(%esi),%esi
+    acquire(&icache.lock);
+80101908:	83 ec 0c             	sub    $0xc,%esp
+8010190b:	68 60 f9 10 80       	push   $0x8010f960
+80101910:	e8 8b 2c 00 00       	call   801045a0 <acquire>
+    int r = ip->ref;
+80101915:	8b 73 08             	mov    0x8(%ebx),%esi
+    release(&icache.lock);
+80101918:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
+8010191f:	e8 1c 2c 00 00       	call   80104540 <release>
+    if(r == 1){
+80101924:	83 c4 10             	add    $0x10,%esp
+80101927:	83 fe 01             	cmp    $0x1,%esi
+8010192a:	75 aa                	jne    801018d6 <iput+0x26>
+8010192c:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+80101932:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80101935:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80101938:	89 cf                	mov    %ecx,%edi
+8010193a:	eb 0b                	jmp    80101947 <iput+0x97>
+8010193c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80101940:	83 c6 04             	add    $0x4,%esi
+80101943:	39 fe                	cmp    %edi,%esi
+80101945:	74 19                	je     80101960 <iput+0xb0>
+    if(ip->addrs[i]){
+80101947:	8b 16                	mov    (%esi),%edx
+80101949:	85 d2                	test   %edx,%edx
+8010194b:	74 f3                	je     80101940 <iput+0x90>
+      bfree(ip->dev, ip->addrs[i]);
+8010194d:	8b 03                	mov    (%ebx),%eax
+8010194f:	e8 6c f8 ff ff       	call   801011c0 <bfree>
+      ip->addrs[i] = 0;
+80101954:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+8010195a:	eb e4                	jmp    80101940 <iput+0x90>
+8010195c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+80101960:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+80101966:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80101969:	85 c0                	test   %eax,%eax
+8010196b:	75 2d                	jne    8010199a <iput+0xea>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+8010196d:	83 ec 0c             	sub    $0xc,%esp
+  ip->size = 0;
+80101970:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  iupdate(ip);
+80101977:	53                   	push   %ebx
+80101978:	e8 53 fd ff ff       	call   801016d0 <iupdate>
+      ip->type = 0;
+8010197d:	31 c0                	xor    %eax,%eax
+8010197f:	66 89 43 50          	mov    %ax,0x50(%ebx)
+      iupdate(ip);
+80101983:	89 1c 24             	mov    %ebx,(%esp)
+80101986:	e8 45 fd ff ff       	call   801016d0 <iupdate>
+      ip->valid = 0;
+8010198b:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+80101992:	83 c4 10             	add    $0x10,%esp
+80101995:	e9 3c ff ff ff       	jmp    801018d6 <iput+0x26>
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+8010199a:	83 ec 08             	sub    $0x8,%esp
+8010199d:	50                   	push   %eax
+8010199e:	ff 33                	push   (%ebx)
+801019a0:	e8 2b e7 ff ff       	call   801000d0 <bread>
+801019a5:	89 7d e0             	mov    %edi,-0x20(%ebp)
+801019a8:	83 c4 10             	add    $0x10,%esp
+801019ab:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+801019b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(j = 0; j < NINDIRECT; j++){
+801019b4:	8d 70 5c             	lea    0x5c(%eax),%esi
+801019b7:	89 cf                	mov    %ecx,%edi
+801019b9:	eb 0c                	jmp    801019c7 <iput+0x117>
+801019bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801019bf:	90                   	nop
+801019c0:	83 c6 04             	add    $0x4,%esi
+801019c3:	39 f7                	cmp    %esi,%edi
+801019c5:	74 0f                	je     801019d6 <iput+0x126>
+      if(a[j])
+801019c7:	8b 16                	mov    (%esi),%edx
+801019c9:	85 d2                	test   %edx,%edx
+801019cb:	74 f3                	je     801019c0 <iput+0x110>
+        bfree(ip->dev, a[j]);
+801019cd:	8b 03                	mov    (%ebx),%eax
+801019cf:	e8 ec f7 ff ff       	call   801011c0 <bfree>
+801019d4:	eb ea                	jmp    801019c0 <iput+0x110>
+    brelse(bp);
+801019d6:	83 ec 0c             	sub    $0xc,%esp
+801019d9:	ff 75 e4             	push   -0x1c(%ebp)
+801019dc:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801019df:	e8 0c e8 ff ff       	call   801001f0 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+801019e4:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+801019ea:	8b 03                	mov    (%ebx),%eax
+801019ec:	e8 cf f7 ff ff       	call   801011c0 <bfree>
+    ip->addrs[NDIRECT] = 0;
+801019f1:	83 c4 10             	add    $0x10,%esp
+801019f4:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+801019fb:	00 00 00 
+801019fe:	e9 6a ff ff ff       	jmp    8010196d <iput+0xbd>
+80101a03:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101a10 <iunlockput>:
+{
+80101a10:	55                   	push   %ebp
+80101a11:	89 e5                	mov    %esp,%ebp
+80101a13:	56                   	push   %esi
+80101a14:	53                   	push   %ebx
+80101a15:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101a18:	85 db                	test   %ebx,%ebx
+80101a1a:	74 34                	je     80101a50 <iunlockput+0x40>
+80101a1c:	83 ec 0c             	sub    $0xc,%esp
+80101a1f:	8d 73 0c             	lea    0xc(%ebx),%esi
+80101a22:	56                   	push   %esi
+80101a23:	e8 58 29 00 00       	call   80104380 <holdingsleep>
+80101a28:	83 c4 10             	add    $0x10,%esp
+80101a2b:	85 c0                	test   %eax,%eax
+80101a2d:	74 21                	je     80101a50 <iunlockput+0x40>
+80101a2f:	8b 43 08             	mov    0x8(%ebx),%eax
+80101a32:	85 c0                	test   %eax,%eax
+80101a34:	7e 1a                	jle    80101a50 <iunlockput+0x40>
+  releasesleep(&ip->lock);
+80101a36:	83 ec 0c             	sub    $0xc,%esp
+80101a39:	56                   	push   %esi
+80101a3a:	e8 01 29 00 00       	call   80104340 <releasesleep>
+  iput(ip);
+80101a3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101a42:	83 c4 10             	add    $0x10,%esp
+}
+80101a45:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101a48:	5b                   	pop    %ebx
+80101a49:	5e                   	pop    %esi
+80101a4a:	5d                   	pop    %ebp
+  iput(ip);
+80101a4b:	e9 60 fe ff ff       	jmp    801018b0 <iput>
+    panic("iunlock");
+80101a50:	83 ec 0c             	sub    $0xc,%esp
+80101a53:	68 5f 73 10 80       	push   $0x8010735f
+80101a58:	e8 23 e9 ff ff       	call   80100380 <panic>
+80101a5d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101a60 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+80101a60:	55                   	push   %ebp
+80101a61:	89 e5                	mov    %esp,%ebp
+80101a63:	8b 55 08             	mov    0x8(%ebp),%edx
+80101a66:	8b 45 0c             	mov    0xc(%ebp),%eax
+  st->dev = ip->dev;
+80101a69:	8b 0a                	mov    (%edx),%ecx
+80101a6b:	89 48 04             	mov    %ecx,0x4(%eax)
+  st->ino = ip->inum;
+80101a6e:	8b 4a 04             	mov    0x4(%edx),%ecx
+80101a71:	89 48 08             	mov    %ecx,0x8(%eax)
+  st->type = ip->type;
+80101a74:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+80101a78:	66 89 08             	mov    %cx,(%eax)
+  st->nlink = ip->nlink;
+80101a7b:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+80101a7f:	66 89 48 0c          	mov    %cx,0xc(%eax)
+  st->size = ip->size;
+80101a83:	8b 52 58             	mov    0x58(%edx),%edx
+80101a86:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80101a89:	5d                   	pop    %ebp
+80101a8a:	c3                   	ret    
+80101a8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101a8f:	90                   	nop
+
+80101a90 <readi>:
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80101a90:	55                   	push   %ebp
+80101a91:	89 e5                	mov    %esp,%ebp
+80101a93:	57                   	push   %edi
+80101a94:	56                   	push   %esi
+80101a95:	53                   	push   %ebx
+80101a96:	83 ec 1c             	sub    $0x1c,%esp
+80101a99:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80101a9c:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a9f:	8b 75 10             	mov    0x10(%ebp),%esi
+80101aa2:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101aa5:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101aa8:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101aad:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101ab0:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+  if(ip->type == T_DEV){
+80101ab3:	0f 84 a7 00 00 00    	je     80101b60 <readi+0xd0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101ab9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101abc:	8b 40 58             	mov    0x58(%eax),%eax
+80101abf:	39 c6                	cmp    %eax,%esi
+80101ac1:	0f 87 ba 00 00 00    	ja     80101b81 <readi+0xf1>
+80101ac7:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101aca:	31 c9                	xor    %ecx,%ecx
+80101acc:	89 da                	mov    %ebx,%edx
+80101ace:	01 f2                	add    %esi,%edx
+80101ad0:	0f 92 c1             	setb   %cl
+80101ad3:	89 cf                	mov    %ecx,%edi
+80101ad5:	0f 82 a6 00 00 00    	jb     80101b81 <readi+0xf1>
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+80101adb:	89 c1                	mov    %eax,%ecx
+80101add:	29 f1                	sub    %esi,%ecx
+80101adf:	39 d0                	cmp    %edx,%eax
+80101ae1:	0f 43 cb             	cmovae %ebx,%ecx
+80101ae4:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101ae7:	85 c9                	test   %ecx,%ecx
+80101ae9:	74 67                	je     80101b52 <readi+0xc2>
+80101aeb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101aef:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101af0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+80101af3:	89 f2                	mov    %esi,%edx
+80101af5:	c1 ea 09             	shr    $0x9,%edx
+80101af8:	89 d8                	mov    %ebx,%eax
+80101afa:	e8 51 f9 ff ff       	call   80101450 <bmap>
+80101aff:	83 ec 08             	sub    $0x8,%esp
+80101b02:	50                   	push   %eax
+80101b03:	ff 33                	push   (%ebx)
+80101b05:	e8 c6 e5 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b0a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101b0d:	b9 00 02 00 00       	mov    $0x200,%ecx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101b12:	89 c2                	mov    %eax,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b14:	89 f0                	mov    %esi,%eax
+80101b16:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101b1b:	29 fb                	sub    %edi,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101b1d:	89 55 dc             	mov    %edx,-0x24(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b20:	29 c1                	sub    %eax,%ecx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101b22:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b26:	39 d9                	cmp    %ebx,%ecx
+80101b28:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101b2b:	83 c4 0c             	add    $0xc,%esp
+80101b2e:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101b2f:	01 df                	add    %ebx,%edi
+80101b31:	01 de                	add    %ebx,%esi
+    memmove(dst, bp->data + off%BSIZE, m);
+80101b33:	50                   	push   %eax
+80101b34:	ff 75 e0             	push   -0x20(%ebp)
+80101b37:	e8 c4 2b 00 00       	call   80104700 <memmove>
+    brelse(bp);
+80101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101b3f:	89 14 24             	mov    %edx,(%esp)
+80101b42:	e8 a9 e6 ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101b47:	01 5d e0             	add    %ebx,-0x20(%ebp)
+80101b4a:	83 c4 10             	add    $0x10,%esp
+80101b4d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101b50:	77 9e                	ja     80101af0 <readi+0x60>
+  }
+  return n;
+80101b52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+}
+80101b55:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b58:	5b                   	pop    %ebx
+80101b59:	5e                   	pop    %esi
+80101b5a:	5f                   	pop    %edi
+80101b5b:	5d                   	pop    %ebp
+80101b5c:	c3                   	ret    
+80101b5d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80101b60:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101b64:	66 83 f8 09          	cmp    $0x9,%ax
+80101b68:	77 17                	ja     80101b81 <readi+0xf1>
+80101b6a:	8b 04 c5 00 f9 10 80 	mov    -0x7fef0700(,%eax,8),%eax
+80101b71:	85 c0                	test   %eax,%eax
+80101b73:	74 0c                	je     80101b81 <readi+0xf1>
+    return devsw[ip->major].read(ip, dst, n);
+80101b75:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80101b78:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b7b:	5b                   	pop    %ebx
+80101b7c:	5e                   	pop    %esi
+80101b7d:	5f                   	pop    %edi
+80101b7e:	5d                   	pop    %ebp
+    return devsw[ip->major].read(ip, dst, n);
+80101b7f:	ff e0                	jmp    *%eax
+      return -1;
+80101b81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101b86:	eb cd                	jmp    80101b55 <readi+0xc5>
+80101b88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101b8f:	90                   	nop
+
+80101b90 <writei>:
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80101b90:	55                   	push   %ebp
+80101b91:	89 e5                	mov    %esp,%ebp
+80101b93:	57                   	push   %edi
+80101b94:	56                   	push   %esi
+80101b95:	53                   	push   %ebx
+80101b96:	83 ec 1c             	sub    $0x1c,%esp
+80101b99:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b9c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101b9f:	8b 55 14             	mov    0x14(%ebp),%edx
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101ba2:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101ba7:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101baa:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101bad:	8b 75 10             	mov    0x10(%ebp),%esi
+80101bb0:	89 55 e0             	mov    %edx,-0x20(%ebp)
+  if(ip->type == T_DEV){
+80101bb3:	0f 84 b7 00 00 00    	je     80101c70 <writei+0xe0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101bb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101bbc:	3b 70 58             	cmp    0x58(%eax),%esi
+80101bbf:	0f 87 e7 00 00 00    	ja     80101cac <writei+0x11c>
+80101bc5:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101bc8:	31 d2                	xor    %edx,%edx
+80101bca:	89 f8                	mov    %edi,%eax
+80101bcc:	01 f0                	add    %esi,%eax
+80101bce:	0f 92 c2             	setb   %dl
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+80101bd1:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80101bd6:	0f 87 d0 00 00 00    	ja     80101cac <writei+0x11c>
+80101bdc:	85 d2                	test   %edx,%edx
+80101bde:	0f 85 c8 00 00 00    	jne    80101cac <writei+0x11c>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101be4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80101beb:	85 ff                	test   %edi,%edi
+80101bed:	74 72                	je     80101c61 <writei+0xd1>
+80101bef:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101bf0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+80101bf3:	89 f2                	mov    %esi,%edx
+80101bf5:	c1 ea 09             	shr    $0x9,%edx
+80101bf8:	89 f8                	mov    %edi,%eax
+80101bfa:	e8 51 f8 ff ff       	call   80101450 <bmap>
+80101bff:	83 ec 08             	sub    $0x8,%esp
+80101c02:	50                   	push   %eax
+80101c03:	ff 37                	push   (%edi)
+80101c05:	e8 c6 e4 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101c0a:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101c0f:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+80101c12:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101c15:	89 c7                	mov    %eax,%edi
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101c17:	89 f0                	mov    %esi,%eax
+80101c19:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101c1e:	29 c1                	sub    %eax,%ecx
+    memmove(bp->data + off%BSIZE, src, m);
+80101c20:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101c24:	39 d9                	cmp    %ebx,%ecx
+80101c26:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(bp->data + off%BSIZE, src, m);
+80101c29:	83 c4 0c             	add    $0xc,%esp
+80101c2c:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101c2d:	01 de                	add    %ebx,%esi
+    memmove(bp->data + off%BSIZE, src, m);
+80101c2f:	ff 75 dc             	push   -0x24(%ebp)
+80101c32:	50                   	push   %eax
+80101c33:	e8 c8 2a 00 00       	call   80104700 <memmove>
+    log_write(bp);
+80101c38:	89 3c 24             	mov    %edi,(%esp)
+80101c3b:	e8 00 13 00 00       	call   80102f40 <log_write>
+    brelse(bp);
+80101c40:	89 3c 24             	mov    %edi,(%esp)
+80101c43:	e8 a8 e5 ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101c48:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+80101c4b:	83 c4 10             	add    $0x10,%esp
+80101c4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101c51:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80101c54:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80101c57:	77 97                	ja     80101bf0 <writei+0x60>
+  }
+
+  if(n > 0 && off > ip->size){
+80101c59:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101c5c:	3b 70 58             	cmp    0x58(%eax),%esi
+80101c5f:	77 37                	ja     80101c98 <writei+0x108>
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+80101c61:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+80101c64:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c67:	5b                   	pop    %ebx
+80101c68:	5e                   	pop    %esi
+80101c69:	5f                   	pop    %edi
+80101c6a:	5d                   	pop    %ebp
+80101c6b:	c3                   	ret    
+80101c6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80101c70:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101c74:	66 83 f8 09          	cmp    $0x9,%ax
+80101c78:	77 32                	ja     80101cac <writei+0x11c>
+80101c7a:	8b 04 c5 04 f9 10 80 	mov    -0x7fef06fc(,%eax,8),%eax
+80101c81:	85 c0                	test   %eax,%eax
+80101c83:	74 27                	je     80101cac <writei+0x11c>
+    return devsw[ip->major].write(ip, src, n);
+80101c85:	89 55 10             	mov    %edx,0x10(%ebp)
+}
+80101c88:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c8b:	5b                   	pop    %ebx
+80101c8c:	5e                   	pop    %esi
+80101c8d:	5f                   	pop    %edi
+80101c8e:	5d                   	pop    %ebp
+    return devsw[ip->major].write(ip, src, n);
+80101c8f:	ff e0                	jmp    *%eax
+80101c91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    ip->size = off;
+80101c98:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    iupdate(ip);
+80101c9b:	83 ec 0c             	sub    $0xc,%esp
+    ip->size = off;
+80101c9e:	89 70 58             	mov    %esi,0x58(%eax)
+    iupdate(ip);
+80101ca1:	50                   	push   %eax
+80101ca2:	e8 29 fa ff ff       	call   801016d0 <iupdate>
+80101ca7:	83 c4 10             	add    $0x10,%esp
+80101caa:	eb b5                	jmp    80101c61 <writei+0xd1>
+      return -1;
+80101cac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101cb1:	eb b1                	jmp    80101c64 <writei+0xd4>
+80101cb3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101cc0 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80101cc0:	55                   	push   %ebp
+80101cc1:	89 e5                	mov    %esp,%ebp
+80101cc3:	83 ec 0c             	sub    $0xc,%esp
+  return strncmp(s, t, DIRSIZ);
+80101cc6:	6a 0e                	push   $0xe
+80101cc8:	ff 75 0c             	push   0xc(%ebp)
+80101ccb:	ff 75 08             	push   0x8(%ebp)
+80101cce:	e8 9d 2a 00 00       	call   80104770 <strncmp>
+}
+80101cd3:	c9                   	leave  
+80101cd4:	c3                   	ret    
+80101cd5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101cdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101ce0 <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+80101ce0:	55                   	push   %ebp
+80101ce1:	89 e5                	mov    %esp,%ebp
+80101ce3:	57                   	push   %edi
+80101ce4:	56                   	push   %esi
+80101ce5:	53                   	push   %ebx
+80101ce6:	83 ec 1c             	sub    $0x1c,%esp
+80101ce9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+80101cec:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80101cf1:	0f 85 85 00 00 00    	jne    80101d7c <dirlookup+0x9c>
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101cf7:	8b 53 58             	mov    0x58(%ebx),%edx
+80101cfa:	31 ff                	xor    %edi,%edi
+80101cfc:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101cff:	85 d2                	test   %edx,%edx
+80101d01:	74 3e                	je     80101d41 <dirlookup+0x61>
+80101d03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d07:	90                   	nop
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101d08:	6a 10                	push   $0x10
+80101d0a:	57                   	push   %edi
+80101d0b:	56                   	push   %esi
+80101d0c:	53                   	push   %ebx
+80101d0d:	e8 7e fd ff ff       	call   80101a90 <readi>
+80101d12:	83 c4 10             	add    $0x10,%esp
+80101d15:	83 f8 10             	cmp    $0x10,%eax
+80101d18:	75 55                	jne    80101d6f <dirlookup+0x8f>
+      panic("dirlookup read");
+    if(de.inum == 0)
+80101d1a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101d1f:	74 18                	je     80101d39 <dirlookup+0x59>
+  return strncmp(s, t, DIRSIZ);
+80101d21:	83 ec 04             	sub    $0x4,%esp
+80101d24:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101d27:	6a 0e                	push   $0xe
+80101d29:	50                   	push   %eax
+80101d2a:	ff 75 0c             	push   0xc(%ebp)
+80101d2d:	e8 3e 2a 00 00       	call   80104770 <strncmp>
+      continue;
+    if(namecmp(name, de.name) == 0){
+80101d32:	83 c4 10             	add    $0x10,%esp
+80101d35:	85 c0                	test   %eax,%eax
+80101d37:	74 17                	je     80101d50 <dirlookup+0x70>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101d39:	83 c7 10             	add    $0x10,%edi
+80101d3c:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101d3f:	72 c7                	jb     80101d08 <dirlookup+0x28>
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+80101d41:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80101d44:	31 c0                	xor    %eax,%eax
+}
+80101d46:	5b                   	pop    %ebx
+80101d47:	5e                   	pop    %esi
+80101d48:	5f                   	pop    %edi
+80101d49:	5d                   	pop    %ebp
+80101d4a:	c3                   	ret    
+80101d4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d4f:	90                   	nop
+      if(poff)
+80101d50:	8b 45 10             	mov    0x10(%ebp),%eax
+80101d53:	85 c0                	test   %eax,%eax
+80101d55:	74 05                	je     80101d5c <dirlookup+0x7c>
+        *poff = off;
+80101d57:	8b 45 10             	mov    0x10(%ebp),%eax
+80101d5a:	89 38                	mov    %edi,(%eax)
+      inum = de.inum;
+80101d5c:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+      return iget(dp->dev, inum);
+80101d60:	8b 03                	mov    (%ebx),%eax
+80101d62:	e8 e9 f5 ff ff       	call   80101350 <iget>
+}
+80101d67:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d6a:	5b                   	pop    %ebx
+80101d6b:	5e                   	pop    %esi
+80101d6c:	5f                   	pop    %edi
+80101d6d:	5d                   	pop    %ebp
+80101d6e:	c3                   	ret    
+      panic("dirlookup read");
+80101d6f:	83 ec 0c             	sub    $0xc,%esp
+80101d72:	68 79 73 10 80       	push   $0x80107379
+80101d77:	e8 04 e6 ff ff       	call   80100380 <panic>
+    panic("dirlookup not DIR");
+80101d7c:	83 ec 0c             	sub    $0xc,%esp
+80101d7f:	68 67 73 10 80       	push   $0x80107367
+80101d84:	e8 f7 e5 ff ff       	call   80100380 <panic>
+80101d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101d90 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80101d90:	55                   	push   %ebp
+80101d91:	89 e5                	mov    %esp,%ebp
+80101d93:	57                   	push   %edi
+80101d94:	56                   	push   %esi
+80101d95:	53                   	push   %ebx
+80101d96:	89 c3                	mov    %eax,%ebx
+80101d98:	83 ec 1c             	sub    $0x1c,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+80101d9b:	80 38 2f             	cmpb   $0x2f,(%eax)
+{
+80101d9e:	89 55 dc             	mov    %edx,-0x24(%ebp)
+80101da1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  if(*path == '/')
+80101da4:	0f 84 64 01 00 00    	je     80101f0e <namex+0x17e>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+80101daa:	e8 c1 1b 00 00       	call   80103970 <myproc>
+  acquire(&icache.lock);
+80101daf:	83 ec 0c             	sub    $0xc,%esp
+    ip = idup(myproc()->cwd);
+80101db2:	8b 70 68             	mov    0x68(%eax),%esi
+  acquire(&icache.lock);
+80101db5:	68 60 f9 10 80       	push   $0x8010f960
+80101dba:	e8 e1 27 00 00       	call   801045a0 <acquire>
+  ip->ref++;
+80101dbf:	83 46 08 01          	addl   $0x1,0x8(%esi)
+  release(&icache.lock);
+80101dc3:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
+80101dca:	e8 71 27 00 00       	call   80104540 <release>
+80101dcf:	83 c4 10             	add    $0x10,%esp
+80101dd2:	eb 07                	jmp    80101ddb <namex+0x4b>
+80101dd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    path++;
+80101dd8:	83 c3 01             	add    $0x1,%ebx
+  while(*path == '/')
+80101ddb:	0f b6 03             	movzbl (%ebx),%eax
+80101dde:	3c 2f                	cmp    $0x2f,%al
+80101de0:	74 f6                	je     80101dd8 <namex+0x48>
+  if(*path == 0)
+80101de2:	84 c0                	test   %al,%al
+80101de4:	0f 84 06 01 00 00    	je     80101ef0 <namex+0x160>
+  while(*path != '/' && *path != 0)
+80101dea:	0f b6 03             	movzbl (%ebx),%eax
+80101ded:	84 c0                	test   %al,%al
+80101def:	0f 84 10 01 00 00    	je     80101f05 <namex+0x175>
+80101df5:	89 df                	mov    %ebx,%edi
+80101df7:	3c 2f                	cmp    $0x2f,%al
+80101df9:	0f 84 06 01 00 00    	je     80101f05 <namex+0x175>
+80101dff:	90                   	nop
+80101e00:	0f b6 47 01          	movzbl 0x1(%edi),%eax
+    path++;
+80101e04:	83 c7 01             	add    $0x1,%edi
+  while(*path != '/' && *path != 0)
+80101e07:	3c 2f                	cmp    $0x2f,%al
+80101e09:	74 04                	je     80101e0f <namex+0x7f>
+80101e0b:	84 c0                	test   %al,%al
+80101e0d:	75 f1                	jne    80101e00 <namex+0x70>
+  len = path - s;
+80101e0f:	89 f8                	mov    %edi,%eax
+80101e11:	29 d8                	sub    %ebx,%eax
+  if(len >= DIRSIZ)
+80101e13:	83 f8 0d             	cmp    $0xd,%eax
+80101e16:	0f 8e ac 00 00 00    	jle    80101ec8 <namex+0x138>
+    memmove(name, s, DIRSIZ);
+80101e1c:	83 ec 04             	sub    $0x4,%esp
+80101e1f:	6a 0e                	push   $0xe
+80101e21:	53                   	push   %ebx
+    path++;
+80101e22:	89 fb                	mov    %edi,%ebx
+    memmove(name, s, DIRSIZ);
+80101e24:	ff 75 e4             	push   -0x1c(%ebp)
+80101e27:	e8 d4 28 00 00       	call   80104700 <memmove>
+80101e2c:	83 c4 10             	add    $0x10,%esp
+  while(*path == '/')
+80101e2f:	80 3f 2f             	cmpb   $0x2f,(%edi)
+80101e32:	75 0c                	jne    80101e40 <namex+0xb0>
+80101e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    path++;
+80101e38:	83 c3 01             	add    $0x1,%ebx
+  while(*path == '/')
+80101e3b:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80101e3e:	74 f8                	je     80101e38 <namex+0xa8>
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+80101e40:	83 ec 0c             	sub    $0xc,%esp
+80101e43:	56                   	push   %esi
+80101e44:	e8 37 f9 ff ff       	call   80101780 <ilock>
+    if(ip->type != T_DIR){
+80101e49:	83 c4 10             	add    $0x10,%esp
+80101e4c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80101e51:	0f 85 cd 00 00 00    	jne    80101f24 <namex+0x194>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+80101e57:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101e5a:	85 c0                	test   %eax,%eax
+80101e5c:	74 09                	je     80101e67 <namex+0xd7>
+80101e5e:	80 3b 00             	cmpb   $0x0,(%ebx)
+80101e61:	0f 84 22 01 00 00    	je     80101f89 <namex+0x1f9>
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80101e67:	83 ec 04             	sub    $0x4,%esp
+80101e6a:	6a 00                	push   $0x0
+80101e6c:	ff 75 e4             	push   -0x1c(%ebp)
+80101e6f:	56                   	push   %esi
+80101e70:	e8 6b fe ff ff       	call   80101ce0 <dirlookup>
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101e75:	8d 56 0c             	lea    0xc(%esi),%edx
+    if((next = dirlookup(ip, name, 0)) == 0){
+80101e78:	83 c4 10             	add    $0x10,%esp
+80101e7b:	89 c7                	mov    %eax,%edi
+80101e7d:	85 c0                	test   %eax,%eax
+80101e7f:	0f 84 e1 00 00 00    	je     80101f66 <namex+0x1d6>
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101e85:	83 ec 0c             	sub    $0xc,%esp
+80101e88:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80101e8b:	52                   	push   %edx
+80101e8c:	e8 ef 24 00 00       	call   80104380 <holdingsleep>
+80101e91:	83 c4 10             	add    $0x10,%esp
+80101e94:	85 c0                	test   %eax,%eax
+80101e96:	0f 84 30 01 00 00    	je     80101fcc <namex+0x23c>
+80101e9c:	8b 56 08             	mov    0x8(%esi),%edx
+80101e9f:	85 d2                	test   %edx,%edx
+80101ea1:	0f 8e 25 01 00 00    	jle    80101fcc <namex+0x23c>
+  releasesleep(&ip->lock);
+80101ea7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101eaa:	83 ec 0c             	sub    $0xc,%esp
+80101ead:	52                   	push   %edx
+80101eae:	e8 8d 24 00 00       	call   80104340 <releasesleep>
+  iput(ip);
+80101eb3:	89 34 24             	mov    %esi,(%esp)
+80101eb6:	89 fe                	mov    %edi,%esi
+80101eb8:	e8 f3 f9 ff ff       	call   801018b0 <iput>
+80101ebd:	83 c4 10             	add    $0x10,%esp
+80101ec0:	e9 16 ff ff ff       	jmp    80101ddb <namex+0x4b>
+80101ec5:	8d 76 00             	lea    0x0(%esi),%esi
+    name[len] = 0;
+80101ec8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80101ecb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+    memmove(name, s, len);
+80101ece:	83 ec 04             	sub    $0x4,%esp
+80101ed1:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80101ed4:	50                   	push   %eax
+80101ed5:	53                   	push   %ebx
+    name[len] = 0;
+80101ed6:	89 fb                	mov    %edi,%ebx
+    memmove(name, s, len);
+80101ed8:	ff 75 e4             	push   -0x1c(%ebp)
+80101edb:	e8 20 28 00 00       	call   80104700 <memmove>
+    name[len] = 0;
+80101ee0:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101ee3:	83 c4 10             	add    $0x10,%esp
+80101ee6:	c6 02 00             	movb   $0x0,(%edx)
+80101ee9:	e9 41 ff ff ff       	jmp    80101e2f <namex+0x9f>
+80101eee:	66 90                	xchg   %ax,%ax
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+80101ef0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101ef3:	85 c0                	test   %eax,%eax
+80101ef5:	0f 85 be 00 00 00    	jne    80101fb9 <namex+0x229>
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101efb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101efe:	89 f0                	mov    %esi,%eax
+80101f00:	5b                   	pop    %ebx
+80101f01:	5e                   	pop    %esi
+80101f02:	5f                   	pop    %edi
+80101f03:	5d                   	pop    %ebp
+80101f04:	c3                   	ret    
+  while(*path != '/' && *path != 0)
+80101f05:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101f08:	89 df                	mov    %ebx,%edi
+80101f0a:	31 c0                	xor    %eax,%eax
+80101f0c:	eb c0                	jmp    80101ece <namex+0x13e>
+    ip = iget(ROOTDEV, ROOTINO);
+80101f0e:	ba 01 00 00 00       	mov    $0x1,%edx
+80101f13:	b8 01 00 00 00       	mov    $0x1,%eax
+80101f18:	e8 33 f4 ff ff       	call   80101350 <iget>
+80101f1d:	89 c6                	mov    %eax,%esi
+80101f1f:	e9 b7 fe ff ff       	jmp    80101ddb <namex+0x4b>
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101f24:	83 ec 0c             	sub    $0xc,%esp
+80101f27:	8d 5e 0c             	lea    0xc(%esi),%ebx
+80101f2a:	53                   	push   %ebx
+80101f2b:	e8 50 24 00 00       	call   80104380 <holdingsleep>
+80101f30:	83 c4 10             	add    $0x10,%esp
+80101f33:	85 c0                	test   %eax,%eax
+80101f35:	0f 84 91 00 00 00    	je     80101fcc <namex+0x23c>
+80101f3b:	8b 46 08             	mov    0x8(%esi),%eax
+80101f3e:	85 c0                	test   %eax,%eax
+80101f40:	0f 8e 86 00 00 00    	jle    80101fcc <namex+0x23c>
+  releasesleep(&ip->lock);
+80101f46:	83 ec 0c             	sub    $0xc,%esp
+80101f49:	53                   	push   %ebx
+80101f4a:	e8 f1 23 00 00       	call   80104340 <releasesleep>
+  iput(ip);
+80101f4f:	89 34 24             	mov    %esi,(%esp)
+      return 0;
+80101f52:	31 f6                	xor    %esi,%esi
+  iput(ip);
+80101f54:	e8 57 f9 ff ff       	call   801018b0 <iput>
+      return 0;
+80101f59:	83 c4 10             	add    $0x10,%esp
+}
+80101f5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101f5f:	89 f0                	mov    %esi,%eax
+80101f61:	5b                   	pop    %ebx
+80101f62:	5e                   	pop    %esi
+80101f63:	5f                   	pop    %edi
+80101f64:	5d                   	pop    %ebp
+80101f65:	c3                   	ret    
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101f66:	83 ec 0c             	sub    $0xc,%esp
+80101f69:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101f6c:	52                   	push   %edx
+80101f6d:	e8 0e 24 00 00       	call   80104380 <holdingsleep>
+80101f72:	83 c4 10             	add    $0x10,%esp
+80101f75:	85 c0                	test   %eax,%eax
+80101f77:	74 53                	je     80101fcc <namex+0x23c>
+80101f79:	8b 4e 08             	mov    0x8(%esi),%ecx
+80101f7c:	85 c9                	test   %ecx,%ecx
+80101f7e:	7e 4c                	jle    80101fcc <namex+0x23c>
+  releasesleep(&ip->lock);
+80101f80:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101f83:	83 ec 0c             	sub    $0xc,%esp
+80101f86:	52                   	push   %edx
+80101f87:	eb c1                	jmp    80101f4a <namex+0x1ba>
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101f89:	83 ec 0c             	sub    $0xc,%esp
+80101f8c:	8d 5e 0c             	lea    0xc(%esi),%ebx
+80101f8f:	53                   	push   %ebx
+80101f90:	e8 eb 23 00 00       	call   80104380 <holdingsleep>
+80101f95:	83 c4 10             	add    $0x10,%esp
+80101f98:	85 c0                	test   %eax,%eax
+80101f9a:	74 30                	je     80101fcc <namex+0x23c>
+80101f9c:	8b 7e 08             	mov    0x8(%esi),%edi
+80101f9f:	85 ff                	test   %edi,%edi
+80101fa1:	7e 29                	jle    80101fcc <namex+0x23c>
+  releasesleep(&ip->lock);
+80101fa3:	83 ec 0c             	sub    $0xc,%esp
+80101fa6:	53                   	push   %ebx
+80101fa7:	e8 94 23 00 00       	call   80104340 <releasesleep>
+}
+80101fac:	83 c4 10             	add    $0x10,%esp
+}
+80101faf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101fb2:	89 f0                	mov    %esi,%eax
+80101fb4:	5b                   	pop    %ebx
+80101fb5:	5e                   	pop    %esi
+80101fb6:	5f                   	pop    %edi
+80101fb7:	5d                   	pop    %ebp
+80101fb8:	c3                   	ret    
+    iput(ip);
+80101fb9:	83 ec 0c             	sub    $0xc,%esp
+80101fbc:	56                   	push   %esi
+    return 0;
+80101fbd:	31 f6                	xor    %esi,%esi
+    iput(ip);
+80101fbf:	e8 ec f8 ff ff       	call   801018b0 <iput>
+    return 0;
+80101fc4:	83 c4 10             	add    $0x10,%esp
+80101fc7:	e9 2f ff ff ff       	jmp    80101efb <namex+0x16b>
+    panic("iunlock");
+80101fcc:	83 ec 0c             	sub    $0xc,%esp
+80101fcf:	68 5f 73 10 80       	push   $0x8010735f
+80101fd4:	e8 a7 e3 ff ff       	call   80100380 <panic>
+80101fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101fe0 <dirlink>:
+{
+80101fe0:	55                   	push   %ebp
+80101fe1:	89 e5                	mov    %esp,%ebp
+80101fe3:	57                   	push   %edi
+80101fe4:	56                   	push   %esi
+80101fe5:	53                   	push   %ebx
+80101fe6:	83 ec 20             	sub    $0x20,%esp
+80101fe9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80101fec:	6a 00                	push   $0x0
+80101fee:	ff 75 0c             	push   0xc(%ebp)
+80101ff1:	53                   	push   %ebx
+80101ff2:	e8 e9 fc ff ff       	call   80101ce0 <dirlookup>
+80101ff7:	83 c4 10             	add    $0x10,%esp
+80101ffa:	85 c0                	test   %eax,%eax
+80101ffc:	75 67                	jne    80102065 <dirlink+0x85>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101ffe:	8b 7b 58             	mov    0x58(%ebx),%edi
+80102001:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80102004:	85 ff                	test   %edi,%edi
+80102006:	74 29                	je     80102031 <dirlink+0x51>
+80102008:	31 ff                	xor    %edi,%edi
+8010200a:	8d 75 d8             	lea    -0x28(%ebp),%esi
+8010200d:	eb 09                	jmp    80102018 <dirlink+0x38>
+8010200f:	90                   	nop
+80102010:	83 c7 10             	add    $0x10,%edi
+80102013:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80102016:	73 19                	jae    80102031 <dirlink+0x51>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80102018:	6a 10                	push   $0x10
+8010201a:	57                   	push   %edi
+8010201b:	56                   	push   %esi
+8010201c:	53                   	push   %ebx
+8010201d:	e8 6e fa ff ff       	call   80101a90 <readi>
+80102022:	83 c4 10             	add    $0x10,%esp
+80102025:	83 f8 10             	cmp    $0x10,%eax
+80102028:	75 4e                	jne    80102078 <dirlink+0x98>
+    if(de.inum == 0)
+8010202a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+8010202f:	75 df                	jne    80102010 <dirlink+0x30>
+  strncpy(de.name, name, DIRSIZ);
+80102031:	83 ec 04             	sub    $0x4,%esp
+80102034:	8d 45 da             	lea    -0x26(%ebp),%eax
+80102037:	6a 0e                	push   $0xe
+80102039:	ff 75 0c             	push   0xc(%ebp)
+8010203c:	50                   	push   %eax
+8010203d:	e8 7e 27 00 00       	call   801047c0 <strncpy>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80102042:	6a 10                	push   $0x10
+  de.inum = inum;
+80102044:	8b 45 10             	mov    0x10(%ebp),%eax
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80102047:	57                   	push   %edi
+80102048:	56                   	push   %esi
+80102049:	53                   	push   %ebx
+  de.inum = inum;
+8010204a:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+8010204e:	e8 3d fb ff ff       	call   80101b90 <writei>
+80102053:	83 c4 20             	add    $0x20,%esp
+80102056:	83 f8 10             	cmp    $0x10,%eax
+80102059:	75 2a                	jne    80102085 <dirlink+0xa5>
+  return 0;
+8010205b:	31 c0                	xor    %eax,%eax
+}
+8010205d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102060:	5b                   	pop    %ebx
+80102061:	5e                   	pop    %esi
+80102062:	5f                   	pop    %edi
+80102063:	5d                   	pop    %ebp
+80102064:	c3                   	ret    
+    iput(ip);
+80102065:	83 ec 0c             	sub    $0xc,%esp
+80102068:	50                   	push   %eax
+80102069:	e8 42 f8 ff ff       	call   801018b0 <iput>
+    return -1;
+8010206e:	83 c4 10             	add    $0x10,%esp
+80102071:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102076:	eb e5                	jmp    8010205d <dirlink+0x7d>
+      panic("dirlink read");
+80102078:	83 ec 0c             	sub    $0xc,%esp
+8010207b:	68 88 73 10 80       	push   $0x80107388
+80102080:	e8 fb e2 ff ff       	call   80100380 <panic>
+    panic("dirlink");
+80102085:	83 ec 0c             	sub    $0xc,%esp
+80102088:	68 5e 79 10 80       	push   $0x8010795e
+8010208d:	e8 ee e2 ff ff       	call   80100380 <panic>
+80102092:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801020a0 <namei>:
+
+struct inode*
+namei(char *path)
+{
+801020a0:	55                   	push   %ebp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+801020a1:	31 d2                	xor    %edx,%edx
+{
+801020a3:	89 e5                	mov    %esp,%ebp
+801020a5:	83 ec 18             	sub    $0x18,%esp
+  return namex(path, 0, name);
+801020a8:	8b 45 08             	mov    0x8(%ebp),%eax
+801020ab:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+801020ae:	e8 dd fc ff ff       	call   80101d90 <namex>
+}
+801020b3:	c9                   	leave  
+801020b4:	c3                   	ret    
+801020b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801020bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801020c0 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+801020c0:	55                   	push   %ebp
+  return namex(path, 1, name);
+801020c1:	ba 01 00 00 00       	mov    $0x1,%edx
+{
+801020c6:	89 e5                	mov    %esp,%ebp
+  return namex(path, 1, name);
+801020c8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801020cb:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+801020ce:	5d                   	pop    %ebp
+  return namex(path, 1, name);
+801020cf:	e9 bc fc ff ff       	jmp    80101d90 <namex>
+801020d4:	66 90                	xchg   %ax,%ax
+801020d6:	66 90                	xchg   %ax,%ax
+801020d8:	66 90                	xchg   %ax,%ax
+801020da:	66 90                	xchg   %ax,%ax
+801020dc:	66 90                	xchg   %ax,%ax
+801020de:	66 90                	xchg   %ax,%ax
+
+801020e0 <idestart>:
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+801020e0:	55                   	push   %ebp
+801020e1:	89 e5                	mov    %esp,%ebp
+801020e3:	57                   	push   %edi
+801020e4:	56                   	push   %esi
+801020e5:	53                   	push   %ebx
+801020e6:	83 ec 0c             	sub    $0xc,%esp
+  if(b == 0)
+801020e9:	85 c0                	test   %eax,%eax
+801020eb:	0f 84 b4 00 00 00    	je     801021a5 <idestart+0xc5>
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+801020f1:	8b 70 08             	mov    0x8(%eax),%esi
+801020f4:	89 c3                	mov    %eax,%ebx
+801020f6:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
+801020fc:	0f 87 96 00 00 00    	ja     80102198 <idestart+0xb8>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102102:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80102107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010210e:	66 90                	xchg   %ax,%ax
+80102110:	89 ca                	mov    %ecx,%edx
+80102112:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102113:	83 e0 c0             	and    $0xffffffc0,%eax
+80102116:	3c 40                	cmp    $0x40,%al
+80102118:	75 f6                	jne    80102110 <idestart+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010211a:	31 ff                	xor    %edi,%edi
+8010211c:	ba f6 03 00 00       	mov    $0x3f6,%edx
+80102121:	89 f8                	mov    %edi,%eax
+80102123:	ee                   	out    %al,(%dx)
+80102124:	b8 01 00 00 00       	mov    $0x1,%eax
+80102129:	ba f2 01 00 00       	mov    $0x1f2,%edx
+8010212e:	ee                   	out    %al,(%dx)
+8010212f:	ba f3 01 00 00       	mov    $0x1f3,%edx
+80102134:	89 f0                	mov    %esi,%eax
+80102136:	ee                   	out    %al,(%dx)
+
+  idewait(0);
+  outb(0x3f6, 0);  // generate interrupt
+  outb(0x1f2, sector_per_block);  // number of sectors
+  outb(0x1f3, sector & 0xff);
+  outb(0x1f4, (sector >> 8) & 0xff);
+80102137:	89 f0                	mov    %esi,%eax
+80102139:	ba f4 01 00 00       	mov    $0x1f4,%edx
+8010213e:	c1 f8 08             	sar    $0x8,%eax
+80102141:	ee                   	out    %al,(%dx)
+80102142:	ba f5 01 00 00       	mov    $0x1f5,%edx
+80102147:	89 f8                	mov    %edi,%eax
+80102149:	ee                   	out    %al,(%dx)
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+8010214a:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
+8010214e:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102153:	c1 e0 04             	shl    $0x4,%eax
+80102156:	83 e0 10             	and    $0x10,%eax
+80102159:	83 c8 e0             	or     $0xffffffe0,%eax
+8010215c:	ee                   	out    %al,(%dx)
+  if(b->flags & B_DIRTY){
+8010215d:	f6 03 04             	testb  $0x4,(%ebx)
+80102160:	75 16                	jne    80102178 <idestart+0x98>
+80102162:	b8 20 00 00 00       	mov    $0x20,%eax
+80102167:	89 ca                	mov    %ecx,%edx
+80102169:	ee                   	out    %al,(%dx)
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+8010216a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010216d:	5b                   	pop    %ebx
+8010216e:	5e                   	pop    %esi
+8010216f:	5f                   	pop    %edi
+80102170:	5d                   	pop    %ebp
+80102171:	c3                   	ret    
+80102172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102178:	b8 30 00 00 00       	mov    $0x30,%eax
+8010217d:	89 ca                	mov    %ecx,%edx
+8010217f:	ee                   	out    %al,(%dx)
+  asm volatile("cld; rep outsl" :
+80102180:	b9 80 00 00 00       	mov    $0x80,%ecx
+    outsl(0x1f0, b->data, BSIZE/4);
+80102185:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102188:	ba f0 01 00 00       	mov    $0x1f0,%edx
+8010218d:	fc                   	cld    
+8010218e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+}
+80102190:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102193:	5b                   	pop    %ebx
+80102194:	5e                   	pop    %esi
+80102195:	5f                   	pop    %edi
+80102196:	5d                   	pop    %ebp
+80102197:	c3                   	ret    
+    panic("incorrect blockno");
+80102198:	83 ec 0c             	sub    $0xc,%esp
+8010219b:	68 f4 73 10 80       	push   $0x801073f4
+801021a0:	e8 db e1 ff ff       	call   80100380 <panic>
+    panic("idestart");
+801021a5:	83 ec 0c             	sub    $0xc,%esp
+801021a8:	68 eb 73 10 80       	push   $0x801073eb
+801021ad:	e8 ce e1 ff ff       	call   80100380 <panic>
+801021b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801021c0 <ideinit>:
+{
+801021c0:	55                   	push   %ebp
+801021c1:	89 e5                	mov    %esp,%ebp
+801021c3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&idelock, "ide");
+801021c6:	68 06 74 10 80       	push   $0x80107406
+801021cb:	68 00 16 11 80       	push   $0x80111600
+801021d0:	e8 fb 21 00 00       	call   801043d0 <initlock>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+801021d5:	58                   	pop    %eax
+801021d6:	a1 84 17 11 80       	mov    0x80111784,%eax
+801021db:	5a                   	pop    %edx
+801021dc:	83 e8 01             	sub    $0x1,%eax
+801021df:	50                   	push   %eax
+801021e0:	6a 0e                	push   $0xe
+801021e2:	e8 99 02 00 00       	call   80102480 <ioapicenable>
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+801021e7:	83 c4 10             	add    $0x10,%esp
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801021ea:	ba f7 01 00 00       	mov    $0x1f7,%edx
+801021ef:	90                   	nop
+801021f0:	ec                   	in     (%dx),%al
+801021f1:	83 e0 c0             	and    $0xffffffc0,%eax
+801021f4:	3c 40                	cmp    $0x40,%al
+801021f6:	75 f8                	jne    801021f0 <ideinit+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801021f8:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+801021fd:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102202:	ee                   	out    %al,(%dx)
+80102203:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102208:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010220d:	eb 06                	jmp    80102215 <ideinit+0x55>
+8010220f:	90                   	nop
+  for(i=0; i<1000; i++){
+80102210:	83 e9 01             	sub    $0x1,%ecx
+80102213:	74 0f                	je     80102224 <ideinit+0x64>
+80102215:	ec                   	in     (%dx),%al
+    if(inb(0x1f7) != 0){
+80102216:	84 c0                	test   %al,%al
+80102218:	74 f6                	je     80102210 <ideinit+0x50>
+      havedisk1 = 1;
+8010221a:	c7 05 e0 15 11 80 01 	movl   $0x1,0x801115e0
+80102221:	00 00 00 
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102224:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+80102229:	ba f6 01 00 00       	mov    $0x1f6,%edx
+8010222e:	ee                   	out    %al,(%dx)
+}
+8010222f:	c9                   	leave  
+80102230:	c3                   	ret    
+80102231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010223f:	90                   	nop
+
+80102240 <ideintr>:
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102240:	55                   	push   %ebp
+80102241:	89 e5                	mov    %esp,%ebp
+80102243:	57                   	push   %edi
+80102244:	56                   	push   %esi
+80102245:	53                   	push   %ebx
+80102246:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+80102249:	68 00 16 11 80       	push   $0x80111600
+8010224e:	e8 4d 23 00 00       	call   801045a0 <acquire>
+
+  if((b = idequeue) == 0){
+80102253:	8b 1d e4 15 11 80    	mov    0x801115e4,%ebx
+80102259:	83 c4 10             	add    $0x10,%esp
+8010225c:	85 db                	test   %ebx,%ebx
+8010225e:	74 63                	je     801022c3 <ideintr+0x83>
+    release(&idelock);
+    return;
+  }
+  idequeue = b->qnext;
+80102260:	8b 43 58             	mov    0x58(%ebx),%eax
+80102263:	a3 e4 15 11 80       	mov    %eax,0x801115e4
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+80102268:	8b 33                	mov    (%ebx),%esi
+8010226a:	f7 c6 04 00 00 00    	test   $0x4,%esi
+80102270:	75 2f                	jne    801022a1 <ideintr+0x61>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102272:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010227e:	66 90                	xchg   %ax,%ax
+80102280:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102281:	89 c1                	mov    %eax,%ecx
+80102283:	83 e1 c0             	and    $0xffffffc0,%ecx
+80102286:	80 f9 40             	cmp    $0x40,%cl
+80102289:	75 f5                	jne    80102280 <ideintr+0x40>
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+8010228b:	a8 21                	test   $0x21,%al
+8010228d:	75 12                	jne    801022a1 <ideintr+0x61>
+    insl(0x1f0, b->data, BSIZE/4);
+8010228f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+  asm volatile("cld; rep insl" :
+80102292:	b9 80 00 00 00       	mov    $0x80,%ecx
+80102297:	ba f0 01 00 00       	mov    $0x1f0,%edx
+8010229c:	fc                   	cld    
+8010229d:	f3 6d                	rep insl (%dx),%es:(%edi)
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+8010229f:	8b 33                	mov    (%ebx),%esi
+  b->flags &= ~B_DIRTY;
+801022a1:	83 e6 fb             	and    $0xfffffffb,%esi
+  wakeup(b);
+801022a4:	83 ec 0c             	sub    $0xc,%esp
+  b->flags &= ~B_DIRTY;
+801022a7:	83 ce 02             	or     $0x2,%esi
+801022aa:	89 33                	mov    %esi,(%ebx)
+  wakeup(b);
+801022ac:	53                   	push   %ebx
+801022ad:	e8 4e 1e 00 00       	call   80104100 <wakeup>
+
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+801022b2:	a1 e4 15 11 80       	mov    0x801115e4,%eax
+801022b7:	83 c4 10             	add    $0x10,%esp
+801022ba:	85 c0                	test   %eax,%eax
+801022bc:	74 05                	je     801022c3 <ideintr+0x83>
+    idestart(idequeue);
+801022be:	e8 1d fe ff ff       	call   801020e0 <idestart>
+    release(&idelock);
+801022c3:	83 ec 0c             	sub    $0xc,%esp
+801022c6:	68 00 16 11 80       	push   $0x80111600
+801022cb:	e8 70 22 00 00       	call   80104540 <release>
+
+  release(&idelock);
+}
+801022d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801022d3:	5b                   	pop    %ebx
+801022d4:	5e                   	pop    %esi
+801022d5:	5f                   	pop    %edi
+801022d6:	5d                   	pop    %ebp
+801022d7:	c3                   	ret    
+801022d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801022df:	90                   	nop
+
+801022e0 <iderw>:
+// Sync buf with disk.
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+801022e0:	55                   	push   %ebp
+801022e1:	89 e5                	mov    %esp,%ebp
+801022e3:	53                   	push   %ebx
+801022e4:	83 ec 10             	sub    $0x10,%esp
+801022e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+801022ea:	8d 43 0c             	lea    0xc(%ebx),%eax
+801022ed:	50                   	push   %eax
+801022ee:	e8 8d 20 00 00       	call   80104380 <holdingsleep>
+801022f3:	83 c4 10             	add    $0x10,%esp
+801022f6:	85 c0                	test   %eax,%eax
+801022f8:	0f 84 c3 00 00 00    	je     801023c1 <iderw+0xe1>
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+801022fe:	8b 03                	mov    (%ebx),%eax
+80102300:	83 e0 06             	and    $0x6,%eax
+80102303:	83 f8 02             	cmp    $0x2,%eax
+80102306:	0f 84 a8 00 00 00    	je     801023b4 <iderw+0xd4>
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+8010230c:	8b 53 04             	mov    0x4(%ebx),%edx
+8010230f:	85 d2                	test   %edx,%edx
+80102311:	74 0d                	je     80102320 <iderw+0x40>
+80102313:	a1 e0 15 11 80       	mov    0x801115e0,%eax
+80102318:	85 c0                	test   %eax,%eax
+8010231a:	0f 84 87 00 00 00    	je     801023a7 <iderw+0xc7>
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+80102320:	83 ec 0c             	sub    $0xc,%esp
+80102323:	68 00 16 11 80       	push   $0x80111600
+80102328:	e8 73 22 00 00       	call   801045a0 <acquire>
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010232d:	a1 e4 15 11 80       	mov    0x801115e4,%eax
+  b->qnext = 0;
+80102332:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102339:	83 c4 10             	add    $0x10,%esp
+8010233c:	85 c0                	test   %eax,%eax
+8010233e:	74 60                	je     801023a0 <iderw+0xc0>
+80102340:	89 c2                	mov    %eax,%edx
+80102342:	8b 40 58             	mov    0x58(%eax),%eax
+80102345:	85 c0                	test   %eax,%eax
+80102347:	75 f7                	jne    80102340 <iderw+0x60>
+80102349:	83 c2 58             	add    $0x58,%edx
+    ;
+  *pp = b;
+8010234c:	89 1a                	mov    %ebx,(%edx)
+
+  // Start disk if necessary.
+  if(idequeue == b)
+8010234e:	39 1d e4 15 11 80    	cmp    %ebx,0x801115e4
+80102354:	74 3a                	je     80102390 <iderw+0xb0>
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+80102356:	8b 03                	mov    (%ebx),%eax
+80102358:	83 e0 06             	and    $0x6,%eax
+8010235b:	83 f8 02             	cmp    $0x2,%eax
+8010235e:	74 1b                	je     8010237b <iderw+0x9b>
+    sleep(b, &idelock);
+80102360:	83 ec 08             	sub    $0x8,%esp
+80102363:	68 00 16 11 80       	push   $0x80111600
+80102368:	53                   	push   %ebx
+80102369:	e8 d2 1c 00 00       	call   80104040 <sleep>
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+8010236e:	8b 03                	mov    (%ebx),%eax
+80102370:	83 c4 10             	add    $0x10,%esp
+80102373:	83 e0 06             	and    $0x6,%eax
+80102376:	83 f8 02             	cmp    $0x2,%eax
+80102379:	75 e5                	jne    80102360 <iderw+0x80>
+  }
+
+
+  release(&idelock);
+8010237b:	c7 45 08 00 16 11 80 	movl   $0x80111600,0x8(%ebp)
+}
+80102382:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102385:	c9                   	leave  
+  release(&idelock);
+80102386:	e9 b5 21 00 00       	jmp    80104540 <release>
+8010238b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010238f:	90                   	nop
+    idestart(b);
+80102390:	89 d8                	mov    %ebx,%eax
+80102392:	e8 49 fd ff ff       	call   801020e0 <idestart>
+80102397:	eb bd                	jmp    80102356 <iderw+0x76>
+80102399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+801023a0:	ba e4 15 11 80       	mov    $0x801115e4,%edx
+801023a5:	eb a5                	jmp    8010234c <iderw+0x6c>
+    panic("iderw: ide disk 1 not present");
+801023a7:	83 ec 0c             	sub    $0xc,%esp
+801023aa:	68 35 74 10 80       	push   $0x80107435
+801023af:	e8 cc df ff ff       	call   80100380 <panic>
+    panic("iderw: nothing to do");
+801023b4:	83 ec 0c             	sub    $0xc,%esp
+801023b7:	68 20 74 10 80       	push   $0x80107420
+801023bc:	e8 bf df ff ff       	call   80100380 <panic>
+    panic("iderw: buf not locked");
+801023c1:	83 ec 0c             	sub    $0xc,%esp
+801023c4:	68 0a 74 10 80       	push   $0x8010740a
+801023c9:	e8 b2 df ff ff       	call   80100380 <panic>
+801023ce:	66 90                	xchg   %ax,%ax
+
+801023d0 <ioapicinit>:
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+801023d0:	55                   	push   %ebp
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+801023d1:	c7 05 34 16 11 80 00 	movl   $0xfec00000,0x80111634
+801023d8:	00 c0 fe 
+{
+801023db:	89 e5                	mov    %esp,%ebp
+801023dd:	56                   	push   %esi
+801023de:	53                   	push   %ebx
+  ioapic->reg = reg;
+801023df:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+801023e6:	00 00 00 
+  return ioapic->data;
+801023e9:	8b 15 34 16 11 80    	mov    0x80111634,%edx
+801023ef:	8b 72 10             	mov    0x10(%edx),%esi
+  ioapic->reg = reg;
+801023f2:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+  return ioapic->data;
+801023f8:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+801023fe:	0f b6 15 80 17 11 80 	movzbl 0x80111780,%edx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+80102405:	c1 ee 10             	shr    $0x10,%esi
+80102408:	89 f0                	mov    %esi,%eax
+8010240a:	0f b6 f0             	movzbl %al,%esi
+  return ioapic->data;
+8010240d:	8b 41 10             	mov    0x10(%ecx),%eax
+  id = ioapicread(REG_ID) >> 24;
+80102410:	c1 e8 18             	shr    $0x18,%eax
+  if(id != ioapicid)
+80102413:	39 c2                	cmp    %eax,%edx
+80102415:	74 16                	je     8010242d <ioapicinit+0x5d>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+80102417:	83 ec 0c             	sub    $0xc,%esp
+8010241a:	68 54 74 10 80       	push   $0x80107454
+8010241f:	e8 7c e2 ff ff       	call   801006a0 <cprintf>
+  ioapic->reg = reg;
+80102424:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+8010242a:	83 c4 10             	add    $0x10,%esp
+8010242d:	83 c6 21             	add    $0x21,%esi
+{
+80102430:	ba 10 00 00 00       	mov    $0x10,%edx
+80102435:	b8 20 00 00 00       	mov    $0x20,%eax
+8010243a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  ioapic->reg = reg;
+80102440:	89 11                	mov    %edx,(%ecx)
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102442:	89 c3                	mov    %eax,%ebx
+  ioapic->data = data;
+80102444:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+  for(i = 0; i <= maxintr; i++){
+8010244a:	83 c0 01             	add    $0x1,%eax
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+8010244d:	81 cb 00 00 01 00    	or     $0x10000,%ebx
+  ioapic->data = data;
+80102453:	89 59 10             	mov    %ebx,0x10(%ecx)
+  ioapic->reg = reg;
+80102456:	8d 5a 01             	lea    0x1(%edx),%ebx
+  for(i = 0; i <= maxintr; i++){
+80102459:	83 c2 02             	add    $0x2,%edx
+  ioapic->reg = reg;
+8010245c:	89 19                	mov    %ebx,(%ecx)
+  ioapic->data = data;
+8010245e:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+80102464:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+  for(i = 0; i <= maxintr; i++){
+8010246b:	39 f0                	cmp    %esi,%eax
+8010246d:	75 d1                	jne    80102440 <ioapicinit+0x70>
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+8010246f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102472:	5b                   	pop    %ebx
+80102473:	5e                   	pop    %esi
+80102474:	5d                   	pop    %ebp
+80102475:	c3                   	ret    
+80102476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010247d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102480 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+80102480:	55                   	push   %ebp
+  ioapic->reg = reg;
+80102481:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+{
+80102487:	89 e5                	mov    %esp,%ebp
+80102489:	8b 45 08             	mov    0x8(%ebp),%eax
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+8010248c:	8d 50 20             	lea    0x20(%eax),%edx
+8010248f:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+  ioapic->reg = reg;
+80102493:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+80102495:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+8010249b:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+8010249e:	89 51 10             	mov    %edx,0x10(%ecx)
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801024a1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  ioapic->reg = reg;
+801024a4:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801024a6:	a1 34 16 11 80       	mov    0x80111634,%eax
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801024ab:	c1 e2 18             	shl    $0x18,%edx
+  ioapic->data = data;
+801024ae:	89 50 10             	mov    %edx,0x10(%eax)
+}
+801024b1:	5d                   	pop    %ebp
+801024b2:	c3                   	ret    
+801024b3:	66 90                	xchg   %ax,%ax
+801024b5:	66 90                	xchg   %ax,%ax
+801024b7:	66 90                	xchg   %ax,%ax
+801024b9:	66 90                	xchg   %ax,%ax
+801024bb:	66 90                	xchg   %ax,%ax
+801024bd:	66 90                	xchg   %ax,%ax
+801024bf:	90                   	nop
+
+801024c0 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+801024c0:	55                   	push   %ebp
+801024c1:	89 e5                	mov    %esp,%ebp
+801024c3:	53                   	push   %ebx
+801024c4:	83 ec 04             	sub    $0x4,%esp
+801024c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+801024ca:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+801024d0:	75 76                	jne    80102548 <kfree+0x88>
+801024d2:	81 fb d0 54 11 80    	cmp    $0x801154d0,%ebx
+801024d8:	72 6e                	jb     80102548 <kfree+0x88>
+801024da:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801024e0:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+801024e5:	77 61                	ja     80102548 <kfree+0x88>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+801024e7:	83 ec 04             	sub    $0x4,%esp
+801024ea:	68 00 10 00 00       	push   $0x1000
+801024ef:	6a 01                	push   $0x1
+801024f1:	53                   	push   %ebx
+801024f2:	e8 69 21 00 00       	call   80104660 <memset>
+
+  if(kmem.use_lock)
+801024f7:	8b 15 74 16 11 80    	mov    0x80111674,%edx
+801024fd:	83 c4 10             	add    $0x10,%esp
+80102500:	85 d2                	test   %edx,%edx
+80102502:	75 1c                	jne    80102520 <kfree+0x60>
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+80102504:	a1 78 16 11 80       	mov    0x80111678,%eax
+80102509:	89 03                	mov    %eax,(%ebx)
+  kmem.freelist = r;
+  if(kmem.use_lock)
+8010250b:	a1 74 16 11 80       	mov    0x80111674,%eax
+  kmem.freelist = r;
+80102510:	89 1d 78 16 11 80    	mov    %ebx,0x80111678
+  if(kmem.use_lock)
+80102516:	85 c0                	test   %eax,%eax
+80102518:	75 1e                	jne    80102538 <kfree+0x78>
+    release(&kmem.lock);
+}
+8010251a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010251d:	c9                   	leave  
+8010251e:	c3                   	ret    
+8010251f:	90                   	nop
+    acquire(&kmem.lock);
+80102520:	83 ec 0c             	sub    $0xc,%esp
+80102523:	68 40 16 11 80       	push   $0x80111640
+80102528:	e8 73 20 00 00       	call   801045a0 <acquire>
+8010252d:	83 c4 10             	add    $0x10,%esp
+80102530:	eb d2                	jmp    80102504 <kfree+0x44>
+80102532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    release(&kmem.lock);
+80102538:	c7 45 08 40 16 11 80 	movl   $0x80111640,0x8(%ebp)
+}
+8010253f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102542:	c9                   	leave  
+    release(&kmem.lock);
+80102543:	e9 f8 1f 00 00       	jmp    80104540 <release>
+    panic("kfree");
+80102548:	83 ec 0c             	sub    $0xc,%esp
+8010254b:	68 86 74 10 80       	push   $0x80107486
+80102550:	e8 2b de ff ff       	call   80100380 <panic>
+80102555:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010255c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102560 <freerange>:
+{
+80102560:	55                   	push   %ebp
+80102561:	89 e5                	mov    %esp,%ebp
+80102563:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102564:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102567:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010256a:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+8010256b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102571:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102577:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010257d:	39 de                	cmp    %ebx,%esi
+8010257f:	72 23                	jb     801025a4 <freerange+0x44>
+80102581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102588:	83 ec 0c             	sub    $0xc,%esp
+8010258b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102591:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102597:	50                   	push   %eax
+80102598:	e8 23 ff ff ff       	call   801024c0 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010259d:	83 c4 10             	add    $0x10,%esp
+801025a0:	39 f3                	cmp    %esi,%ebx
+801025a2:	76 e4                	jbe    80102588 <freerange+0x28>
+}
+801025a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801025a7:	5b                   	pop    %ebx
+801025a8:	5e                   	pop    %esi
+801025a9:	5d                   	pop    %ebp
+801025aa:	c3                   	ret    
+801025ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801025af:	90                   	nop
+
+801025b0 <kinit2>:
+{
+801025b0:	55                   	push   %ebp
+801025b1:	89 e5                	mov    %esp,%ebp
+801025b3:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+801025b4:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+801025b7:	8b 75 0c             	mov    0xc(%ebp),%esi
+801025ba:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+801025bb:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801025c1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801025c7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025cd:	39 de                	cmp    %ebx,%esi
+801025cf:	72 23                	jb     801025f4 <kinit2+0x44>
+801025d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+801025d8:	83 ec 0c             	sub    $0xc,%esp
+801025db:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801025e1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+801025e7:	50                   	push   %eax
+801025e8:	e8 d3 fe ff ff       	call   801024c0 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801025ed:	83 c4 10             	add    $0x10,%esp
+801025f0:	39 de                	cmp    %ebx,%esi
+801025f2:	73 e4                	jae    801025d8 <kinit2+0x28>
+  kmem.use_lock = 1;
+801025f4:	c7 05 74 16 11 80 01 	movl   $0x1,0x80111674
+801025fb:	00 00 00 
+}
+801025fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102601:	5b                   	pop    %ebx
+80102602:	5e                   	pop    %esi
+80102603:	5d                   	pop    %ebp
+80102604:	c3                   	ret    
+80102605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010260c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102610 <kinit1>:
+{
+80102610:	55                   	push   %ebp
+80102611:	89 e5                	mov    %esp,%ebp
+80102613:	56                   	push   %esi
+80102614:	53                   	push   %ebx
+80102615:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+80102618:	83 ec 08             	sub    $0x8,%esp
+8010261b:	68 8c 74 10 80       	push   $0x8010748c
+80102620:	68 40 16 11 80       	push   $0x80111640
+80102625:	e8 a6 1d 00 00       	call   801043d0 <initlock>
+  p = (char*)PGROUNDUP((uint)vstart);
+8010262a:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010262d:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+80102630:	c7 05 74 16 11 80 00 	movl   $0x0,0x80111674
+80102637:	00 00 00 
+  p = (char*)PGROUNDUP((uint)vstart);
+8010263a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102640:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102646:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010264c:	39 de                	cmp    %ebx,%esi
+8010264e:	72 1c                	jb     8010266c <kinit1+0x5c>
+    kfree(p);
+80102650:	83 ec 0c             	sub    $0xc,%esp
+80102653:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102659:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+8010265f:	50                   	push   %eax
+80102660:	e8 5b fe ff ff       	call   801024c0 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102665:	83 c4 10             	add    $0x10,%esp
+80102668:	39 de                	cmp    %ebx,%esi
+8010266a:	73 e4                	jae    80102650 <kinit1+0x40>
+}
+8010266c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010266f:	5b                   	pop    %ebx
+80102670:	5e                   	pop    %esi
+80102671:	5d                   	pop    %ebp
+80102672:	c3                   	ret    
+80102673:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010267a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102680 <kalloc>:
+char*
+kalloc(void)
+{
+  struct run *r;
+
+  if(kmem.use_lock)
+80102680:	a1 74 16 11 80       	mov    0x80111674,%eax
+80102685:	85 c0                	test   %eax,%eax
+80102687:	75 1f                	jne    801026a8 <kalloc+0x28>
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+80102689:	a1 78 16 11 80       	mov    0x80111678,%eax
+  if(r)
+8010268e:	85 c0                	test   %eax,%eax
+80102690:	74 0e                	je     801026a0 <kalloc+0x20>
+    kmem.freelist = r->next;
+80102692:	8b 10                	mov    (%eax),%edx
+80102694:	89 15 78 16 11 80    	mov    %edx,0x80111678
+  if(kmem.use_lock)
+8010269a:	c3                   	ret    
+8010269b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010269f:	90                   	nop
+    release(&kmem.lock);
+  return (char*)r;
+}
+801026a0:	c3                   	ret    
+801026a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+801026a8:	55                   	push   %ebp
+801026a9:	89 e5                	mov    %esp,%ebp
+801026ab:	83 ec 24             	sub    $0x24,%esp
+    acquire(&kmem.lock);
+801026ae:	68 40 16 11 80       	push   $0x80111640
+801026b3:	e8 e8 1e 00 00       	call   801045a0 <acquire>
+  r = kmem.freelist;
+801026b8:	a1 78 16 11 80       	mov    0x80111678,%eax
+  if(kmem.use_lock)
+801026bd:	8b 15 74 16 11 80    	mov    0x80111674,%edx
+  if(r)
+801026c3:	83 c4 10             	add    $0x10,%esp
+801026c6:	85 c0                	test   %eax,%eax
+801026c8:	74 08                	je     801026d2 <kalloc+0x52>
+    kmem.freelist = r->next;
+801026ca:	8b 08                	mov    (%eax),%ecx
+801026cc:	89 0d 78 16 11 80    	mov    %ecx,0x80111678
+  if(kmem.use_lock)
+801026d2:	85 d2                	test   %edx,%edx
+801026d4:	74 16                	je     801026ec <kalloc+0x6c>
+    release(&kmem.lock);
+801026d6:	83 ec 0c             	sub    $0xc,%esp
+801026d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801026dc:	68 40 16 11 80       	push   $0x80111640
+801026e1:	e8 5a 1e 00 00       	call   80104540 <release>
+  return (char*)r;
+801026e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    release(&kmem.lock);
+801026e9:	83 c4 10             	add    $0x10,%esp
+}
+801026ec:	c9                   	leave  
+801026ed:	c3                   	ret    
+801026ee:	66 90                	xchg   %ax,%ax
+
+801026f0 <kbdgetc>:
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801026f0:	ba 64 00 00 00       	mov    $0x64,%edx
+801026f5:	ec                   	in     (%dx),%al
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+801026f6:	a8 01                	test   $0x1,%al
+801026f8:	0f 84 c2 00 00 00    	je     801027c0 <kbdgetc+0xd0>
+{
+801026fe:	55                   	push   %ebp
+801026ff:	ba 60 00 00 00       	mov    $0x60,%edx
+80102704:	89 e5                	mov    %esp,%ebp
+80102706:	53                   	push   %ebx
+80102707:	ec                   	in     (%dx),%al
+    return -1;
+  data = inb(KBDATAP);
+
+  if(data == 0xE0){
+    shift |= E0ESC;
+80102708:	8b 1d 7c 16 11 80    	mov    0x8011167c,%ebx
+  data = inb(KBDATAP);
+8010270e:	0f b6 c8             	movzbl %al,%ecx
+  if(data == 0xE0){
+80102711:	3c e0                	cmp    $0xe0,%al
+80102713:	74 5b                	je     80102770 <kbdgetc+0x80>
+    return 0;
+  } else if(data & 0x80){
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+80102715:	89 da                	mov    %ebx,%edx
+80102717:	83 e2 40             	and    $0x40,%edx
+  } else if(data & 0x80){
+8010271a:	84 c0                	test   %al,%al
+8010271c:	78 62                	js     80102780 <kbdgetc+0x90>
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+8010271e:	85 d2                	test   %edx,%edx
+80102720:	74 09                	je     8010272b <kbdgetc+0x3b>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+80102722:	83 c8 80             	or     $0xffffff80,%eax
+    shift &= ~E0ESC;
+80102725:	83 e3 bf             	and    $0xffffffbf,%ebx
+    data |= 0x80;
+80102728:	0f b6 c8             	movzbl %al,%ecx
+  }
+
+  shift |= shiftcode[data];
+8010272b:	0f b6 91 c0 75 10 80 	movzbl -0x7fef8a40(%ecx),%edx
+  shift ^= togglecode[data];
+80102732:	0f b6 81 c0 74 10 80 	movzbl -0x7fef8b40(%ecx),%eax
+  shift |= shiftcode[data];
+80102739:	09 da                	or     %ebx,%edx
+  shift ^= togglecode[data];
+8010273b:	31 c2                	xor    %eax,%edx
+  c = charcode[shift & (CTL | SHIFT)][data];
+8010273d:	89 d0                	mov    %edx,%eax
+  shift ^= togglecode[data];
+8010273f:	89 15 7c 16 11 80    	mov    %edx,0x8011167c
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102745:	83 e0 03             	and    $0x3,%eax
+  if(shift & CAPSLOCK){
+80102748:	83 e2 08             	and    $0x8,%edx
+  c = charcode[shift & (CTL | SHIFT)][data];
+8010274b:	8b 04 85 a0 74 10 80 	mov    -0x7fef8b60(,%eax,4),%eax
+80102752:	0f b6 04 08          	movzbl (%eax,%ecx,1),%eax
+  if(shift & CAPSLOCK){
+80102756:	74 0b                	je     80102763 <kbdgetc+0x73>
+    if('a' <= c && c <= 'z')
+80102758:	8d 50 9f             	lea    -0x61(%eax),%edx
+8010275b:	83 fa 19             	cmp    $0x19,%edx
+8010275e:	77 48                	ja     801027a8 <kbdgetc+0xb8>
+      c += 'A' - 'a';
+80102760:	83 e8 20             	sub    $0x20,%eax
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+80102763:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102766:	c9                   	leave  
+80102767:	c3                   	ret    
+80102768:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010276f:	90                   	nop
+    shift |= E0ESC;
+80102770:	83 cb 40             	or     $0x40,%ebx
+    return 0;
+80102773:	31 c0                	xor    %eax,%eax
+    shift |= E0ESC;
+80102775:	89 1d 7c 16 11 80    	mov    %ebx,0x8011167c
+}
+8010277b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010277e:	c9                   	leave  
+8010277f:	c3                   	ret    
+    data = (shift & E0ESC ? data : data & 0x7F);
+80102780:	83 e0 7f             	and    $0x7f,%eax
+80102783:	85 d2                	test   %edx,%edx
+80102785:	0f 44 c8             	cmove  %eax,%ecx
+    shift &= ~(shiftcode[data] | E0ESC);
+80102788:	0f b6 81 c0 75 10 80 	movzbl -0x7fef8a40(%ecx),%eax
+8010278f:	83 c8 40             	or     $0x40,%eax
+80102792:	0f b6 c0             	movzbl %al,%eax
+80102795:	f7 d0                	not    %eax
+80102797:	21 d8                	and    %ebx,%eax
+}
+80102799:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    shift &= ~(shiftcode[data] | E0ESC);
+8010279c:	a3 7c 16 11 80       	mov    %eax,0x8011167c
+    return 0;
+801027a1:	31 c0                	xor    %eax,%eax
+}
+801027a3:	c9                   	leave  
+801027a4:	c3                   	ret    
+801027a5:	8d 76 00             	lea    0x0(%esi),%esi
+    else if('A' <= c && c <= 'Z')
+801027a8:	8d 48 bf             	lea    -0x41(%eax),%ecx
+      c += 'a' - 'A';
+801027ab:	8d 50 20             	lea    0x20(%eax),%edx
+}
+801027ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801027b1:	c9                   	leave  
+      c += 'a' - 'A';
+801027b2:	83 f9 1a             	cmp    $0x1a,%ecx
+801027b5:	0f 42 c2             	cmovb  %edx,%eax
+}
+801027b8:	c3                   	ret    
+801027b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+801027c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801027c5:	c3                   	ret    
+801027c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801027d0 <kbdintr>:
+
+void
+kbdintr(void)
+{
+801027d0:	55                   	push   %ebp
+801027d1:	89 e5                	mov    %esp,%ebp
+801027d3:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(kbdgetc);
+801027d6:	68 f0 26 10 80       	push   $0x801026f0
+801027db:	e8 a0 e0 ff ff       	call   80100880 <consoleintr>
+}
+801027e0:	83 c4 10             	add    $0x10,%esp
+801027e3:	c9                   	leave  
+801027e4:	c3                   	ret    
+801027e5:	66 90                	xchg   %ax,%ax
+801027e7:	66 90                	xchg   %ax,%ax
+801027e9:	66 90                	xchg   %ax,%ax
+801027eb:	66 90                	xchg   %ax,%ax
+801027ed:	66 90                	xchg   %ax,%ax
+801027ef:	90                   	nop
+
+801027f0 <lapicinit>:
+}
+
+void
+lapicinit(void)
+{
+  if(!lapic)
+801027f0:	a1 80 16 11 80       	mov    0x80111680,%eax
+801027f5:	85 c0                	test   %eax,%eax
+801027f7:	0f 84 cb 00 00 00    	je     801028c8 <lapicinit+0xd8>
+  lapic[index] = value;
+801027fd:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+80102804:	01 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102807:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010280a:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+80102811:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102814:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102817:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+8010281e:	00 02 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102821:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102824:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+8010282b:	96 98 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010282e:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102831:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+80102838:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010283b:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010283e:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+80102845:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102848:	8b 50 20             	mov    0x20(%eax),%edx
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+8010284b:	8b 50 30             	mov    0x30(%eax),%edx
+8010284e:	c1 ea 10             	shr    $0x10,%edx
+80102851:	81 e2 fc 00 00 00    	and    $0xfc,%edx
+80102857:	75 77                	jne    801028d0 <lapicinit+0xe0>
+  lapic[index] = value;
+80102859:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80102860:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102863:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102866:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010286d:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102870:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102873:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010287a:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010287d:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102880:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102887:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010288a:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010288d:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+80102894:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102897:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010289a:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+801028a1:	85 08 00 
+  lapic[ID];  // wait for write to finish, by reading
+801028a4:	8b 50 20             	mov    0x20(%eax),%edx
+801028a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028ae:	66 90                	xchg   %ax,%ax
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+801028b0:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+801028b6:	80 e6 10             	and    $0x10,%dh
+801028b9:	75 f5                	jne    801028b0 <lapicinit+0xc0>
+  lapic[index] = value;
+801028bb:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+801028c2:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801028c5:	8b 40 20             	mov    0x20(%eax),%eax
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+801028c8:	c3                   	ret    
+801028c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  lapic[index] = value;
+801028d0:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+801028d7:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+801028da:	8b 50 20             	mov    0x20(%eax),%edx
+}
+801028dd:	e9 77 ff ff ff       	jmp    80102859 <lapicinit+0x69>
+801028e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801028f0 <lapicid>:
+
+int
+lapicid(void)
+{
+  if (!lapic)
+801028f0:	a1 80 16 11 80       	mov    0x80111680,%eax
+801028f5:	85 c0                	test   %eax,%eax
+801028f7:	74 07                	je     80102900 <lapicid+0x10>
+    return 0;
+  return lapic[ID] >> 24;
+801028f9:	8b 40 20             	mov    0x20(%eax),%eax
+801028fc:	c1 e8 18             	shr    $0x18,%eax
+801028ff:	c3                   	ret    
+    return 0;
+80102900:	31 c0                	xor    %eax,%eax
+}
+80102902:	c3                   	ret    
+80102903:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010290a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102910 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+  if(lapic)
+80102910:	a1 80 16 11 80       	mov    0x80111680,%eax
+80102915:	85 c0                	test   %eax,%eax
+80102917:	74 0d                	je     80102926 <lapiceoi+0x16>
+  lapic[index] = value;
+80102919:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102920:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102923:	8b 40 20             	mov    0x20(%eax),%eax
+    lapicw(EOI, 0);
+}
+80102926:	c3                   	ret    
+80102927:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010292e:	66 90                	xchg   %ax,%ax
+
+80102930 <microdelay>:
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+}
+80102930:	c3                   	ret    
+80102931:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102938:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010293f:	90                   	nop
+
+80102940 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+80102940:	55                   	push   %ebp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102941:	b8 0f 00 00 00       	mov    $0xf,%eax
+80102946:	ba 70 00 00 00       	mov    $0x70,%edx
+8010294b:	89 e5                	mov    %esp,%ebp
+8010294d:	53                   	push   %ebx
+8010294e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102951:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102954:	ee                   	out    %al,(%dx)
+80102955:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010295a:	ba 71 00 00 00       	mov    $0x71,%edx
+8010295f:	ee                   	out    %al,(%dx)
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+80102960:	31 c0                	xor    %eax,%eax
+  wrv[1] = addr >> 4;
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+80102962:	c1 e3 18             	shl    $0x18,%ebx
+  wrv[0] = 0;
+80102965:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+  wrv[1] = addr >> 4;
+8010296b:	89 c8                	mov    %ecx,%eax
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+8010296d:	c1 e9 0c             	shr    $0xc,%ecx
+  lapicw(ICRHI, apicid<<24);
+80102970:	89 da                	mov    %ebx,%edx
+  wrv[1] = addr >> 4;
+80102972:	c1 e8 04             	shr    $0x4,%eax
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80102975:	80 cd 06             	or     $0x6,%ch
+  wrv[1] = addr >> 4;
+80102978:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+  lapic[index] = value;
+8010297e:	a1 80 16 11 80       	mov    0x80111680,%eax
+80102983:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102989:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+8010298c:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80102993:	c5 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102996:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80102999:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+801029a0:	85 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801029a3:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801029a6:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801029ac:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801029af:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801029b5:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801029b8:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801029be:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801029c1:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801029c7:	8b 40 20             	mov    0x20(%eax),%eax
+    microdelay(200);
+  }
+}
+801029ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801029cd:	c9                   	leave  
+801029ce:	c3                   	ret    
+801029cf:	90                   	nop
+
+801029d0 <cmostime>:
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void
+cmostime(struct rtcdate *r)
+{
+801029d0:	55                   	push   %ebp
+801029d1:	b8 0b 00 00 00       	mov    $0xb,%eax
+801029d6:	ba 70 00 00 00       	mov    $0x70,%edx
+801029db:	89 e5                	mov    %esp,%ebp
+801029dd:	57                   	push   %edi
+801029de:	56                   	push   %esi
+801029df:	53                   	push   %ebx
+801029e0:	83 ec 4c             	sub    $0x4c,%esp
+801029e3:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801029e4:	ba 71 00 00 00       	mov    $0x71,%edx
+801029e9:	ec                   	in     (%dx),%al
+  struct rtcdate t1, t2;
+  int sb, bcd;
+
+  sb = cmos_read(CMOS_STATB);
+
+  bcd = (sb & (1 << 2)) == 0;
+801029ea:	83 e0 04             	and    $0x4,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801029ed:	bb 70 00 00 00       	mov    $0x70,%ebx
+801029f2:	88 45 b3             	mov    %al,-0x4d(%ebp)
+801029f5:	8d 76 00             	lea    0x0(%esi),%esi
+801029f8:	31 c0                	xor    %eax,%eax
+801029fa:	89 da                	mov    %ebx,%edx
+801029fc:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801029fd:	b9 71 00 00 00       	mov    $0x71,%ecx
+80102a02:	89 ca                	mov    %ecx,%edx
+80102a04:	ec                   	in     (%dx),%al
+80102a05:	88 45 b7             	mov    %al,-0x49(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a08:	89 da                	mov    %ebx,%edx
+80102a0a:	b8 02 00 00 00       	mov    $0x2,%eax
+80102a0f:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a10:	89 ca                	mov    %ecx,%edx
+80102a12:	ec                   	in     (%dx),%al
+80102a13:	88 45 b6             	mov    %al,-0x4a(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a16:	89 da                	mov    %ebx,%edx
+80102a18:	b8 04 00 00 00       	mov    $0x4,%eax
+80102a1d:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a1e:	89 ca                	mov    %ecx,%edx
+80102a20:	ec                   	in     (%dx),%al
+80102a21:	88 45 b5             	mov    %al,-0x4b(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a24:	89 da                	mov    %ebx,%edx
+80102a26:	b8 07 00 00 00       	mov    $0x7,%eax
+80102a2b:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a2c:	89 ca                	mov    %ecx,%edx
+80102a2e:	ec                   	in     (%dx),%al
+80102a2f:	88 45 b4             	mov    %al,-0x4c(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a32:	89 da                	mov    %ebx,%edx
+80102a34:	b8 08 00 00 00       	mov    $0x8,%eax
+80102a39:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a3a:	89 ca                	mov    %ecx,%edx
+80102a3c:	ec                   	in     (%dx),%al
+80102a3d:	89 c7                	mov    %eax,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a3f:	89 da                	mov    %ebx,%edx
+80102a41:	b8 09 00 00 00       	mov    $0x9,%eax
+80102a46:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a47:	89 ca                	mov    %ecx,%edx
+80102a49:	ec                   	in     (%dx),%al
+80102a4a:	89 c6                	mov    %eax,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a4c:	89 da                	mov    %ebx,%edx
+80102a4e:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102a53:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a54:	89 ca                	mov    %ecx,%edx
+80102a56:	ec                   	in     (%dx),%al
+
+  // make sure CMOS doesn't modify time while we read it
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+80102a57:	84 c0                	test   %al,%al
+80102a59:	78 9d                	js     801029f8 <cmostime+0x28>
+  return inb(CMOS_RETURN);
+80102a5b:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+80102a5f:	89 fa                	mov    %edi,%edx
+80102a61:	0f b6 fa             	movzbl %dl,%edi
+80102a64:	89 f2                	mov    %esi,%edx
+80102a66:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102a69:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80102a6d:	0f b6 f2             	movzbl %dl,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a70:	89 da                	mov    %ebx,%edx
+80102a72:	89 7d c8             	mov    %edi,-0x38(%ebp)
+80102a75:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102a78:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+80102a7c:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80102a7f:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102a82:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+80102a86:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102a89:	31 c0                	xor    %eax,%eax
+80102a8b:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a8c:	89 ca                	mov    %ecx,%edx
+80102a8e:	ec                   	in     (%dx),%al
+80102a8f:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a92:	89 da                	mov    %ebx,%edx
+80102a94:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80102a97:	b8 02 00 00 00       	mov    $0x2,%eax
+80102a9c:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a9d:	89 ca                	mov    %ecx,%edx
+80102a9f:	ec                   	in     (%dx),%al
+80102aa0:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102aa3:	89 da                	mov    %ebx,%edx
+80102aa5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80102aa8:	b8 04 00 00 00       	mov    $0x4,%eax
+80102aad:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102aae:	89 ca                	mov    %ecx,%edx
+80102ab0:	ec                   	in     (%dx),%al
+80102ab1:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102ab4:	89 da                	mov    %ebx,%edx
+80102ab6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102ab9:	b8 07 00 00 00       	mov    $0x7,%eax
+80102abe:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102abf:	89 ca                	mov    %ecx,%edx
+80102ac1:	ec                   	in     (%dx),%al
+80102ac2:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102ac5:	89 da                	mov    %ebx,%edx
+80102ac7:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80102aca:	b8 08 00 00 00       	mov    $0x8,%eax
+80102acf:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102ad0:	89 ca                	mov    %ecx,%edx
+80102ad2:	ec                   	in     (%dx),%al
+80102ad3:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102ad6:	89 da                	mov    %ebx,%edx
+80102ad8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80102adb:	b8 09 00 00 00       	mov    $0x9,%eax
+80102ae0:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102ae1:	89 ca                	mov    %ecx,%edx
+80102ae3:	ec                   	in     (%dx),%al
+80102ae4:	0f b6 c0             	movzbl %al,%eax
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+80102ae7:	83 ec 04             	sub    $0x4,%esp
+  return inb(CMOS_RETURN);
+80102aea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+80102aed:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80102af0:	6a 18                	push   $0x18
+80102af2:	50                   	push   %eax
+80102af3:	8d 45 b8             	lea    -0x48(%ebp),%eax
+80102af6:	50                   	push   %eax
+80102af7:	e8 b4 1b 00 00       	call   801046b0 <memcmp>
+80102afc:	83 c4 10             	add    $0x10,%esp
+80102aff:	85 c0                	test   %eax,%eax
+80102b01:	0f 85 f1 fe ff ff    	jne    801029f8 <cmostime+0x28>
+      break;
+  }
+
+  // convert
+  if(bcd) {
+80102b07:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+80102b0b:	75 78                	jne    80102b85 <cmostime+0x1b5>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+80102b0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102b10:	89 c2                	mov    %eax,%edx
+80102b12:	83 e0 0f             	and    $0xf,%eax
+80102b15:	c1 ea 04             	shr    $0x4,%edx
+80102b18:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b1b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b1e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    CONV(minute);
+80102b21:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102b24:	89 c2                	mov    %eax,%edx
+80102b26:	83 e0 0f             	and    $0xf,%eax
+80102b29:	c1 ea 04             	shr    $0x4,%edx
+80102b2c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b2f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b32:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    CONV(hour  );
+80102b35:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102b38:	89 c2                	mov    %eax,%edx
+80102b3a:	83 e0 0f             	and    $0xf,%eax
+80102b3d:	c1 ea 04             	shr    $0x4,%edx
+80102b40:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b43:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b46:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    CONV(day   );
+80102b49:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102b4c:	89 c2                	mov    %eax,%edx
+80102b4e:	83 e0 0f             	and    $0xf,%eax
+80102b51:	c1 ea 04             	shr    $0x4,%edx
+80102b54:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b57:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b5a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    CONV(month );
+80102b5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102b60:	89 c2                	mov    %eax,%edx
+80102b62:	83 e0 0f             	and    $0xf,%eax
+80102b65:	c1 ea 04             	shr    $0x4,%edx
+80102b68:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b6b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b6e:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    CONV(year  );
+80102b71:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102b74:	89 c2                	mov    %eax,%edx
+80102b76:	83 e0 0f             	and    $0xf,%eax
+80102b79:	c1 ea 04             	shr    $0x4,%edx
+80102b7c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b7f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b82:	89 45 cc             	mov    %eax,-0x34(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+80102b85:	8b 75 08             	mov    0x8(%ebp),%esi
+80102b88:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102b8b:	89 06                	mov    %eax,(%esi)
+80102b8d:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102b90:	89 46 04             	mov    %eax,0x4(%esi)
+80102b93:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102b96:	89 46 08             	mov    %eax,0x8(%esi)
+80102b99:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102b9c:	89 46 0c             	mov    %eax,0xc(%esi)
+80102b9f:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102ba2:	89 46 10             	mov    %eax,0x10(%esi)
+80102ba5:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102ba8:	89 46 14             	mov    %eax,0x14(%esi)
+  r->year += 2000;
+80102bab:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+}
+80102bb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102bb5:	5b                   	pop    %ebx
+80102bb6:	5e                   	pop    %esi
+80102bb7:	5f                   	pop    %edi
+80102bb8:	5d                   	pop    %ebp
+80102bb9:	c3                   	ret    
+80102bba:	66 90                	xchg   %ax,%ax
+80102bbc:	66 90                	xchg   %ax,%ax
+80102bbe:	66 90                	xchg   %ax,%ax
+
+80102bc0 <install_trans>:
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102bc0:	8b 0d e8 16 11 80    	mov    0x801116e8,%ecx
+80102bc6:	85 c9                	test   %ecx,%ecx
+80102bc8:	0f 8e 8a 00 00 00    	jle    80102c58 <install_trans+0x98>
+{
+80102bce:	55                   	push   %ebp
+80102bcf:	89 e5                	mov    %esp,%ebp
+80102bd1:	57                   	push   %edi
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102bd2:	31 ff                	xor    %edi,%edi
+{
+80102bd4:	56                   	push   %esi
+80102bd5:	53                   	push   %ebx
+80102bd6:	83 ec 0c             	sub    $0xc,%esp
+80102bd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+80102be0:	a1 d4 16 11 80       	mov    0x801116d4,%eax
+80102be5:	83 ec 08             	sub    $0x8,%esp
+80102be8:	01 f8                	add    %edi,%eax
+80102bea:	83 c0 01             	add    $0x1,%eax
+80102bed:	50                   	push   %eax
+80102bee:	ff 35 e4 16 11 80    	push   0x801116e4
+80102bf4:	e8 d7 d4 ff ff       	call   801000d0 <bread>
+80102bf9:	89 c6                	mov    %eax,%esi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102bfb:	58                   	pop    %eax
+80102bfc:	5a                   	pop    %edx
+80102bfd:	ff 34 bd ec 16 11 80 	push   -0x7feee914(,%edi,4)
+80102c04:	ff 35 e4 16 11 80    	push   0x801116e4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102c0a:	83 c7 01             	add    $0x1,%edi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102c0d:	e8 be d4 ff ff       	call   801000d0 <bread>
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+80102c12:	83 c4 0c             	add    $0xc,%esp
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102c15:	89 c3                	mov    %eax,%ebx
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+80102c17:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102c1a:	68 00 02 00 00       	push   $0x200
+80102c1f:	50                   	push   %eax
+80102c20:	8d 43 5c             	lea    0x5c(%ebx),%eax
+80102c23:	50                   	push   %eax
+80102c24:	e8 d7 1a 00 00       	call   80104700 <memmove>
+    bwrite(dbuf);  // write dst to disk
+80102c29:	89 1c 24             	mov    %ebx,(%esp)
+80102c2c:	e8 7f d5 ff ff       	call   801001b0 <bwrite>
+    brelse(lbuf);
+80102c31:	89 34 24             	mov    %esi,(%esp)
+80102c34:	e8 b7 d5 ff ff       	call   801001f0 <brelse>
+    brelse(dbuf);
+80102c39:	89 1c 24             	mov    %ebx,(%esp)
+80102c3c:	e8 af d5 ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102c41:	83 c4 10             	add    $0x10,%esp
+80102c44:	39 3d e8 16 11 80    	cmp    %edi,0x801116e8
+80102c4a:	7f 94                	jg     80102be0 <install_trans+0x20>
+  }
+}
+80102c4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102c4f:	5b                   	pop    %ebx
+80102c50:	5e                   	pop    %esi
+80102c51:	5f                   	pop    %edi
+80102c52:	5d                   	pop    %ebp
+80102c53:	c3                   	ret    
+80102c54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c58:	c3                   	ret    
+80102c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102c60 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+80102c60:	55                   	push   %ebp
+80102c61:	89 e5                	mov    %esp,%ebp
+80102c63:	53                   	push   %ebx
+80102c64:	83 ec 0c             	sub    $0xc,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80102c67:	ff 35 d4 16 11 80    	push   0x801116d4
+80102c6d:	ff 35 e4 16 11 80    	push   0x801116e4
+80102c73:	e8 58 d4 ff ff       	call   801000d0 <bread>
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+80102c78:	83 c4 10             	add    $0x10,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80102c7b:	89 c3                	mov    %eax,%ebx
+  hb->n = log.lh.n;
+80102c7d:	a1 e8 16 11 80       	mov    0x801116e8,%eax
+80102c82:	89 43 5c             	mov    %eax,0x5c(%ebx)
+  for (i = 0; i < log.lh.n; i++) {
+80102c85:	85 c0                	test   %eax,%eax
+80102c87:	7e 19                	jle    80102ca2 <write_head+0x42>
+80102c89:	31 d2                	xor    %edx,%edx
+80102c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c8f:	90                   	nop
+    hb->block[i] = log.lh.block[i];
+80102c90:	8b 0c 95 ec 16 11 80 	mov    -0x7feee914(,%edx,4),%ecx
+80102c97:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+80102c9b:	83 c2 01             	add    $0x1,%edx
+80102c9e:	39 d0                	cmp    %edx,%eax
+80102ca0:	75 ee                	jne    80102c90 <write_head+0x30>
+  }
+  bwrite(buf);
+80102ca2:	83 ec 0c             	sub    $0xc,%esp
+80102ca5:	53                   	push   %ebx
+80102ca6:	e8 05 d5 ff ff       	call   801001b0 <bwrite>
+  brelse(buf);
+80102cab:	89 1c 24             	mov    %ebx,(%esp)
+80102cae:	e8 3d d5 ff ff       	call   801001f0 <brelse>
+}
+80102cb3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102cb6:	83 c4 10             	add    $0x10,%esp
+80102cb9:	c9                   	leave  
+80102cba:	c3                   	ret    
+80102cbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102cbf:	90                   	nop
+
+80102cc0 <initlog>:
+{
+80102cc0:	55                   	push   %ebp
+80102cc1:	89 e5                	mov    %esp,%ebp
+80102cc3:	53                   	push   %ebx
+80102cc4:	83 ec 2c             	sub    $0x2c,%esp
+80102cc7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&log.lock, "log");
+80102cca:	68 c0 76 10 80       	push   $0x801076c0
+80102ccf:	68 a0 16 11 80       	push   $0x801116a0
+80102cd4:	e8 f7 16 00 00       	call   801043d0 <initlock>
+  readsb(dev, &sb);
+80102cd9:	58                   	pop    %eax
+80102cda:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102cdd:	5a                   	pop    %edx
+80102cde:	50                   	push   %eax
+80102cdf:	53                   	push   %ebx
+80102ce0:	e8 3b e8 ff ff       	call   80101520 <readsb>
+  log.start = sb.logstart;
+80102ce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  struct buf *buf = bread(log.dev, log.start);
+80102ce8:	59                   	pop    %ecx
+  log.dev = dev;
+80102ce9:	89 1d e4 16 11 80    	mov    %ebx,0x801116e4
+  log.size = sb.nlog;
+80102cef:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  log.start = sb.logstart;
+80102cf2:	a3 d4 16 11 80       	mov    %eax,0x801116d4
+  log.size = sb.nlog;
+80102cf7:	89 15 d8 16 11 80    	mov    %edx,0x801116d8
+  struct buf *buf = bread(log.dev, log.start);
+80102cfd:	5a                   	pop    %edx
+80102cfe:	50                   	push   %eax
+80102cff:	53                   	push   %ebx
+80102d00:	e8 cb d3 ff ff       	call   801000d0 <bread>
+  for (i = 0; i < log.lh.n; i++) {
+80102d05:	83 c4 10             	add    $0x10,%esp
+  log.lh.n = lh->n;
+80102d08:	8b 58 5c             	mov    0x5c(%eax),%ebx
+80102d0b:	89 1d e8 16 11 80    	mov    %ebx,0x801116e8
+  for (i = 0; i < log.lh.n; i++) {
+80102d11:	85 db                	test   %ebx,%ebx
+80102d13:	7e 1d                	jle    80102d32 <initlog+0x72>
+80102d15:	31 d2                	xor    %edx,%edx
+80102d17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d1e:	66 90                	xchg   %ax,%ax
+    log.lh.block[i] = lh->block[i];
+80102d20:	8b 4c 90 60          	mov    0x60(%eax,%edx,4),%ecx
+80102d24:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+80102d2b:	83 c2 01             	add    $0x1,%edx
+80102d2e:	39 d3                	cmp    %edx,%ebx
+80102d30:	75 ee                	jne    80102d20 <initlog+0x60>
+  brelse(buf);
+80102d32:	83 ec 0c             	sub    $0xc,%esp
+80102d35:	50                   	push   %eax
+80102d36:	e8 b5 d4 ff ff       	call   801001f0 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(); // if committed, copy from log to disk
+80102d3b:	e8 80 fe ff ff       	call   80102bc0 <install_trans>
+  log.lh.n = 0;
+80102d40:	c7 05 e8 16 11 80 00 	movl   $0x0,0x801116e8
+80102d47:	00 00 00 
+  write_head(); // clear the log
+80102d4a:	e8 11 ff ff ff       	call   80102c60 <write_head>
+}
+80102d4f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102d52:	83 c4 10             	add    $0x10,%esp
+80102d55:	c9                   	leave  
+80102d56:	c3                   	ret    
+80102d57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d5e:	66 90                	xchg   %ax,%ax
+
+80102d60 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+80102d60:	55                   	push   %ebp
+80102d61:	89 e5                	mov    %esp,%ebp
+80102d63:	83 ec 14             	sub    $0x14,%esp
+  acquire(&log.lock);
+80102d66:	68 a0 16 11 80       	push   $0x801116a0
+80102d6b:	e8 30 18 00 00       	call   801045a0 <acquire>
+80102d70:	83 c4 10             	add    $0x10,%esp
+80102d73:	eb 18                	jmp    80102d8d <begin_op+0x2d>
+80102d75:	8d 76 00             	lea    0x0(%esi),%esi
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+80102d78:	83 ec 08             	sub    $0x8,%esp
+80102d7b:	68 a0 16 11 80       	push   $0x801116a0
+80102d80:	68 a0 16 11 80       	push   $0x801116a0
+80102d85:	e8 b6 12 00 00       	call   80104040 <sleep>
+80102d8a:	83 c4 10             	add    $0x10,%esp
+    if(log.committing){
+80102d8d:	a1 e0 16 11 80       	mov    0x801116e0,%eax
+80102d92:	85 c0                	test   %eax,%eax
+80102d94:	75 e2                	jne    80102d78 <begin_op+0x18>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+80102d96:	a1 dc 16 11 80       	mov    0x801116dc,%eax
+80102d9b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
+80102da1:	83 c0 01             	add    $0x1,%eax
+80102da4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102da7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102daa:	83 fa 1e             	cmp    $0x1e,%edx
+80102dad:	7f c9                	jg     80102d78 <begin_op+0x18>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+80102daf:	83 ec 0c             	sub    $0xc,%esp
+      log.outstanding += 1;
+80102db2:	a3 dc 16 11 80       	mov    %eax,0x801116dc
+      release(&log.lock);
+80102db7:	68 a0 16 11 80       	push   $0x801116a0
+80102dbc:	e8 7f 17 00 00       	call   80104540 <release>
+      break;
+    }
+  }
+}
+80102dc1:	83 c4 10             	add    $0x10,%esp
+80102dc4:	c9                   	leave  
+80102dc5:	c3                   	ret    
+80102dc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102dcd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102dd0 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80102dd0:	55                   	push   %ebp
+80102dd1:	89 e5                	mov    %esp,%ebp
+80102dd3:	57                   	push   %edi
+80102dd4:	56                   	push   %esi
+80102dd5:	53                   	push   %ebx
+80102dd6:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+
+  acquire(&log.lock);
+80102dd9:	68 a0 16 11 80       	push   $0x801116a0
+80102dde:	e8 bd 17 00 00       	call   801045a0 <acquire>
+  log.outstanding -= 1;
+80102de3:	a1 dc 16 11 80       	mov    0x801116dc,%eax
+  if(log.committing)
+80102de8:	8b 35 e0 16 11 80    	mov    0x801116e0,%esi
+80102dee:	83 c4 10             	add    $0x10,%esp
+  log.outstanding -= 1;
+80102df1:	8d 58 ff             	lea    -0x1(%eax),%ebx
+80102df4:	89 1d dc 16 11 80    	mov    %ebx,0x801116dc
+  if(log.committing)
+80102dfa:	85 f6                	test   %esi,%esi
+80102dfc:	0f 85 22 01 00 00    	jne    80102f24 <end_op+0x154>
+    panic("log.committing");
+  if(log.outstanding == 0){
+80102e02:	85 db                	test   %ebx,%ebx
+80102e04:	0f 85 f6 00 00 00    	jne    80102f00 <end_op+0x130>
+    do_commit = 1;
+    log.committing = 1;
+80102e0a:	c7 05 e0 16 11 80 01 	movl   $0x1,0x801116e0
+80102e11:	00 00 00 
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+80102e14:	83 ec 0c             	sub    $0xc,%esp
+80102e17:	68 a0 16 11 80       	push   $0x801116a0
+80102e1c:	e8 1f 17 00 00       	call   80104540 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+80102e21:	8b 0d e8 16 11 80    	mov    0x801116e8,%ecx
+80102e27:	83 c4 10             	add    $0x10,%esp
+80102e2a:	85 c9                	test   %ecx,%ecx
+80102e2c:	7f 42                	jg     80102e70 <end_op+0xa0>
+    acquire(&log.lock);
+80102e2e:	83 ec 0c             	sub    $0xc,%esp
+80102e31:	68 a0 16 11 80       	push   $0x801116a0
+80102e36:	e8 65 17 00 00       	call   801045a0 <acquire>
+    wakeup(&log);
+80102e3b:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
+    log.committing = 0;
+80102e42:	c7 05 e0 16 11 80 00 	movl   $0x0,0x801116e0
+80102e49:	00 00 00 
+    wakeup(&log);
+80102e4c:	e8 af 12 00 00       	call   80104100 <wakeup>
+    release(&log.lock);
+80102e51:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
+80102e58:	e8 e3 16 00 00       	call   80104540 <release>
+80102e5d:	83 c4 10             	add    $0x10,%esp
+}
+80102e60:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102e63:	5b                   	pop    %ebx
+80102e64:	5e                   	pop    %esi
+80102e65:	5f                   	pop    %edi
+80102e66:	5d                   	pop    %ebp
+80102e67:	c3                   	ret    
+80102e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102e6f:	90                   	nop
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80102e70:	a1 d4 16 11 80       	mov    0x801116d4,%eax
+80102e75:	83 ec 08             	sub    $0x8,%esp
+80102e78:	01 d8                	add    %ebx,%eax
+80102e7a:	83 c0 01             	add    $0x1,%eax
+80102e7d:	50                   	push   %eax
+80102e7e:	ff 35 e4 16 11 80    	push   0x801116e4
+80102e84:	e8 47 d2 ff ff       	call   801000d0 <bread>
+80102e89:	89 c6                	mov    %eax,%esi
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102e8b:	58                   	pop    %eax
+80102e8c:	5a                   	pop    %edx
+80102e8d:	ff 34 9d ec 16 11 80 	push   -0x7feee914(,%ebx,4)
+80102e94:	ff 35 e4 16 11 80    	push   0x801116e4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102e9a:	83 c3 01             	add    $0x1,%ebx
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102e9d:	e8 2e d2 ff ff       	call   801000d0 <bread>
+    memmove(to->data, from->data, BSIZE);
+80102ea2:	83 c4 0c             	add    $0xc,%esp
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102ea5:	89 c7                	mov    %eax,%edi
+    memmove(to->data, from->data, BSIZE);
+80102ea7:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102eaa:	68 00 02 00 00       	push   $0x200
+80102eaf:	50                   	push   %eax
+80102eb0:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102eb3:	50                   	push   %eax
+80102eb4:	e8 47 18 00 00       	call   80104700 <memmove>
+    bwrite(to);  // write the log
+80102eb9:	89 34 24             	mov    %esi,(%esp)
+80102ebc:	e8 ef d2 ff ff       	call   801001b0 <bwrite>
+    brelse(from);
+80102ec1:	89 3c 24             	mov    %edi,(%esp)
+80102ec4:	e8 27 d3 ff ff       	call   801001f0 <brelse>
+    brelse(to);
+80102ec9:	89 34 24             	mov    %esi,(%esp)
+80102ecc:	e8 1f d3 ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102ed1:	83 c4 10             	add    $0x10,%esp
+80102ed4:	3b 1d e8 16 11 80    	cmp    0x801116e8,%ebx
+80102eda:	7c 94                	jl     80102e70 <end_op+0xa0>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+80102edc:	e8 7f fd ff ff       	call   80102c60 <write_head>
+    install_trans(); // Now install writes to home locations
+80102ee1:	e8 da fc ff ff       	call   80102bc0 <install_trans>
+    log.lh.n = 0;
+80102ee6:	c7 05 e8 16 11 80 00 	movl   $0x0,0x801116e8
+80102eed:	00 00 00 
+    write_head();    // Erase the transaction from the log
+80102ef0:	e8 6b fd ff ff       	call   80102c60 <write_head>
+80102ef5:	e9 34 ff ff ff       	jmp    80102e2e <end_op+0x5e>
+80102efa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    wakeup(&log);
+80102f00:	83 ec 0c             	sub    $0xc,%esp
+80102f03:	68 a0 16 11 80       	push   $0x801116a0
+80102f08:	e8 f3 11 00 00       	call   80104100 <wakeup>
+  release(&log.lock);
+80102f0d:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
+80102f14:	e8 27 16 00 00       	call   80104540 <release>
+80102f19:	83 c4 10             	add    $0x10,%esp
+}
+80102f1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102f1f:	5b                   	pop    %ebx
+80102f20:	5e                   	pop    %esi
+80102f21:	5f                   	pop    %edi
+80102f22:	5d                   	pop    %ebp
+80102f23:	c3                   	ret    
+    panic("log.committing");
+80102f24:	83 ec 0c             	sub    $0xc,%esp
+80102f27:	68 c4 76 10 80       	push   $0x801076c4
+80102f2c:	e8 4f d4 ff ff       	call   80100380 <panic>
+80102f31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f3f:	90                   	nop
+
+80102f40 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80102f40:	55                   	push   %ebp
+80102f41:	89 e5                	mov    %esp,%ebp
+80102f43:	53                   	push   %ebx
+80102f44:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102f47:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
+{
+80102f4d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102f50:	83 fa 1d             	cmp    $0x1d,%edx
+80102f53:	0f 8f 85 00 00 00    	jg     80102fde <log_write+0x9e>
+80102f59:	a1 d8 16 11 80       	mov    0x801116d8,%eax
+80102f5e:	83 e8 01             	sub    $0x1,%eax
+80102f61:	39 c2                	cmp    %eax,%edx
+80102f63:	7d 79                	jge    80102fde <log_write+0x9e>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+80102f65:	a1 dc 16 11 80       	mov    0x801116dc,%eax
+80102f6a:	85 c0                	test   %eax,%eax
+80102f6c:	7e 7d                	jle    80102feb <log_write+0xab>
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+80102f6e:	83 ec 0c             	sub    $0xc,%esp
+80102f71:	68 a0 16 11 80       	push   $0x801116a0
+80102f76:	e8 25 16 00 00       	call   801045a0 <acquire>
+  for (i = 0; i < log.lh.n; i++) {
+80102f7b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
+80102f81:	83 c4 10             	add    $0x10,%esp
+80102f84:	85 d2                	test   %edx,%edx
+80102f86:	7e 4a                	jle    80102fd2 <log_write+0x92>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102f88:	8b 4b 08             	mov    0x8(%ebx),%ecx
+  for (i = 0; i < log.lh.n; i++) {
+80102f8b:	31 c0                	xor    %eax,%eax
+80102f8d:	eb 08                	jmp    80102f97 <log_write+0x57>
+80102f8f:	90                   	nop
+80102f90:	83 c0 01             	add    $0x1,%eax
+80102f93:	39 c2                	cmp    %eax,%edx
+80102f95:	74 29                	je     80102fc0 <log_write+0x80>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102f97:	39 0c 85 ec 16 11 80 	cmp    %ecx,-0x7feee914(,%eax,4)
+80102f9e:	75 f0                	jne    80102f90 <log_write+0x50>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+80102fa0:	89 0c 85 ec 16 11 80 	mov    %ecx,-0x7feee914(,%eax,4)
+  if (i == log.lh.n)
+    log.lh.n++;
+  b->flags |= B_DIRTY; // prevent eviction
+80102fa7:	83 0b 04             	orl    $0x4,(%ebx)
+  release(&log.lock);
+}
+80102faa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  release(&log.lock);
+80102fad:	c7 45 08 a0 16 11 80 	movl   $0x801116a0,0x8(%ebp)
+}
+80102fb4:	c9                   	leave  
+  release(&log.lock);
+80102fb5:	e9 86 15 00 00       	jmp    80104540 <release>
+80102fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  log.lh.block[i] = b->blockno;
+80102fc0:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
+    log.lh.n++;
+80102fc7:	83 c2 01             	add    $0x1,%edx
+80102fca:	89 15 e8 16 11 80    	mov    %edx,0x801116e8
+80102fd0:	eb d5                	jmp    80102fa7 <log_write+0x67>
+  log.lh.block[i] = b->blockno;
+80102fd2:	8b 43 08             	mov    0x8(%ebx),%eax
+80102fd5:	a3 ec 16 11 80       	mov    %eax,0x801116ec
+  if (i == log.lh.n)
+80102fda:	75 cb                	jne    80102fa7 <log_write+0x67>
+80102fdc:	eb e9                	jmp    80102fc7 <log_write+0x87>
+    panic("too big a transaction");
+80102fde:	83 ec 0c             	sub    $0xc,%esp
+80102fe1:	68 d3 76 10 80       	push   $0x801076d3
+80102fe6:	e8 95 d3 ff ff       	call   80100380 <panic>
+    panic("log_write outside of trans");
+80102feb:	83 ec 0c             	sub    $0xc,%esp
+80102fee:	68 e9 76 10 80       	push   $0x801076e9
+80102ff3:	e8 88 d3 ff ff       	call   80100380 <panic>
+80102ff8:	66 90                	xchg   %ax,%ax
+80102ffa:	66 90                	xchg   %ax,%ax
+80102ffc:	66 90                	xchg   %ax,%ax
+80102ffe:	66 90                	xchg   %ax,%ax
+
+80103000 <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+80103000:	55                   	push   %ebp
+80103001:	89 e5                	mov    %esp,%ebp
+80103003:	53                   	push   %ebx
+80103004:	83 ec 04             	sub    $0x4,%esp
+  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
+80103007:	e8 44 09 00 00       	call   80103950 <cpuid>
+8010300c:	89 c3                	mov    %eax,%ebx
+8010300e:	e8 3d 09 00 00       	call   80103950 <cpuid>
+80103013:	83 ec 04             	sub    $0x4,%esp
+80103016:	53                   	push   %ebx
+80103017:	50                   	push   %eax
+80103018:	68 04 77 10 80       	push   $0x80107704
+8010301d:	e8 7e d6 ff ff       	call   801006a0 <cprintf>
+  idtinit();       // load idt register
+80103022:	e8 09 29 00 00       	call   80105930 <idtinit>
+  xchg(&(mycpu()->started), 1); // tell startothers() we're up
+80103027:	e8 c4 08 00 00       	call   801038f0 <mycpu>
+8010302c:	89 c2                	mov    %eax,%edx
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+8010302e:	b8 01 00 00 00       	mov    $0x1,%eax
+80103033:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+  scheduler();     // start running processes
+8010303a:	e8 f1 0b 00 00       	call   80103c30 <scheduler>
+8010303f:	90                   	nop
+
+80103040 <mpenter>:
+{
+80103040:	55                   	push   %ebp
+80103041:	89 e5                	mov    %esp,%ebp
+80103043:	83 ec 08             	sub    $0x8,%esp
+  switchkvm();
+80103046:	e8 05 3a 00 00       	call   80106a50 <switchkvm>
+  seginit();
+8010304b:	e8 80 38 00 00       	call   801068d0 <seginit>
+  lapicinit();
+80103050:	e8 9b f7 ff ff       	call   801027f0 <lapicinit>
+  mpmain();
+80103055:	e8 a6 ff ff ff       	call   80103000 <mpmain>
+8010305a:	66 90                	xchg   %ax,%ax
+8010305c:	66 90                	xchg   %ax,%ax
+8010305e:	66 90                	xchg   %ax,%ax
+
+80103060 <main>:
+{
+80103060:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80103064:	83 e4 f0             	and    $0xfffffff0,%esp
+80103067:	ff 71 fc             	push   -0x4(%ecx)
+8010306a:	55                   	push   %ebp
+8010306b:	89 e5                	mov    %esp,%ebp
+8010306d:	53                   	push   %ebx
+8010306e:	51                   	push   %ecx
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+8010306f:	83 ec 08             	sub    $0x8,%esp
+80103072:	68 00 00 40 80       	push   $0x80400000
+80103077:	68 d0 54 11 80       	push   $0x801154d0
+8010307c:	e8 8f f5 ff ff       	call   80102610 <kinit1>
+  kvmalloc();      // kernel page table
+80103081:	e8 ba 3e 00 00       	call   80106f40 <kvmalloc>
+  mpinit();        // detect other processors
+80103086:	e8 85 01 00 00       	call   80103210 <mpinit>
+  lapicinit();     // interrupt controller
+8010308b:	e8 60 f7 ff ff       	call   801027f0 <lapicinit>
+  seginit();       // segment descriptors
+80103090:	e8 3b 38 00 00       	call   801068d0 <seginit>
+  picinit();       // disable pic
+80103095:	e8 76 03 00 00       	call   80103410 <picinit>
+  ioapicinit();    // another interrupt controller
+8010309a:	e8 31 f3 ff ff       	call   801023d0 <ioapicinit>
+  consoleinit();   // console hardware
+8010309f:	e8 bc d9 ff ff       	call   80100a60 <consoleinit>
+  uartinit();      // serial port
+801030a4:	e8 a7 2b 00 00       	call   80105c50 <uartinit>
+  pinit();         // process table
+801030a9:	e8 22 08 00 00       	call   801038d0 <pinit>
+  tvinit();        // trap vectors
+801030ae:	e8 fd 27 00 00       	call   801058b0 <tvinit>
+  binit();         // buffer cache
+801030b3:	e8 88 cf ff ff       	call   80100040 <binit>
+  fileinit();      // file table
+801030b8:	e8 53 dd ff ff       	call   80100e10 <fileinit>
+  ideinit();       // disk 
+801030bd:	e8 fe f0 ff ff       	call   801021c0 <ideinit>
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+801030c2:	83 c4 0c             	add    $0xc,%esp
+801030c5:	68 8a 00 00 00       	push   $0x8a
+801030ca:	68 8c a4 10 80       	push   $0x8010a48c
+801030cf:	68 00 70 00 80       	push   $0x80007000
+801030d4:	e8 27 16 00 00       	call   80104700 <memmove>
+
+  for(c = cpus; c < cpus+ncpu; c++){
+801030d9:	83 c4 10             	add    $0x10,%esp
+801030dc:	69 05 84 17 11 80 b0 	imul   $0xb0,0x80111784,%eax
+801030e3:	00 00 00 
+801030e6:	05 a0 17 11 80       	add    $0x801117a0,%eax
+801030eb:	3d a0 17 11 80       	cmp    $0x801117a0,%eax
+801030f0:	76 7e                	jbe    80103170 <main+0x110>
+801030f2:	bb a0 17 11 80       	mov    $0x801117a0,%ebx
+801030f7:	eb 20                	jmp    80103119 <main+0xb9>
+801030f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103100:	69 05 84 17 11 80 b0 	imul   $0xb0,0x80111784,%eax
+80103107:	00 00 00 
+8010310a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+80103110:	05 a0 17 11 80       	add    $0x801117a0,%eax
+80103115:	39 c3                	cmp    %eax,%ebx
+80103117:	73 57                	jae    80103170 <main+0x110>
+    if(c == mycpu())  // We've started already.
+80103119:	e8 d2 07 00 00       	call   801038f0 <mycpu>
+8010311e:	39 c3                	cmp    %eax,%ebx
+80103120:	74 de                	je     80103100 <main+0xa0>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80103122:	e8 59 f5 ff ff       	call   80102680 <kalloc>
+    *(void**)(code-4) = stack + KSTACKSIZE;
+    *(void(**)(void))(code-8) = mpenter;
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+
+    lapicstartap(c->apicid, V2P(code));
+80103127:	83 ec 08             	sub    $0x8,%esp
+    *(void(**)(void))(code-8) = mpenter;
+8010312a:	c7 05 f8 6f 00 80 40 	movl   $0x80103040,0x80006ff8
+80103131:	30 10 80 
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+80103134:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
+8010313b:	90 10 00 
+    *(void**)(code-4) = stack + KSTACKSIZE;
+8010313e:	05 00 10 00 00       	add    $0x1000,%eax
+80103143:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+    lapicstartap(c->apicid, V2P(code));
+80103148:	0f b6 03             	movzbl (%ebx),%eax
+8010314b:	68 00 70 00 00       	push   $0x7000
+80103150:	50                   	push   %eax
+80103151:	e8 ea f7 ff ff       	call   80102940 <lapicstartap>
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+80103156:	83 c4 10             	add    $0x10,%esp
+80103159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103160:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80103166:	85 c0                	test   %eax,%eax
+80103168:	74 f6                	je     80103160 <main+0x100>
+8010316a:	eb 94                	jmp    80103100 <main+0xa0>
+8010316c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+80103170:	83 ec 08             	sub    $0x8,%esp
+80103173:	68 00 00 00 8e       	push   $0x8e000000
+80103178:	68 00 00 40 80       	push   $0x80400000
+8010317d:	e8 2e f4 ff ff       	call   801025b0 <kinit2>
+  userinit();      // first user process
+80103182:	e8 19 08 00 00       	call   801039a0 <userinit>
+  mpmain();        // finish this processor's setup
+80103187:	e8 74 fe ff ff       	call   80103000 <mpmain>
+8010318c:	66 90                	xchg   %ax,%ax
+8010318e:	66 90                	xchg   %ax,%ax
+
+80103190 <mpsearch1>:
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80103190:	55                   	push   %ebp
+80103191:	89 e5                	mov    %esp,%ebp
+80103193:	57                   	push   %edi
+80103194:	56                   	push   %esi
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+80103195:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+{
+8010319b:	53                   	push   %ebx
+  e = addr+len;
+8010319c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+{
+8010319f:	83 ec 0c             	sub    $0xc,%esp
+  for(p = addr; p < e; p += sizeof(struct mp))
+801031a2:	39 de                	cmp    %ebx,%esi
+801031a4:	72 10                	jb     801031b6 <mpsearch1+0x26>
+801031a6:	eb 50                	jmp    801031f8 <mpsearch1+0x68>
+801031a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801031af:	90                   	nop
+801031b0:	89 fe                	mov    %edi,%esi
+801031b2:	39 fb                	cmp    %edi,%ebx
+801031b4:	76 42                	jbe    801031f8 <mpsearch1+0x68>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+801031b6:	83 ec 04             	sub    $0x4,%esp
+801031b9:	8d 7e 10             	lea    0x10(%esi),%edi
+801031bc:	6a 04                	push   $0x4
+801031be:	68 18 77 10 80       	push   $0x80107718
+801031c3:	56                   	push   %esi
+801031c4:	e8 e7 14 00 00       	call   801046b0 <memcmp>
+801031c9:	83 c4 10             	add    $0x10,%esp
+801031cc:	85 c0                	test   %eax,%eax
+801031ce:	75 e0                	jne    801031b0 <mpsearch1+0x20>
+801031d0:	89 f2                	mov    %esi,%edx
+801031d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    sum += addr[i];
+801031d8:	0f b6 0a             	movzbl (%edx),%ecx
+  for(i=0; i<len; i++)
+801031db:	83 c2 01             	add    $0x1,%edx
+    sum += addr[i];
+801031de:	01 c8                	add    %ecx,%eax
+  for(i=0; i<len; i++)
+801031e0:	39 fa                	cmp    %edi,%edx
+801031e2:	75 f4                	jne    801031d8 <mpsearch1+0x48>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+801031e4:	84 c0                	test   %al,%al
+801031e6:	75 c8                	jne    801031b0 <mpsearch1+0x20>
+      return (struct mp*)p;
+  return 0;
+}
+801031e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801031eb:	89 f0                	mov    %esi,%eax
+801031ed:	5b                   	pop    %ebx
+801031ee:	5e                   	pop    %esi
+801031ef:	5f                   	pop    %edi
+801031f0:	5d                   	pop    %ebp
+801031f1:	c3                   	ret    
+801031f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801031f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801031fb:	31 f6                	xor    %esi,%esi
+}
+801031fd:	5b                   	pop    %ebx
+801031fe:	89 f0                	mov    %esi,%eax
+80103200:	5e                   	pop    %esi
+80103201:	5f                   	pop    %edi
+80103202:	5d                   	pop    %ebp
+80103203:	c3                   	ret    
+80103204:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010320b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010320f:	90                   	nop
+
+80103210 <mpinit>:
+  return conf;
+}
+
+void
+mpinit(void)
+{
+80103210:	55                   	push   %ebp
+80103211:	89 e5                	mov    %esp,%ebp
+80103213:	57                   	push   %edi
+80103214:	56                   	push   %esi
+80103215:	53                   	push   %ebx
+80103216:	83 ec 1c             	sub    $0x1c,%esp
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80103219:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103220:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+80103227:	c1 e0 08             	shl    $0x8,%eax
+8010322a:	09 d0                	or     %edx,%eax
+8010322c:	c1 e0 04             	shl    $0x4,%eax
+8010322f:	75 1b                	jne    8010324c <mpinit+0x3c>
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+80103231:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+80103238:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+8010323f:	c1 e0 08             	shl    $0x8,%eax
+80103242:	09 d0                	or     %edx,%eax
+80103244:	c1 e0 0a             	shl    $0xa,%eax
+    if((mp = mpsearch1(p-1024, 1024)))
+80103247:	2d 00 04 00 00       	sub    $0x400,%eax
+    if((mp = mpsearch1(p, 1024)))
+8010324c:	ba 00 04 00 00       	mov    $0x400,%edx
+80103251:	e8 3a ff ff ff       	call   80103190 <mpsearch1>
+80103256:	89 c3                	mov    %eax,%ebx
+80103258:	85 c0                	test   %eax,%eax
+8010325a:	0f 84 40 01 00 00    	je     801033a0 <mpinit+0x190>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103260:	8b 73 04             	mov    0x4(%ebx),%esi
+80103263:	85 f6                	test   %esi,%esi
+80103265:	0f 84 25 01 00 00    	je     80103390 <mpinit+0x180>
+  if(memcmp(conf, "PCMP", 4) != 0)
+8010326b:	83 ec 04             	sub    $0x4,%esp
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+8010326e:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103274:	6a 04                	push   $0x4
+80103276:	68 1d 77 10 80       	push   $0x8010771d
+8010327b:	50                   	push   %eax
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+8010327c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(memcmp(conf, "PCMP", 4) != 0)
+8010327f:	e8 2c 14 00 00       	call   801046b0 <memcmp>
+80103284:	83 c4 10             	add    $0x10,%esp
+80103287:	85 c0                	test   %eax,%eax
+80103289:	0f 85 01 01 00 00    	jne    80103390 <mpinit+0x180>
+  if(conf->version != 1 && conf->version != 4)
+8010328f:	0f b6 86 06 00 00 80 	movzbl -0x7ffffffa(%esi),%eax
+80103296:	3c 01                	cmp    $0x1,%al
+80103298:	74 08                	je     801032a2 <mpinit+0x92>
+8010329a:	3c 04                	cmp    $0x4,%al
+8010329c:	0f 85 ee 00 00 00    	jne    80103390 <mpinit+0x180>
+  if(sum((uchar*)conf, conf->length) != 0)
+801032a2:	0f b7 96 04 00 00 80 	movzwl -0x7ffffffc(%esi),%edx
+  for(i=0; i<len; i++)
+801032a9:	66 85 d2             	test   %dx,%dx
+801032ac:	74 22                	je     801032d0 <mpinit+0xc0>
+801032ae:	8d 3c 32             	lea    (%edx,%esi,1),%edi
+801032b1:	89 f0                	mov    %esi,%eax
+  sum = 0;
+801032b3:	31 d2                	xor    %edx,%edx
+801032b5:	8d 76 00             	lea    0x0(%esi),%esi
+    sum += addr[i];
+801032b8:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
+  for(i=0; i<len; i++)
+801032bf:	83 c0 01             	add    $0x1,%eax
+    sum += addr[i];
+801032c2:	01 ca                	add    %ecx,%edx
+  for(i=0; i<len; i++)
+801032c4:	39 c7                	cmp    %eax,%edi
+801032c6:	75 f0                	jne    801032b8 <mpinit+0xa8>
+  if(sum((uchar*)conf, conf->length) != 0)
+801032c8:	84 d2                	test   %dl,%dl
+801032ca:	0f 85 c0 00 00 00    	jne    80103390 <mpinit+0x180>
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+801032d0:	8b 86 24 00 00 80    	mov    -0x7fffffdc(%esi),%eax
+801032d6:	a3 80 16 11 80       	mov    %eax,0x80111680
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+801032db:	0f b7 96 04 00 00 80 	movzwl -0x7ffffffc(%esi),%edx
+801032e2:	8d 86 2c 00 00 80    	lea    -0x7fffffd4(%esi),%eax
+  ismp = 1;
+801032e8:	be 01 00 00 00       	mov    $0x1,%esi
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+801032ed:	03 55 e4             	add    -0x1c(%ebp),%edx
+801032f0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+801032f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801032f7:	90                   	nop
+801032f8:	39 d0                	cmp    %edx,%eax
+801032fa:	73 15                	jae    80103311 <mpinit+0x101>
+    switch(*p){
+801032fc:	0f b6 08             	movzbl (%eax),%ecx
+801032ff:	80 f9 02             	cmp    $0x2,%cl
+80103302:	74 4c                	je     80103350 <mpinit+0x140>
+80103304:	77 3a                	ja     80103340 <mpinit+0x130>
+80103306:	84 c9                	test   %cl,%cl
+80103308:	74 56                	je     80103360 <mpinit+0x150>
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+8010330a:	83 c0 08             	add    $0x8,%eax
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+8010330d:	39 d0                	cmp    %edx,%eax
+8010330f:	72 eb                	jb     801032fc <mpinit+0xec>
+    default:
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+80103311:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103314:	85 f6                	test   %esi,%esi
+80103316:	0f 84 d9 00 00 00    	je     801033f5 <mpinit+0x1e5>
+    panic("Didn't find a suitable machine");
+
+  if(mp->imcrp){
+8010331c:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
+80103320:	74 15                	je     80103337 <mpinit+0x127>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103322:	b8 70 00 00 00       	mov    $0x70,%eax
+80103327:	ba 22 00 00 00       	mov    $0x22,%edx
+8010332c:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010332d:	ba 23 00 00 00       	mov    $0x23,%edx
+80103332:	ec                   	in     (%dx),%al
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+80103333:	83 c8 01             	or     $0x1,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103336:	ee                   	out    %al,(%dx)
+  }
+}
+80103337:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010333a:	5b                   	pop    %ebx
+8010333b:	5e                   	pop    %esi
+8010333c:	5f                   	pop    %edi
+8010333d:	5d                   	pop    %ebp
+8010333e:	c3                   	ret    
+8010333f:	90                   	nop
+    switch(*p){
+80103340:	83 e9 03             	sub    $0x3,%ecx
+80103343:	80 f9 01             	cmp    $0x1,%cl
+80103346:	76 c2                	jbe    8010330a <mpinit+0xfa>
+80103348:	31 f6                	xor    %esi,%esi
+8010334a:	eb ac                	jmp    801032f8 <mpinit+0xe8>
+8010334c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      ioapicid = ioapic->apicno;
+80103350:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
+      p += sizeof(struct mpioapic);
+80103354:	83 c0 08             	add    $0x8,%eax
+      ioapicid = ioapic->apicno;
+80103357:	88 0d 80 17 11 80    	mov    %cl,0x80111780
+      continue;
+8010335d:	eb 99                	jmp    801032f8 <mpinit+0xe8>
+8010335f:	90                   	nop
+      if(ncpu < NCPU) {
+80103360:	8b 0d 84 17 11 80    	mov    0x80111784,%ecx
+80103366:	83 f9 07             	cmp    $0x7,%ecx
+80103369:	7f 19                	jg     80103384 <mpinit+0x174>
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+8010336b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+        ncpu++;
+80103375:	83 c1 01             	add    $0x1,%ecx
+80103378:	89 0d 84 17 11 80    	mov    %ecx,0x80111784
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+8010337e:	88 9f a0 17 11 80    	mov    %bl,-0x7feee860(%edi)
+      p += sizeof(struct mpproc);
+80103384:	83 c0 14             	add    $0x14,%eax
+      continue;
+80103387:	e9 6c ff ff ff       	jmp    801032f8 <mpinit+0xe8>
+8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    panic("Expect to run on an SMP");
+80103390:	83 ec 0c             	sub    $0xc,%esp
+80103393:	68 22 77 10 80       	push   $0x80107722
+80103398:	e8 e3 cf ff ff       	call   80100380 <panic>
+8010339d:	8d 76 00             	lea    0x0(%esi),%esi
+{
+801033a0:	bb 00 00 0f 80       	mov    $0x800f0000,%ebx
+801033a5:	eb 13                	jmp    801033ba <mpinit+0x1aa>
+801033a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033ae:	66 90                	xchg   %ax,%ax
+  for(p = addr; p < e; p += sizeof(struct mp))
+801033b0:	89 f3                	mov    %esi,%ebx
+801033b2:	81 fe 00 00 10 80    	cmp    $0x80100000,%esi
+801033b8:	74 d6                	je     80103390 <mpinit+0x180>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+801033ba:	83 ec 04             	sub    $0x4,%esp
+801033bd:	8d 73 10             	lea    0x10(%ebx),%esi
+801033c0:	6a 04                	push   $0x4
+801033c2:	68 18 77 10 80       	push   $0x80107718
+801033c7:	53                   	push   %ebx
+801033c8:	e8 e3 12 00 00       	call   801046b0 <memcmp>
+801033cd:	83 c4 10             	add    $0x10,%esp
+801033d0:	85 c0                	test   %eax,%eax
+801033d2:	75 dc                	jne    801033b0 <mpinit+0x1a0>
+801033d4:	89 da                	mov    %ebx,%edx
+801033d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033dd:	8d 76 00             	lea    0x0(%esi),%esi
+    sum += addr[i];
+801033e0:	0f b6 0a             	movzbl (%edx),%ecx
+  for(i=0; i<len; i++)
+801033e3:	83 c2 01             	add    $0x1,%edx
+    sum += addr[i];
+801033e6:	01 c8                	add    %ecx,%eax
+  for(i=0; i<len; i++)
+801033e8:	39 d6                	cmp    %edx,%esi
+801033ea:	75 f4                	jne    801033e0 <mpinit+0x1d0>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+801033ec:	84 c0                	test   %al,%al
+801033ee:	75 c0                	jne    801033b0 <mpinit+0x1a0>
+801033f0:	e9 6b fe ff ff       	jmp    80103260 <mpinit+0x50>
+    panic("Didn't find a suitable machine");
+801033f5:	83 ec 0c             	sub    $0xc,%esp
+801033f8:	68 3c 77 10 80       	push   $0x8010773c
+801033fd:	e8 7e cf ff ff       	call   80100380 <panic>
+80103402:	66 90                	xchg   %ax,%ax
+80103404:	66 90                	xchg   %ax,%ax
+80103406:	66 90                	xchg   %ax,%ax
+80103408:	66 90                	xchg   %ax,%ax
+8010340a:	66 90                	xchg   %ax,%ax
+8010340c:	66 90                	xchg   %ax,%ax
+8010340e:	66 90                	xchg   %ax,%ax
+
+80103410 <picinit>:
+80103410:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103415:	ba 21 00 00 00       	mov    $0x21,%edx
+8010341a:	ee                   	out    %al,(%dx)
+8010341b:	ba a1 00 00 00       	mov    $0xa1,%edx
+80103420:	ee                   	out    %al,(%dx)
+picinit(void)
+{
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+}
+80103421:	c3                   	ret    
+80103422:	66 90                	xchg   %ax,%ax
+80103424:	66 90                	xchg   %ax,%ax
+80103426:	66 90                	xchg   %ax,%ax
+80103428:	66 90                	xchg   %ax,%ax
+8010342a:	66 90                	xchg   %ax,%ax
+8010342c:	66 90                	xchg   %ax,%ax
+8010342e:	66 90                	xchg   %ax,%ax
+
+80103430 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+80103430:	55                   	push   %ebp
+80103431:	89 e5                	mov    %esp,%ebp
+80103433:	57                   	push   %edi
+80103434:	56                   	push   %esi
+80103435:	53                   	push   %ebx
+80103436:	83 ec 0c             	sub    $0xc,%esp
+80103439:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010343c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+8010343f:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103445:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+8010344b:	e8 e0 d9 ff ff       	call   80100e30 <filealloc>
+80103450:	89 03                	mov    %eax,(%ebx)
+80103452:	85 c0                	test   %eax,%eax
+80103454:	0f 84 a8 00 00 00    	je     80103502 <pipealloc+0xd2>
+8010345a:	e8 d1 d9 ff ff       	call   80100e30 <filealloc>
+8010345f:	89 06                	mov    %eax,(%esi)
+80103461:	85 c0                	test   %eax,%eax
+80103463:	0f 84 87 00 00 00    	je     801034f0 <pipealloc+0xc0>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103469:	e8 12 f2 ff ff       	call   80102680 <kalloc>
+8010346e:	89 c7                	mov    %eax,%edi
+80103470:	85 c0                	test   %eax,%eax
+80103472:	0f 84 b0 00 00 00    	je     80103528 <pipealloc+0xf8>
+    goto bad;
+  p->readopen = 1;
+80103478:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+8010347f:	00 00 00 
+  p->writeopen = 1;
+  p->nwrite = 0;
+  p->nread = 0;
+  initlock(&p->lock, "pipe");
+80103482:	83 ec 08             	sub    $0x8,%esp
+  p->writeopen = 1;
+80103485:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+8010348c:	00 00 00 
+  p->nwrite = 0;
+8010348f:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+80103496:	00 00 00 
+  p->nread = 0;
+80103499:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+801034a0:	00 00 00 
+  initlock(&p->lock, "pipe");
+801034a3:	68 5b 77 10 80       	push   $0x8010775b
+801034a8:	50                   	push   %eax
+801034a9:	e8 22 0f 00 00       	call   801043d0 <initlock>
+  (*f0)->type = FD_PIPE;
+801034ae:	8b 03                	mov    (%ebx),%eax
+  (*f0)->pipe = p;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = p;
+  return 0;
+801034b0:	83 c4 10             	add    $0x10,%esp
+  (*f0)->type = FD_PIPE;
+801034b3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+801034b9:	8b 03                	mov    (%ebx),%eax
+801034bb:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+801034bf:	8b 03                	mov    (%ebx),%eax
+801034c1:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+801034c5:	8b 03                	mov    (%ebx),%eax
+801034c7:	89 78 0c             	mov    %edi,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+801034ca:	8b 06                	mov    (%esi),%eax
+801034cc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+801034d2:	8b 06                	mov    (%esi),%eax
+801034d4:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+801034d8:	8b 06                	mov    (%esi),%eax
+801034da:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+801034de:	8b 06                	mov    (%esi),%eax
+801034e0:	89 78 0c             	mov    %edi,0xc(%eax)
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+801034e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801034e6:	31 c0                	xor    %eax,%eax
+}
+801034e8:	5b                   	pop    %ebx
+801034e9:	5e                   	pop    %esi
+801034ea:	5f                   	pop    %edi
+801034eb:	5d                   	pop    %ebp
+801034ec:	c3                   	ret    
+801034ed:	8d 76 00             	lea    0x0(%esi),%esi
+  if(*f0)
+801034f0:	8b 03                	mov    (%ebx),%eax
+801034f2:	85 c0                	test   %eax,%eax
+801034f4:	74 1e                	je     80103514 <pipealloc+0xe4>
+    fileclose(*f0);
+801034f6:	83 ec 0c             	sub    $0xc,%esp
+801034f9:	50                   	push   %eax
+801034fa:	e8 f1 d9 ff ff       	call   80100ef0 <fileclose>
+801034ff:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+80103502:	8b 06                	mov    (%esi),%eax
+80103504:	85 c0                	test   %eax,%eax
+80103506:	74 0c                	je     80103514 <pipealloc+0xe4>
+    fileclose(*f1);
+80103508:	83 ec 0c             	sub    $0xc,%esp
+8010350b:	50                   	push   %eax
+8010350c:	e8 df d9 ff ff       	call   80100ef0 <fileclose>
+80103511:	83 c4 10             	add    $0x10,%esp
+}
+80103514:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+80103517:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010351c:	5b                   	pop    %ebx
+8010351d:	5e                   	pop    %esi
+8010351e:	5f                   	pop    %edi
+8010351f:	5d                   	pop    %ebp
+80103520:	c3                   	ret    
+80103521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(*f0)
+80103528:	8b 03                	mov    (%ebx),%eax
+8010352a:	85 c0                	test   %eax,%eax
+8010352c:	75 c8                	jne    801034f6 <pipealloc+0xc6>
+8010352e:	eb d2                	jmp    80103502 <pipealloc+0xd2>
+
+80103530 <pipeclose>:
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+80103530:	55                   	push   %ebp
+80103531:	89 e5                	mov    %esp,%ebp
+80103533:	56                   	push   %esi
+80103534:	53                   	push   %ebx
+80103535:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103538:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&p->lock);
+8010353b:	83 ec 0c             	sub    $0xc,%esp
+8010353e:	53                   	push   %ebx
+8010353f:	e8 5c 10 00 00       	call   801045a0 <acquire>
+  if(writable){
+80103544:	83 c4 10             	add    $0x10,%esp
+80103547:	85 f6                	test   %esi,%esi
+80103549:	74 65                	je     801035b0 <pipeclose+0x80>
+    p->writeopen = 0;
+    wakeup(&p->nread);
+8010354b:	83 ec 0c             	sub    $0xc,%esp
+8010354e:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+    p->writeopen = 0;
+80103554:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010355b:	00 00 00 
+    wakeup(&p->nread);
+8010355e:	50                   	push   %eax
+8010355f:	e8 9c 0b 00 00       	call   80104100 <wakeup>
+80103564:	83 c4 10             	add    $0x10,%esp
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+80103567:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+8010356d:	85 d2                	test   %edx,%edx
+8010356f:	75 0a                	jne    8010357b <pipeclose+0x4b>
+80103571:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+80103577:	85 c0                	test   %eax,%eax
+80103579:	74 15                	je     80103590 <pipeclose+0x60>
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+8010357b:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+8010357e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103581:	5b                   	pop    %ebx
+80103582:	5e                   	pop    %esi
+80103583:	5d                   	pop    %ebp
+    release(&p->lock);
+80103584:	e9 b7 0f 00 00       	jmp    80104540 <release>
+80103589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    release(&p->lock);
+80103590:	83 ec 0c             	sub    $0xc,%esp
+80103593:	53                   	push   %ebx
+80103594:	e8 a7 0f 00 00       	call   80104540 <release>
+    kfree((char*)p);
+80103599:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010359c:	83 c4 10             	add    $0x10,%esp
+}
+8010359f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801035a2:	5b                   	pop    %ebx
+801035a3:	5e                   	pop    %esi
+801035a4:	5d                   	pop    %ebp
+    kfree((char*)p);
+801035a5:	e9 16 ef ff ff       	jmp    801024c0 <kfree>
+801035aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    wakeup(&p->nwrite);
+801035b0:	83 ec 0c             	sub    $0xc,%esp
+801035b3:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+    p->readopen = 0;
+801035b9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+801035c0:	00 00 00 
+    wakeup(&p->nwrite);
+801035c3:	50                   	push   %eax
+801035c4:	e8 37 0b 00 00       	call   80104100 <wakeup>
+801035c9:	83 c4 10             	add    $0x10,%esp
+801035cc:	eb 99                	jmp    80103567 <pipeclose+0x37>
+801035ce:	66 90                	xchg   %ax,%ax
+
+801035d0 <pipewrite>:
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+801035d0:	55                   	push   %ebp
+801035d1:	89 e5                	mov    %esp,%ebp
+801035d3:	57                   	push   %edi
+801035d4:	56                   	push   %esi
+801035d5:	53                   	push   %ebx
+801035d6:	83 ec 28             	sub    $0x28,%esp
+801035d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  acquire(&p->lock);
+801035dc:	53                   	push   %ebx
+801035dd:	e8 be 0f 00 00       	call   801045a0 <acquire>
+  for(i = 0; i < n; i++){
+801035e2:	8b 45 10             	mov    0x10(%ebp),%eax
+801035e5:	83 c4 10             	add    $0x10,%esp
+801035e8:	85 c0                	test   %eax,%eax
+801035ea:	0f 8e c0 00 00 00    	jle    801036b0 <pipewrite+0xe0>
+801035f0:	8b 45 0c             	mov    0xc(%ebp),%eax
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+801035f3:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
+      if(p->readopen == 0 || myproc()->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+801035f9:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+801035ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103602:	03 45 10             	add    0x10(%ebp),%eax
+80103605:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103608:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+8010360e:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103614:	89 ca                	mov    %ecx,%edx
+80103616:	05 00 02 00 00       	add    $0x200,%eax
+8010361b:	39 c1                	cmp    %eax,%ecx
+8010361d:	74 3f                	je     8010365e <pipewrite+0x8e>
+8010361f:	eb 67                	jmp    80103688 <pipewrite+0xb8>
+80103621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->readopen == 0 || myproc()->killed){
+80103628:	e8 43 03 00 00       	call   80103970 <myproc>
+8010362d:	8b 48 24             	mov    0x24(%eax),%ecx
+80103630:	85 c9                	test   %ecx,%ecx
+80103632:	75 34                	jne    80103668 <pipewrite+0x98>
+      wakeup(&p->nread);
+80103634:	83 ec 0c             	sub    $0xc,%esp
+80103637:	57                   	push   %edi
+80103638:	e8 c3 0a 00 00       	call   80104100 <wakeup>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+8010363d:	58                   	pop    %eax
+8010363e:	5a                   	pop    %edx
+8010363f:	53                   	push   %ebx
+80103640:	56                   	push   %esi
+80103641:	e8 fa 09 00 00       	call   80104040 <sleep>
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103646:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010364c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+80103652:	83 c4 10             	add    $0x10,%esp
+80103655:	05 00 02 00 00       	add    $0x200,%eax
+8010365a:	39 c2                	cmp    %eax,%edx
+8010365c:	75 2a                	jne    80103688 <pipewrite+0xb8>
+      if(p->readopen == 0 || myproc()->killed){
+8010365e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80103664:	85 c0                	test   %eax,%eax
+80103666:	75 c0                	jne    80103628 <pipewrite+0x58>
+        release(&p->lock);
+80103668:	83 ec 0c             	sub    $0xc,%esp
+8010366b:	53                   	push   %ebx
+8010366c:	e8 cf 0e 00 00       	call   80104540 <release>
+        return -1;
+80103671:	83 c4 10             	add    $0x10,%esp
+80103674:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+80103679:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010367c:	5b                   	pop    %ebx
+8010367d:	5e                   	pop    %esi
+8010367e:	5f                   	pop    %edi
+8010367f:	5d                   	pop    %ebp
+80103680:	c3                   	ret    
+80103681:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+80103688:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+8010368b:	8d 4a 01             	lea    0x1(%edx),%ecx
+8010368e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+80103694:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
+8010369a:	0f b6 06             	movzbl (%esi),%eax
+  for(i = 0; i < n; i++){
+8010369d:	83 c6 01             	add    $0x1,%esi
+801036a0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+801036a3:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
+  for(i = 0; i < n; i++){
+801036a7:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+801036aa:	0f 85 58 ff ff ff    	jne    80103608 <pipewrite+0x38>
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+801036b0:	83 ec 0c             	sub    $0xc,%esp
+801036b3:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+801036b9:	50                   	push   %eax
+801036ba:	e8 41 0a 00 00       	call   80104100 <wakeup>
+  release(&p->lock);
+801036bf:	89 1c 24             	mov    %ebx,(%esp)
+801036c2:	e8 79 0e 00 00       	call   80104540 <release>
+  return n;
+801036c7:	8b 45 10             	mov    0x10(%ebp),%eax
+801036ca:	83 c4 10             	add    $0x10,%esp
+801036cd:	eb aa                	jmp    80103679 <pipewrite+0xa9>
+801036cf:	90                   	nop
+
+801036d0 <piperead>:
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+801036d0:	55                   	push   %ebp
+801036d1:	89 e5                	mov    %esp,%ebp
+801036d3:	57                   	push   %edi
+801036d4:	56                   	push   %esi
+801036d5:	53                   	push   %ebx
+801036d6:	83 ec 18             	sub    $0x18,%esp
+801036d9:	8b 75 08             	mov    0x8(%ebp),%esi
+801036dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  int i;
+
+  acquire(&p->lock);
+801036df:	56                   	push   %esi
+801036e0:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+801036e6:	e8 b5 0e 00 00       	call   801045a0 <acquire>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801036eb:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+801036f1:	83 c4 10             	add    $0x10,%esp
+801036f4:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
+801036fa:	74 2f                	je     8010372b <piperead+0x5b>
+801036fc:	eb 37                	jmp    80103735 <piperead+0x65>
+801036fe:	66 90                	xchg   %ax,%ax
+    if(myproc()->killed){
+80103700:	e8 6b 02 00 00       	call   80103970 <myproc>
+80103705:	8b 48 24             	mov    0x24(%eax),%ecx
+80103708:	85 c9                	test   %ecx,%ecx
+8010370a:	0f 85 80 00 00 00    	jne    80103790 <piperead+0xc0>
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+80103710:	83 ec 08             	sub    $0x8,%esp
+80103713:	56                   	push   %esi
+80103714:	53                   	push   %ebx
+80103715:	e8 26 09 00 00       	call   80104040 <sleep>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+8010371a:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
+80103720:	83 c4 10             	add    $0x10,%esp
+80103723:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
+80103729:	75 0a                	jne    80103735 <piperead+0x65>
+8010372b:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
+80103731:	85 c0                	test   %eax,%eax
+80103733:	75 cb                	jne    80103700 <piperead+0x30>
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80103735:	8b 55 10             	mov    0x10(%ebp),%edx
+80103738:	31 db                	xor    %ebx,%ebx
+8010373a:	85 d2                	test   %edx,%edx
+8010373c:	7f 20                	jg     8010375e <piperead+0x8e>
+8010373e:	eb 2c                	jmp    8010376c <piperead+0x9c>
+    if(p->nread == p->nwrite)
+      break;
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+80103740:	8d 48 01             	lea    0x1(%eax),%ecx
+80103743:	25 ff 01 00 00       	and    $0x1ff,%eax
+80103748:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
+8010374e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
+80103753:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80103756:	83 c3 01             	add    $0x1,%ebx
+80103759:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010375c:	74 0e                	je     8010376c <piperead+0x9c>
+    if(p->nread == p->nwrite)
+8010375e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+80103764:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
+8010376a:	75 d4                	jne    80103740 <piperead+0x70>
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+8010376c:	83 ec 0c             	sub    $0xc,%esp
+8010376f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+80103775:	50                   	push   %eax
+80103776:	e8 85 09 00 00       	call   80104100 <wakeup>
+  release(&p->lock);
+8010377b:	89 34 24             	mov    %esi,(%esp)
+8010377e:	e8 bd 0d 00 00       	call   80104540 <release>
+  return i;
+80103783:	83 c4 10             	add    $0x10,%esp
+}
+80103786:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103789:	89 d8                	mov    %ebx,%eax
+8010378b:	5b                   	pop    %ebx
+8010378c:	5e                   	pop    %esi
+8010378d:	5f                   	pop    %edi
+8010378e:	5d                   	pop    %ebp
+8010378f:	c3                   	ret    
+      release(&p->lock);
+80103790:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80103793:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+      release(&p->lock);
+80103798:	56                   	push   %esi
+80103799:	e8 a2 0d 00 00       	call   80104540 <release>
+      return -1;
+8010379e:	83 c4 10             	add    $0x10,%esp
+}
+801037a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801037a4:	89 d8                	mov    %ebx,%eax
+801037a6:	5b                   	pop    %ebx
+801037a7:	5e                   	pop    %esi
+801037a8:	5f                   	pop    %edi
+801037a9:	5d                   	pop    %ebp
+801037aa:	c3                   	ret    
+801037ab:	66 90                	xchg   %ax,%ax
+801037ad:	66 90                	xchg   %ax,%ax
+801037af:	90                   	nop
+
+801037b0 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+801037b0:	55                   	push   %ebp
+801037b1:	89 e5                	mov    %esp,%ebp
+801037b3:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801037b4:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+{
+801037b9:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+801037bc:	68 20 1d 11 80       	push   $0x80111d20
+801037c1:	e8 da 0d 00 00       	call   801045a0 <acquire>
+801037c6:	83 c4 10             	add    $0x10,%esp
+801037c9:	eb 10                	jmp    801037db <allocproc+0x2b>
+801037cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801037cf:	90                   	nop
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801037d0:	83 c3 7c             	add    $0x7c,%ebx
+801037d3:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
+801037d9:	74 75                	je     80103850 <allocproc+0xa0>
+    if(p->state == UNUSED)
+801037db:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037de:	85 c0                	test   %eax,%eax
+801037e0:	75 ee                	jne    801037d0 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+801037e2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+
+  release(&ptable.lock);
+801037e7:	83 ec 0c             	sub    $0xc,%esp
+  p->state = EMBRYO;
+801037ea:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->pid = nextpid++;
+801037f1:	89 43 10             	mov    %eax,0x10(%ebx)
+801037f4:	8d 50 01             	lea    0x1(%eax),%edx
+  release(&ptable.lock);
+801037f7:	68 20 1d 11 80       	push   $0x80111d20
+  p->pid = nextpid++;
+801037fc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+  release(&ptable.lock);
+80103802:	e8 39 0d 00 00       	call   80104540 <release>
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+80103807:	e8 74 ee ff ff       	call   80102680 <kalloc>
+8010380c:	83 c4 10             	add    $0x10,%esp
+8010380f:	89 43 08             	mov    %eax,0x8(%ebx)
+80103812:	85 c0                	test   %eax,%eax
+80103814:	74 53                	je     80103869 <allocproc+0xb9>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+80103816:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+8010381c:	83 ec 04             	sub    $0x4,%esp
+  sp -= sizeof *p->context;
+8010381f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+  sp -= sizeof *p->tf;
+80103824:	89 53 18             	mov    %edx,0x18(%ebx)
+  *(uint*)sp = (uint)trapret;
+80103827:	c7 40 14 42 58 10 80 	movl   $0x80105842,0x14(%eax)
+  p->context = (struct context*)sp;
+8010382e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+80103831:	6a 14                	push   $0x14
+80103833:	6a 00                	push   $0x0
+80103835:	50                   	push   %eax
+80103836:	e8 25 0e 00 00       	call   80104660 <memset>
+  p->context->eip = (uint)forkret;
+8010383b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+8010383e:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+80103841:	c7 40 10 80 38 10 80 	movl   $0x80103880,0x10(%eax)
+}
+80103848:	89 d8                	mov    %ebx,%eax
+8010384a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010384d:	c9                   	leave  
+8010384e:	c3                   	ret    
+8010384f:	90                   	nop
+  release(&ptable.lock);
+80103850:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80103853:	31 db                	xor    %ebx,%ebx
+  release(&ptable.lock);
+80103855:	68 20 1d 11 80       	push   $0x80111d20
+8010385a:	e8 e1 0c 00 00       	call   80104540 <release>
+}
+8010385f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80103861:	83 c4 10             	add    $0x10,%esp
+}
+80103864:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103867:	c9                   	leave  
+80103868:	c3                   	ret    
+    p->state = UNUSED;
+80103869:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+80103870:	31 db                	xor    %ebx,%ebx
+}
+80103872:	89 d8                	mov    %ebx,%eax
+80103874:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103877:	c9                   	leave  
+80103878:	c3                   	ret    
+80103879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103880 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+80103880:	55                   	push   %ebp
+80103881:	89 e5                	mov    %esp,%ebp
+80103883:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+80103886:	68 20 1d 11 80       	push   $0x80111d20
+8010388b:	e8 b0 0c 00 00       	call   80104540 <release>
+
+  if (first) {
+80103890:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+80103895:	83 c4 10             	add    $0x10,%esp
+80103898:	85 c0                	test   %eax,%eax
+8010389a:	75 04                	jne    801038a0 <forkret+0x20>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+8010389c:	c9                   	leave  
+8010389d:	c3                   	ret    
+8010389e:	66 90                	xchg   %ax,%ax
+    first = 0;
+801038a0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+801038a7:	00 00 00 
+    iinit(ROOTDEV);
+801038aa:	83 ec 0c             	sub    $0xc,%esp
+801038ad:	6a 01                	push   $0x1
+801038af:	e8 ac dc ff ff       	call   80101560 <iinit>
+    initlog(ROOTDEV);
+801038b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038bb:	e8 00 f4 ff ff       	call   80102cc0 <initlog>
+}
+801038c0:	83 c4 10             	add    $0x10,%esp
+801038c3:	c9                   	leave  
+801038c4:	c3                   	ret    
+801038c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801038d0 <pinit>:
+{
+801038d0:	55                   	push   %ebp
+801038d1:	89 e5                	mov    %esp,%ebp
+801038d3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+801038d6:	68 60 77 10 80       	push   $0x80107760
+801038db:	68 20 1d 11 80       	push   $0x80111d20
+801038e0:	e8 eb 0a 00 00       	call   801043d0 <initlock>
+}
+801038e5:	83 c4 10             	add    $0x10,%esp
+801038e8:	c9                   	leave  
+801038e9:	c3                   	ret    
+801038ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801038f0 <mycpu>:
+{
+801038f0:	55                   	push   %ebp
+801038f1:	89 e5                	mov    %esp,%ebp
+801038f3:	56                   	push   %esi
+801038f4:	53                   	push   %ebx
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801038f5:	9c                   	pushf  
+801038f6:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+801038f7:	f6 c4 02             	test   $0x2,%ah
+801038fa:	75 46                	jne    80103942 <mycpu+0x52>
+  apicid = lapicid();
+801038fc:	e8 ef ef ff ff       	call   801028f0 <lapicid>
+  for (i = 0; i < ncpu; ++i) {
+80103901:	8b 35 84 17 11 80    	mov    0x80111784,%esi
+80103907:	85 f6                	test   %esi,%esi
+80103909:	7e 2a                	jle    80103935 <mycpu+0x45>
+8010390b:	31 d2                	xor    %edx,%edx
+8010390d:	eb 08                	jmp    80103917 <mycpu+0x27>
+8010390f:	90                   	nop
+80103910:	83 c2 01             	add    $0x1,%edx
+80103913:	39 f2                	cmp    %esi,%edx
+80103915:	74 1e                	je     80103935 <mycpu+0x45>
+    if (cpus[i].apicid == apicid)
+80103917:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+8010391d:	0f b6 99 a0 17 11 80 	movzbl -0x7feee860(%ecx),%ebx
+80103924:	39 c3                	cmp    %eax,%ebx
+80103926:	75 e8                	jne    80103910 <mycpu+0x20>
+}
+80103928:	8d 65 f8             	lea    -0x8(%ebp),%esp
+      return &cpus[i];
+8010392b:	8d 81 a0 17 11 80    	lea    -0x7feee860(%ecx),%eax
+}
+80103931:	5b                   	pop    %ebx
+80103932:	5e                   	pop    %esi
+80103933:	5d                   	pop    %ebp
+80103934:	c3                   	ret    
+  panic("unknown apicid\n");
+80103935:	83 ec 0c             	sub    $0xc,%esp
+80103938:	68 67 77 10 80       	push   $0x80107767
+8010393d:	e8 3e ca ff ff       	call   80100380 <panic>
+    panic("mycpu called with interrupts enabled\n");
+80103942:	83 ec 0c             	sub    $0xc,%esp
+80103945:	68 44 78 10 80       	push   $0x80107844
+8010394a:	e8 31 ca ff ff       	call   80100380 <panic>
+8010394f:	90                   	nop
+
+80103950 <cpuid>:
+cpuid() {
+80103950:	55                   	push   %ebp
+80103951:	89 e5                	mov    %esp,%ebp
+80103953:	83 ec 08             	sub    $0x8,%esp
+  return mycpu()-cpus;
+80103956:	e8 95 ff ff ff       	call   801038f0 <mycpu>
+}
+8010395b:	c9                   	leave  
+  return mycpu()-cpus;
+8010395c:	2d a0 17 11 80       	sub    $0x801117a0,%eax
+80103961:	c1 f8 04             	sar    $0x4,%eax
+80103964:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+8010396a:	c3                   	ret    
+8010396b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010396f:	90                   	nop
+
+80103970 <myproc>:
+myproc(void) {
+80103970:	55                   	push   %ebp
+80103971:	89 e5                	mov    %esp,%ebp
+80103973:	53                   	push   %ebx
+80103974:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80103977:	e8 d4 0a 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+8010397c:	e8 6f ff ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+80103981:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103987:	e8 14 0b 00 00       	call   801044a0 <popcli>
+}
+8010398c:	89 d8                	mov    %ebx,%eax
+8010398e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103991:	c9                   	leave  
+80103992:	c3                   	ret    
+80103993:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010399a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801039a0 <userinit>:
+{
+801039a0:	55                   	push   %ebp
+801039a1:	89 e5                	mov    %esp,%ebp
+801039a3:	53                   	push   %ebx
+801039a4:	83 ec 04             	sub    $0x4,%esp
+  p = allocproc();
+801039a7:	e8 04 fe ff ff       	call   801037b0 <allocproc>
+801039ac:	89 c3                	mov    %eax,%ebx
+  initproc = p;
+801039ae:	a3 54 3c 11 80       	mov    %eax,0x80113c54
+  if((p->pgdir = setupkvm()) == 0)
+801039b3:	e8 08 35 00 00       	call   80106ec0 <setupkvm>
+801039b8:	89 43 04             	mov    %eax,0x4(%ebx)
+801039bb:	85 c0                	test   %eax,%eax
+801039bd:	0f 84 bd 00 00 00    	je     80103a80 <userinit+0xe0>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+801039c3:	83 ec 04             	sub    $0x4,%esp
+801039c6:	68 2c 00 00 00       	push   $0x2c
+801039cb:	68 60 a4 10 80       	push   $0x8010a460
+801039d0:	50                   	push   %eax
+801039d1:	e8 9a 31 00 00       	call   80106b70 <inituvm>
+  memset(p->tf, 0, sizeof(*p->tf));
+801039d6:	83 c4 0c             	add    $0xc,%esp
+  p->sz = PGSIZE;
+801039d9:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+801039df:	6a 4c                	push   $0x4c
+801039e1:	6a 00                	push   $0x0
+801039e3:	ff 73 18             	push   0x18(%ebx)
+801039e6:	e8 75 0c 00 00       	call   80104660 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+801039eb:	8b 43 18             	mov    0x18(%ebx),%eax
+801039ee:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+801039f3:	83 c4 0c             	add    $0xc,%esp
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+801039f6:	b9 23 00 00 00       	mov    $0x23,%ecx
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+801039fb:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+801039ff:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a02:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80103a06:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a09:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a0d:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+80103a11:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a14:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a18:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+80103a1c:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a1f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+80103a26:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a29:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0;  // beginning of initcode.S
+80103a30:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a33:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80103a3a:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103a3d:	6a 10                	push   $0x10
+80103a3f:	68 90 77 10 80       	push   $0x80107790
+80103a44:	50                   	push   %eax
+80103a45:	e8 d6 0d 00 00       	call   80104820 <safestrcpy>
+  p->cwd = namei("/");
+80103a4a:	c7 04 24 99 77 10 80 	movl   $0x80107799,(%esp)
+80103a51:	e8 4a e6 ff ff       	call   801020a0 <namei>
+80103a56:	89 43 68             	mov    %eax,0x68(%ebx)
+  acquire(&ptable.lock);
+80103a59:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103a60:	e8 3b 0b 00 00       	call   801045a0 <acquire>
+  p->state = RUNNABLE;
+80103a65:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+80103a6c:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103a73:	e8 c8 0a 00 00       	call   80104540 <release>
+}
+80103a78:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103a7b:	83 c4 10             	add    $0x10,%esp
+80103a7e:	c9                   	leave  
+80103a7f:	c3                   	ret    
+    panic("userinit: out of memory?");
+80103a80:	83 ec 0c             	sub    $0xc,%esp
+80103a83:	68 77 77 10 80       	push   $0x80107777
+80103a88:	e8 f3 c8 ff ff       	call   80100380 <panic>
+80103a8d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103a90 <growproc>:
+{
+80103a90:	55                   	push   %ebp
+80103a91:	89 e5                	mov    %esp,%ebp
+80103a93:	56                   	push   %esi
+80103a94:	53                   	push   %ebx
+80103a95:	8b 75 08             	mov    0x8(%ebp),%esi
+  pushcli();
+80103a98:	e8 b3 09 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+80103a9d:	e8 4e fe ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+80103aa2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103aa8:	e8 f3 09 00 00       	call   801044a0 <popcli>
+  sz = curproc->sz;
+80103aad:	8b 03                	mov    (%ebx),%eax
+  if(n > 0){
+80103aaf:	85 f6                	test   %esi,%esi
+80103ab1:	7f 1d                	jg     80103ad0 <growproc+0x40>
+  } else if(n < 0){
+80103ab3:	75 3b                	jne    80103af0 <growproc+0x60>
+  switchuvm(curproc);
+80103ab5:	83 ec 0c             	sub    $0xc,%esp
+  curproc->sz = sz;
+80103ab8:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+80103aba:	53                   	push   %ebx
+80103abb:	e8 a0 2f 00 00       	call   80106a60 <switchuvm>
+  return 0;
+80103ac0:	83 c4 10             	add    $0x10,%esp
+80103ac3:	31 c0                	xor    %eax,%eax
+}
+80103ac5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103ac8:	5b                   	pop    %ebx
+80103ac9:	5e                   	pop    %esi
+80103aca:	5d                   	pop    %ebp
+80103acb:	c3                   	ret    
+80103acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103ad0:	83 ec 04             	sub    $0x4,%esp
+80103ad3:	01 c6                	add    %eax,%esi
+80103ad5:	56                   	push   %esi
+80103ad6:	50                   	push   %eax
+80103ad7:	ff 73 04             	push   0x4(%ebx)
+80103ada:	e8 01 32 00 00       	call   80106ce0 <allocuvm>
+80103adf:	83 c4 10             	add    $0x10,%esp
+80103ae2:	85 c0                	test   %eax,%eax
+80103ae4:	75 cf                	jne    80103ab5 <growproc+0x25>
+      return -1;
+80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103aeb:	eb d8                	jmp    80103ac5 <growproc+0x35>
+80103aed:	8d 76 00             	lea    0x0(%esi),%esi
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103af0:	83 ec 04             	sub    $0x4,%esp
+80103af3:	01 c6                	add    %eax,%esi
+80103af5:	56                   	push   %esi
+80103af6:	50                   	push   %eax
+80103af7:	ff 73 04             	push   0x4(%ebx)
+80103afa:	e8 11 33 00 00       	call   80106e10 <deallocuvm>
+80103aff:	83 c4 10             	add    $0x10,%esp
+80103b02:	85 c0                	test   %eax,%eax
+80103b04:	75 af                	jne    80103ab5 <growproc+0x25>
+80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
+80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b0f:	90                   	nop
+
+80103b10 <fork>:
+{
+80103b10:	55                   	push   %ebp
+80103b11:	89 e5                	mov    %esp,%ebp
+80103b13:	57                   	push   %edi
+80103b14:	56                   	push   %esi
+80103b15:	53                   	push   %ebx
+80103b16:	83 ec 1c             	sub    $0x1c,%esp
+  pushcli();
+80103b19:	e8 32 09 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+80103b1e:	e8 cd fd ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+80103b23:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103b29:	e8 72 09 00 00       	call   801044a0 <popcli>
+  if((np = allocproc()) == 0){
+80103b2e:	e8 7d fc ff ff       	call   801037b0 <allocproc>
+80103b33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103b36:	85 c0                	test   %eax,%eax
+80103b38:	0f 84 b7 00 00 00    	je     80103bf5 <fork+0xe5>
+  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+80103b3e:	83 ec 08             	sub    $0x8,%esp
+80103b41:	ff 33                	push   (%ebx)
+80103b43:	89 c7                	mov    %eax,%edi
+80103b45:	ff 73 04             	push   0x4(%ebx)
+80103b48:	e8 63 34 00 00       	call   80106fb0 <copyuvm>
+80103b4d:	83 c4 10             	add    $0x10,%esp
+80103b50:	89 47 04             	mov    %eax,0x4(%edi)
+80103b53:	85 c0                	test   %eax,%eax
+80103b55:	0f 84 a1 00 00 00    	je     80103bfc <fork+0xec>
+  np->sz = curproc->sz;
+80103b5b:	8b 03                	mov    (%ebx),%eax
+80103b5d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103b60:	89 01                	mov    %eax,(%ecx)
+  *np->tf = *curproc->tf;
+80103b62:	8b 79 18             	mov    0x18(%ecx),%edi
+  np->parent = curproc;
+80103b65:	89 c8                	mov    %ecx,%eax
+80103b67:	89 59 14             	mov    %ebx,0x14(%ecx)
+  *np->tf = *curproc->tf;
+80103b6a:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103b6f:	8b 73 18             	mov    0x18(%ebx),%esi
+80103b72:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  for(i = 0; i < NOFILE; i++)
+80103b74:	31 f6                	xor    %esi,%esi
+  np->tf->eax = 0;
+80103b76:	8b 40 18             	mov    0x18(%eax),%eax
+80103b79:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    if(curproc->ofile[i])
+80103b80:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103b84:	85 c0                	test   %eax,%eax
+80103b86:	74 13                	je     80103b9b <fork+0x8b>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+80103b88:	83 ec 0c             	sub    $0xc,%esp
+80103b8b:	50                   	push   %eax
+80103b8c:	e8 0f d3 ff ff       	call   80100ea0 <filedup>
+80103b91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103b94:	83 c4 10             	add    $0x10,%esp
+80103b97:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+  for(i = 0; i < NOFILE; i++)
+80103b9b:	83 c6 01             	add    $0x1,%esi
+80103b9e:	83 fe 10             	cmp    $0x10,%esi
+80103ba1:	75 dd                	jne    80103b80 <fork+0x70>
+  np->cwd = idup(curproc->cwd);
+80103ba3:	83 ec 0c             	sub    $0xc,%esp
+80103ba6:	ff 73 68             	push   0x68(%ebx)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103ba9:	83 c3 6c             	add    $0x6c,%ebx
+  np->cwd = idup(curproc->cwd);
+80103bac:	e8 9f db ff ff       	call   80101750 <idup>
+80103bb1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103bb4:	83 c4 0c             	add    $0xc,%esp
+  np->cwd = idup(curproc->cwd);
+80103bb7:	89 47 68             	mov    %eax,0x68(%edi)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103bba:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103bbd:	6a 10                	push   $0x10
+80103bbf:	53                   	push   %ebx
+80103bc0:	50                   	push   %eax
+80103bc1:	e8 5a 0c 00 00       	call   80104820 <safestrcpy>
+  pid = np->pid;
+80103bc6:	8b 5f 10             	mov    0x10(%edi),%ebx
+  acquire(&ptable.lock);
+80103bc9:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103bd0:	e8 cb 09 00 00       	call   801045a0 <acquire>
+  np->state = RUNNABLE;
+80103bd5:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  release(&ptable.lock);
+80103bdc:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103be3:	e8 58 09 00 00       	call   80104540 <release>
+  return pid;
+80103be8:	83 c4 10             	add    $0x10,%esp
+}
+80103beb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103bee:	89 d8                	mov    %ebx,%eax
+80103bf0:	5b                   	pop    %ebx
+80103bf1:	5e                   	pop    %esi
+80103bf2:	5f                   	pop    %edi
+80103bf3:	5d                   	pop    %ebp
+80103bf4:	c3                   	ret    
+    return -1;
+80103bf5:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103bfa:	eb ef                	jmp    80103beb <fork+0xdb>
+    kfree(np->kstack);
+80103bfc:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103bff:	83 ec 0c             	sub    $0xc,%esp
+80103c02:	ff 73 08             	push   0x8(%ebx)
+80103c05:	e8 b6 e8 ff ff       	call   801024c0 <kfree>
+    np->kstack = 0;
+80103c0a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+    return -1;
+80103c11:	83 c4 10             	add    $0x10,%esp
+    np->state = UNUSED;
+80103c14:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return -1;
+80103c1b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c20:	eb c9                	jmp    80103beb <fork+0xdb>
+80103c22:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103c30 <scheduler>:
+{
+80103c30:	55                   	push   %ebp
+80103c31:	89 e5                	mov    %esp,%ebp
+80103c33:	57                   	push   %edi
+80103c34:	56                   	push   %esi
+80103c35:	53                   	push   %ebx
+80103c36:	83 ec 0c             	sub    $0xc,%esp
+  struct cpu *c = mycpu();
+80103c39:	e8 b2 fc ff ff       	call   801038f0 <mycpu>
+  c->proc = 0;
+80103c3e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103c45:	00 00 00 
+  struct cpu *c = mycpu();
+80103c48:	89 c6                	mov    %eax,%esi
+  c->proc = 0;
+80103c4a:	8d 78 04             	lea    0x4(%eax),%edi
+80103c4d:	8d 76 00             	lea    0x0(%esi),%esi
+  asm volatile("sti");
+80103c50:	fb                   	sti    
+    acquire(&ptable.lock);
+80103c51:	83 ec 0c             	sub    $0xc,%esp
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103c54:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+    acquire(&ptable.lock);
+80103c59:	68 20 1d 11 80       	push   $0x80111d20
+80103c5e:	e8 3d 09 00 00       	call   801045a0 <acquire>
+80103c63:	83 c4 10             	add    $0x10,%esp
+80103c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c6d:	8d 76 00             	lea    0x0(%esi),%esi
+      if(p->state != RUNNABLE)
+80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
+      switchuvm(p);
+80103c76:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = p;
+80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+      switchuvm(p);
+80103c7f:	53                   	push   %ebx
+80103c80:	e8 db 2d 00 00       	call   80106a60 <switchuvm>
+      swtch(&(c->scheduler), p->context);
+80103c85:	58                   	pop    %eax
+80103c86:	5a                   	pop    %edx
+80103c87:	ff 73 1c             	push   0x1c(%ebx)
+80103c8a:	57                   	push   %edi
+      p->state = RUNNING;
+80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+      swtch(&(c->scheduler), p->context);
+80103c92:	e8 e4 0b 00 00       	call   8010487b <swtch>
+      switchkvm();
+80103c97:	e8 b4 2d 00 00       	call   80106a50 <switchkvm>
+      c->proc = 0;
+80103c9c:	83 c4 10             	add    $0x10,%esp
+80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80103ca6:	00 00 00 
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103ca9:	83 c3 7c             	add    $0x7c,%ebx
+80103cac:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
+80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
+    release(&ptable.lock);
+80103cb4:	83 ec 0c             	sub    $0xc,%esp
+80103cb7:	68 20 1d 11 80       	push   $0x80111d20
+80103cbc:	e8 7f 08 00 00       	call   80104540 <release>
+    sti();
+80103cc1:	83 c4 10             	add    $0x10,%esp
+80103cc4:	eb 8a                	jmp    80103c50 <scheduler+0x20>
+80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103cd0 <sched>:
+{
+80103cd0:	55                   	push   %ebp
+80103cd1:	89 e5                	mov    %esp,%ebp
+80103cd3:	56                   	push   %esi
+80103cd4:	53                   	push   %ebx
+  pushcli();
+80103cd5:	e8 76 07 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+80103cda:	e8 11 fc ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+80103cdf:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103ce5:	e8 b6 07 00 00       	call   801044a0 <popcli>
+  if(!holding(&ptable.lock))
+80103cea:	83 ec 0c             	sub    $0xc,%esp
+80103ced:	68 20 1d 11 80       	push   $0x80111d20
+80103cf2:	e8 09 08 00 00       	call   80104500 <holding>
+80103cf7:	83 c4 10             	add    $0x10,%esp
+80103cfa:	85 c0                	test   %eax,%eax
+80103cfc:	74 4f                	je     80103d4d <sched+0x7d>
+  if(mycpu()->ncli != 1)
+80103cfe:	e8 ed fb ff ff       	call   801038f0 <mycpu>
+80103d03:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103d0a:	75 68                	jne    80103d74 <sched+0xa4>
+  if(p->state == RUNNING)
+80103d0c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103d10:	74 55                	je     80103d67 <sched+0x97>
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103d12:	9c                   	pushf  
+80103d13:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80103d14:	f6 c4 02             	test   $0x2,%ah
+80103d17:	75 41                	jne    80103d5a <sched+0x8a>
+  intena = mycpu()->intena;
+80103d19:	e8 d2 fb ff ff       	call   801038f0 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80103d1e:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+80103d21:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+80103d27:	e8 c4 fb ff ff       	call   801038f0 <mycpu>
+80103d2c:	83 ec 08             	sub    $0x8,%esp
+80103d2f:	ff 70 04             	push   0x4(%eax)
+80103d32:	53                   	push   %ebx
+80103d33:	e8 43 0b 00 00       	call   8010487b <swtch>
+  mycpu()->intena = intena;
+80103d38:	e8 b3 fb ff ff       	call   801038f0 <mycpu>
+}
+80103d3d:	83 c4 10             	add    $0x10,%esp
+  mycpu()->intena = intena;
+80103d40:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+80103d46:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103d49:	5b                   	pop    %ebx
+80103d4a:	5e                   	pop    %esi
+80103d4b:	5d                   	pop    %ebp
+80103d4c:	c3                   	ret    
+    panic("sched ptable.lock");
+80103d4d:	83 ec 0c             	sub    $0xc,%esp
+80103d50:	68 9b 77 10 80       	push   $0x8010779b
+80103d55:	e8 26 c6 ff ff       	call   80100380 <panic>
+    panic("sched interruptible");
+80103d5a:	83 ec 0c             	sub    $0xc,%esp
+80103d5d:	68 c7 77 10 80       	push   $0x801077c7
+80103d62:	e8 19 c6 ff ff       	call   80100380 <panic>
+    panic("sched running");
+80103d67:	83 ec 0c             	sub    $0xc,%esp
+80103d6a:	68 b9 77 10 80       	push   $0x801077b9
+80103d6f:	e8 0c c6 ff ff       	call   80100380 <panic>
+    panic("sched locks");
+80103d74:	83 ec 0c             	sub    $0xc,%esp
+80103d77:	68 ad 77 10 80       	push   $0x801077ad
+80103d7c:	e8 ff c5 ff ff       	call   80100380 <panic>
+80103d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d8f:	90                   	nop
+
+80103d90 <exit>:
+{
+80103d90:	55                   	push   %ebp
+80103d91:	89 e5                	mov    %esp,%ebp
+80103d93:	57                   	push   %edi
+80103d94:	56                   	push   %esi
+80103d95:	53                   	push   %ebx
+80103d96:	83 ec 0c             	sub    $0xc,%esp
+  struct proc *curproc = myproc();
+80103d99:	e8 d2 fb ff ff       	call   80103970 <myproc>
+  if(curproc == initproc)
+80103d9e:	39 05 54 3c 11 80    	cmp    %eax,0x80113c54
+80103da4:	0f 84 fd 00 00 00    	je     80103ea7 <exit+0x117>
+80103daa:	89 c3                	mov    %eax,%ebx
+80103dac:	8d 70 28             	lea    0x28(%eax),%esi
+80103daf:	8d 78 68             	lea    0x68(%eax),%edi
+80103db2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(curproc->ofile[fd]){
+80103db8:	8b 06                	mov    (%esi),%eax
+80103dba:	85 c0                	test   %eax,%eax
+80103dbc:	74 12                	je     80103dd0 <exit+0x40>
+      fileclose(curproc->ofile[fd]);
+80103dbe:	83 ec 0c             	sub    $0xc,%esp
+80103dc1:	50                   	push   %eax
+80103dc2:	e8 29 d1 ff ff       	call   80100ef0 <fileclose>
+      curproc->ofile[fd] = 0;
+80103dc7:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103dcd:	83 c4 10             	add    $0x10,%esp
+  for(fd = 0; fd < NOFILE; fd++){
+80103dd0:	83 c6 04             	add    $0x4,%esi
+80103dd3:	39 f7                	cmp    %esi,%edi
+80103dd5:	75 e1                	jne    80103db8 <exit+0x28>
+  begin_op();
+80103dd7:	e8 84 ef ff ff       	call   80102d60 <begin_op>
+  iput(curproc->cwd);
+80103ddc:	83 ec 0c             	sub    $0xc,%esp
+80103ddf:	ff 73 68             	push   0x68(%ebx)
+80103de2:	e8 c9 da ff ff       	call   801018b0 <iput>
+  end_op();
+80103de7:	e8 e4 ef ff ff       	call   80102dd0 <end_op>
+  curproc->cwd = 0;
+80103dec:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
+  acquire(&ptable.lock);
+80103df3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103dfa:	e8 a1 07 00 00       	call   801045a0 <acquire>
+  wakeup1(curproc->parent);
+80103dff:	8b 53 14             	mov    0x14(%ebx),%edx
+80103e02:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103e05:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80103e0a:	eb 0e                	jmp    80103e1a <exit+0x8a>
+80103e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e10:	83 c0 7c             	add    $0x7c,%eax
+80103e13:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
+80103e18:	74 1c                	je     80103e36 <exit+0xa6>
+    if(p->state == SLEEPING && p->chan == chan)
+80103e1a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e1e:	75 f0                	jne    80103e10 <exit+0x80>
+80103e20:	3b 50 20             	cmp    0x20(%eax),%edx
+80103e23:	75 eb                	jne    80103e10 <exit+0x80>
+      p->state = RUNNABLE;
+80103e25:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103e2c:	83 c0 7c             	add    $0x7c,%eax
+80103e2f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
+80103e34:	75 e4                	jne    80103e1a <exit+0x8a>
+      p->parent = initproc;
+80103e36:	8b 0d 54 3c 11 80    	mov    0x80113c54,%ecx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103e3c:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
+80103e41:	eb 10                	jmp    80103e53 <exit+0xc3>
+80103e43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e47:	90                   	nop
+80103e48:	83 c2 7c             	add    $0x7c,%edx
+80103e4b:	81 fa 54 3c 11 80    	cmp    $0x80113c54,%edx
+80103e51:	74 3b                	je     80103e8e <exit+0xfe>
+    if(p->parent == curproc){
+80103e53:	39 5a 14             	cmp    %ebx,0x14(%edx)
+80103e56:	75 f0                	jne    80103e48 <exit+0xb8>
+      if(p->state == ZOMBIE)
+80103e58:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+      p->parent = initproc;
+80103e5c:	89 4a 14             	mov    %ecx,0x14(%edx)
+      if(p->state == ZOMBIE)
+80103e5f:	75 e7                	jne    80103e48 <exit+0xb8>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103e61:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80103e66:	eb 12                	jmp    80103e7a <exit+0xea>
+80103e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e6f:	90                   	nop
+80103e70:	83 c0 7c             	add    $0x7c,%eax
+80103e73:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
+80103e78:	74 ce                	je     80103e48 <exit+0xb8>
+    if(p->state == SLEEPING && p->chan == chan)
+80103e7a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e7e:	75 f0                	jne    80103e70 <exit+0xe0>
+80103e80:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103e83:	75 eb                	jne    80103e70 <exit+0xe0>
+      p->state = RUNNABLE;
+80103e85:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103e8c:	eb e2                	jmp    80103e70 <exit+0xe0>
+  curproc->state = ZOMBIE;
+80103e8e:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
+  sched();
+80103e95:	e8 36 fe ff ff       	call   80103cd0 <sched>
+  panic("zombie exit");
+80103e9a:	83 ec 0c             	sub    $0xc,%esp
+80103e9d:	68 e8 77 10 80       	push   $0x801077e8
+80103ea2:	e8 d9 c4 ff ff       	call   80100380 <panic>
+    panic("init exiting");
+80103ea7:	83 ec 0c             	sub    $0xc,%esp
+80103eaa:	68 db 77 10 80       	push   $0x801077db
+80103eaf:	e8 cc c4 ff ff       	call   80100380 <panic>
+80103eb4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ebb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ebf:	90                   	nop
+
+80103ec0 <wait>:
+{
+80103ec0:	55                   	push   %ebp
+80103ec1:	89 e5                	mov    %esp,%ebp
+80103ec3:	56                   	push   %esi
+80103ec4:	53                   	push   %ebx
+  pushcli();
+80103ec5:	e8 86 05 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+80103eca:	e8 21 fa ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+80103ecf:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103ed5:	e8 c6 05 00 00       	call   801044a0 <popcli>
+  acquire(&ptable.lock);
+80103eda:	83 ec 0c             	sub    $0xc,%esp
+80103edd:	68 20 1d 11 80       	push   $0x80111d20
+80103ee2:	e8 b9 06 00 00       	call   801045a0 <acquire>
+80103ee7:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+80103eea:	31 c0                	xor    %eax,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103eec:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+80103ef1:	eb 10                	jmp    80103f03 <wait+0x43>
+80103ef3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ef7:	90                   	nop
+80103ef8:	83 c3 7c             	add    $0x7c,%ebx
+80103efb:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
+80103f01:	74 1b                	je     80103f1e <wait+0x5e>
+      if(p->parent != curproc)
+80103f03:	39 73 14             	cmp    %esi,0x14(%ebx)
+80103f06:	75 f0                	jne    80103ef8 <wait+0x38>
+      if(p->state == ZOMBIE){
+80103f08:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80103f0c:	74 62                	je     80103f70 <wait+0xb0>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103f0e:	83 c3 7c             	add    $0x7c,%ebx
+      havekids = 1;
+80103f11:	b8 01 00 00 00       	mov    $0x1,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103f16:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
+80103f1c:	75 e5                	jne    80103f03 <wait+0x43>
+    if(!havekids || curproc->killed){
+80103f1e:	85 c0                	test   %eax,%eax
+80103f20:	0f 84 a0 00 00 00    	je     80103fc6 <wait+0x106>
+80103f26:	8b 46 24             	mov    0x24(%esi),%eax
+80103f29:	85 c0                	test   %eax,%eax
+80103f2b:	0f 85 95 00 00 00    	jne    80103fc6 <wait+0x106>
+  pushcli();
+80103f31:	e8 1a 05 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+80103f36:	e8 b5 f9 ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+80103f3b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103f41:	e8 5a 05 00 00       	call   801044a0 <popcli>
+  if(p == 0)
+80103f46:	85 db                	test   %ebx,%ebx
+80103f48:	0f 84 8f 00 00 00    	je     80103fdd <wait+0x11d>
+  p->chan = chan;
+80103f4e:	89 73 20             	mov    %esi,0x20(%ebx)
+  p->state = SLEEPING;
+80103f51:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80103f58:	e8 73 fd ff ff       	call   80103cd0 <sched>
+  p->chan = 0;
+80103f5d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+80103f64:	eb 84                	jmp    80103eea <wait+0x2a>
+80103f66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f6d:	8d 76 00             	lea    0x0(%esi),%esi
+        kfree(p->kstack);
+80103f70:	83 ec 0c             	sub    $0xc,%esp
+        pid = p->pid;
+80103f73:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80103f76:	ff 73 08             	push   0x8(%ebx)
+80103f79:	e8 42 e5 ff ff       	call   801024c0 <kfree>
+        p->kstack = 0;
+80103f7e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80103f85:	5a                   	pop    %edx
+80103f86:	ff 73 04             	push   0x4(%ebx)
+80103f89:	e8 b2 2e 00 00       	call   80106e40 <freevm>
+        p->pid = 0;
+80103f8e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80103f95:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+80103f9c:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+80103fa0:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->state = UNUSED;
+80103fa7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        release(&ptable.lock);
+80103fae:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103fb5:	e8 86 05 00 00       	call   80104540 <release>
+        return pid;
+80103fba:	83 c4 10             	add    $0x10,%esp
+}
+80103fbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103fc0:	89 f0                	mov    %esi,%eax
+80103fc2:	5b                   	pop    %ebx
+80103fc3:	5e                   	pop    %esi
+80103fc4:	5d                   	pop    %ebp
+80103fc5:	c3                   	ret    
+      release(&ptable.lock);
+80103fc6:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80103fc9:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+80103fce:	68 20 1d 11 80       	push   $0x80111d20
+80103fd3:	e8 68 05 00 00       	call   80104540 <release>
+      return -1;
+80103fd8:	83 c4 10             	add    $0x10,%esp
+80103fdb:	eb e0                	jmp    80103fbd <wait+0xfd>
+    panic("sleep");
+80103fdd:	83 ec 0c             	sub    $0xc,%esp
+80103fe0:	68 f4 77 10 80       	push   $0x801077f4
+80103fe5:	e8 96 c3 ff ff       	call   80100380 <panic>
+80103fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103ff0 <yield>:
+{
+80103ff0:	55                   	push   %ebp
+80103ff1:	89 e5                	mov    %esp,%ebp
+80103ff3:	53                   	push   %ebx
+80103ff4:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);  //DOC: yieldlock
+80103ff7:	68 20 1d 11 80       	push   $0x80111d20
+80103ffc:	e8 9f 05 00 00       	call   801045a0 <acquire>
+  pushcli();
+80104001:	e8 4a 04 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+80104006:	e8 e5 f8 ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+8010400b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104011:	e8 8a 04 00 00       	call   801044a0 <popcli>
+  myproc()->state = RUNNABLE;
+80104016:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  sched();
+8010401d:	e8 ae fc ff ff       	call   80103cd0 <sched>
+  release(&ptable.lock);
+80104022:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80104029:	e8 12 05 00 00       	call   80104540 <release>
+}
+8010402e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104031:	83 c4 10             	add    $0x10,%esp
+80104034:	c9                   	leave  
+80104035:	c3                   	ret    
+80104036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010403d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104040 <sleep>:
+{
+80104040:	55                   	push   %ebp
+80104041:	89 e5                	mov    %esp,%ebp
+80104043:	57                   	push   %edi
+80104044:	56                   	push   %esi
+80104045:	53                   	push   %ebx
+80104046:	83 ec 0c             	sub    $0xc,%esp
+80104049:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010404c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  pushcli();
+8010404f:	e8 fc 03 00 00       	call   80104450 <pushcli>
+  c = mycpu();
+80104054:	e8 97 f8 ff ff       	call   801038f0 <mycpu>
+  p = c->proc;
+80104059:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010405f:	e8 3c 04 00 00       	call   801044a0 <popcli>
+  if(p == 0)
+80104064:	85 db                	test   %ebx,%ebx
+80104066:	0f 84 87 00 00 00    	je     801040f3 <sleep+0xb3>
+  if(lk == 0)
+8010406c:	85 f6                	test   %esi,%esi
+8010406e:	74 76                	je     801040e6 <sleep+0xa6>
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+80104070:	81 fe 20 1d 11 80    	cmp    $0x80111d20,%esi
+80104076:	74 50                	je     801040c8 <sleep+0x88>
+    acquire(&ptable.lock);  //DOC: sleeplock1
+80104078:	83 ec 0c             	sub    $0xc,%esp
+8010407b:	68 20 1d 11 80       	push   $0x80111d20
+80104080:	e8 1b 05 00 00       	call   801045a0 <acquire>
+    release(lk);
+80104085:	89 34 24             	mov    %esi,(%esp)
+80104088:	e8 b3 04 00 00       	call   80104540 <release>
+  p->chan = chan;
+8010408d:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80104090:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80104097:	e8 34 fc ff ff       	call   80103cd0 <sched>
+  p->chan = 0;
+8010409c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+    release(&ptable.lock);
+801040a3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+801040aa:	e8 91 04 00 00       	call   80104540 <release>
+    acquire(lk);
+801040af:	89 75 08             	mov    %esi,0x8(%ebp)
+801040b2:	83 c4 10             	add    $0x10,%esp
+}
+801040b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801040b8:	5b                   	pop    %ebx
+801040b9:	5e                   	pop    %esi
+801040ba:	5f                   	pop    %edi
+801040bb:	5d                   	pop    %ebp
+    acquire(lk);
+801040bc:	e9 df 04 00 00       	jmp    801045a0 <acquire>
+801040c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  p->chan = chan;
+801040c8:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+801040cb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+801040d2:	e8 f9 fb ff ff       	call   80103cd0 <sched>
+  p->chan = 0;
+801040d7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+801040de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801040e1:	5b                   	pop    %ebx
+801040e2:	5e                   	pop    %esi
+801040e3:	5f                   	pop    %edi
+801040e4:	5d                   	pop    %ebp
+801040e5:	c3                   	ret    
+    panic("sleep without lk");
+801040e6:	83 ec 0c             	sub    $0xc,%esp
+801040e9:	68 fa 77 10 80       	push   $0x801077fa
+801040ee:	e8 8d c2 ff ff       	call   80100380 <panic>
+    panic("sleep");
+801040f3:	83 ec 0c             	sub    $0xc,%esp
+801040f6:	68 f4 77 10 80       	push   $0x801077f4
+801040fb:	e8 80 c2 ff ff       	call   80100380 <panic>
+
+80104100 <wakeup>:
+}
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+80104100:	55                   	push   %ebp
+80104101:	89 e5                	mov    %esp,%ebp
+80104103:	53                   	push   %ebx
+80104104:	83 ec 10             	sub    $0x10,%esp
+80104107:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+8010410a:	68 20 1d 11 80       	push   $0x80111d20
+8010410f:	e8 8c 04 00 00       	call   801045a0 <acquire>
+80104114:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104117:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+8010411c:	eb 0c                	jmp    8010412a <wakeup+0x2a>
+8010411e:	66 90                	xchg   %ax,%ax
+80104120:	83 c0 7c             	add    $0x7c,%eax
+80104123:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
+80104128:	74 1c                	je     80104146 <wakeup+0x46>
+    if(p->state == SLEEPING && p->chan == chan)
+8010412a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010412e:	75 f0                	jne    80104120 <wakeup+0x20>
+80104130:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104133:	75 eb                	jne    80104120 <wakeup+0x20>
+      p->state = RUNNABLE;
+80104135:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+8010413c:	83 c0 7c             	add    $0x7c,%eax
+8010413f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
+80104144:	75 e4                	jne    8010412a <wakeup+0x2a>
+  wakeup1(chan);
+  release(&ptable.lock);
+80104146:	c7 45 08 20 1d 11 80 	movl   $0x80111d20,0x8(%ebp)
+}
+8010414d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104150:	c9                   	leave  
+  release(&ptable.lock);
+80104151:	e9 ea 03 00 00       	jmp    80104540 <release>
+80104156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010415d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104160 <kill>:
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+80104160:	55                   	push   %ebp
+80104161:	89 e5                	mov    %esp,%ebp
+80104163:	53                   	push   %ebx
+80104164:	83 ec 10             	sub    $0x10,%esp
+80104167:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+8010416a:	68 20 1d 11 80       	push   $0x80111d20
+8010416f:	e8 2c 04 00 00       	call   801045a0 <acquire>
+80104174:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104177:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+8010417c:	eb 0c                	jmp    8010418a <kill+0x2a>
+8010417e:	66 90                	xchg   %ax,%ax
+80104180:	83 c0 7c             	add    $0x7c,%eax
+80104183:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
+80104188:	74 36                	je     801041c0 <kill+0x60>
+    if(p->pid == pid){
+8010418a:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010418d:	75 f1                	jne    80104180 <kill+0x20>
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+8010418f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      p->killed = 1;
+80104193:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if(p->state == SLEEPING)
+8010419a:	75 07                	jne    801041a3 <kill+0x43>
+        p->state = RUNNABLE;
+8010419c:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+      release(&ptable.lock);
+801041a3:	83 ec 0c             	sub    $0xc,%esp
+801041a6:	68 20 1d 11 80       	push   $0x80111d20
+801041ab:	e8 90 03 00 00       	call   80104540 <release>
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+801041b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+      return 0;
+801041b3:	83 c4 10             	add    $0x10,%esp
+801041b6:	31 c0                	xor    %eax,%eax
+}
+801041b8:	c9                   	leave  
+801041b9:	c3                   	ret    
+801041ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  release(&ptable.lock);
+801041c0:	83 ec 0c             	sub    $0xc,%esp
+801041c3:	68 20 1d 11 80       	push   $0x80111d20
+801041c8:	e8 73 03 00 00       	call   80104540 <release>
+}
+801041cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  return -1;
+801041d0:	83 c4 10             	add    $0x10,%esp
+801041d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801041d8:	c9                   	leave  
+801041d9:	c3                   	ret    
+801041da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801041e0 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+801041e0:	55                   	push   %ebp
+801041e1:	89 e5                	mov    %esp,%ebp
+801041e3:	57                   	push   %edi
+801041e4:	56                   	push   %esi
+801041e5:	8d 75 e8             	lea    -0x18(%ebp),%esi
+801041e8:	53                   	push   %ebx
+801041e9:	bb c0 1d 11 80       	mov    $0x80111dc0,%ebx
+801041ee:	83 ec 3c             	sub    $0x3c,%esp
+801041f1:	eb 24                	jmp    80104217 <procdump+0x37>
+801041f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801041f7:	90                   	nop
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+801041f8:	83 ec 0c             	sub    $0xc,%esp
+801041fb:	68 df 7b 10 80       	push   $0x80107bdf
+80104200:	e8 9b c4 ff ff       	call   801006a0 <cprintf>
+80104205:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104208:	83 c3 7c             	add    $0x7c,%ebx
+8010420b:	81 fb c0 3c 11 80    	cmp    $0x80113cc0,%ebx
+80104211:	0f 84 81 00 00 00    	je     80104298 <procdump+0xb8>
+    if(p->state == UNUSED)
+80104217:	8b 43 a0             	mov    -0x60(%ebx),%eax
+8010421a:	85 c0                	test   %eax,%eax
+8010421c:	74 ea                	je     80104208 <procdump+0x28>
+      state = "???";
+8010421e:	ba 0b 78 10 80       	mov    $0x8010780b,%edx
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80104223:	83 f8 05             	cmp    $0x5,%eax
+80104226:	77 11                	ja     80104239 <procdump+0x59>
+80104228:	8b 14 85 6c 78 10 80 	mov    -0x7fef8794(,%eax,4),%edx
+      state = "???";
+8010422f:	b8 0b 78 10 80       	mov    $0x8010780b,%eax
+80104234:	85 d2                	test   %edx,%edx
+80104236:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+80104239:	53                   	push   %ebx
+8010423a:	52                   	push   %edx
+8010423b:	ff 73 a4             	push   -0x5c(%ebx)
+8010423e:	68 0f 78 10 80       	push   $0x8010780f
+80104243:	e8 58 c4 ff ff       	call   801006a0 <cprintf>
+    if(p->state == SLEEPING){
+80104248:	83 c4 10             	add    $0x10,%esp
+8010424b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+8010424f:	75 a7                	jne    801041f8 <procdump+0x18>
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+80104251:	83 ec 08             	sub    $0x8,%esp
+80104254:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104257:	8d 7d c0             	lea    -0x40(%ebp),%edi
+8010425a:	50                   	push   %eax
+8010425b:	8b 43 b0             	mov    -0x50(%ebx),%eax
+8010425e:	8b 40 0c             	mov    0xc(%eax),%eax
+80104261:	83 c0 08             	add    $0x8,%eax
+80104264:	50                   	push   %eax
+80104265:	e8 86 01 00 00       	call   801043f0 <getcallerpcs>
+      for(i=0; i<10 && pc[i] != 0; i++)
+8010426a:	83 c4 10             	add    $0x10,%esp
+8010426d:	8d 76 00             	lea    0x0(%esi),%esi
+80104270:	8b 17                	mov    (%edi),%edx
+80104272:	85 d2                	test   %edx,%edx
+80104274:	74 82                	je     801041f8 <procdump+0x18>
+        cprintf(" %p", pc[i]);
+80104276:	83 ec 08             	sub    $0x8,%esp
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104279:	83 c7 04             	add    $0x4,%edi
+        cprintf(" %p", pc[i]);
+8010427c:	52                   	push   %edx
+8010427d:	68 61 72 10 80       	push   $0x80107261
+80104282:	e8 19 c4 ff ff       	call   801006a0 <cprintf>
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104287:	83 c4 10             	add    $0x10,%esp
+8010428a:	39 fe                	cmp    %edi,%esi
+8010428c:	75 e2                	jne    80104270 <procdump+0x90>
+8010428e:	e9 65 ff ff ff       	jmp    801041f8 <procdump+0x18>
+80104293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104297:	90                   	nop
+  }
+}
+80104298:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010429b:	5b                   	pop    %ebx
+8010429c:	5e                   	pop    %esi
+8010429d:	5f                   	pop    %edi
+8010429e:	5d                   	pop    %ebp
+8010429f:	c3                   	ret    
+
+801042a0 <initsleeplock>:
+#include "spinlock.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+801042a0:	55                   	push   %ebp
+801042a1:	89 e5                	mov    %esp,%ebp
+801042a3:	53                   	push   %ebx
+801042a4:	83 ec 0c             	sub    $0xc,%esp
+801042a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&lk->lk, "sleep lock");
+801042aa:	68 84 78 10 80       	push   $0x80107884
+801042af:	8d 43 04             	lea    0x4(%ebx),%eax
+801042b2:	50                   	push   %eax
+801042b3:	e8 18 01 00 00       	call   801043d0 <initlock>
+  lk->name = name;
+801042b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  lk->locked = 0;
+801042bb:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+}
+801042c1:	83 c4 10             	add    $0x10,%esp
+  lk->pid = 0;
+801042c4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  lk->name = name;
+801042cb:	89 43 38             	mov    %eax,0x38(%ebx)
+}
+801042ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801042d1:	c9                   	leave  
+801042d2:	c3                   	ret    
+801042d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801042e0 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+801042e0:	55                   	push   %ebp
+801042e1:	89 e5                	mov    %esp,%ebp
+801042e3:	56                   	push   %esi
+801042e4:	53                   	push   %ebx
+801042e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+801042e8:	8d 73 04             	lea    0x4(%ebx),%esi
+801042eb:	83 ec 0c             	sub    $0xc,%esp
+801042ee:	56                   	push   %esi
+801042ef:	e8 ac 02 00 00       	call   801045a0 <acquire>
+  while (lk->locked) {
+801042f4:	8b 13                	mov    (%ebx),%edx
+801042f6:	83 c4 10             	add    $0x10,%esp
+801042f9:	85 d2                	test   %edx,%edx
+801042fb:	74 16                	je     80104313 <acquiresleep+0x33>
+801042fd:	8d 76 00             	lea    0x0(%esi),%esi
+    sleep(lk, &lk->lk);
+80104300:	83 ec 08             	sub    $0x8,%esp
+80104303:	56                   	push   %esi
+80104304:	53                   	push   %ebx
+80104305:	e8 36 fd ff ff       	call   80104040 <sleep>
+  while (lk->locked) {
+8010430a:	8b 03                	mov    (%ebx),%eax
+8010430c:	83 c4 10             	add    $0x10,%esp
+8010430f:	85 c0                	test   %eax,%eax
+80104311:	75 ed                	jne    80104300 <acquiresleep+0x20>
+  }
+  lk->locked = 1;
+80104313:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  lk->pid = myproc()->pid;
+80104319:	e8 52 f6 ff ff       	call   80103970 <myproc>
+8010431e:	8b 40 10             	mov    0x10(%eax),%eax
+80104321:	89 43 3c             	mov    %eax,0x3c(%ebx)
+  release(&lk->lk);
+80104324:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80104327:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010432a:	5b                   	pop    %ebx
+8010432b:	5e                   	pop    %esi
+8010432c:	5d                   	pop    %ebp
+  release(&lk->lk);
+8010432d:	e9 0e 02 00 00       	jmp    80104540 <release>
+80104332:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104340 <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+80104340:	55                   	push   %ebp
+80104341:	89 e5                	mov    %esp,%ebp
+80104343:	56                   	push   %esi
+80104344:	53                   	push   %ebx
+80104345:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104348:	8d 73 04             	lea    0x4(%ebx),%esi
+8010434b:	83 ec 0c             	sub    $0xc,%esp
+8010434e:	56                   	push   %esi
+8010434f:	e8 4c 02 00 00       	call   801045a0 <acquire>
+  lk->locked = 0;
+80104354:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+8010435a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  wakeup(lk);
+80104361:	89 1c 24             	mov    %ebx,(%esp)
+80104364:	e8 97 fd ff ff       	call   80104100 <wakeup>
+  release(&lk->lk);
+80104369:	89 75 08             	mov    %esi,0x8(%ebp)
+8010436c:	83 c4 10             	add    $0x10,%esp
+}
+8010436f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104372:	5b                   	pop    %ebx
+80104373:	5e                   	pop    %esi
+80104374:	5d                   	pop    %ebp
+  release(&lk->lk);
+80104375:	e9 c6 01 00 00       	jmp    80104540 <release>
+8010437a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104380 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+80104380:	55                   	push   %ebp
+80104381:	89 e5                	mov    %esp,%ebp
+80104383:	57                   	push   %edi
+80104384:	31 ff                	xor    %edi,%edi
+80104386:	56                   	push   %esi
+80104387:	53                   	push   %ebx
+80104388:	83 ec 18             	sub    $0x18,%esp
+8010438b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int r;
+  
+  acquire(&lk->lk);
+8010438e:	8d 73 04             	lea    0x4(%ebx),%esi
+80104391:	56                   	push   %esi
+80104392:	e8 09 02 00 00       	call   801045a0 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+80104397:	8b 03                	mov    (%ebx),%eax
+80104399:	83 c4 10             	add    $0x10,%esp
+8010439c:	85 c0                	test   %eax,%eax
+8010439e:	75 18                	jne    801043b8 <holdingsleep+0x38>
+  release(&lk->lk);
+801043a0:	83 ec 0c             	sub    $0xc,%esp
+801043a3:	56                   	push   %esi
+801043a4:	e8 97 01 00 00       	call   80104540 <release>
+  return r;
+}
+801043a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801043ac:	89 f8                	mov    %edi,%eax
+801043ae:	5b                   	pop    %ebx
+801043af:	5e                   	pop    %esi
+801043b0:	5f                   	pop    %edi
+801043b1:	5d                   	pop    %ebp
+801043b2:	c3                   	ret    
+801043b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801043b7:	90                   	nop
+  r = lk->locked && (lk->pid == myproc()->pid);
+801043b8:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+801043bb:	e8 b0 f5 ff ff       	call   80103970 <myproc>
+801043c0:	39 58 10             	cmp    %ebx,0x10(%eax)
+801043c3:	0f 94 c0             	sete   %al
+801043c6:	0f b6 c0             	movzbl %al,%eax
+801043c9:	89 c7                	mov    %eax,%edi
+801043cb:	eb d3                	jmp    801043a0 <holdingsleep+0x20>
+801043cd:	66 90                	xchg   %ax,%ax
+801043cf:	90                   	nop
+
+801043d0 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+801043d0:	55                   	push   %ebp
+801043d1:	89 e5                	mov    %esp,%ebp
+801043d3:	8b 45 08             	mov    0x8(%ebp),%eax
+  lk->name = name;
+801043d6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  lk->locked = 0;
+801043d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  lk->name = name;
+801043df:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->cpu = 0;
+801043e2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+801043e9:	5d                   	pop    %ebp
+801043ea:	c3                   	ret    
+801043eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801043ef:	90                   	nop
+
+801043f0 <getcallerpcs>:
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+801043f0:	55                   	push   %ebp
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+801043f1:	31 d2                	xor    %edx,%edx
+{
+801043f3:	89 e5                	mov    %esp,%ebp
+801043f5:	53                   	push   %ebx
+  ebp = (uint*)v - 2;
+801043f6:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+801043f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  ebp = (uint*)v - 2;
+801043fc:	83 e8 08             	sub    $0x8,%eax
+  for(i = 0; i < 10; i++){
+801043ff:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104400:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104406:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010440c:	77 1a                	ja     80104428 <getcallerpcs+0x38>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+8010440e:	8b 58 04             	mov    0x4(%eax),%ebx
+80104411:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+  for(i = 0; i < 10; i++){
+80104414:	83 c2 01             	add    $0x1,%edx
+    ebp = (uint*)ebp[0]; // saved %ebp
+80104417:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+80104419:	83 fa 0a             	cmp    $0xa,%edx
+8010441c:	75 e2                	jne    80104400 <getcallerpcs+0x10>
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+8010441e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104421:	c9                   	leave  
+80104422:	c3                   	ret    
+80104423:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104427:	90                   	nop
+  for(; i < 10; i++)
+80104428:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+8010442b:	8d 51 28             	lea    0x28(%ecx),%edx
+8010442e:	66 90                	xchg   %ax,%ax
+    pcs[i] = 0;
+80104430:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; i < 10; i++)
+80104436:	83 c0 04             	add    $0x4,%eax
+80104439:	39 d0                	cmp    %edx,%eax
+8010443b:	75 f3                	jne    80104430 <getcallerpcs+0x40>
+}
+8010443d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104440:	c9                   	leave  
+80104441:	c3                   	ret    
+80104442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104450 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+80104450:	55                   	push   %ebp
+80104451:	89 e5                	mov    %esp,%ebp
+80104453:	53                   	push   %ebx
+80104454:	83 ec 04             	sub    $0x4,%esp
+80104457:	9c                   	pushf  
+80104458:	5b                   	pop    %ebx
+  asm volatile("cli");
+80104459:	fa                   	cli    
+  int eflags;
+
+  eflags = readeflags();
+  cli();
+  if(mycpu()->ncli == 0)
+8010445a:	e8 91 f4 ff ff       	call   801038f0 <mycpu>
+8010445f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104465:	85 c0                	test   %eax,%eax
+80104467:	74 17                	je     80104480 <pushcli+0x30>
+    mycpu()->intena = eflags & FL_IF;
+  mycpu()->ncli += 1;
+80104469:	e8 82 f4 ff ff       	call   801038f0 <mycpu>
+8010446e:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+}
+80104475:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104478:	c9                   	leave  
+80104479:	c3                   	ret    
+8010447a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    mycpu()->intena = eflags & FL_IF;
+80104480:	e8 6b f4 ff ff       	call   801038f0 <mycpu>
+80104485:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010448b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80104491:	eb d6                	jmp    80104469 <pushcli+0x19>
+80104493:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010449a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801044a0 <popcli>:
+
+void
+popcli(void)
+{
+801044a0:	55                   	push   %ebp
+801044a1:	89 e5                	mov    %esp,%ebp
+801044a3:	83 ec 08             	sub    $0x8,%esp
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801044a6:	9c                   	pushf  
+801044a7:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+801044a8:	f6 c4 02             	test   $0x2,%ah
+801044ab:	75 35                	jne    801044e2 <popcli+0x42>
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+801044ad:	e8 3e f4 ff ff       	call   801038f0 <mycpu>
+801044b2:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+801044b9:	78 34                	js     801044ef <popcli+0x4f>
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+801044bb:	e8 30 f4 ff ff       	call   801038f0 <mycpu>
+801044c0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+801044c6:	85 d2                	test   %edx,%edx
+801044c8:	74 06                	je     801044d0 <popcli+0x30>
+    sti();
+}
+801044ca:	c9                   	leave  
+801044cb:	c3                   	ret    
+801044cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+801044d0:	e8 1b f4 ff ff       	call   801038f0 <mycpu>
+801044d5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801044db:	85 c0                	test   %eax,%eax
+801044dd:	74 eb                	je     801044ca <popcli+0x2a>
+  asm volatile("sti");
+801044df:	fb                   	sti    
+}
+801044e0:	c9                   	leave  
+801044e1:	c3                   	ret    
+    panic("popcli - interruptible");
+801044e2:	83 ec 0c             	sub    $0xc,%esp
+801044e5:	68 8f 78 10 80       	push   $0x8010788f
+801044ea:	e8 91 be ff ff       	call   80100380 <panic>
+    panic("popcli");
+801044ef:	83 ec 0c             	sub    $0xc,%esp
+801044f2:	68 a6 78 10 80       	push   $0x801078a6
+801044f7:	e8 84 be ff ff       	call   80100380 <panic>
+801044fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104500 <holding>:
+{
+80104500:	55                   	push   %ebp
+80104501:	89 e5                	mov    %esp,%ebp
+80104503:	56                   	push   %esi
+80104504:	53                   	push   %ebx
+80104505:	8b 75 08             	mov    0x8(%ebp),%esi
+80104508:	31 db                	xor    %ebx,%ebx
+  pushcli();
+8010450a:	e8 41 ff ff ff       	call   80104450 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+8010450f:	8b 06                	mov    (%esi),%eax
+80104511:	85 c0                	test   %eax,%eax
+80104513:	75 0b                	jne    80104520 <holding+0x20>
+  popcli();
+80104515:	e8 86 ff ff ff       	call   801044a0 <popcli>
+}
+8010451a:	89 d8                	mov    %ebx,%eax
+8010451c:	5b                   	pop    %ebx
+8010451d:	5e                   	pop    %esi
+8010451e:	5d                   	pop    %ebp
+8010451f:	c3                   	ret    
+  r = lock->locked && lock->cpu == mycpu();
+80104520:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104523:	e8 c8 f3 ff ff       	call   801038f0 <mycpu>
+80104528:	39 c3                	cmp    %eax,%ebx
+8010452a:	0f 94 c3             	sete   %bl
+  popcli();
+8010452d:	e8 6e ff ff ff       	call   801044a0 <popcli>
+  r = lock->locked && lock->cpu == mycpu();
+80104532:	0f b6 db             	movzbl %bl,%ebx
+}
+80104535:	89 d8                	mov    %ebx,%eax
+80104537:	5b                   	pop    %ebx
+80104538:	5e                   	pop    %esi
+80104539:	5d                   	pop    %ebp
+8010453a:	c3                   	ret    
+8010453b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010453f:	90                   	nop
+
+80104540 <release>:
+{
+80104540:	55                   	push   %ebp
+80104541:	89 e5                	mov    %esp,%ebp
+80104543:	56                   	push   %esi
+80104544:	53                   	push   %ebx
+80104545:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  pushcli();
+80104548:	e8 03 ff ff ff       	call   80104450 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+8010454d:	8b 03                	mov    (%ebx),%eax
+8010454f:	85 c0                	test   %eax,%eax
+80104551:	75 15                	jne    80104568 <release+0x28>
+  popcli();
+80104553:	e8 48 ff ff ff       	call   801044a0 <popcli>
+    panic("release");
+80104558:	83 ec 0c             	sub    $0xc,%esp
+8010455b:	68 ad 78 10 80       	push   $0x801078ad
+80104560:	e8 1b be ff ff       	call   80100380 <panic>
+80104565:	8d 76 00             	lea    0x0(%esi),%esi
+  r = lock->locked && lock->cpu == mycpu();
+80104568:	8b 73 08             	mov    0x8(%ebx),%esi
+8010456b:	e8 80 f3 ff ff       	call   801038f0 <mycpu>
+80104570:	39 c6                	cmp    %eax,%esi
+80104572:	75 df                	jne    80104553 <release+0x13>
+  popcli();
+80104574:	e8 27 ff ff ff       	call   801044a0 <popcli>
+  lk->pcs[0] = 0;
+80104579:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  lk->cpu = 0;
+80104580:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+  __sync_synchronize();
+80104587:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+8010458c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+}
+80104592:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104595:	5b                   	pop    %ebx
+80104596:	5e                   	pop    %esi
+80104597:	5d                   	pop    %ebp
+  popcli();
+80104598:	e9 03 ff ff ff       	jmp    801044a0 <popcli>
+8010459d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801045a0 <acquire>:
+{
+801045a0:	55                   	push   %ebp
+801045a1:	89 e5                	mov    %esp,%ebp
+801045a3:	53                   	push   %ebx
+801045a4:	83 ec 04             	sub    $0x4,%esp
+  pushcli(); // disable interrupts to avoid deadlock.
+801045a7:	e8 a4 fe ff ff       	call   80104450 <pushcli>
+  if(holding(lk))
+801045ac:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  pushcli();
+801045af:	e8 9c fe ff ff       	call   80104450 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+801045b4:	8b 03                	mov    (%ebx),%eax
+801045b6:	85 c0                	test   %eax,%eax
+801045b8:	75 7e                	jne    80104638 <acquire+0x98>
+  popcli();
+801045ba:	e8 e1 fe ff ff       	call   801044a0 <popcli>
+  asm volatile("lock; xchgl %0, %1" :
+801045bf:	b9 01 00 00 00       	mov    $0x1,%ecx
+801045c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while(xchg(&lk->locked, 1) != 0)
+801045c8:	8b 55 08             	mov    0x8(%ebp),%edx
+801045cb:	89 c8                	mov    %ecx,%eax
+801045cd:	f0 87 02             	lock xchg %eax,(%edx)
+801045d0:	85 c0                	test   %eax,%eax
+801045d2:	75 f4                	jne    801045c8 <acquire+0x28>
+  __sync_synchronize();
+801045d4:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  lk->cpu = mycpu();
+801045d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801045dc:	e8 0f f3 ff ff       	call   801038f0 <mycpu>
+  getcallerpcs(&lk, lk->pcs);
+801045e1:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ebp = (uint*)v - 2;
+801045e4:	89 ea                	mov    %ebp,%edx
+  lk->cpu = mycpu();
+801045e6:	89 43 08             	mov    %eax,0x8(%ebx)
+  for(i = 0; i < 10; i++){
+801045e9:	31 c0                	xor    %eax,%eax
+801045eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801045ef:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+801045f0:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
+801045f6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+801045fc:	77 1a                	ja     80104618 <acquire+0x78>
+    pcs[i] = ebp[1];     // saved %eip
+801045fe:	8b 5a 04             	mov    0x4(%edx),%ebx
+80104601:	89 5c 81 0c          	mov    %ebx,0xc(%ecx,%eax,4)
+  for(i = 0; i < 10; i++){
+80104605:	83 c0 01             	add    $0x1,%eax
+    ebp = (uint*)ebp[0]; // saved %ebp
+80104608:	8b 12                	mov    (%edx),%edx
+  for(i = 0; i < 10; i++){
+8010460a:	83 f8 0a             	cmp    $0xa,%eax
+8010460d:	75 e1                	jne    801045f0 <acquire+0x50>
+}
+8010460f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104612:	c9                   	leave  
+80104613:	c3                   	ret    
+80104614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(; i < 10; i++)
+80104618:	8d 44 81 0c          	lea    0xc(%ecx,%eax,4),%eax
+8010461c:	8d 51 34             	lea    0x34(%ecx),%edx
+8010461f:	90                   	nop
+    pcs[i] = 0;
+80104620:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; i < 10; i++)
+80104626:	83 c0 04             	add    $0x4,%eax
+80104629:	39 c2                	cmp    %eax,%edx
+8010462b:	75 f3                	jne    80104620 <acquire+0x80>
+}
+8010462d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104630:	c9                   	leave  
+80104631:	c3                   	ret    
+80104632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  r = lock->locked && lock->cpu == mycpu();
+80104638:	8b 5b 08             	mov    0x8(%ebx),%ebx
+8010463b:	e8 b0 f2 ff ff       	call   801038f0 <mycpu>
+80104640:	39 c3                	cmp    %eax,%ebx
+80104642:	0f 85 72 ff ff ff    	jne    801045ba <acquire+0x1a>
+  popcli();
+80104648:	e8 53 fe ff ff       	call   801044a0 <popcli>
+    panic("acquire");
+8010464d:	83 ec 0c             	sub    $0xc,%esp
+80104650:	68 b5 78 10 80       	push   $0x801078b5
+80104655:	e8 26 bd ff ff       	call   80100380 <panic>
+8010465a:	66 90                	xchg   %ax,%ax
+8010465c:	66 90                	xchg   %ax,%ax
+8010465e:	66 90                	xchg   %ax,%ax
+
+80104660 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+80104660:	55                   	push   %ebp
+80104661:	89 e5                	mov    %esp,%ebp
+80104663:	57                   	push   %edi
+80104664:	8b 55 08             	mov    0x8(%ebp),%edx
+80104667:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010466a:	53                   	push   %ebx
+8010466b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if ((int)dst%4 == 0 && n%4 == 0){
+8010466e:	89 d7                	mov    %edx,%edi
+80104670:	09 cf                	or     %ecx,%edi
+80104672:	83 e7 03             	and    $0x3,%edi
+80104675:	75 29                	jne    801046a0 <memset+0x40>
+    c &= 0xFF;
+80104677:	0f b6 f8             	movzbl %al,%edi
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+8010467a:	c1 e0 18             	shl    $0x18,%eax
+8010467d:	89 fb                	mov    %edi,%ebx
+8010467f:	c1 e9 02             	shr    $0x2,%ecx
+80104682:	c1 e3 10             	shl    $0x10,%ebx
+80104685:	09 d8                	or     %ebx,%eax
+80104687:	09 f8                	or     %edi,%eax
+80104689:	c1 e7 08             	shl    $0x8,%edi
+8010468c:	09 f8                	or     %edi,%eax
+  asm volatile("cld; rep stosl" :
+8010468e:	89 d7                	mov    %edx,%edi
+80104690:	fc                   	cld    
+80104691:	f3 ab                	rep stos %eax,%es:(%edi)
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+80104693:	5b                   	pop    %ebx
+80104694:	89 d0                	mov    %edx,%eax
+80104696:	5f                   	pop    %edi
+80104697:	5d                   	pop    %ebp
+80104698:	c3                   	ret    
+80104699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  asm volatile("cld; rep stosb" :
+801046a0:	89 d7                	mov    %edx,%edi
+801046a2:	fc                   	cld    
+801046a3:	f3 aa                	rep stos %al,%es:(%edi)
+801046a5:	5b                   	pop    %ebx
+801046a6:	89 d0                	mov    %edx,%eax
+801046a8:	5f                   	pop    %edi
+801046a9:	5d                   	pop    %ebp
+801046aa:	c3                   	ret    
+801046ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801046af:	90                   	nop
+
+801046b0 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+801046b0:	55                   	push   %ebp
+801046b1:	89 e5                	mov    %esp,%ebp
+801046b3:	56                   	push   %esi
+801046b4:	8b 75 10             	mov    0x10(%ebp),%esi
+801046b7:	8b 55 08             	mov    0x8(%ebp),%edx
+801046ba:	53                   	push   %ebx
+801046bb:	8b 45 0c             	mov    0xc(%ebp),%eax
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+801046be:	85 f6                	test   %esi,%esi
+801046c0:	74 2e                	je     801046f0 <memcmp+0x40>
+801046c2:	01 c6                	add    %eax,%esi
+801046c4:	eb 14                	jmp    801046da <memcmp+0x2a>
+801046c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046cd:	8d 76 00             	lea    0x0(%esi),%esi
+    if(*s1 != *s2)
+      return *s1 - *s2;
+    s1++, s2++;
+801046d0:	83 c0 01             	add    $0x1,%eax
+801046d3:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0){
+801046d6:	39 f0                	cmp    %esi,%eax
+801046d8:	74 16                	je     801046f0 <memcmp+0x40>
+    if(*s1 != *s2)
+801046da:	0f b6 0a             	movzbl (%edx),%ecx
+801046dd:	0f b6 18             	movzbl (%eax),%ebx
+801046e0:	38 d9                	cmp    %bl,%cl
+801046e2:	74 ec                	je     801046d0 <memcmp+0x20>
+      return *s1 - *s2;
+801046e4:	0f b6 c1             	movzbl %cl,%eax
+801046e7:	29 d8                	sub    %ebx,%eax
+  }
+
+  return 0;
+}
+801046e9:	5b                   	pop    %ebx
+801046ea:	5e                   	pop    %esi
+801046eb:	5d                   	pop    %ebp
+801046ec:	c3                   	ret    
+801046ed:	8d 76 00             	lea    0x0(%esi),%esi
+801046f0:	5b                   	pop    %ebx
+  return 0;
+801046f1:	31 c0                	xor    %eax,%eax
+}
+801046f3:	5e                   	pop    %esi
+801046f4:	5d                   	pop    %ebp
+801046f5:	c3                   	ret    
+801046f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104700 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+80104700:	55                   	push   %ebp
+80104701:	89 e5                	mov    %esp,%ebp
+80104703:	57                   	push   %edi
+80104704:	8b 55 08             	mov    0x8(%ebp),%edx
+80104707:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010470a:	56                   	push   %esi
+8010470b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+8010470e:	39 d6                	cmp    %edx,%esi
+80104710:	73 26                	jae    80104738 <memmove+0x38>
+80104712:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104715:	39 fa                	cmp    %edi,%edx
+80104717:	73 1f                	jae    80104738 <memmove+0x38>
+80104719:	8d 41 ff             	lea    -0x1(%ecx),%eax
+    s += n;
+    d += n;
+    while(n-- > 0)
+8010471c:	85 c9                	test   %ecx,%ecx
+8010471e:	74 0c                	je     8010472c <memmove+0x2c>
+      *--d = *--s;
+80104720:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80104724:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+    while(n-- > 0)
+80104727:	83 e8 01             	sub    $0x1,%eax
+8010472a:	73 f4                	jae    80104720 <memmove+0x20>
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+8010472c:	5e                   	pop    %esi
+8010472d:	89 d0                	mov    %edx,%eax
+8010472f:	5f                   	pop    %edi
+80104730:	5d                   	pop    %ebp
+80104731:	c3                   	ret    
+80104732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    while(n-- > 0)
+80104738:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+8010473b:	89 d7                	mov    %edx,%edi
+8010473d:	85 c9                	test   %ecx,%ecx
+8010473f:	74 eb                	je     8010472c <memmove+0x2c>
+80104741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      *d++ = *s++;
+80104748:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+    while(n-- > 0)
+80104749:	39 c6                	cmp    %eax,%esi
+8010474b:	75 fb                	jne    80104748 <memmove+0x48>
+}
+8010474d:	5e                   	pop    %esi
+8010474e:	89 d0                	mov    %edx,%eax
+80104750:	5f                   	pop    %edi
+80104751:	5d                   	pop    %ebp
+80104752:	c3                   	ret    
+80104753:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010475a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104760 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+  return memmove(dst, src, n);
+80104760:	eb 9e                	jmp    80104700 <memmove>
+80104762:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104770 <strncmp>:
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+80104770:	55                   	push   %ebp
+80104771:	89 e5                	mov    %esp,%ebp
+80104773:	56                   	push   %esi
+80104774:	8b 75 10             	mov    0x10(%ebp),%esi
+80104777:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010477a:	53                   	push   %ebx
+8010477b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(n > 0 && *p && *p == *q)
+8010477e:	85 f6                	test   %esi,%esi
+80104780:	74 2e                	je     801047b0 <strncmp+0x40>
+80104782:	01 d6                	add    %edx,%esi
+80104784:	eb 18                	jmp    8010479e <strncmp+0x2e>
+80104786:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010478d:	8d 76 00             	lea    0x0(%esi),%esi
+80104790:	38 d8                	cmp    %bl,%al
+80104792:	75 14                	jne    801047a8 <strncmp+0x38>
+    n--, p++, q++;
+80104794:	83 c2 01             	add    $0x1,%edx
+80104797:	83 c1 01             	add    $0x1,%ecx
+  while(n > 0 && *p && *p == *q)
+8010479a:	39 f2                	cmp    %esi,%edx
+8010479c:	74 12                	je     801047b0 <strncmp+0x40>
+8010479e:	0f b6 01             	movzbl (%ecx),%eax
+801047a1:	0f b6 1a             	movzbl (%edx),%ebx
+801047a4:	84 c0                	test   %al,%al
+801047a6:	75 e8                	jne    80104790 <strncmp+0x20>
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+801047a8:	29 d8                	sub    %ebx,%eax
+}
+801047aa:	5b                   	pop    %ebx
+801047ab:	5e                   	pop    %esi
+801047ac:	5d                   	pop    %ebp
+801047ad:	c3                   	ret    
+801047ae:	66 90                	xchg   %ax,%ax
+801047b0:	5b                   	pop    %ebx
+    return 0;
+801047b1:	31 c0                	xor    %eax,%eax
+}
+801047b3:	5e                   	pop    %esi
+801047b4:	5d                   	pop    %ebp
+801047b5:	c3                   	ret    
+801047b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801047c0 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+801047c0:	55                   	push   %ebp
+801047c1:	89 e5                	mov    %esp,%ebp
+801047c3:	57                   	push   %edi
+801047c4:	56                   	push   %esi
+801047c5:	8b 75 08             	mov    0x8(%ebp),%esi
+801047c8:	53                   	push   %ebx
+801047c9:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+801047cc:	89 f0                	mov    %esi,%eax
+801047ce:	eb 15                	jmp    801047e5 <strncpy+0x25>
+801047d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+801047d4:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801047d7:	83 c0 01             	add    $0x1,%eax
+801047da:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
+801047de:	88 50 ff             	mov    %dl,-0x1(%eax)
+801047e1:	84 d2                	test   %dl,%dl
+801047e3:	74 09                	je     801047ee <strncpy+0x2e>
+801047e5:	89 cb                	mov    %ecx,%ebx
+801047e7:	83 e9 01             	sub    $0x1,%ecx
+801047ea:	85 db                	test   %ebx,%ebx
+801047ec:	7f e2                	jg     801047d0 <strncpy+0x10>
+    ;
+  while(n-- > 0)
+801047ee:	89 c2                	mov    %eax,%edx
+801047f0:	85 c9                	test   %ecx,%ecx
+801047f2:	7e 17                	jle    8010480b <strncpy+0x4b>
+801047f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *s++ = 0;
+801047f8:	83 c2 01             	add    $0x1,%edx
+801047fb:	89 c1                	mov    %eax,%ecx
+801047fd:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
+  while(n-- > 0)
+80104801:	29 d1                	sub    %edx,%ecx
+80104803:	8d 4c 0b ff          	lea    -0x1(%ebx,%ecx,1),%ecx
+80104807:	85 c9                	test   %ecx,%ecx
+80104809:	7f ed                	jg     801047f8 <strncpy+0x38>
+  return os;
+}
+8010480b:	5b                   	pop    %ebx
+8010480c:	89 f0                	mov    %esi,%eax
+8010480e:	5e                   	pop    %esi
+8010480f:	5f                   	pop    %edi
+80104810:	5d                   	pop    %ebp
+80104811:	c3                   	ret    
+80104812:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104820 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+80104820:	55                   	push   %ebp
+80104821:	89 e5                	mov    %esp,%ebp
+80104823:	56                   	push   %esi
+80104824:	8b 55 10             	mov    0x10(%ebp),%edx
+80104827:	8b 75 08             	mov    0x8(%ebp),%esi
+8010482a:	53                   	push   %ebx
+8010482b:	8b 45 0c             	mov    0xc(%ebp),%eax
+  char *os;
+
+  os = s;
+  if(n <= 0)
+8010482e:	85 d2                	test   %edx,%edx
+80104830:	7e 25                	jle    80104857 <safestrcpy+0x37>
+80104832:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80104836:	89 f2                	mov    %esi,%edx
+80104838:	eb 16                	jmp    80104850 <safestrcpy+0x30>
+8010483a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+80104840:	0f b6 08             	movzbl (%eax),%ecx
+80104843:	83 c0 01             	add    $0x1,%eax
+80104846:	83 c2 01             	add    $0x1,%edx
+80104849:	88 4a ff             	mov    %cl,-0x1(%edx)
+8010484c:	84 c9                	test   %cl,%cl
+8010484e:	74 04                	je     80104854 <safestrcpy+0x34>
+80104850:	39 d8                	cmp    %ebx,%eax
+80104852:	75 ec                	jne    80104840 <safestrcpy+0x20>
+    ;
+  *s = 0;
+80104854:	c6 02 00             	movb   $0x0,(%edx)
+  return os;
+}
+80104857:	89 f0                	mov    %esi,%eax
+80104859:	5b                   	pop    %ebx
+8010485a:	5e                   	pop    %esi
+8010485b:	5d                   	pop    %ebp
+8010485c:	c3                   	ret    
+8010485d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104860 <strlen>:
+
+int
+strlen(const char *s)
+{
+80104860:	55                   	push   %ebp
+  int n;
+
+  for(n = 0; s[n]; n++)
+80104861:	31 c0                	xor    %eax,%eax
+{
+80104863:	89 e5                	mov    %esp,%ebp
+80104865:	8b 55 08             	mov    0x8(%ebp),%edx
+  for(n = 0; s[n]; n++)
+80104868:	80 3a 00             	cmpb   $0x0,(%edx)
+8010486b:	74 0c                	je     80104879 <strlen+0x19>
+8010486d:	8d 76 00             	lea    0x0(%esi),%esi
+80104870:	83 c0 01             	add    $0x1,%eax
+80104873:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104877:	75 f7                	jne    80104870 <strlen+0x10>
+    ;
+  return n;
+}
+80104879:	5d                   	pop    %ebp
+8010487a:	c3                   	ret    
+
+8010487b <swtch>:
+# a struct context, and save its address in *old.
+# Switch stacks to new and pop previously-saved registers.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+8010487b:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+8010487f:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-saved registers
+  pushl %ebp
+80104883:	55                   	push   %ebp
+  pushl %ebx
+80104884:	53                   	push   %ebx
+  pushl %esi
+80104885:	56                   	push   %esi
+  pushl %edi
+80104886:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+80104887:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+80104889:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-saved registers
+  popl %edi
+8010488b:	5f                   	pop    %edi
+  popl %esi
+8010488c:	5e                   	pop    %esi
+  popl %ebx
+8010488d:	5b                   	pop    %ebx
+  popl %ebp
+8010488e:	5d                   	pop    %ebp
+  ret
+8010488f:	c3                   	ret    
+
+80104890 <fetchint>:
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+80104890:	55                   	push   %ebp
+80104891:	89 e5                	mov    %esp,%ebp
+80104893:	53                   	push   %ebx
+80104894:	83 ec 04             	sub    $0x4,%esp
+80104897:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *curproc = myproc();
+8010489a:	e8 d1 f0 ff ff       	call   80103970 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+8010489f:	8b 00                	mov    (%eax),%eax
+801048a1:	39 d8                	cmp    %ebx,%eax
+801048a3:	76 1b                	jbe    801048c0 <fetchint+0x30>
+801048a5:	8d 53 04             	lea    0x4(%ebx),%edx
+801048a8:	39 d0                	cmp    %edx,%eax
+801048aa:	72 14                	jb     801048c0 <fetchint+0x30>
+    return -1;
+  *ip = *(int*)(addr);
+801048ac:	8b 45 0c             	mov    0xc(%ebp),%eax
+801048af:	8b 13                	mov    (%ebx),%edx
+801048b1:	89 10                	mov    %edx,(%eax)
+  return 0;
+801048b3:	31 c0                	xor    %eax,%eax
+}
+801048b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801048b8:	c9                   	leave  
+801048b9:	c3                   	ret    
+801048ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+801048c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801048c5:	eb ee                	jmp    801048b5 <fetchint+0x25>
+801048c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048ce:	66 90                	xchg   %ax,%ax
+
+801048d0 <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+801048d0:	55                   	push   %ebp
+801048d1:	89 e5                	mov    %esp,%ebp
+801048d3:	53                   	push   %ebx
+801048d4:	83 ec 04             	sub    $0x4,%esp
+801048d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  char *s, *ep;
+  struct proc *curproc = myproc();
+801048da:	e8 91 f0 ff ff       	call   80103970 <myproc>
+
+  if(addr >= curproc->sz)
+801048df:	39 18                	cmp    %ebx,(%eax)
+801048e1:	76 2d                	jbe    80104910 <fetchstr+0x40>
+    return -1;
+  *pp = (char*)addr;
+801048e3:	8b 55 0c             	mov    0xc(%ebp),%edx
+801048e6:	89 1a                	mov    %ebx,(%edx)
+  ep = (char*)curproc->sz;
+801048e8:	8b 10                	mov    (%eax),%edx
+  for(s = *pp; s < ep; s++){
+801048ea:	39 d3                	cmp    %edx,%ebx
+801048ec:	73 22                	jae    80104910 <fetchstr+0x40>
+801048ee:	89 d8                	mov    %ebx,%eax
+801048f0:	eb 0d                	jmp    801048ff <fetchstr+0x2f>
+801048f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801048f8:	83 c0 01             	add    $0x1,%eax
+801048fb:	39 c2                	cmp    %eax,%edx
+801048fd:	76 11                	jbe    80104910 <fetchstr+0x40>
+    if(*s == 0)
+801048ff:	80 38 00             	cmpb   $0x0,(%eax)
+80104902:	75 f4                	jne    801048f8 <fetchstr+0x28>
+      return s - *pp;
+80104904:	29 d8                	sub    %ebx,%eax
+  }
+  return -1;
+}
+80104906:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104909:	c9                   	leave  
+8010490a:	c3                   	ret    
+8010490b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010490f:	90                   	nop
+80104910:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    return -1;
+80104913:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104918:	c9                   	leave  
+80104919:	c3                   	ret    
+8010491a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104920 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+80104920:	55                   	push   %ebp
+80104921:	89 e5                	mov    %esp,%ebp
+80104923:	56                   	push   %esi
+80104924:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104925:	e8 46 f0 ff ff       	call   80103970 <myproc>
+8010492a:	8b 55 08             	mov    0x8(%ebp),%edx
+8010492d:	8b 40 18             	mov    0x18(%eax),%eax
+80104930:	8b 40 44             	mov    0x44(%eax),%eax
+80104933:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+80104936:	e8 35 f0 ff ff       	call   80103970 <myproc>
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+8010493b:	8d 73 04             	lea    0x4(%ebx),%esi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+8010493e:	8b 00                	mov    (%eax),%eax
+80104940:	39 c6                	cmp    %eax,%esi
+80104942:	73 1c                	jae    80104960 <argint+0x40>
+80104944:	8d 53 08             	lea    0x8(%ebx),%edx
+80104947:	39 d0                	cmp    %edx,%eax
+80104949:	72 15                	jb     80104960 <argint+0x40>
+  *ip = *(int*)(addr);
+8010494b:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010494e:	8b 53 04             	mov    0x4(%ebx),%edx
+80104951:	89 10                	mov    %edx,(%eax)
+  return 0;
+80104953:	31 c0                	xor    %eax,%eax
+}
+80104955:	5b                   	pop    %ebx
+80104956:	5e                   	pop    %esi
+80104957:	5d                   	pop    %ebp
+80104958:	c3                   	ret    
+80104959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104960:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104965:	eb ee                	jmp    80104955 <argint+0x35>
+80104967:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010496e:	66 90                	xchg   %ax,%ax
+
+80104970 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+80104970:	55                   	push   %ebp
+80104971:	89 e5                	mov    %esp,%ebp
+80104973:	57                   	push   %edi
+80104974:	56                   	push   %esi
+80104975:	53                   	push   %ebx
+80104976:	83 ec 0c             	sub    $0xc,%esp
+  int i;
+  struct proc *curproc = myproc();
+80104979:	e8 f2 ef ff ff       	call   80103970 <myproc>
+8010497e:	89 c6                	mov    %eax,%esi
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104980:	e8 eb ef ff ff       	call   80103970 <myproc>
+80104985:	8b 55 08             	mov    0x8(%ebp),%edx
+80104988:	8b 40 18             	mov    0x18(%eax),%eax
+8010498b:	8b 40 44             	mov    0x44(%eax),%eax
+8010498e:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+80104991:	e8 da ef ff ff       	call   80103970 <myproc>
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104996:	8d 7b 04             	lea    0x4(%ebx),%edi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104999:	8b 00                	mov    (%eax),%eax
+8010499b:	39 c7                	cmp    %eax,%edi
+8010499d:	73 31                	jae    801049d0 <argptr+0x60>
+8010499f:	8d 4b 08             	lea    0x8(%ebx),%ecx
+801049a2:	39 c8                	cmp    %ecx,%eax
+801049a4:	72 2a                	jb     801049d0 <argptr+0x60>
+ 
+  if(argint(n, &i) < 0)
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+801049a6:	8b 55 10             	mov    0x10(%ebp),%edx
+  *ip = *(int*)(addr);
+801049a9:	8b 43 04             	mov    0x4(%ebx),%eax
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+801049ac:	85 d2                	test   %edx,%edx
+801049ae:	78 20                	js     801049d0 <argptr+0x60>
+801049b0:	8b 16                	mov    (%esi),%edx
+801049b2:	39 c2                	cmp    %eax,%edx
+801049b4:	76 1a                	jbe    801049d0 <argptr+0x60>
+801049b6:	8b 5d 10             	mov    0x10(%ebp),%ebx
+801049b9:	01 c3                	add    %eax,%ebx
+801049bb:	39 da                	cmp    %ebx,%edx
+801049bd:	72 11                	jb     801049d0 <argptr+0x60>
+    return -1;
+  *pp = (char*)i;
+801049bf:	8b 55 0c             	mov    0xc(%ebp),%edx
+801049c2:	89 02                	mov    %eax,(%edx)
+  return 0;
+801049c4:	31 c0                	xor    %eax,%eax
+}
+801049c6:	83 c4 0c             	add    $0xc,%esp
+801049c9:	5b                   	pop    %ebx
+801049ca:	5e                   	pop    %esi
+801049cb:	5f                   	pop    %edi
+801049cc:	5d                   	pop    %ebp
+801049cd:	c3                   	ret    
+801049ce:	66 90                	xchg   %ax,%ax
+    return -1;
+801049d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801049d5:	eb ef                	jmp    801049c6 <argptr+0x56>
+801049d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049de:	66 90                	xchg   %ax,%ax
+
+801049e0 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+801049e0:	55                   	push   %ebp
+801049e1:	89 e5                	mov    %esp,%ebp
+801049e3:	56                   	push   %esi
+801049e4:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+801049e5:	e8 86 ef ff ff       	call   80103970 <myproc>
+801049ea:	8b 55 08             	mov    0x8(%ebp),%edx
+801049ed:	8b 40 18             	mov    0x18(%eax),%eax
+801049f0:	8b 40 44             	mov    0x44(%eax),%eax
+801049f3:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+801049f6:	e8 75 ef ff ff       	call   80103970 <myproc>
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+801049fb:	8d 73 04             	lea    0x4(%ebx),%esi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+801049fe:	8b 00                	mov    (%eax),%eax
+80104a00:	39 c6                	cmp    %eax,%esi
+80104a02:	73 44                	jae    80104a48 <argstr+0x68>
+80104a04:	8d 53 08             	lea    0x8(%ebx),%edx
+80104a07:	39 d0                	cmp    %edx,%eax
+80104a09:	72 3d                	jb     80104a48 <argstr+0x68>
+  *ip = *(int*)(addr);
+80104a0b:	8b 5b 04             	mov    0x4(%ebx),%ebx
+  struct proc *curproc = myproc();
+80104a0e:	e8 5d ef ff ff       	call   80103970 <myproc>
+  if(addr >= curproc->sz)
+80104a13:	3b 18                	cmp    (%eax),%ebx
+80104a15:	73 31                	jae    80104a48 <argstr+0x68>
+  *pp = (char*)addr;
+80104a17:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104a1a:	89 1a                	mov    %ebx,(%edx)
+  ep = (char*)curproc->sz;
+80104a1c:	8b 10                	mov    (%eax),%edx
+  for(s = *pp; s < ep; s++){
+80104a1e:	39 d3                	cmp    %edx,%ebx
+80104a20:	73 26                	jae    80104a48 <argstr+0x68>
+80104a22:	89 d8                	mov    %ebx,%eax
+80104a24:	eb 11                	jmp    80104a37 <argstr+0x57>
+80104a26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a2d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a30:	83 c0 01             	add    $0x1,%eax
+80104a33:	39 c2                	cmp    %eax,%edx
+80104a35:	76 11                	jbe    80104a48 <argstr+0x68>
+    if(*s == 0)
+80104a37:	80 38 00             	cmpb   $0x0,(%eax)
+80104a3a:	75 f4                	jne    80104a30 <argstr+0x50>
+      return s - *pp;
+80104a3c:	29 d8                	sub    %ebx,%eax
+  int addr;
+  if(argint(n, &addr) < 0)
+    return -1;
+  return fetchstr(addr, pp);
+}
+80104a3e:	5b                   	pop    %ebx
+80104a3f:	5e                   	pop    %esi
+80104a40:	5d                   	pop    %ebp
+80104a41:	c3                   	ret    
+80104a42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a48:	5b                   	pop    %ebx
+    return -1;
+80104a49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104a4e:	5e                   	pop    %esi
+80104a4f:	5d                   	pop    %ebp
+80104a50:	c3                   	ret    
+80104a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a5f:	90                   	nop
+
+80104a60 <syscall>:
+[SYS_close]   sys_close,
+};
+
+void
+syscall(void)
+{
+80104a60:	55                   	push   %ebp
+80104a61:	89 e5                	mov    %esp,%ebp
+80104a63:	53                   	push   %ebx
+80104a64:	83 ec 04             	sub    $0x4,%esp
+  int num;
+  struct proc *curproc = myproc();
+80104a67:	e8 04 ef ff ff       	call   80103970 <myproc>
+80104a6c:	89 c3                	mov    %eax,%ebx
+
+  num = curproc->tf->eax;
+80104a6e:	8b 40 18             	mov    0x18(%eax),%eax
+80104a71:	8b 40 1c             	mov    0x1c(%eax),%eax
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+80104a74:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104a77:	83 fa 14             	cmp    $0x14,%edx
+80104a7a:	77 24                	ja     80104aa0 <syscall+0x40>
+80104a7c:	8b 14 85 e0 78 10 80 	mov    -0x7fef8720(,%eax,4),%edx
+80104a83:	85 d2                	test   %edx,%edx
+80104a85:	74 19                	je     80104aa0 <syscall+0x40>
+    curproc->tf->eax = syscalls[num]();
+80104a87:	ff d2                	call   *%edx
+80104a89:	89 c2                	mov    %eax,%edx
+80104a8b:	8b 43 18             	mov    0x18(%ebx),%eax
+80104a8e:	89 50 1c             	mov    %edx,0x1c(%eax)
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+  }
+}
+80104a91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104a94:	c9                   	leave  
+80104a95:	c3                   	ret    
+80104a96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a9d:	8d 76 00             	lea    0x0(%esi),%esi
+    cprintf("%d %s: unknown sys call %d\n",
+80104aa0:	50                   	push   %eax
+            curproc->pid, curproc->name, num);
+80104aa1:	8d 43 6c             	lea    0x6c(%ebx),%eax
+    cprintf("%d %s: unknown sys call %d\n",
+80104aa4:	50                   	push   %eax
+80104aa5:	ff 73 10             	push   0x10(%ebx)
+80104aa8:	68 bd 78 10 80       	push   $0x801078bd
+80104aad:	e8 ee bb ff ff       	call   801006a0 <cprintf>
+    curproc->tf->eax = -1;
+80104ab2:	8b 43 18             	mov    0x18(%ebx),%eax
+80104ab5:	83 c4 10             	add    $0x10,%esp
+80104ab8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104abf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104ac2:	c9                   	leave  
+80104ac3:	c3                   	ret    
+80104ac4:	66 90                	xchg   %ax,%ax
+80104ac6:	66 90                	xchg   %ax,%ax
+80104ac8:	66 90                	xchg   %ax,%ax
+80104aca:	66 90                	xchg   %ax,%ax
+80104acc:	66 90                	xchg   %ax,%ax
+80104ace:	66 90                	xchg   %ax,%ax
+
+80104ad0 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80104ad0:	55                   	push   %ebp
+80104ad1:	89 e5                	mov    %esp,%ebp
+80104ad3:	57                   	push   %edi
+80104ad4:	56                   	push   %esi
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80104ad5:	8d 7d da             	lea    -0x26(%ebp),%edi
+{
+80104ad8:	53                   	push   %ebx
+80104ad9:	83 ec 34             	sub    $0x34,%esp
+80104adc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80104adf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  if((dp = nameiparent(path, name)) == 0)
+80104ae2:	57                   	push   %edi
+80104ae3:	50                   	push   %eax
+{
+80104ae4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104ae7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  if((dp = nameiparent(path, name)) == 0)
+80104aea:	e8 d1 d5 ff ff       	call   801020c0 <nameiparent>
+80104aef:	83 c4 10             	add    $0x10,%esp
+80104af2:	85 c0                	test   %eax,%eax
+80104af4:	0f 84 46 01 00 00    	je     80104c40 <create+0x170>
+    return 0;
+  ilock(dp);
+80104afa:	83 ec 0c             	sub    $0xc,%esp
+80104afd:	89 c3                	mov    %eax,%ebx
+80104aff:	50                   	push   %eax
+80104b00:	e8 7b cc ff ff       	call   80101780 <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80104b05:	83 c4 0c             	add    $0xc,%esp
+80104b08:	6a 00                	push   $0x0
+80104b0a:	57                   	push   %edi
+80104b0b:	53                   	push   %ebx
+80104b0c:	e8 cf d1 ff ff       	call   80101ce0 <dirlookup>
+80104b11:	83 c4 10             	add    $0x10,%esp
+80104b14:	89 c6                	mov    %eax,%esi
+80104b16:	85 c0                	test   %eax,%eax
+80104b18:	74 56                	je     80104b70 <create+0xa0>
+    iunlockput(dp);
+80104b1a:	83 ec 0c             	sub    $0xc,%esp
+80104b1d:	53                   	push   %ebx
+80104b1e:	e8 ed ce ff ff       	call   80101a10 <iunlockput>
+    ilock(ip);
+80104b23:	89 34 24             	mov    %esi,(%esp)
+80104b26:	e8 55 cc ff ff       	call   80101780 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+80104b2b:	83 c4 10             	add    $0x10,%esp
+80104b2e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104b33:	75 1b                	jne    80104b50 <create+0x80>
+80104b35:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80104b3a:	75 14                	jne    80104b50 <create+0x80>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+80104b3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104b3f:	89 f0                	mov    %esi,%eax
+80104b41:	5b                   	pop    %ebx
+80104b42:	5e                   	pop    %esi
+80104b43:	5f                   	pop    %edi
+80104b44:	5d                   	pop    %ebp
+80104b45:	c3                   	ret    
+80104b46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b4d:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(ip);
+80104b50:	83 ec 0c             	sub    $0xc,%esp
+80104b53:	56                   	push   %esi
+    return 0;
+80104b54:	31 f6                	xor    %esi,%esi
+    iunlockput(ip);
+80104b56:	e8 b5 ce ff ff       	call   80101a10 <iunlockput>
+    return 0;
+80104b5b:	83 c4 10             	add    $0x10,%esp
+}
+80104b5e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104b61:	89 f0                	mov    %esi,%eax
+80104b63:	5b                   	pop    %ebx
+80104b64:	5e                   	pop    %esi
+80104b65:	5f                   	pop    %edi
+80104b66:	5d                   	pop    %ebp
+80104b67:	c3                   	ret    
+80104b68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b6f:	90                   	nop
+  if((ip = ialloc(dp->dev, type)) == 0)
+80104b70:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104b74:	83 ec 08             	sub    $0x8,%esp
+80104b77:	50                   	push   %eax
+80104b78:	ff 33                	push   (%ebx)
+80104b7a:	e8 91 ca ff ff       	call   80101610 <ialloc>
+80104b7f:	83 c4 10             	add    $0x10,%esp
+80104b82:	89 c6                	mov    %eax,%esi
+80104b84:	85 c0                	test   %eax,%eax
+80104b86:	0f 84 cd 00 00 00    	je     80104c59 <create+0x189>
+  ilock(ip);
+80104b8c:	83 ec 0c             	sub    $0xc,%esp
+80104b8f:	50                   	push   %eax
+80104b90:	e8 eb cb ff ff       	call   80101780 <ilock>
+  ip->major = major;
+80104b95:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104b99:	66 89 46 52          	mov    %ax,0x52(%esi)
+  ip->minor = minor;
+80104b9d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104ba1:	66 89 46 54          	mov    %ax,0x54(%esi)
+  ip->nlink = 1;
+80104ba5:	b8 01 00 00 00       	mov    $0x1,%eax
+80104baa:	66 89 46 56          	mov    %ax,0x56(%esi)
+  iupdate(ip);
+80104bae:	89 34 24             	mov    %esi,(%esp)
+80104bb1:	e8 1a cb ff ff       	call   801016d0 <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+80104bb6:	83 c4 10             	add    $0x10,%esp
+80104bb9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104bbe:	74 30                	je     80104bf0 <create+0x120>
+  if(dirlink(dp, name, ip->inum) < 0)
+80104bc0:	83 ec 04             	sub    $0x4,%esp
+80104bc3:	ff 76 04             	push   0x4(%esi)
+80104bc6:	57                   	push   %edi
+80104bc7:	53                   	push   %ebx
+80104bc8:	e8 13 d4 ff ff       	call   80101fe0 <dirlink>
+80104bcd:	83 c4 10             	add    $0x10,%esp
+80104bd0:	85 c0                	test   %eax,%eax
+80104bd2:	78 78                	js     80104c4c <create+0x17c>
+  iunlockput(dp);
+80104bd4:	83 ec 0c             	sub    $0xc,%esp
+80104bd7:	53                   	push   %ebx
+80104bd8:	e8 33 ce ff ff       	call   80101a10 <iunlockput>
+  return ip;
+80104bdd:	83 c4 10             	add    $0x10,%esp
+}
+80104be0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104be3:	89 f0                	mov    %esi,%eax
+80104be5:	5b                   	pop    %ebx
+80104be6:	5e                   	pop    %esi
+80104be7:	5f                   	pop    %edi
+80104be8:	5d                   	pop    %ebp
+80104be9:	c3                   	ret    
+80104bea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iupdate(dp);
+80104bf0:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink++;  // for ".."
+80104bf3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+    iupdate(dp);
+80104bf8:	53                   	push   %ebx
+80104bf9:	e8 d2 ca ff ff       	call   801016d0 <iupdate>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+80104bfe:	83 c4 0c             	add    $0xc,%esp
+80104c01:	ff 76 04             	push   0x4(%esi)
+80104c04:	68 54 79 10 80       	push   $0x80107954
+80104c09:	56                   	push   %esi
+80104c0a:	e8 d1 d3 ff ff       	call   80101fe0 <dirlink>
+80104c0f:	83 c4 10             	add    $0x10,%esp
+80104c12:	85 c0                	test   %eax,%eax
+80104c14:	78 18                	js     80104c2e <create+0x15e>
+80104c16:	83 ec 04             	sub    $0x4,%esp
+80104c19:	ff 73 04             	push   0x4(%ebx)
+80104c1c:	68 53 79 10 80       	push   $0x80107953
+80104c21:	56                   	push   %esi
+80104c22:	e8 b9 d3 ff ff       	call   80101fe0 <dirlink>
+80104c27:	83 c4 10             	add    $0x10,%esp
+80104c2a:	85 c0                	test   %eax,%eax
+80104c2c:	79 92                	jns    80104bc0 <create+0xf0>
+      panic("create dots");
+80104c2e:	83 ec 0c             	sub    $0xc,%esp
+80104c31:	68 47 79 10 80       	push   $0x80107947
+80104c36:	e8 45 b7 ff ff       	call   80100380 <panic>
+80104c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c3f:	90                   	nop
+}
+80104c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80104c43:	31 f6                	xor    %esi,%esi
+}
+80104c45:	5b                   	pop    %ebx
+80104c46:	89 f0                	mov    %esi,%eax
+80104c48:	5e                   	pop    %esi
+80104c49:	5f                   	pop    %edi
+80104c4a:	5d                   	pop    %ebp
+80104c4b:	c3                   	ret    
+    panic("create: dirlink");
+80104c4c:	83 ec 0c             	sub    $0xc,%esp
+80104c4f:	68 56 79 10 80       	push   $0x80107956
+80104c54:	e8 27 b7 ff ff       	call   80100380 <panic>
+    panic("create: ialloc");
+80104c59:	83 ec 0c             	sub    $0xc,%esp
+80104c5c:	68 38 79 10 80       	push   $0x80107938
+80104c61:	e8 1a b7 ff ff       	call   80100380 <panic>
+80104c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104c70 <sys_dup>:
+{
+80104c70:	55                   	push   %ebp
+80104c71:	89 e5                	mov    %esp,%ebp
+80104c73:	56                   	push   %esi
+80104c74:	53                   	push   %ebx
+  if(argint(n, &fd) < 0)
+80104c75:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80104c78:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104c7b:	50                   	push   %eax
+80104c7c:	6a 00                	push   $0x0
+80104c7e:	e8 9d fc ff ff       	call   80104920 <argint>
+80104c83:	83 c4 10             	add    $0x10,%esp
+80104c86:	85 c0                	test   %eax,%eax
+80104c88:	78 36                	js     80104cc0 <sys_dup+0x50>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104c8a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104c8e:	77 30                	ja     80104cc0 <sys_dup+0x50>
+80104c90:	e8 db ec ff ff       	call   80103970 <myproc>
+80104c95:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104c98:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80104c9c:	85 f6                	test   %esi,%esi
+80104c9e:	74 20                	je     80104cc0 <sys_dup+0x50>
+  struct proc *curproc = myproc();
+80104ca0:	e8 cb ec ff ff       	call   80103970 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+80104ca5:	31 db                	xor    %ebx,%ebx
+80104ca7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cae:	66 90                	xchg   %ax,%ax
+    if(curproc->ofile[fd] == 0){
+80104cb0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80104cb4:	85 d2                	test   %edx,%edx
+80104cb6:	74 18                	je     80104cd0 <sys_dup+0x60>
+  for(fd = 0; fd < NOFILE; fd++){
+80104cb8:	83 c3 01             	add    $0x1,%ebx
+80104cbb:	83 fb 10             	cmp    $0x10,%ebx
+80104cbe:	75 f0                	jne    80104cb0 <sys_dup+0x40>
+}
+80104cc0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80104cc3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80104cc8:	89 d8                	mov    %ebx,%eax
+80104cca:	5b                   	pop    %ebx
+80104ccb:	5e                   	pop    %esi
+80104ccc:	5d                   	pop    %ebp
+80104ccd:	c3                   	ret    
+80104cce:	66 90                	xchg   %ax,%ax
+  filedup(f);
+80104cd0:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+80104cd3:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+  filedup(f);
+80104cd7:	56                   	push   %esi
+80104cd8:	e8 c3 c1 ff ff       	call   80100ea0 <filedup>
+  return fd;
+80104cdd:	83 c4 10             	add    $0x10,%esp
+}
+80104ce0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ce3:	89 d8                	mov    %ebx,%eax
+80104ce5:	5b                   	pop    %ebx
+80104ce6:	5e                   	pop    %esi
+80104ce7:	5d                   	pop    %ebp
+80104ce8:	c3                   	ret    
+80104ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104cf0 <sys_read>:
+{
+80104cf0:	55                   	push   %ebp
+80104cf1:	89 e5                	mov    %esp,%ebp
+80104cf3:	56                   	push   %esi
+80104cf4:	53                   	push   %ebx
+  if(argint(n, &fd) < 0)
+80104cf5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+{
+80104cf8:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104cfb:	53                   	push   %ebx
+80104cfc:	6a 00                	push   $0x0
+80104cfe:	e8 1d fc ff ff       	call   80104920 <argint>
+80104d03:	83 c4 10             	add    $0x10,%esp
+80104d06:	85 c0                	test   %eax,%eax
+80104d08:	78 5e                	js     80104d68 <sys_read+0x78>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104d0a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104d0e:	77 58                	ja     80104d68 <sys_read+0x78>
+80104d10:	e8 5b ec ff ff       	call   80103970 <myproc>
+80104d15:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104d18:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80104d1c:	85 f6                	test   %esi,%esi
+80104d1e:	74 48                	je     80104d68 <sys_read+0x78>
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104d20:	83 ec 08             	sub    $0x8,%esp
+80104d23:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104d26:	50                   	push   %eax
+80104d27:	6a 02                	push   $0x2
+80104d29:	e8 f2 fb ff ff       	call   80104920 <argint>
+80104d2e:	83 c4 10             	add    $0x10,%esp
+80104d31:	85 c0                	test   %eax,%eax
+80104d33:	78 33                	js     80104d68 <sys_read+0x78>
+80104d35:	83 ec 04             	sub    $0x4,%esp
+80104d38:	ff 75 f0             	push   -0x10(%ebp)
+80104d3b:	53                   	push   %ebx
+80104d3c:	6a 01                	push   $0x1
+80104d3e:	e8 2d fc ff ff       	call   80104970 <argptr>
+80104d43:	83 c4 10             	add    $0x10,%esp
+80104d46:	85 c0                	test   %eax,%eax
+80104d48:	78 1e                	js     80104d68 <sys_read+0x78>
+  return fileread(f, p, n);
+80104d4a:	83 ec 04             	sub    $0x4,%esp
+80104d4d:	ff 75 f0             	push   -0x10(%ebp)
+80104d50:	ff 75 f4             	push   -0xc(%ebp)
+80104d53:	56                   	push   %esi
+80104d54:	e8 c7 c2 ff ff       	call   80101020 <fileread>
+80104d59:	83 c4 10             	add    $0x10,%esp
+}
+80104d5c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104d5f:	5b                   	pop    %ebx
+80104d60:	5e                   	pop    %esi
+80104d61:	5d                   	pop    %ebp
+80104d62:	c3                   	ret    
+80104d63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104d67:	90                   	nop
+    return -1;
+80104d68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104d6d:	eb ed                	jmp    80104d5c <sys_read+0x6c>
+80104d6f:	90                   	nop
+
+80104d70 <sys_write>:
+{
+80104d70:	55                   	push   %ebp
+80104d71:	89 e5                	mov    %esp,%ebp
+80104d73:	56                   	push   %esi
+80104d74:	53                   	push   %ebx
+  if(argint(n, &fd) < 0)
+80104d75:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+{
+80104d78:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104d7b:	53                   	push   %ebx
+80104d7c:	6a 00                	push   $0x0
+80104d7e:	e8 9d fb ff ff       	call   80104920 <argint>
+80104d83:	83 c4 10             	add    $0x10,%esp
+80104d86:	85 c0                	test   %eax,%eax
+80104d88:	78 5e                	js     80104de8 <sys_write+0x78>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104d8a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104d8e:	77 58                	ja     80104de8 <sys_write+0x78>
+80104d90:	e8 db eb ff ff       	call   80103970 <myproc>
+80104d95:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104d98:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80104d9c:	85 f6                	test   %esi,%esi
+80104d9e:	74 48                	je     80104de8 <sys_write+0x78>
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104da0:	83 ec 08             	sub    $0x8,%esp
+80104da3:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104da6:	50                   	push   %eax
+80104da7:	6a 02                	push   $0x2
+80104da9:	e8 72 fb ff ff       	call   80104920 <argint>
+80104dae:	83 c4 10             	add    $0x10,%esp
+80104db1:	85 c0                	test   %eax,%eax
+80104db3:	78 33                	js     80104de8 <sys_write+0x78>
+80104db5:	83 ec 04             	sub    $0x4,%esp
+80104db8:	ff 75 f0             	push   -0x10(%ebp)
+80104dbb:	53                   	push   %ebx
+80104dbc:	6a 01                	push   $0x1
+80104dbe:	e8 ad fb ff ff       	call   80104970 <argptr>
+80104dc3:	83 c4 10             	add    $0x10,%esp
+80104dc6:	85 c0                	test   %eax,%eax
+80104dc8:	78 1e                	js     80104de8 <sys_write+0x78>
+  return filewrite(f, p, n);
+80104dca:	83 ec 04             	sub    $0x4,%esp
+80104dcd:	ff 75 f0             	push   -0x10(%ebp)
+80104dd0:	ff 75 f4             	push   -0xc(%ebp)
+80104dd3:	56                   	push   %esi
+80104dd4:	e8 d7 c2 ff ff       	call   801010b0 <filewrite>
+80104dd9:	83 c4 10             	add    $0x10,%esp
+}
+80104ddc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ddf:	5b                   	pop    %ebx
+80104de0:	5e                   	pop    %esi
+80104de1:	5d                   	pop    %ebp
+80104de2:	c3                   	ret    
+80104de3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104de7:	90                   	nop
+    return -1;
+80104de8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104ded:	eb ed                	jmp    80104ddc <sys_write+0x6c>
+80104def:	90                   	nop
+
+80104df0 <sys_close>:
+{
+80104df0:	55                   	push   %ebp
+80104df1:	89 e5                	mov    %esp,%ebp
+80104df3:	56                   	push   %esi
+80104df4:	53                   	push   %ebx
+  if(argint(n, &fd) < 0)
+80104df5:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80104df8:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104dfb:	50                   	push   %eax
+80104dfc:	6a 00                	push   $0x0
+80104dfe:	e8 1d fb ff ff       	call   80104920 <argint>
+80104e03:	83 c4 10             	add    $0x10,%esp
+80104e06:	85 c0                	test   %eax,%eax
+80104e08:	78 3e                	js     80104e48 <sys_close+0x58>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104e0a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104e0e:	77 38                	ja     80104e48 <sys_close+0x58>
+80104e10:	e8 5b eb ff ff       	call   80103970 <myproc>
+80104e15:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104e18:	8d 5a 08             	lea    0x8(%edx),%ebx
+80104e1b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
+80104e1f:	85 f6                	test   %esi,%esi
+80104e21:	74 25                	je     80104e48 <sys_close+0x58>
+  myproc()->ofile[fd] = 0;
+80104e23:	e8 48 eb ff ff       	call   80103970 <myproc>
+  fileclose(f);
+80104e28:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80104e2b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
+80104e32:	00 
+  fileclose(f);
+80104e33:	56                   	push   %esi
+80104e34:	e8 b7 c0 ff ff       	call   80100ef0 <fileclose>
+  return 0;
+80104e39:	83 c4 10             	add    $0x10,%esp
+80104e3c:	31 c0                	xor    %eax,%eax
+}
+80104e3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104e41:	5b                   	pop    %ebx
+80104e42:	5e                   	pop    %esi
+80104e43:	5d                   	pop    %ebp
+80104e44:	c3                   	ret    
+80104e45:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104e48:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e4d:	eb ef                	jmp    80104e3e <sys_close+0x4e>
+80104e4f:	90                   	nop
+
+80104e50 <sys_fstat>:
+{
+80104e50:	55                   	push   %ebp
+80104e51:	89 e5                	mov    %esp,%ebp
+80104e53:	56                   	push   %esi
+80104e54:	53                   	push   %ebx
+  if(argint(n, &fd) < 0)
+80104e55:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+{
+80104e58:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104e5b:	53                   	push   %ebx
+80104e5c:	6a 00                	push   $0x0
+80104e5e:	e8 bd fa ff ff       	call   80104920 <argint>
+80104e63:	83 c4 10             	add    $0x10,%esp
+80104e66:	85 c0                	test   %eax,%eax
+80104e68:	78 46                	js     80104eb0 <sys_fstat+0x60>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104e6a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104e6e:	77 40                	ja     80104eb0 <sys_fstat+0x60>
+80104e70:	e8 fb ea ff ff       	call   80103970 <myproc>
+80104e75:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104e78:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80104e7c:	85 f6                	test   %esi,%esi
+80104e7e:	74 30                	je     80104eb0 <sys_fstat+0x60>
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80104e80:	83 ec 04             	sub    $0x4,%esp
+80104e83:	6a 14                	push   $0x14
+80104e85:	53                   	push   %ebx
+80104e86:	6a 01                	push   $0x1
+80104e88:	e8 e3 fa ff ff       	call   80104970 <argptr>
+80104e8d:	83 c4 10             	add    $0x10,%esp
+80104e90:	85 c0                	test   %eax,%eax
+80104e92:	78 1c                	js     80104eb0 <sys_fstat+0x60>
+  return filestat(f, st);
+80104e94:	83 ec 08             	sub    $0x8,%esp
+80104e97:	ff 75 f4             	push   -0xc(%ebp)
+80104e9a:	56                   	push   %esi
+80104e9b:	e8 30 c1 ff ff       	call   80100fd0 <filestat>
+80104ea0:	83 c4 10             	add    $0x10,%esp
+}
+80104ea3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ea6:	5b                   	pop    %ebx
+80104ea7:	5e                   	pop    %esi
+80104ea8:	5d                   	pop    %ebp
+80104ea9:	c3                   	ret    
+80104eaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80104eb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104eb5:	eb ec                	jmp    80104ea3 <sys_fstat+0x53>
+80104eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ebe:	66 90                	xchg   %ax,%ax
+
+80104ec0 <sys_link>:
+{
+80104ec0:	55                   	push   %ebp
+80104ec1:	89 e5                	mov    %esp,%ebp
+80104ec3:	57                   	push   %edi
+80104ec4:	56                   	push   %esi
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104ec5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+{
+80104ec8:	53                   	push   %ebx
+80104ec9:	83 ec 34             	sub    $0x34,%esp
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104ecc:	50                   	push   %eax
+80104ecd:	6a 00                	push   $0x0
+80104ecf:	e8 0c fb ff ff       	call   801049e0 <argstr>
+80104ed4:	83 c4 10             	add    $0x10,%esp
+80104ed7:	85 c0                	test   %eax,%eax
+80104ed9:	0f 88 fb 00 00 00    	js     80104fda <sys_link+0x11a>
+80104edf:	83 ec 08             	sub    $0x8,%esp
+80104ee2:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80104ee5:	50                   	push   %eax
+80104ee6:	6a 01                	push   $0x1
+80104ee8:	e8 f3 fa ff ff       	call   801049e0 <argstr>
+80104eed:	83 c4 10             	add    $0x10,%esp
+80104ef0:	85 c0                	test   %eax,%eax
+80104ef2:	0f 88 e2 00 00 00    	js     80104fda <sys_link+0x11a>
+  begin_op();
+80104ef8:	e8 63 de ff ff       	call   80102d60 <begin_op>
+  if((ip = namei(old)) == 0){
+80104efd:	83 ec 0c             	sub    $0xc,%esp
+80104f00:	ff 75 d4             	push   -0x2c(%ebp)
+80104f03:	e8 98 d1 ff ff       	call   801020a0 <namei>
+80104f08:	83 c4 10             	add    $0x10,%esp
+80104f0b:	89 c3                	mov    %eax,%ebx
+80104f0d:	85 c0                	test   %eax,%eax
+80104f0f:	0f 84 e4 00 00 00    	je     80104ff9 <sys_link+0x139>
+  ilock(ip);
+80104f15:	83 ec 0c             	sub    $0xc,%esp
+80104f18:	50                   	push   %eax
+80104f19:	e8 62 c8 ff ff       	call   80101780 <ilock>
+  if(ip->type == T_DIR){
+80104f1e:	83 c4 10             	add    $0x10,%esp
+80104f21:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104f26:	0f 84 b5 00 00 00    	je     80104fe1 <sys_link+0x121>
+  iupdate(ip);
+80104f2c:	83 ec 0c             	sub    $0xc,%esp
+  ip->nlink++;
+80104f2f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+  if((dp = nameiparent(new, name)) == 0)
+80104f34:	8d 7d da             	lea    -0x26(%ebp),%edi
+  iupdate(ip);
+80104f37:	53                   	push   %ebx
+80104f38:	e8 93 c7 ff ff       	call   801016d0 <iupdate>
+  iunlock(ip);
+80104f3d:	89 1c 24             	mov    %ebx,(%esp)
+80104f40:	e8 1b c9 ff ff       	call   80101860 <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+80104f45:	58                   	pop    %eax
+80104f46:	5a                   	pop    %edx
+80104f47:	57                   	push   %edi
+80104f48:	ff 75 d0             	push   -0x30(%ebp)
+80104f4b:	e8 70 d1 ff ff       	call   801020c0 <nameiparent>
+80104f50:	83 c4 10             	add    $0x10,%esp
+80104f53:	89 c6                	mov    %eax,%esi
+80104f55:	85 c0                	test   %eax,%eax
+80104f57:	74 5b                	je     80104fb4 <sys_link+0xf4>
+  ilock(dp);
+80104f59:	83 ec 0c             	sub    $0xc,%esp
+80104f5c:	50                   	push   %eax
+80104f5d:	e8 1e c8 ff ff       	call   80101780 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+80104f62:	8b 03                	mov    (%ebx),%eax
+80104f64:	83 c4 10             	add    $0x10,%esp
+80104f67:	39 06                	cmp    %eax,(%esi)
+80104f69:	75 3d                	jne    80104fa8 <sys_link+0xe8>
+80104f6b:	83 ec 04             	sub    $0x4,%esp
+80104f6e:	ff 73 04             	push   0x4(%ebx)
+80104f71:	57                   	push   %edi
+80104f72:	56                   	push   %esi
+80104f73:	e8 68 d0 ff ff       	call   80101fe0 <dirlink>
+80104f78:	83 c4 10             	add    $0x10,%esp
+80104f7b:	85 c0                	test   %eax,%eax
+80104f7d:	78 29                	js     80104fa8 <sys_link+0xe8>
+  iunlockput(dp);
+80104f7f:	83 ec 0c             	sub    $0xc,%esp
+80104f82:	56                   	push   %esi
+80104f83:	e8 88 ca ff ff       	call   80101a10 <iunlockput>
+  iput(ip);
+80104f88:	89 1c 24             	mov    %ebx,(%esp)
+80104f8b:	e8 20 c9 ff ff       	call   801018b0 <iput>
+  end_op();
+80104f90:	e8 3b de ff ff       	call   80102dd0 <end_op>
+  return 0;
+80104f95:	83 c4 10             	add    $0x10,%esp
+80104f98:	31 c0                	xor    %eax,%eax
+}
+80104f9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f9d:	5b                   	pop    %ebx
+80104f9e:	5e                   	pop    %esi
+80104f9f:	5f                   	pop    %edi
+80104fa0:	5d                   	pop    %ebp
+80104fa1:	c3                   	ret    
+80104fa2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iunlockput(dp);
+80104fa8:	83 ec 0c             	sub    $0xc,%esp
+80104fab:	56                   	push   %esi
+80104fac:	e8 5f ca ff ff       	call   80101a10 <iunlockput>
+    goto bad;
+80104fb1:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+80104fb4:	83 ec 0c             	sub    $0xc,%esp
+80104fb7:	53                   	push   %ebx
+80104fb8:	e8 c3 c7 ff ff       	call   80101780 <ilock>
+  ip->nlink--;
+80104fbd:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80104fc2:	89 1c 24             	mov    %ebx,(%esp)
+80104fc5:	e8 06 c7 ff ff       	call   801016d0 <iupdate>
+  iunlockput(ip);
+80104fca:	89 1c 24             	mov    %ebx,(%esp)
+80104fcd:	e8 3e ca ff ff       	call   80101a10 <iunlockput>
+  end_op();
+80104fd2:	e8 f9 dd ff ff       	call   80102dd0 <end_op>
+  return -1;
+80104fd7:	83 c4 10             	add    $0x10,%esp
+80104fda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104fdf:	eb b9                	jmp    80104f9a <sys_link+0xda>
+    iunlockput(ip);
+80104fe1:	83 ec 0c             	sub    $0xc,%esp
+80104fe4:	53                   	push   %ebx
+80104fe5:	e8 26 ca ff ff       	call   80101a10 <iunlockput>
+    end_op();
+80104fea:	e8 e1 dd ff ff       	call   80102dd0 <end_op>
+    return -1;
+80104fef:	83 c4 10             	add    $0x10,%esp
+80104ff2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104ff7:	eb a1                	jmp    80104f9a <sys_link+0xda>
+    end_op();
+80104ff9:	e8 d2 dd ff ff       	call   80102dd0 <end_op>
+    return -1;
+80104ffe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105003:	eb 95                	jmp    80104f9a <sys_link+0xda>
+80105005:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010500c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105010 <sys_unlink>:
+{
+80105010:	55                   	push   %ebp
+80105011:	89 e5                	mov    %esp,%ebp
+80105013:	57                   	push   %edi
+80105014:	56                   	push   %esi
+  if(argstr(0, &path) < 0)
+80105015:	8d 45 c0             	lea    -0x40(%ebp),%eax
+{
+80105018:	53                   	push   %ebx
+80105019:	83 ec 54             	sub    $0x54,%esp
+  if(argstr(0, &path) < 0)
+8010501c:	50                   	push   %eax
+8010501d:	6a 00                	push   $0x0
+8010501f:	e8 bc f9 ff ff       	call   801049e0 <argstr>
+80105024:	83 c4 10             	add    $0x10,%esp
+80105027:	85 c0                	test   %eax,%eax
+80105029:	0f 88 7a 01 00 00    	js     801051a9 <sys_unlink+0x199>
+  begin_op();
+8010502f:	e8 2c dd ff ff       	call   80102d60 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+80105034:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80105037:	83 ec 08             	sub    $0x8,%esp
+8010503a:	53                   	push   %ebx
+8010503b:	ff 75 c0             	push   -0x40(%ebp)
+8010503e:	e8 7d d0 ff ff       	call   801020c0 <nameiparent>
+80105043:	83 c4 10             	add    $0x10,%esp
+80105046:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+80105049:	85 c0                	test   %eax,%eax
+8010504b:	0f 84 62 01 00 00    	je     801051b3 <sys_unlink+0x1a3>
+  ilock(dp);
+80105051:	8b 7d b4             	mov    -0x4c(%ebp),%edi
+80105054:	83 ec 0c             	sub    $0xc,%esp
+80105057:	57                   	push   %edi
+80105058:	e8 23 c7 ff ff       	call   80101780 <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+8010505d:	58                   	pop    %eax
+8010505e:	5a                   	pop    %edx
+8010505f:	68 54 79 10 80       	push   $0x80107954
+80105064:	53                   	push   %ebx
+80105065:	e8 56 cc ff ff       	call   80101cc0 <namecmp>
+8010506a:	83 c4 10             	add    $0x10,%esp
+8010506d:	85 c0                	test   %eax,%eax
+8010506f:	0f 84 fb 00 00 00    	je     80105170 <sys_unlink+0x160>
+80105075:	83 ec 08             	sub    $0x8,%esp
+80105078:	68 53 79 10 80       	push   $0x80107953
+8010507d:	53                   	push   %ebx
+8010507e:	e8 3d cc ff ff       	call   80101cc0 <namecmp>
+80105083:	83 c4 10             	add    $0x10,%esp
+80105086:	85 c0                	test   %eax,%eax
+80105088:	0f 84 e2 00 00 00    	je     80105170 <sys_unlink+0x160>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+8010508e:	83 ec 04             	sub    $0x4,%esp
+80105091:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105094:	50                   	push   %eax
+80105095:	53                   	push   %ebx
+80105096:	57                   	push   %edi
+80105097:	e8 44 cc ff ff       	call   80101ce0 <dirlookup>
+8010509c:	83 c4 10             	add    $0x10,%esp
+8010509f:	89 c3                	mov    %eax,%ebx
+801050a1:	85 c0                	test   %eax,%eax
+801050a3:	0f 84 c7 00 00 00    	je     80105170 <sys_unlink+0x160>
+  ilock(ip);
+801050a9:	83 ec 0c             	sub    $0xc,%esp
+801050ac:	50                   	push   %eax
+801050ad:	e8 ce c6 ff ff       	call   80101780 <ilock>
+  if(ip->nlink < 1)
+801050b2:	83 c4 10             	add    $0x10,%esp
+801050b5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801050ba:	0f 8e 1c 01 00 00    	jle    801051dc <sys_unlink+0x1cc>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+801050c0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801050c5:	8d 7d d8             	lea    -0x28(%ebp),%edi
+801050c8:	74 66                	je     80105130 <sys_unlink+0x120>
+  memset(&de, 0, sizeof(de));
+801050ca:	83 ec 04             	sub    $0x4,%esp
+801050cd:	6a 10                	push   $0x10
+801050cf:	6a 00                	push   $0x0
+801050d1:	57                   	push   %edi
+801050d2:	e8 89 f5 ff ff       	call   80104660 <memset>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801050d7:	6a 10                	push   $0x10
+801050d9:	ff 75 c4             	push   -0x3c(%ebp)
+801050dc:	57                   	push   %edi
+801050dd:	ff 75 b4             	push   -0x4c(%ebp)
+801050e0:	e8 ab ca ff ff       	call   80101b90 <writei>
+801050e5:	83 c4 20             	add    $0x20,%esp
+801050e8:	83 f8 10             	cmp    $0x10,%eax
+801050eb:	0f 85 de 00 00 00    	jne    801051cf <sys_unlink+0x1bf>
+  if(ip->type == T_DIR){
+801050f1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801050f6:	0f 84 94 00 00 00    	je     80105190 <sys_unlink+0x180>
+  iunlockput(dp);
+801050fc:	83 ec 0c             	sub    $0xc,%esp
+801050ff:	ff 75 b4             	push   -0x4c(%ebp)
+80105102:	e8 09 c9 ff ff       	call   80101a10 <iunlockput>
+  ip->nlink--;
+80105107:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+8010510c:	89 1c 24             	mov    %ebx,(%esp)
+8010510f:	e8 bc c5 ff ff       	call   801016d0 <iupdate>
+  iunlockput(ip);
+80105114:	89 1c 24             	mov    %ebx,(%esp)
+80105117:	e8 f4 c8 ff ff       	call   80101a10 <iunlockput>
+  end_op();
+8010511c:	e8 af dc ff ff       	call   80102dd0 <end_op>
+  return 0;
+80105121:	83 c4 10             	add    $0x10,%esp
+80105124:	31 c0                	xor    %eax,%eax
+}
+80105126:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105129:	5b                   	pop    %ebx
+8010512a:	5e                   	pop    %esi
+8010512b:	5f                   	pop    %edi
+8010512c:	5d                   	pop    %ebp
+8010512d:	c3                   	ret    
+8010512e:	66 90                	xchg   %ax,%ax
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80105130:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105134:	76 94                	jbe    801050ca <sys_unlink+0xba>
+80105136:	be 20 00 00 00       	mov    $0x20,%esi
+8010513b:	eb 0b                	jmp    80105148 <sys_unlink+0x138>
+8010513d:	8d 76 00             	lea    0x0(%esi),%esi
+80105140:	83 c6 10             	add    $0x10,%esi
+80105143:	3b 73 58             	cmp    0x58(%ebx),%esi
+80105146:	73 82                	jae    801050ca <sys_unlink+0xba>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80105148:	6a 10                	push   $0x10
+8010514a:	56                   	push   %esi
+8010514b:	57                   	push   %edi
+8010514c:	53                   	push   %ebx
+8010514d:	e8 3e c9 ff ff       	call   80101a90 <readi>
+80105152:	83 c4 10             	add    $0x10,%esp
+80105155:	83 f8 10             	cmp    $0x10,%eax
+80105158:	75 68                	jne    801051c2 <sys_unlink+0x1b2>
+    if(de.inum != 0)
+8010515a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+8010515f:	74 df                	je     80105140 <sys_unlink+0x130>
+    iunlockput(ip);
+80105161:	83 ec 0c             	sub    $0xc,%esp
+80105164:	53                   	push   %ebx
+80105165:	e8 a6 c8 ff ff       	call   80101a10 <iunlockput>
+    goto bad;
+8010516a:	83 c4 10             	add    $0x10,%esp
+8010516d:	8d 76 00             	lea    0x0(%esi),%esi
+  iunlockput(dp);
+80105170:	83 ec 0c             	sub    $0xc,%esp
+80105173:	ff 75 b4             	push   -0x4c(%ebp)
+80105176:	e8 95 c8 ff ff       	call   80101a10 <iunlockput>
+  end_op();
+8010517b:	e8 50 dc ff ff       	call   80102dd0 <end_op>
+  return -1;
+80105180:	83 c4 10             	add    $0x10,%esp
+80105183:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105188:	eb 9c                	jmp    80105126 <sys_unlink+0x116>
+8010518a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    dp->nlink--;
+80105190:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+    iupdate(dp);
+80105193:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink--;
+80105196:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
+    iupdate(dp);
+8010519b:	50                   	push   %eax
+8010519c:	e8 2f c5 ff ff       	call   801016d0 <iupdate>
+801051a1:	83 c4 10             	add    $0x10,%esp
+801051a4:	e9 53 ff ff ff       	jmp    801050fc <sys_unlink+0xec>
+    return -1;
+801051a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051ae:	e9 73 ff ff ff       	jmp    80105126 <sys_unlink+0x116>
+    end_op();
+801051b3:	e8 18 dc ff ff       	call   80102dd0 <end_op>
+    return -1;
+801051b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051bd:	e9 64 ff ff ff       	jmp    80105126 <sys_unlink+0x116>
+      panic("isdirempty: readi");
+801051c2:	83 ec 0c             	sub    $0xc,%esp
+801051c5:	68 78 79 10 80       	push   $0x80107978
+801051ca:	e8 b1 b1 ff ff       	call   80100380 <panic>
+    panic("unlink: writei");
+801051cf:	83 ec 0c             	sub    $0xc,%esp
+801051d2:	68 8a 79 10 80       	push   $0x8010798a
+801051d7:	e8 a4 b1 ff ff       	call   80100380 <panic>
+    panic("unlink: nlink < 1");
+801051dc:	83 ec 0c             	sub    $0xc,%esp
+801051df:	68 66 79 10 80       	push   $0x80107966
+801051e4:	e8 97 b1 ff ff       	call   80100380 <panic>
+801051e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801051f0 <sys_open>:
+
+int
+sys_open(void)
+{
+801051f0:	55                   	push   %ebp
+801051f1:	89 e5                	mov    %esp,%ebp
+801051f3:	57                   	push   %edi
+801051f4:	56                   	push   %esi
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+801051f5:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+801051f8:	53                   	push   %ebx
+801051f9:	83 ec 24             	sub    $0x24,%esp
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+801051fc:	50                   	push   %eax
+801051fd:	6a 00                	push   $0x0
+801051ff:	e8 dc f7 ff ff       	call   801049e0 <argstr>
+80105204:	83 c4 10             	add    $0x10,%esp
+80105207:	85 c0                	test   %eax,%eax
+80105209:	0f 88 8e 00 00 00    	js     8010529d <sys_open+0xad>
+8010520f:	83 ec 08             	sub    $0x8,%esp
+80105212:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105215:	50                   	push   %eax
+80105216:	6a 01                	push   $0x1
+80105218:	e8 03 f7 ff ff       	call   80104920 <argint>
+8010521d:	83 c4 10             	add    $0x10,%esp
+80105220:	85 c0                	test   %eax,%eax
+80105222:	78 79                	js     8010529d <sys_open+0xad>
+    return -1;
+
+  begin_op();
+80105224:	e8 37 db ff ff       	call   80102d60 <begin_op>
+
+  if(omode & O_CREATE){
+80105229:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+8010522d:	75 79                	jne    801052a8 <sys_open+0xb8>
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+8010522f:	83 ec 0c             	sub    $0xc,%esp
+80105232:	ff 75 e0             	push   -0x20(%ebp)
+80105235:	e8 66 ce ff ff       	call   801020a0 <namei>
+8010523a:	83 c4 10             	add    $0x10,%esp
+8010523d:	89 c6                	mov    %eax,%esi
+8010523f:	85 c0                	test   %eax,%eax
+80105241:	0f 84 7e 00 00 00    	je     801052c5 <sys_open+0xd5>
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+80105247:	83 ec 0c             	sub    $0xc,%esp
+8010524a:	50                   	push   %eax
+8010524b:	e8 30 c5 ff ff       	call   80101780 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105250:	83 c4 10             	add    $0x10,%esp
+80105253:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105258:	0f 84 c2 00 00 00    	je     80105320 <sys_open+0x130>
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+8010525e:	e8 cd bb ff ff       	call   80100e30 <filealloc>
+80105263:	89 c7                	mov    %eax,%edi
+80105265:	85 c0                	test   %eax,%eax
+80105267:	74 23                	je     8010528c <sys_open+0x9c>
+  struct proc *curproc = myproc();
+80105269:	e8 02 e7 ff ff       	call   80103970 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+8010526e:	31 db                	xor    %ebx,%ebx
+    if(curproc->ofile[fd] == 0){
+80105270:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105274:	85 d2                	test   %edx,%edx
+80105276:	74 60                	je     801052d8 <sys_open+0xe8>
+  for(fd = 0; fd < NOFILE; fd++){
+80105278:	83 c3 01             	add    $0x1,%ebx
+8010527b:	83 fb 10             	cmp    $0x10,%ebx
+8010527e:	75 f0                	jne    80105270 <sys_open+0x80>
+    if(f)
+      fileclose(f);
+80105280:	83 ec 0c             	sub    $0xc,%esp
+80105283:	57                   	push   %edi
+80105284:	e8 67 bc ff ff       	call   80100ef0 <fileclose>
+80105289:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+8010528c:	83 ec 0c             	sub    $0xc,%esp
+8010528f:	56                   	push   %esi
+80105290:	e8 7b c7 ff ff       	call   80101a10 <iunlockput>
+    end_op();
+80105295:	e8 36 db ff ff       	call   80102dd0 <end_op>
+    return -1;
+8010529a:	83 c4 10             	add    $0x10,%esp
+8010529d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801052a2:	eb 6d                	jmp    80105311 <sys_open+0x121>
+801052a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ip = create(path, T_FILE, 0, 0);
+801052a8:	83 ec 0c             	sub    $0xc,%esp
+801052ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801052ae:	31 c9                	xor    %ecx,%ecx
+801052b0:	ba 02 00 00 00       	mov    $0x2,%edx
+801052b5:	6a 00                	push   $0x0
+801052b7:	e8 14 f8 ff ff       	call   80104ad0 <create>
+    if(ip == 0){
+801052bc:	83 c4 10             	add    $0x10,%esp
+    ip = create(path, T_FILE, 0, 0);
+801052bf:	89 c6                	mov    %eax,%esi
+    if(ip == 0){
+801052c1:	85 c0                	test   %eax,%eax
+801052c3:	75 99                	jne    8010525e <sys_open+0x6e>
+      end_op();
+801052c5:	e8 06 db ff ff       	call   80102dd0 <end_op>
+      return -1;
+801052ca:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801052cf:	eb 40                	jmp    80105311 <sys_open+0x121>
+801052d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  }
+  iunlock(ip);
+801052d8:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+801052db:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+  iunlock(ip);
+801052df:	56                   	push   %esi
+801052e0:	e8 7b c5 ff ff       	call   80101860 <iunlock>
+  end_op();
+801052e5:	e8 e6 da ff ff       	call   80102dd0 <end_op>
+
+  f->type = FD_INODE;
+801052ea:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+801052f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801052f3:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+801052f6:	89 77 10             	mov    %esi,0x10(%edi)
+  f->readable = !(omode & O_WRONLY);
+801052f9:	89 d0                	mov    %edx,%eax
+  f->off = 0;
+801052fb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+  f->readable = !(omode & O_WRONLY);
+80105302:	f7 d0                	not    %eax
+80105304:	83 e0 01             	and    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80105307:	83 e2 03             	and    $0x3,%edx
+  f->readable = !(omode & O_WRONLY);
+8010530a:	88 47 08             	mov    %al,0x8(%edi)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+8010530d:	0f 95 47 09          	setne  0x9(%edi)
+  return fd;
+}
+80105311:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105314:	89 d8                	mov    %ebx,%eax
+80105316:	5b                   	pop    %ebx
+80105317:	5e                   	pop    %esi
+80105318:	5f                   	pop    %edi
+80105319:	5d                   	pop    %ebp
+8010531a:	c3                   	ret    
+8010531b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010531f:	90                   	nop
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105320:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105323:	85 c9                	test   %ecx,%ecx
+80105325:	0f 84 33 ff ff ff    	je     8010525e <sys_open+0x6e>
+8010532b:	e9 5c ff ff ff       	jmp    8010528c <sys_open+0x9c>
+
+80105330 <sys_mkdir>:
+
+int
+sys_mkdir(void)
+{
+80105330:	55                   	push   %ebp
+80105331:	89 e5                	mov    %esp,%ebp
+80105333:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+80105336:	e8 25 da ff ff       	call   80102d60 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+8010533b:	83 ec 08             	sub    $0x8,%esp
+8010533e:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105341:	50                   	push   %eax
+80105342:	6a 00                	push   $0x0
+80105344:	e8 97 f6 ff ff       	call   801049e0 <argstr>
+80105349:	83 c4 10             	add    $0x10,%esp
+8010534c:	85 c0                	test   %eax,%eax
+8010534e:	78 30                	js     80105380 <sys_mkdir+0x50>
+80105350:	83 ec 0c             	sub    $0xc,%esp
+80105353:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105356:	31 c9                	xor    %ecx,%ecx
+80105358:	ba 01 00 00 00       	mov    $0x1,%edx
+8010535d:	6a 00                	push   $0x0
+8010535f:	e8 6c f7 ff ff       	call   80104ad0 <create>
+80105364:	83 c4 10             	add    $0x10,%esp
+80105367:	85 c0                	test   %eax,%eax
+80105369:	74 15                	je     80105380 <sys_mkdir+0x50>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+8010536b:	83 ec 0c             	sub    $0xc,%esp
+8010536e:	50                   	push   %eax
+8010536f:	e8 9c c6 ff ff       	call   80101a10 <iunlockput>
+  end_op();
+80105374:	e8 57 da ff ff       	call   80102dd0 <end_op>
+  return 0;
+80105379:	83 c4 10             	add    $0x10,%esp
+8010537c:	31 c0                	xor    %eax,%eax
+}
+8010537e:	c9                   	leave  
+8010537f:	c3                   	ret    
+    end_op();
+80105380:	e8 4b da ff ff       	call   80102dd0 <end_op>
+    return -1;
+80105385:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010538a:	c9                   	leave  
+8010538b:	c3                   	ret    
+8010538c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105390 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+80105390:	55                   	push   %ebp
+80105391:	89 e5                	mov    %esp,%ebp
+80105393:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+80105396:	e8 c5 d9 ff ff       	call   80102d60 <begin_op>
+  if((argstr(0, &path)) < 0 ||
+8010539b:	83 ec 08             	sub    $0x8,%esp
+8010539e:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801053a1:	50                   	push   %eax
+801053a2:	6a 00                	push   $0x0
+801053a4:	e8 37 f6 ff ff       	call   801049e0 <argstr>
+801053a9:	83 c4 10             	add    $0x10,%esp
+801053ac:	85 c0                	test   %eax,%eax
+801053ae:	78 60                	js     80105410 <sys_mknod+0x80>
+     argint(1, &major) < 0 ||
+801053b0:	83 ec 08             	sub    $0x8,%esp
+801053b3:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801053b6:	50                   	push   %eax
+801053b7:	6a 01                	push   $0x1
+801053b9:	e8 62 f5 ff ff       	call   80104920 <argint>
+  if((argstr(0, &path)) < 0 ||
+801053be:	83 c4 10             	add    $0x10,%esp
+801053c1:	85 c0                	test   %eax,%eax
+801053c3:	78 4b                	js     80105410 <sys_mknod+0x80>
+     argint(2, &minor) < 0 ||
+801053c5:	83 ec 08             	sub    $0x8,%esp
+801053c8:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801053cb:	50                   	push   %eax
+801053cc:	6a 02                	push   $0x2
+801053ce:	e8 4d f5 ff ff       	call   80104920 <argint>
+     argint(1, &major) < 0 ||
+801053d3:	83 c4 10             	add    $0x10,%esp
+801053d6:	85 c0                	test   %eax,%eax
+801053d8:	78 36                	js     80105410 <sys_mknod+0x80>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+801053da:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+801053de:	83 ec 0c             	sub    $0xc,%esp
+801053e1:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+801053e5:	ba 03 00 00 00       	mov    $0x3,%edx
+801053ea:	50                   	push   %eax
+801053eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801053ee:	e8 dd f6 ff ff       	call   80104ad0 <create>
+     argint(2, &minor) < 0 ||
+801053f3:	83 c4 10             	add    $0x10,%esp
+801053f6:	85 c0                	test   %eax,%eax
+801053f8:	74 16                	je     80105410 <sys_mknod+0x80>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+801053fa:	83 ec 0c             	sub    $0xc,%esp
+801053fd:	50                   	push   %eax
+801053fe:	e8 0d c6 ff ff       	call   80101a10 <iunlockput>
+  end_op();
+80105403:	e8 c8 d9 ff ff       	call   80102dd0 <end_op>
+  return 0;
+80105408:	83 c4 10             	add    $0x10,%esp
+8010540b:	31 c0                	xor    %eax,%eax
+}
+8010540d:	c9                   	leave  
+8010540e:	c3                   	ret    
+8010540f:	90                   	nop
+    end_op();
+80105410:	e8 bb d9 ff ff       	call   80102dd0 <end_op>
+    return -1;
+80105415:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010541a:	c9                   	leave  
+8010541b:	c3                   	ret    
+8010541c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105420 <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+80105420:	55                   	push   %ebp
+80105421:	89 e5                	mov    %esp,%ebp
+80105423:	56                   	push   %esi
+80105424:	53                   	push   %ebx
+80105425:	83 ec 10             	sub    $0x10,%esp
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+80105428:	e8 43 e5 ff ff       	call   80103970 <myproc>
+8010542d:	89 c6                	mov    %eax,%esi
+  
+  begin_op();
+8010542f:	e8 2c d9 ff ff       	call   80102d60 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+80105434:	83 ec 08             	sub    $0x8,%esp
+80105437:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010543a:	50                   	push   %eax
+8010543b:	6a 00                	push   $0x0
+8010543d:	e8 9e f5 ff ff       	call   801049e0 <argstr>
+80105442:	83 c4 10             	add    $0x10,%esp
+80105445:	85 c0                	test   %eax,%eax
+80105447:	78 77                	js     801054c0 <sys_chdir+0xa0>
+80105449:	83 ec 0c             	sub    $0xc,%esp
+8010544c:	ff 75 f4             	push   -0xc(%ebp)
+8010544f:	e8 4c cc ff ff       	call   801020a0 <namei>
+80105454:	83 c4 10             	add    $0x10,%esp
+80105457:	89 c3                	mov    %eax,%ebx
+80105459:	85 c0                	test   %eax,%eax
+8010545b:	74 63                	je     801054c0 <sys_chdir+0xa0>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+8010545d:	83 ec 0c             	sub    $0xc,%esp
+80105460:	50                   	push   %eax
+80105461:	e8 1a c3 ff ff       	call   80101780 <ilock>
+  if(ip->type != T_DIR){
+80105466:	83 c4 10             	add    $0x10,%esp
+80105469:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010546e:	75 30                	jne    801054a0 <sys_chdir+0x80>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105470:	83 ec 0c             	sub    $0xc,%esp
+80105473:	53                   	push   %ebx
+80105474:	e8 e7 c3 ff ff       	call   80101860 <iunlock>
+  iput(curproc->cwd);
+80105479:	58                   	pop    %eax
+8010547a:	ff 76 68             	push   0x68(%esi)
+8010547d:	e8 2e c4 ff ff       	call   801018b0 <iput>
+  end_op();
+80105482:	e8 49 d9 ff ff       	call   80102dd0 <end_op>
+  curproc->cwd = ip;
+80105487:	89 5e 68             	mov    %ebx,0x68(%esi)
+  return 0;
+8010548a:	83 c4 10             	add    $0x10,%esp
+8010548d:	31 c0                	xor    %eax,%eax
+}
+8010548f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105492:	5b                   	pop    %ebx
+80105493:	5e                   	pop    %esi
+80105494:	5d                   	pop    %ebp
+80105495:	c3                   	ret    
+80105496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010549d:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(ip);
+801054a0:	83 ec 0c             	sub    $0xc,%esp
+801054a3:	53                   	push   %ebx
+801054a4:	e8 67 c5 ff ff       	call   80101a10 <iunlockput>
+    end_op();
+801054a9:	e8 22 d9 ff ff       	call   80102dd0 <end_op>
+    return -1;
+801054ae:	83 c4 10             	add    $0x10,%esp
+801054b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054b6:	eb d7                	jmp    8010548f <sys_chdir+0x6f>
+801054b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054bf:	90                   	nop
+    end_op();
+801054c0:	e8 0b d9 ff ff       	call   80102dd0 <end_op>
+    return -1;
+801054c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054ca:	eb c3                	jmp    8010548f <sys_chdir+0x6f>
+801054cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801054d0 <sys_exec>:
+
+int
+sys_exec(void)
+{
+801054d0:	55                   	push   %ebp
+801054d1:	89 e5                	mov    %esp,%ebp
+801054d3:	57                   	push   %edi
+801054d4:	56                   	push   %esi
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+801054d5:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+{
+801054db:	53                   	push   %ebx
+801054dc:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+801054e2:	50                   	push   %eax
+801054e3:	6a 00                	push   $0x0
+801054e5:	e8 f6 f4 ff ff       	call   801049e0 <argstr>
+801054ea:	83 c4 10             	add    $0x10,%esp
+801054ed:	85 c0                	test   %eax,%eax
+801054ef:	0f 88 87 00 00 00    	js     8010557c <sys_exec+0xac>
+801054f5:	83 ec 08             	sub    $0x8,%esp
+801054f8:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+801054fe:	50                   	push   %eax
+801054ff:	6a 01                	push   $0x1
+80105501:	e8 1a f4 ff ff       	call   80104920 <argint>
+80105506:	83 c4 10             	add    $0x10,%esp
+80105509:	85 c0                	test   %eax,%eax
+8010550b:	78 6f                	js     8010557c <sys_exec+0xac>
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+8010550d:	83 ec 04             	sub    $0x4,%esp
+80105510:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
+  for(i=0;; i++){
+80105516:	31 db                	xor    %ebx,%ebx
+  memset(argv, 0, sizeof(argv));
+80105518:	68 80 00 00 00       	push   $0x80
+8010551d:	6a 00                	push   $0x0
+8010551f:	56                   	push   %esi
+80105520:	e8 3b f1 ff ff       	call   80104660 <memset>
+80105525:	83 c4 10             	add    $0x10,%esp
+80105528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010552f:	90                   	nop
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+80105530:	83 ec 08             	sub    $0x8,%esp
+80105533:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
+80105539:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
+80105540:	50                   	push   %eax
+80105541:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+80105547:	01 f8                	add    %edi,%eax
+80105549:	50                   	push   %eax
+8010554a:	e8 41 f3 ff ff       	call   80104890 <fetchint>
+8010554f:	83 c4 10             	add    $0x10,%esp
+80105552:	85 c0                	test   %eax,%eax
+80105554:	78 26                	js     8010557c <sys_exec+0xac>
+      return -1;
+    if(uarg == 0){
+80105556:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+8010555c:	85 c0                	test   %eax,%eax
+8010555e:	74 30                	je     80105590 <sys_exec+0xc0>
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+80105560:	83 ec 08             	sub    $0x8,%esp
+80105563:	8d 14 3e             	lea    (%esi,%edi,1),%edx
+80105566:	52                   	push   %edx
+80105567:	50                   	push   %eax
+80105568:	e8 63 f3 ff ff       	call   801048d0 <fetchstr>
+8010556d:	83 c4 10             	add    $0x10,%esp
+80105570:	85 c0                	test   %eax,%eax
+80105572:	78 08                	js     8010557c <sys_exec+0xac>
+  for(i=0;; i++){
+80105574:	83 c3 01             	add    $0x1,%ebx
+    if(i >= NELEM(argv))
+80105577:	83 fb 20             	cmp    $0x20,%ebx
+8010557a:	75 b4                	jne    80105530 <sys_exec+0x60>
+      return -1;
+  }
+  return exec(path, argv);
+}
+8010557c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+8010557f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105584:	5b                   	pop    %ebx
+80105585:	5e                   	pop    %esi
+80105586:	5f                   	pop    %edi
+80105587:	5d                   	pop    %ebp
+80105588:	c3                   	ret    
+80105589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      argv[i] = 0;
+80105590:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105597:	00 00 00 00 
+  return exec(path, argv);
+8010559b:	83 ec 08             	sub    $0x8,%esp
+8010559e:	56                   	push   %esi
+8010559f:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
+801055a5:	e8 06 b5 ff ff       	call   80100ab0 <exec>
+801055aa:	83 c4 10             	add    $0x10,%esp
+}
+801055ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801055b0:	5b                   	pop    %ebx
+801055b1:	5e                   	pop    %esi
+801055b2:	5f                   	pop    %edi
+801055b3:	5d                   	pop    %ebp
+801055b4:	c3                   	ret    
+801055b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801055c0 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+801055c0:	55                   	push   %ebp
+801055c1:	89 e5                	mov    %esp,%ebp
+801055c3:	57                   	push   %edi
+801055c4:	56                   	push   %esi
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+801055c5:	8d 45 dc             	lea    -0x24(%ebp),%eax
+{
+801055c8:	53                   	push   %ebx
+801055c9:	83 ec 20             	sub    $0x20,%esp
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+801055cc:	6a 08                	push   $0x8
+801055ce:	50                   	push   %eax
+801055cf:	6a 00                	push   $0x0
+801055d1:	e8 9a f3 ff ff       	call   80104970 <argptr>
+801055d6:	83 c4 10             	add    $0x10,%esp
+801055d9:	85 c0                	test   %eax,%eax
+801055db:	78 4a                	js     80105627 <sys_pipe+0x67>
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+801055dd:	83 ec 08             	sub    $0x8,%esp
+801055e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801055e3:	50                   	push   %eax
+801055e4:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801055e7:	50                   	push   %eax
+801055e8:	e8 43 de ff ff       	call   80103430 <pipealloc>
+801055ed:	83 c4 10             	add    $0x10,%esp
+801055f0:	85 c0                	test   %eax,%eax
+801055f2:	78 33                	js     80105627 <sys_pipe+0x67>
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+801055f4:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(fd = 0; fd < NOFILE; fd++){
+801055f7:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+801055f9:	e8 72 e3 ff ff       	call   80103970 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801055fe:	66 90                	xchg   %ax,%ax
+    if(curproc->ofile[fd] == 0){
+80105600:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+80105604:	85 f6                	test   %esi,%esi
+80105606:	74 28                	je     80105630 <sys_pipe+0x70>
+  for(fd = 0; fd < NOFILE; fd++){
+80105608:	83 c3 01             	add    $0x1,%ebx
+8010560b:	83 fb 10             	cmp    $0x10,%ebx
+8010560e:	75 f0                	jne    80105600 <sys_pipe+0x40>
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+80105610:	83 ec 0c             	sub    $0xc,%esp
+80105613:	ff 75 e0             	push   -0x20(%ebp)
+80105616:	e8 d5 b8 ff ff       	call   80100ef0 <fileclose>
+    fileclose(wf);
+8010561b:	58                   	pop    %eax
+8010561c:	ff 75 e4             	push   -0x1c(%ebp)
+8010561f:	e8 cc b8 ff ff       	call   80100ef0 <fileclose>
+    return -1;
+80105624:	83 c4 10             	add    $0x10,%esp
+80105627:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010562c:	eb 53                	jmp    80105681 <sys_pipe+0xc1>
+8010562e:	66 90                	xchg   %ax,%ax
+      curproc->ofile[fd] = f;
+80105630:	8d 73 08             	lea    0x8(%ebx),%esi
+80105633:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+80105637:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  struct proc *curproc = myproc();
+8010563a:	e8 31 e3 ff ff       	call   80103970 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+8010563f:	31 d2                	xor    %edx,%edx
+80105641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd] == 0){
+80105648:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+8010564c:	85 c9                	test   %ecx,%ecx
+8010564e:	74 20                	je     80105670 <sys_pipe+0xb0>
+  for(fd = 0; fd < NOFILE; fd++){
+80105650:	83 c2 01             	add    $0x1,%edx
+80105653:	83 fa 10             	cmp    $0x10,%edx
+80105656:	75 f0                	jne    80105648 <sys_pipe+0x88>
+      myproc()->ofile[fd0] = 0;
+80105658:	e8 13 e3 ff ff       	call   80103970 <myproc>
+8010565d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80105664:	00 
+80105665:	eb a9                	jmp    80105610 <sys_pipe+0x50>
+80105667:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010566e:	66 90                	xchg   %ax,%ax
+      curproc->ofile[fd] = f;
+80105670:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+  }
+  fd[0] = fd0;
+80105674:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105677:	89 18                	mov    %ebx,(%eax)
+  fd[1] = fd1;
+80105679:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010567c:	89 50 04             	mov    %edx,0x4(%eax)
+  return 0;
+8010567f:	31 c0                	xor    %eax,%eax
+}
+80105681:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105684:	5b                   	pop    %ebx
+80105685:	5e                   	pop    %esi
+80105686:	5f                   	pop    %edi
+80105687:	5d                   	pop    %ebp
+80105688:	c3                   	ret    
+80105689:	66 90                	xchg   %ax,%ax
+8010568b:	66 90                	xchg   %ax,%ax
+8010568d:	66 90                	xchg   %ax,%ax
+8010568f:	90                   	nop
+
+80105690 <sys_fork>:
+#include "proc.h"
+
+int
+sys_fork(void)
+{
+  return fork();
+80105690:	e9 7b e4 ff ff       	jmp    80103b10 <fork>
+80105695:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010569c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801056a0 <sys_exit>:
+}
+
+int
+sys_exit(void)
+{
+801056a0:	55                   	push   %ebp
+801056a1:	89 e5                	mov    %esp,%ebp
+801056a3:	83 ec 08             	sub    $0x8,%esp
+  exit();
+801056a6:	e8 e5 e6 ff ff       	call   80103d90 <exit>
+  return 0;  // not reached
+}
+801056ab:	31 c0                	xor    %eax,%eax
+801056ad:	c9                   	leave  
+801056ae:	c3                   	ret    
+801056af:	90                   	nop
+
+801056b0 <sys_wait>:
+
+int
+sys_wait(void)
+{
+  return wait();
+801056b0:	e9 0b e8 ff ff       	jmp    80103ec0 <wait>
+801056b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801056c0 <sys_kill>:
+}
+
+int
+sys_kill(void)
+{
+801056c0:	55                   	push   %ebp
+801056c1:	89 e5                	mov    %esp,%ebp
+801056c3:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+801056c6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801056c9:	50                   	push   %eax
+801056ca:	6a 00                	push   $0x0
+801056cc:	e8 4f f2 ff ff       	call   80104920 <argint>
+801056d1:	83 c4 10             	add    $0x10,%esp
+801056d4:	85 c0                	test   %eax,%eax
+801056d6:	78 18                	js     801056f0 <sys_kill+0x30>
+    return -1;
+  return kill(pid);
+801056d8:	83 ec 0c             	sub    $0xc,%esp
+801056db:	ff 75 f4             	push   -0xc(%ebp)
+801056de:	e8 7d ea ff ff       	call   80104160 <kill>
+801056e3:	83 c4 10             	add    $0x10,%esp
+}
+801056e6:	c9                   	leave  
+801056e7:	c3                   	ret    
+801056e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056ef:	90                   	nop
+801056f0:	c9                   	leave  
+    return -1;
+801056f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801056f6:	c3                   	ret    
+801056f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056fe:	66 90                	xchg   %ax,%ax
+
+80105700 <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+80105700:	55                   	push   %ebp
+80105701:	89 e5                	mov    %esp,%ebp
+80105703:	83 ec 08             	sub    $0x8,%esp
+  return myproc()->pid;
+80105706:	e8 65 e2 ff ff       	call   80103970 <myproc>
+8010570b:	8b 40 10             	mov    0x10(%eax),%eax
+}
+8010570e:	c9                   	leave  
+8010570f:	c3                   	ret    
+
+80105710 <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+80105710:	55                   	push   %ebp
+80105711:	89 e5                	mov    %esp,%ebp
+80105713:	53                   	push   %ebx
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+80105714:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80105717:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+8010571a:	50                   	push   %eax
+8010571b:	6a 00                	push   $0x0
+8010571d:	e8 fe f1 ff ff       	call   80104920 <argint>
+80105722:	83 c4 10             	add    $0x10,%esp
+80105725:	85 c0                	test   %eax,%eax
+80105727:	78 1f                	js     80105748 <sys_sbrk+0x38>
+    return -1;
+  addr = myproc()->sz;
+80105729:	e8 42 e2 ff ff       	call   80103970 <myproc>
+8010572e:	8b 18                	mov    (%eax),%ebx
+  myproc()->sz += n;
+80105730:	e8 3b e2 ff ff       	call   80103970 <myproc>
+80105735:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105738:	01 10                	add    %edx,(%eax)
+  
+  //  if(growproc(n) < 0)
+  //    return -1;
+  return addr;
+}
+8010573a:	89 d8                	mov    %ebx,%eax
+8010573c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010573f:	c9                   	leave  
+80105740:	c3                   	ret    
+80105741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105748:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010574d:	eb eb                	jmp    8010573a <sys_sbrk+0x2a>
+8010574f:	90                   	nop
+
+80105750 <sys_sleep>:
+
+int
+sys_sleep(void)
+{
+80105750:	55                   	push   %ebp
+80105751:	89 e5                	mov    %esp,%ebp
+80105753:	53                   	push   %ebx
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+80105754:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80105757:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+8010575a:	50                   	push   %eax
+8010575b:	6a 00                	push   $0x0
+8010575d:	e8 be f1 ff ff       	call   80104920 <argint>
+80105762:	83 c4 10             	add    $0x10,%esp
+80105765:	85 c0                	test   %eax,%eax
+80105767:	0f 88 8a 00 00 00    	js     801057f7 <sys_sleep+0xa7>
+    return -1;
+  acquire(&tickslock);
+8010576d:	83 ec 0c             	sub    $0xc,%esp
+80105770:	68 80 3c 11 80       	push   $0x80113c80
+80105775:	e8 26 ee ff ff       	call   801045a0 <acquire>
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+8010577a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  ticks0 = ticks;
+8010577d:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
+  while(ticks - ticks0 < n){
+80105783:	83 c4 10             	add    $0x10,%esp
+80105786:	85 d2                	test   %edx,%edx
+80105788:	75 27                	jne    801057b1 <sys_sleep+0x61>
+8010578a:	eb 54                	jmp    801057e0 <sys_sleep+0x90>
+8010578c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+80105790:	83 ec 08             	sub    $0x8,%esp
+80105793:	68 80 3c 11 80       	push   $0x80113c80
+80105798:	68 60 3c 11 80       	push   $0x80113c60
+8010579d:	e8 9e e8 ff ff       	call   80104040 <sleep>
+  while(ticks - ticks0 < n){
+801057a2:	a1 60 3c 11 80       	mov    0x80113c60,%eax
+801057a7:	83 c4 10             	add    $0x10,%esp
+801057aa:	29 d8                	sub    %ebx,%eax
+801057ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801057af:	73 2f                	jae    801057e0 <sys_sleep+0x90>
+    if(myproc()->killed){
+801057b1:	e8 ba e1 ff ff       	call   80103970 <myproc>
+801057b6:	8b 40 24             	mov    0x24(%eax),%eax
+801057b9:	85 c0                	test   %eax,%eax
+801057bb:	74 d3                	je     80105790 <sys_sleep+0x40>
+      release(&tickslock);
+801057bd:	83 ec 0c             	sub    $0xc,%esp
+801057c0:	68 80 3c 11 80       	push   $0x80113c80
+801057c5:	e8 76 ed ff ff       	call   80104540 <release>
+  }
+  release(&tickslock);
+  return 0;
+}
+801057ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+      return -1;
+801057cd:	83 c4 10             	add    $0x10,%esp
+801057d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801057d5:	c9                   	leave  
+801057d6:	c3                   	ret    
+801057d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057de:	66 90                	xchg   %ax,%ax
+  release(&tickslock);
+801057e0:	83 ec 0c             	sub    $0xc,%esp
+801057e3:	68 80 3c 11 80       	push   $0x80113c80
+801057e8:	e8 53 ed ff ff       	call   80104540 <release>
+  return 0;
+801057ed:	83 c4 10             	add    $0x10,%esp
+801057f0:	31 c0                	xor    %eax,%eax
+}
+801057f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801057f5:	c9                   	leave  
+801057f6:	c3                   	ret    
+    return -1;
+801057f7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801057fc:	eb f4                	jmp    801057f2 <sys_sleep+0xa2>
+801057fe:	66 90                	xchg   %ax,%ax
+
+80105800 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+80105800:	55                   	push   %ebp
+80105801:	89 e5                	mov    %esp,%ebp
+80105803:	53                   	push   %ebx
+80105804:	83 ec 10             	sub    $0x10,%esp
+  uint xticks;
+
+  acquire(&tickslock);
+80105807:	68 80 3c 11 80       	push   $0x80113c80
+8010580c:	e8 8f ed ff ff       	call   801045a0 <acquire>
+  xticks = ticks;
+80105811:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
+  release(&tickslock);
+80105817:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
+8010581e:	e8 1d ed ff ff       	call   80104540 <release>
+  return xticks;
+80105823:	89 d8                	mov    %ebx,%eax
+80105825:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105828:	c9                   	leave  
+80105829:	c3                   	ret    
+
+8010582a <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+8010582a:	1e                   	push   %ds
+  pushl %es
+8010582b:	06                   	push   %es
+  pushl %fs
+8010582c:	0f a0                	push   %fs
+  pushl %gs
+8010582e:	0f a8                	push   %gs
+  pushal
+80105830:	60                   	pusha  
+  
+  # Set up data segments.
+  movw $(SEG_KDATA<<3), %ax
+80105831:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+80105835:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+80105837:	8e c0                	mov    %eax,%es
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+80105839:	54                   	push   %esp
+  call trap
+8010583a:	e8 21 01 00 00       	call   80105960 <trap>
+  addl $4, %esp
+8010583f:	83 c4 04             	add    $0x4,%esp
+
+80105842 <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+80105842:	61                   	popa   
+  popl %gs
+80105843:	0f a9                	pop    %gs
+  popl %fs
+80105845:	0f a1                	pop    %fs
+  popl %es
+80105847:	07                   	pop    %es
+  popl %ds
+80105848:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+80105849:	83 c4 08             	add    $0x8,%esp
+  iret
+8010584c:	cf                   	iret   
+8010584d:	66 90                	xchg   %ax,%ax
+8010584f:	90                   	nop
+
+80105850 <pageFaultHandler>:
+struct spinlock tickslock;
+uint ticks;
+
+int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+
+int pageFaultHandler(){
+80105850:	55                   	push   %ebp
+80105851:	89 e5                	mov    %esp,%ebp
+80105853:	56                   	push   %esi
+80105854:	53                   	push   %ebx
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80105855:	0f 20 d6             	mov    %cr2,%esi
+  int addr=rcr2();
+  int rounded_addr = PGROUNDDOWN(addr);
+80105858:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+  char *mem=kalloc();
+8010585e:	e8 1d ce ff ff       	call   80102680 <kalloc>
+  if(mem!=0){
+80105863:	85 c0                	test   %eax,%eax
+80105865:	74 40                	je     801058a7 <pageFaultHandler+0x57>
+    memset(mem, 0, PGSIZE);
+80105867:	83 ec 04             	sub    $0x4,%esp
+8010586a:	89 c3                	mov    %eax,%ebx
+8010586c:	68 00 10 00 00       	push   $0x1000
+    if(mappages(myproc()->pgdir, (char*)rounded_addr, PGSIZE, V2P(mem), PTE_W|PTE_U)<0)
+80105871:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+    memset(mem, 0, PGSIZE);
+80105877:	6a 00                	push   $0x0
+80105879:	50                   	push   %eax
+8010587a:	e8 e1 ed ff ff       	call   80104660 <memset>
+    if(mappages(myproc()->pgdir, (char*)rounded_addr, PGSIZE, V2P(mem), PTE_W|PTE_U)<0)
+8010587f:	e8 ec e0 ff ff       	call   80103970 <myproc>
+80105884:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+8010588b:	53                   	push   %ebx
+8010588c:	68 00 10 00 00       	push   $0x1000
+80105891:	56                   	push   %esi
+80105892:	ff 70 04             	push   0x4(%eax)
+80105895:	e8 c6 10 00 00       	call   80106960 <mappages>
+8010589a:	83 c4 20             	add    $0x20,%esp
+8010589d:	c1 f8 1f             	sar    $0x1f,%eax
+      return -1;
+    return 0;
+  } else 
+    return -1;
+}
+801058a0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801058a3:	5b                   	pop    %ebx
+801058a4:	5e                   	pop    %esi
+801058a5:	5d                   	pop    %ebp
+801058a6:	c3                   	ret    
+    return -1;
+801058a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058ac:	eb f2                	jmp    801058a0 <pageFaultHandler+0x50>
+801058ae:	66 90                	xchg   %ax,%ax
+
+801058b0 <tvinit>:
+
+void
+tvinit(void)
+{
+801058b0:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+801058b1:	31 c0                	xor    %eax,%eax
+{
+801058b3:	89 e5                	mov    %esp,%ebp
+801058b5:	83 ec 08             	sub    $0x8,%esp
+801058b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058bf:	90                   	nop
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+801058c0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+801058c7:	c7 04 c5 c2 3c 11 80 	movl   $0x8e000008,-0x7feec33e(,%eax,8)
+801058ce:	08 00 00 8e 
+801058d2:	66 89 14 c5 c0 3c 11 	mov    %dx,-0x7feec340(,%eax,8)
+801058d9:	80 
+801058da:	c1 ea 10             	shr    $0x10,%edx
+801058dd:	66 89 14 c5 c6 3c 11 	mov    %dx,-0x7feec33a(,%eax,8)
+801058e4:	80 
+  for(i = 0; i < 256; i++)
+801058e5:	83 c0 01             	add    $0x1,%eax
+801058e8:	3d 00 01 00 00       	cmp    $0x100,%eax
+801058ed:	75 d1                	jne    801058c0 <tvinit+0x10>
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+
+  initlock(&tickslock, "time");
+801058ef:	83 ec 08             	sub    $0x8,%esp
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+801058f2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+801058f7:	c7 05 c2 3e 11 80 08 	movl   $0xef000008,0x80113ec2
+801058fe:	00 00 ef 
+  initlock(&tickslock, "time");
+80105901:	68 99 79 10 80       	push   $0x80107999
+80105906:	68 80 3c 11 80       	push   $0x80113c80
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+8010590b:	66 a3 c0 3e 11 80    	mov    %ax,0x80113ec0
+80105911:	c1 e8 10             	shr    $0x10,%eax
+80105914:	66 a3 c6 3e 11 80    	mov    %ax,0x80113ec6
+  initlock(&tickslock, "time");
+8010591a:	e8 b1 ea ff ff       	call   801043d0 <initlock>
+}
+8010591f:	83 c4 10             	add    $0x10,%esp
+80105922:	c9                   	leave  
+80105923:	c3                   	ret    
+80105924:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010592b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010592f:	90                   	nop
+
+80105930 <idtinit>:
+
+void
+idtinit(void)
+{
+80105930:	55                   	push   %ebp
+  pd[0] = size-1;
+80105931:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105936:	89 e5                	mov    %esp,%ebp
+80105938:	83 ec 10             	sub    $0x10,%esp
+8010593b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+8010593f:	b8 c0 3c 11 80       	mov    $0x80113cc0,%eax
+80105944:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+80105948:	c1 e8 10             	shr    $0x10,%eax
+8010594b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+  asm volatile("lidt (%0)" : : "r" (pd));
+8010594f:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105952:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+80105955:	c9                   	leave  
+80105956:	c3                   	ret    
+80105957:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010595e:	66 90                	xchg   %ax,%ax
+
+80105960 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80105960:	55                   	push   %ebp
+80105961:	89 e5                	mov    %esp,%ebp
+80105963:	57                   	push   %edi
+80105964:	56                   	push   %esi
+80105965:	53                   	push   %ebx
+80105966:	83 ec 1c             	sub    $0x1c,%esp
+80105969:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(tf->trapno == T_SYSCALL){
+8010596c:	8b 43 30             	mov    0x30(%ebx),%eax
+8010596f:	83 f8 40             	cmp    $0x40,%eax
+80105972:	0f 84 30 01 00 00    	je     80105aa8 <trap+0x148>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+80105978:	83 e8 0e             	sub    $0xe,%eax
+8010597b:	83 f8 31             	cmp    $0x31,%eax
+8010597e:	0f 87 8c 00 00 00    	ja     80105a10 <trap+0xb0>
+80105984:	ff 24 85 60 7a 10 80 	jmp    *-0x7fef85a0(,%eax,4)
+8010598b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010598f:	90                   	nop
+  case T_IRQ0 + IRQ_TIMER:
+    if(cpuid() == 0){
+80105990:	e8 bb df ff ff       	call   80103950 <cpuid>
+80105995:	85 c0                	test   %eax,%eax
+80105997:	0f 84 23 02 00 00    	je     80105bc0 <trap+0x260>
+    }
+    lapiceoi();
+    break;
+  case T_IRQ0 + IRQ_IDE:
+    ideintr();
+    lapiceoi();
+8010599d:	e8 6e cf ff ff       	call   80102910 <lapiceoi>
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+801059a2:	e8 c9 df ff ff       	call   80103970 <myproc>
+801059a7:	85 c0                	test   %eax,%eax
+801059a9:	74 1d                	je     801059c8 <trap+0x68>
+801059ab:	e8 c0 df ff ff       	call   80103970 <myproc>
+801059b0:	8b 50 24             	mov    0x24(%eax),%edx
+801059b3:	85 d2                	test   %edx,%edx
+801059b5:	74 11                	je     801059c8 <trap+0x68>
+801059b7:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801059bb:	83 e0 03             	and    $0x3,%eax
+801059be:	66 83 f8 03          	cmp    $0x3,%ax
+801059c2:	0f 84 d8 01 00 00    	je     80105ba0 <trap+0x240>
+    exit();
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING &&
+801059c8:	e8 a3 df ff ff       	call   80103970 <myproc>
+801059cd:	85 c0                	test   %eax,%eax
+801059cf:	74 0f                	je     801059e0 <trap+0x80>
+801059d1:	e8 9a df ff ff       	call   80103970 <myproc>
+801059d6:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+801059da:	0f 84 b0 00 00 00    	je     80105a90 <trap+0x130>
+     tf->trapno == T_IRQ0+IRQ_TIMER)
+    yield();
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+801059e0:	e8 8b df ff ff       	call   80103970 <myproc>
+801059e5:	85 c0                	test   %eax,%eax
+801059e7:	74 1d                	je     80105a06 <trap+0xa6>
+801059e9:	e8 82 df ff ff       	call   80103970 <myproc>
+801059ee:	8b 40 24             	mov    0x24(%eax),%eax
+801059f1:	85 c0                	test   %eax,%eax
+801059f3:	74 11                	je     80105a06 <trap+0xa6>
+801059f5:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801059f9:	83 e0 03             	and    $0x3,%eax
+801059fc:	66 83 f8 03          	cmp    $0x3,%ax
+80105a00:	0f 84 cf 00 00 00    	je     80105ad5 <trap+0x175>
+    exit();
+80105a06:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105a09:	5b                   	pop    %ebx
+80105a0a:	5e                   	pop    %esi
+80105a0b:	5f                   	pop    %edi
+80105a0c:	5d                   	pop    %ebp
+80105a0d:	c3                   	ret    
+80105a0e:	66 90                	xchg   %ax,%ax
+    if(myproc() == 0 || (tf->cs&3) == 0){
+80105a10:	e8 5b df ff ff       	call   80103970 <myproc>
+80105a15:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105a18:	85 c0                	test   %eax,%eax
+80105a1a:	0f 84 d4 01 00 00    	je     80105bf4 <trap+0x294>
+80105a20:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80105a24:	0f 84 ca 01 00 00    	je     80105bf4 <trap+0x294>
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80105a2a:	0f 20 d1             	mov    %cr2,%ecx
+80105a2d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105a30:	e8 1b df ff ff       	call   80103950 <cpuid>
+80105a35:	8b 73 30             	mov    0x30(%ebx),%esi
+80105a38:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105a3b:	8b 43 34             	mov    0x34(%ebx),%eax
+80105a3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            myproc()->pid, myproc()->name, tf->trapno,
+80105a41:	e8 2a df ff ff       	call   80103970 <myproc>
+80105a46:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105a49:	e8 22 df ff ff       	call   80103970 <myproc>
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105a4e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105a51:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105a54:	51                   	push   %ecx
+80105a55:	57                   	push   %edi
+80105a56:	52                   	push   %edx
+80105a57:	ff 75 e4             	push   -0x1c(%ebp)
+80105a5a:	56                   	push   %esi
+            myproc()->pid, myproc()->name, tf->trapno,
+80105a5b:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105a5e:	83 c6 6c             	add    $0x6c,%esi
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105a61:	56                   	push   %esi
+80105a62:	ff 70 10             	push   0x10(%eax)
+80105a65:	68 1c 7a 10 80       	push   $0x80107a1c
+80105a6a:	e8 31 ac ff ff       	call   801006a0 <cprintf>
+    myproc()->killed = 1;
+80105a6f:	83 c4 20             	add    $0x20,%esp
+80105a72:	e8 f9 de ff ff       	call   80103970 <myproc>
+80105a77:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105a7e:	e8 ed de ff ff       	call   80103970 <myproc>
+80105a83:	85 c0                	test   %eax,%eax
+80105a85:	0f 85 20 ff ff ff    	jne    801059ab <trap+0x4b>
+80105a8b:	e9 38 ff ff ff       	jmp    801059c8 <trap+0x68>
+  if(myproc() && myproc()->state == RUNNING &&
+80105a90:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80105a94:	0f 85 46 ff ff ff    	jne    801059e0 <trap+0x80>
+    yield();
+80105a9a:	e8 51 e5 ff ff       	call   80103ff0 <yield>
+80105a9f:	e9 3c ff ff ff       	jmp    801059e0 <trap+0x80>
+80105aa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(myproc()->killed)
+80105aa8:	e8 c3 de ff ff       	call   80103970 <myproc>
+80105aad:	8b 70 24             	mov    0x24(%eax),%esi
+80105ab0:	85 f6                	test   %esi,%esi
+80105ab2:	0f 85 f8 00 00 00    	jne    80105bb0 <trap+0x250>
+    myproc()->tf = tf;
+80105ab8:	e8 b3 de ff ff       	call   80103970 <myproc>
+80105abd:	89 58 18             	mov    %ebx,0x18(%eax)
+    syscall();
+80105ac0:	e8 9b ef ff ff       	call   80104a60 <syscall>
+    if(myproc()->killed)
+80105ac5:	e8 a6 de ff ff       	call   80103970 <myproc>
+80105aca:	8b 48 24             	mov    0x24(%eax),%ecx
+80105acd:	85 c9                	test   %ecx,%ecx
+80105acf:	0f 84 31 ff ff ff    	je     80105a06 <trap+0xa6>
+80105ad5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ad8:	5b                   	pop    %ebx
+80105ad9:	5e                   	pop    %esi
+80105ada:	5f                   	pop    %edi
+80105adb:	5d                   	pop    %ebp
+      exit();
+80105adc:	e9 af e2 ff ff       	jmp    80103d90 <exit>
+80105ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80105ae8:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105aeb:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105aef:	e8 5c de ff ff       	call   80103950 <cpuid>
+80105af4:	57                   	push   %edi
+80105af5:	56                   	push   %esi
+80105af6:	50                   	push   %eax
+80105af7:	68 a4 79 10 80       	push   $0x801079a4
+80105afc:	e8 9f ab ff ff       	call   801006a0 <cprintf>
+    lapiceoi();
+80105b01:	e8 0a ce ff ff       	call   80102910 <lapiceoi>
+    break;
+80105b06:	83 c4 10             	add    $0x10,%esp
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105b09:	e8 62 de ff ff       	call   80103970 <myproc>
+80105b0e:	85 c0                	test   %eax,%eax
+80105b10:	0f 85 95 fe ff ff    	jne    801059ab <trap+0x4b>
+80105b16:	e9 ad fe ff ff       	jmp    801059c8 <trap+0x68>
+80105b1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b1f:	90                   	nop
+    kbdintr();
+80105b20:	e8 ab cc ff ff       	call   801027d0 <kbdintr>
+    lapiceoi();
+80105b25:	e8 e6 cd ff ff       	call   80102910 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105b2a:	e8 41 de ff ff       	call   80103970 <myproc>
+80105b2f:	85 c0                	test   %eax,%eax
+80105b31:	0f 85 74 fe ff ff    	jne    801059ab <trap+0x4b>
+80105b37:	e9 8c fe ff ff       	jmp    801059c8 <trap+0x68>
+80105b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    uartintr();
+80105b40:	e8 4b 02 00 00       	call   80105d90 <uartintr>
+    lapiceoi();
+80105b45:	e8 c6 cd ff ff       	call   80102910 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105b4a:	e8 21 de ff ff       	call   80103970 <myproc>
+80105b4f:	85 c0                	test   %eax,%eax
+80105b51:	0f 85 54 fe ff ff    	jne    801059ab <trap+0x4b>
+80105b57:	e9 6c fe ff ff       	jmp    801059c8 <trap+0x68>
+80105b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ideintr();
+80105b60:	e8 db c6 ff ff       	call   80102240 <ideintr>
+80105b65:	e9 33 fe ff ff       	jmp    8010599d <trap+0x3d>
+80105b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  int x=pageFaultHandler();
+80105b70:	e8 db fc ff ff       	call   80105850 <pageFaultHandler>
+    if(x<0){
+80105b75:	85 c0                	test   %eax,%eax
+80105b77:	0f 89 25 fe ff ff    	jns    801059a2 <trap+0x42>
+      cprintf("page is not getting allocated\n");
+80105b7d:	83 ec 0c             	sub    $0xc,%esp
+80105b80:	68 c8 79 10 80       	push   $0x801079c8
+80105b85:	e8 16 ab ff ff       	call   801006a0 <cprintf>
+      panic("trap");
+80105b8a:	c7 04 24 9e 79 10 80 	movl   $0x8010799e,(%esp)
+80105b91:	e8 ea a7 ff ff       	call   80100380 <panic>
+80105b96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b9d:	8d 76 00             	lea    0x0(%esi),%esi
+    exit();
+80105ba0:	e8 eb e1 ff ff       	call   80103d90 <exit>
+80105ba5:	e9 1e fe ff ff       	jmp    801059c8 <trap+0x68>
+80105baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      exit();
+80105bb0:	e8 db e1 ff ff       	call   80103d90 <exit>
+80105bb5:	e9 fe fe ff ff       	jmp    80105ab8 <trap+0x158>
+80105bba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      acquire(&tickslock);
+80105bc0:	83 ec 0c             	sub    $0xc,%esp
+80105bc3:	68 80 3c 11 80       	push   $0x80113c80
+80105bc8:	e8 d3 e9 ff ff       	call   801045a0 <acquire>
+      wakeup(&ticks);
+80105bcd:	c7 04 24 60 3c 11 80 	movl   $0x80113c60,(%esp)
+      ticks++;
+80105bd4:	83 05 60 3c 11 80 01 	addl   $0x1,0x80113c60
+      wakeup(&ticks);
+80105bdb:	e8 20 e5 ff ff       	call   80104100 <wakeup>
+      release(&tickslock);
+80105be0:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
+80105be7:	e8 54 e9 ff ff       	call   80104540 <release>
+80105bec:	83 c4 10             	add    $0x10,%esp
+    lapiceoi();
+80105bef:	e9 a9 fd ff ff       	jmp    8010599d <trap+0x3d>
+80105bf4:	0f 20 d6             	mov    %cr2,%esi
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+80105bf7:	e8 54 dd ff ff       	call   80103950 <cpuid>
+80105bfc:	83 ec 0c             	sub    $0xc,%esp
+80105bff:	56                   	push   %esi
+80105c00:	57                   	push   %edi
+80105c01:	50                   	push   %eax
+80105c02:	ff 73 30             	push   0x30(%ebx)
+80105c05:	68 e8 79 10 80       	push   $0x801079e8
+80105c0a:	e8 91 aa ff ff       	call   801006a0 <cprintf>
+      panic("trap");
+80105c0f:	83 c4 14             	add    $0x14,%esp
+80105c12:	68 9e 79 10 80       	push   $0x8010799e
+80105c17:	e8 64 a7 ff ff       	call   80100380 <panic>
+80105c1c:	66 90                	xchg   %ax,%ax
+80105c1e:	66 90                	xchg   %ax,%ax
+
+80105c20 <uartgetc>:
+}
+
+static int
+uartgetc(void)
+{
+  if(!uart)
+80105c20:	a1 c0 44 11 80       	mov    0x801144c0,%eax
+80105c25:	85 c0                	test   %eax,%eax
+80105c27:	74 17                	je     80105c40 <uartgetc+0x20>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105c29:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105c2e:	ec                   	in     (%dx),%al
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+80105c2f:	a8 01                	test   $0x1,%al
+80105c31:	74 0d                	je     80105c40 <uartgetc+0x20>
+80105c33:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105c38:	ec                   	in     (%dx),%al
+    return -1;
+  return inb(COM1+0);
+80105c39:	0f b6 c0             	movzbl %al,%eax
+80105c3c:	c3                   	ret    
+80105c3d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105c40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105c45:	c3                   	ret    
+80105c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105c50 <uartinit>:
+{
+80105c50:	55                   	push   %ebp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80105c51:	31 c9                	xor    %ecx,%ecx
+80105c53:	89 c8                	mov    %ecx,%eax
+80105c55:	89 e5                	mov    %esp,%ebp
+80105c57:	57                   	push   %edi
+80105c58:	bf fa 03 00 00       	mov    $0x3fa,%edi
+80105c5d:	56                   	push   %esi
+80105c5e:	89 fa                	mov    %edi,%edx
+80105c60:	53                   	push   %ebx
+80105c61:	83 ec 1c             	sub    $0x1c,%esp
+80105c64:	ee                   	out    %al,(%dx)
+80105c65:	be fb 03 00 00       	mov    $0x3fb,%esi
+80105c6a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105c6f:	89 f2                	mov    %esi,%edx
+80105c71:	ee                   	out    %al,(%dx)
+80105c72:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105c77:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105c7c:	ee                   	out    %al,(%dx)
+80105c7d:	bb f9 03 00 00       	mov    $0x3f9,%ebx
+80105c82:	89 c8                	mov    %ecx,%eax
+80105c84:	89 da                	mov    %ebx,%edx
+80105c86:	ee                   	out    %al,(%dx)
+80105c87:	b8 03 00 00 00       	mov    $0x3,%eax
+80105c8c:	89 f2                	mov    %esi,%edx
+80105c8e:	ee                   	out    %al,(%dx)
+80105c8f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105c94:	89 c8                	mov    %ecx,%eax
+80105c96:	ee                   	out    %al,(%dx)
+80105c97:	b8 01 00 00 00       	mov    $0x1,%eax
+80105c9c:	89 da                	mov    %ebx,%edx
+80105c9e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105c9f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105ca4:	ec                   	in     (%dx),%al
+  if(inb(COM1+5) == 0xFF)
+80105ca5:	3c ff                	cmp    $0xff,%al
+80105ca7:	74 78                	je     80105d21 <uartinit+0xd1>
+  uart = 1;
+80105ca9:	c7 05 c0 44 11 80 01 	movl   $0x1,0x801144c0
+80105cb0:	00 00 00 
+80105cb3:	89 fa                	mov    %edi,%edx
+80105cb5:	ec                   	in     (%dx),%al
+80105cb6:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105cbb:	ec                   	in     (%dx),%al
+  ioapicenable(IRQ_COM1, 0);
+80105cbc:	83 ec 08             	sub    $0x8,%esp
+  for(p="xv6...\n"; *p; p++)
+80105cbf:	bf 28 7b 10 80       	mov    $0x80107b28,%edi
+80105cc4:	be fd 03 00 00       	mov    $0x3fd,%esi
+  ioapicenable(IRQ_COM1, 0);
+80105cc9:	6a 00                	push   $0x0
+80105ccb:	6a 04                	push   $0x4
+80105ccd:	e8 ae c7 ff ff       	call   80102480 <ioapicenable>
+  for(p="xv6...\n"; *p; p++)
+80105cd2:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
+  ioapicenable(IRQ_COM1, 0);
+80105cd6:	83 c4 10             	add    $0x10,%esp
+80105cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(!uart)
+80105ce0:	a1 c0 44 11 80       	mov    0x801144c0,%eax
+80105ce5:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105cea:	85 c0                	test   %eax,%eax
+80105cec:	75 14                	jne    80105d02 <uartinit+0xb2>
+80105cee:	eb 23                	jmp    80105d13 <uartinit+0xc3>
+    microdelay(10);
+80105cf0:	83 ec 0c             	sub    $0xc,%esp
+80105cf3:	6a 0a                	push   $0xa
+80105cf5:	e8 36 cc ff ff       	call   80102930 <microdelay>
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80105cfa:	83 c4 10             	add    $0x10,%esp
+80105cfd:	83 eb 01             	sub    $0x1,%ebx
+80105d00:	74 07                	je     80105d09 <uartinit+0xb9>
+80105d02:	89 f2                	mov    %esi,%edx
+80105d04:	ec                   	in     (%dx),%al
+80105d05:	a8 20                	test   $0x20,%al
+80105d07:	74 e7                	je     80105cf0 <uartinit+0xa0>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80105d09:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+80105d0d:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105d12:	ee                   	out    %al,(%dx)
+  for(p="xv6...\n"; *p; p++)
+80105d13:	0f b6 47 01          	movzbl 0x1(%edi),%eax
+80105d17:	83 c7 01             	add    $0x1,%edi
+80105d1a:	88 45 e7             	mov    %al,-0x19(%ebp)
+80105d1d:	84 c0                	test   %al,%al
+80105d1f:	75 bf                	jne    80105ce0 <uartinit+0x90>
+}
+80105d21:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105d24:	5b                   	pop    %ebx
+80105d25:	5e                   	pop    %esi
+80105d26:	5f                   	pop    %edi
+80105d27:	5d                   	pop    %ebp
+80105d28:	c3                   	ret    
+80105d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105d30 <uartputc>:
+  if(!uart)
+80105d30:	a1 c0 44 11 80       	mov    0x801144c0,%eax
+80105d35:	85 c0                	test   %eax,%eax
+80105d37:	74 47                	je     80105d80 <uartputc+0x50>
+{
+80105d39:	55                   	push   %ebp
+80105d3a:	89 e5                	mov    %esp,%ebp
+80105d3c:	56                   	push   %esi
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105d3d:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105d42:	53                   	push   %ebx
+80105d43:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105d48:	eb 18                	jmp    80105d62 <uartputc+0x32>
+80105d4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    microdelay(10);
+80105d50:	83 ec 0c             	sub    $0xc,%esp
+80105d53:	6a 0a                	push   $0xa
+80105d55:	e8 d6 cb ff ff       	call   80102930 <microdelay>
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80105d5a:	83 c4 10             	add    $0x10,%esp
+80105d5d:	83 eb 01             	sub    $0x1,%ebx
+80105d60:	74 07                	je     80105d69 <uartputc+0x39>
+80105d62:	89 f2                	mov    %esi,%edx
+80105d64:	ec                   	in     (%dx),%al
+80105d65:	a8 20                	test   $0x20,%al
+80105d67:	74 e7                	je     80105d50 <uartputc+0x20>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80105d69:	8b 45 08             	mov    0x8(%ebp),%eax
+80105d6c:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105d71:	ee                   	out    %al,(%dx)
+}
+80105d72:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105d75:	5b                   	pop    %ebx
+80105d76:	5e                   	pop    %esi
+80105d77:	5d                   	pop    %ebp
+80105d78:	c3                   	ret    
+80105d79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d80:	c3                   	ret    
+80105d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d8f:	90                   	nop
+
+80105d90 <uartintr>:
+
+void
+uartintr(void)
+{
+80105d90:	55                   	push   %ebp
+80105d91:	89 e5                	mov    %esp,%ebp
+80105d93:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(uartgetc);
+80105d96:	68 20 5c 10 80       	push   $0x80105c20
+80105d9b:	e8 e0 aa ff ff       	call   80100880 <consoleintr>
+}
+80105da0:	83 c4 10             	add    $0x10,%esp
+80105da3:	c9                   	leave  
+80105da4:	c3                   	ret    
+
+80105da5 <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+80105da5:	6a 00                	push   $0x0
+  pushl $0
+80105da7:	6a 00                	push   $0x0
+  jmp alltraps
+80105da9:	e9 7c fa ff ff       	jmp    8010582a <alltraps>
+
+80105dae <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+80105dae:	6a 00                	push   $0x0
+  pushl $1
+80105db0:	6a 01                	push   $0x1
+  jmp alltraps
+80105db2:	e9 73 fa ff ff       	jmp    8010582a <alltraps>
+
+80105db7 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+80105db7:	6a 00                	push   $0x0
+  pushl $2
+80105db9:	6a 02                	push   $0x2
+  jmp alltraps
+80105dbb:	e9 6a fa ff ff       	jmp    8010582a <alltraps>
+
+80105dc0 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+80105dc0:	6a 00                	push   $0x0
+  pushl $3
+80105dc2:	6a 03                	push   $0x3
+  jmp alltraps
+80105dc4:	e9 61 fa ff ff       	jmp    8010582a <alltraps>
+
+80105dc9 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+80105dc9:	6a 00                	push   $0x0
+  pushl $4
+80105dcb:	6a 04                	push   $0x4
+  jmp alltraps
+80105dcd:	e9 58 fa ff ff       	jmp    8010582a <alltraps>
+
+80105dd2 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80105dd2:	6a 00                	push   $0x0
+  pushl $5
+80105dd4:	6a 05                	push   $0x5
+  jmp alltraps
+80105dd6:	e9 4f fa ff ff       	jmp    8010582a <alltraps>
+
+80105ddb <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+80105ddb:	6a 00                	push   $0x0
+  pushl $6
+80105ddd:	6a 06                	push   $0x6
+  jmp alltraps
+80105ddf:	e9 46 fa ff ff       	jmp    8010582a <alltraps>
+
+80105de4 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80105de4:	6a 00                	push   $0x0
+  pushl $7
+80105de6:	6a 07                	push   $0x7
+  jmp alltraps
+80105de8:	e9 3d fa ff ff       	jmp    8010582a <alltraps>
+
+80105ded <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+80105ded:	6a 08                	push   $0x8
+  jmp alltraps
+80105def:	e9 36 fa ff ff       	jmp    8010582a <alltraps>
+
+80105df4 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80105df4:	6a 00                	push   $0x0
+  pushl $9
+80105df6:	6a 09                	push   $0x9
+  jmp alltraps
+80105df8:	e9 2d fa ff ff       	jmp    8010582a <alltraps>
+
+80105dfd <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+80105dfd:	6a 0a                	push   $0xa
+  jmp alltraps
+80105dff:	e9 26 fa ff ff       	jmp    8010582a <alltraps>
+
+80105e04 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80105e04:	6a 0b                	push   $0xb
+  jmp alltraps
+80105e06:	e9 1f fa ff ff       	jmp    8010582a <alltraps>
+
+80105e0b <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+80105e0b:	6a 0c                	push   $0xc
+  jmp alltraps
+80105e0d:	e9 18 fa ff ff       	jmp    8010582a <alltraps>
+
+80105e12 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80105e12:	6a 0d                	push   $0xd
+  jmp alltraps
+80105e14:	e9 11 fa ff ff       	jmp    8010582a <alltraps>
+
+80105e19 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+80105e19:	6a 0e                	push   $0xe
+  jmp alltraps
+80105e1b:	e9 0a fa ff ff       	jmp    8010582a <alltraps>
+
+80105e20 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80105e20:	6a 00                	push   $0x0
+  pushl $15
+80105e22:	6a 0f                	push   $0xf
+  jmp alltraps
+80105e24:	e9 01 fa ff ff       	jmp    8010582a <alltraps>
+
+80105e29 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+80105e29:	6a 00                	push   $0x0
+  pushl $16
+80105e2b:	6a 10                	push   $0x10
+  jmp alltraps
+80105e2d:	e9 f8 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e32 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+80105e32:	6a 11                	push   $0x11
+  jmp alltraps
+80105e34:	e9 f1 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e39 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+80105e39:	6a 00                	push   $0x0
+  pushl $18
+80105e3b:	6a 12                	push   $0x12
+  jmp alltraps
+80105e3d:	e9 e8 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e42 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+80105e42:	6a 00                	push   $0x0
+  pushl $19
+80105e44:	6a 13                	push   $0x13
+  jmp alltraps
+80105e46:	e9 df f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e4b <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+80105e4b:	6a 00                	push   $0x0
+  pushl $20
+80105e4d:	6a 14                	push   $0x14
+  jmp alltraps
+80105e4f:	e9 d6 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e54 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+80105e54:	6a 00                	push   $0x0
+  pushl $21
+80105e56:	6a 15                	push   $0x15
+  jmp alltraps
+80105e58:	e9 cd f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e5d <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+80105e5d:	6a 00                	push   $0x0
+  pushl $22
+80105e5f:	6a 16                	push   $0x16
+  jmp alltraps
+80105e61:	e9 c4 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e66 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+80105e66:	6a 00                	push   $0x0
+  pushl $23
+80105e68:	6a 17                	push   $0x17
+  jmp alltraps
+80105e6a:	e9 bb f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e6f <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+80105e6f:	6a 00                	push   $0x0
+  pushl $24
+80105e71:	6a 18                	push   $0x18
+  jmp alltraps
+80105e73:	e9 b2 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e78 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+80105e78:	6a 00                	push   $0x0
+  pushl $25
+80105e7a:	6a 19                	push   $0x19
+  jmp alltraps
+80105e7c:	e9 a9 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e81 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+80105e81:	6a 00                	push   $0x0
+  pushl $26
+80105e83:	6a 1a                	push   $0x1a
+  jmp alltraps
+80105e85:	e9 a0 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e8a <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+80105e8a:	6a 00                	push   $0x0
+  pushl $27
+80105e8c:	6a 1b                	push   $0x1b
+  jmp alltraps
+80105e8e:	e9 97 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e93 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+80105e93:	6a 00                	push   $0x0
+  pushl $28
+80105e95:	6a 1c                	push   $0x1c
+  jmp alltraps
+80105e97:	e9 8e f9 ff ff       	jmp    8010582a <alltraps>
+
+80105e9c <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+80105e9c:	6a 00                	push   $0x0
+  pushl $29
+80105e9e:	6a 1d                	push   $0x1d
+  jmp alltraps
+80105ea0:	e9 85 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105ea5 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+80105ea5:	6a 00                	push   $0x0
+  pushl $30
+80105ea7:	6a 1e                	push   $0x1e
+  jmp alltraps
+80105ea9:	e9 7c f9 ff ff       	jmp    8010582a <alltraps>
+
+80105eae <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+80105eae:	6a 00                	push   $0x0
+  pushl $31
+80105eb0:	6a 1f                	push   $0x1f
+  jmp alltraps
+80105eb2:	e9 73 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105eb7 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+80105eb7:	6a 00                	push   $0x0
+  pushl $32
+80105eb9:	6a 20                	push   $0x20
+  jmp alltraps
+80105ebb:	e9 6a f9 ff ff       	jmp    8010582a <alltraps>
+
+80105ec0 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+80105ec0:	6a 00                	push   $0x0
+  pushl $33
+80105ec2:	6a 21                	push   $0x21
+  jmp alltraps
+80105ec4:	e9 61 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105ec9 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+80105ec9:	6a 00                	push   $0x0
+  pushl $34
+80105ecb:	6a 22                	push   $0x22
+  jmp alltraps
+80105ecd:	e9 58 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105ed2 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80105ed2:	6a 00                	push   $0x0
+  pushl $35
+80105ed4:	6a 23                	push   $0x23
+  jmp alltraps
+80105ed6:	e9 4f f9 ff ff       	jmp    8010582a <alltraps>
+
+80105edb <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+80105edb:	6a 00                	push   $0x0
+  pushl $36
+80105edd:	6a 24                	push   $0x24
+  jmp alltraps
+80105edf:	e9 46 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105ee4 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80105ee4:	6a 00                	push   $0x0
+  pushl $37
+80105ee6:	6a 25                	push   $0x25
+  jmp alltraps
+80105ee8:	e9 3d f9 ff ff       	jmp    8010582a <alltraps>
+
+80105eed <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+80105eed:	6a 00                	push   $0x0
+  pushl $38
+80105eef:	6a 26                	push   $0x26
+  jmp alltraps
+80105ef1:	e9 34 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105ef6 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+80105ef6:	6a 00                	push   $0x0
+  pushl $39
+80105ef8:	6a 27                	push   $0x27
+  jmp alltraps
+80105efa:	e9 2b f9 ff ff       	jmp    8010582a <alltraps>
+
+80105eff <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+80105eff:	6a 00                	push   $0x0
+  pushl $40
+80105f01:	6a 28                	push   $0x28
+  jmp alltraps
+80105f03:	e9 22 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105f08 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+80105f08:	6a 00                	push   $0x0
+  pushl $41
+80105f0a:	6a 29                	push   $0x29
+  jmp alltraps
+80105f0c:	e9 19 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105f11 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80105f11:	6a 00                	push   $0x0
+  pushl $42
+80105f13:	6a 2a                	push   $0x2a
+  jmp alltraps
+80105f15:	e9 10 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105f1a <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+80105f1a:	6a 00                	push   $0x0
+  pushl $43
+80105f1c:	6a 2b                	push   $0x2b
+  jmp alltraps
+80105f1e:	e9 07 f9 ff ff       	jmp    8010582a <alltraps>
+
+80105f23 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80105f23:	6a 00                	push   $0x0
+  pushl $44
+80105f25:	6a 2c                	push   $0x2c
+  jmp alltraps
+80105f27:	e9 fe f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f2c <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+80105f2c:	6a 00                	push   $0x0
+  pushl $45
+80105f2e:	6a 2d                	push   $0x2d
+  jmp alltraps
+80105f30:	e9 f5 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f35 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+80105f35:	6a 00                	push   $0x0
+  pushl $46
+80105f37:	6a 2e                	push   $0x2e
+  jmp alltraps
+80105f39:	e9 ec f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f3e <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+80105f3e:	6a 00                	push   $0x0
+  pushl $47
+80105f40:	6a 2f                	push   $0x2f
+  jmp alltraps
+80105f42:	e9 e3 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f47 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+80105f47:	6a 00                	push   $0x0
+  pushl $48
+80105f49:	6a 30                	push   $0x30
+  jmp alltraps
+80105f4b:	e9 da f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f50 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+80105f50:	6a 00                	push   $0x0
+  pushl $49
+80105f52:	6a 31                	push   $0x31
+  jmp alltraps
+80105f54:	e9 d1 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f59 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+80105f59:	6a 00                	push   $0x0
+  pushl $50
+80105f5b:	6a 32                	push   $0x32
+  jmp alltraps
+80105f5d:	e9 c8 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f62 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+80105f62:	6a 00                	push   $0x0
+  pushl $51
+80105f64:	6a 33                	push   $0x33
+  jmp alltraps
+80105f66:	e9 bf f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f6b <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+80105f6b:	6a 00                	push   $0x0
+  pushl $52
+80105f6d:	6a 34                	push   $0x34
+  jmp alltraps
+80105f6f:	e9 b6 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f74 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+80105f74:	6a 00                	push   $0x0
+  pushl $53
+80105f76:	6a 35                	push   $0x35
+  jmp alltraps
+80105f78:	e9 ad f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f7d <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+80105f7d:	6a 00                	push   $0x0
+  pushl $54
+80105f7f:	6a 36                	push   $0x36
+  jmp alltraps
+80105f81:	e9 a4 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f86 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+80105f86:	6a 00                	push   $0x0
+  pushl $55
+80105f88:	6a 37                	push   $0x37
+  jmp alltraps
+80105f8a:	e9 9b f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f8f <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+80105f8f:	6a 00                	push   $0x0
+  pushl $56
+80105f91:	6a 38                	push   $0x38
+  jmp alltraps
+80105f93:	e9 92 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105f98 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+80105f98:	6a 00                	push   $0x0
+  pushl $57
+80105f9a:	6a 39                	push   $0x39
+  jmp alltraps
+80105f9c:	e9 89 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fa1 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+80105fa1:	6a 00                	push   $0x0
+  pushl $58
+80105fa3:	6a 3a                	push   $0x3a
+  jmp alltraps
+80105fa5:	e9 80 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105faa <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+80105faa:	6a 00                	push   $0x0
+  pushl $59
+80105fac:	6a 3b                	push   $0x3b
+  jmp alltraps
+80105fae:	e9 77 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fb3 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+80105fb3:	6a 00                	push   $0x0
+  pushl $60
+80105fb5:	6a 3c                	push   $0x3c
+  jmp alltraps
+80105fb7:	e9 6e f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fbc <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+80105fbc:	6a 00                	push   $0x0
+  pushl $61
+80105fbe:	6a 3d                	push   $0x3d
+  jmp alltraps
+80105fc0:	e9 65 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fc5 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+80105fc5:	6a 00                	push   $0x0
+  pushl $62
+80105fc7:	6a 3e                	push   $0x3e
+  jmp alltraps
+80105fc9:	e9 5c f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fce <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+80105fce:	6a 00                	push   $0x0
+  pushl $63
+80105fd0:	6a 3f                	push   $0x3f
+  jmp alltraps
+80105fd2:	e9 53 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fd7 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+80105fd7:	6a 00                	push   $0x0
+  pushl $64
+80105fd9:	6a 40                	push   $0x40
+  jmp alltraps
+80105fdb:	e9 4a f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fe0 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80105fe0:	6a 00                	push   $0x0
+  pushl $65
+80105fe2:	6a 41                	push   $0x41
+  jmp alltraps
+80105fe4:	e9 41 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105fe9 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+80105fe9:	6a 00                	push   $0x0
+  pushl $66
+80105feb:	6a 42                	push   $0x42
+  jmp alltraps
+80105fed:	e9 38 f8 ff ff       	jmp    8010582a <alltraps>
+
+80105ff2 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80105ff2:	6a 00                	push   $0x0
+  pushl $67
+80105ff4:	6a 43                	push   $0x43
+  jmp alltraps
+80105ff6:	e9 2f f8 ff ff       	jmp    8010582a <alltraps>
+
+80105ffb <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+80105ffb:	6a 00                	push   $0x0
+  pushl $68
+80105ffd:	6a 44                	push   $0x44
+  jmp alltraps
+80105fff:	e9 26 f8 ff ff       	jmp    8010582a <alltraps>
+
+80106004 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80106004:	6a 00                	push   $0x0
+  pushl $69
+80106006:	6a 45                	push   $0x45
+  jmp alltraps
+80106008:	e9 1d f8 ff ff       	jmp    8010582a <alltraps>
+
+8010600d <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+8010600d:	6a 00                	push   $0x0
+  pushl $70
+8010600f:	6a 46                	push   $0x46
+  jmp alltraps
+80106011:	e9 14 f8 ff ff       	jmp    8010582a <alltraps>
+
+80106016 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+80106016:	6a 00                	push   $0x0
+  pushl $71
+80106018:	6a 47                	push   $0x47
+  jmp alltraps
+8010601a:	e9 0b f8 ff ff       	jmp    8010582a <alltraps>
+
+8010601f <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+8010601f:	6a 00                	push   $0x0
+  pushl $72
+80106021:	6a 48                	push   $0x48
+  jmp alltraps
+80106023:	e9 02 f8 ff ff       	jmp    8010582a <alltraps>
+
+80106028 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+80106028:	6a 00                	push   $0x0
+  pushl $73
+8010602a:	6a 49                	push   $0x49
+  jmp alltraps
+8010602c:	e9 f9 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106031 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+80106031:	6a 00                	push   $0x0
+  pushl $74
+80106033:	6a 4a                	push   $0x4a
+  jmp alltraps
+80106035:	e9 f0 f7 ff ff       	jmp    8010582a <alltraps>
+
+8010603a <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+8010603a:	6a 00                	push   $0x0
+  pushl $75
+8010603c:	6a 4b                	push   $0x4b
+  jmp alltraps
+8010603e:	e9 e7 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106043 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+80106043:	6a 00                	push   $0x0
+  pushl $76
+80106045:	6a 4c                	push   $0x4c
+  jmp alltraps
+80106047:	e9 de f7 ff ff       	jmp    8010582a <alltraps>
+
+8010604c <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+8010604c:	6a 00                	push   $0x0
+  pushl $77
+8010604e:	6a 4d                	push   $0x4d
+  jmp alltraps
+80106050:	e9 d5 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106055 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+80106055:	6a 00                	push   $0x0
+  pushl $78
+80106057:	6a 4e                	push   $0x4e
+  jmp alltraps
+80106059:	e9 cc f7 ff ff       	jmp    8010582a <alltraps>
+
+8010605e <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+8010605e:	6a 00                	push   $0x0
+  pushl $79
+80106060:	6a 4f                	push   $0x4f
+  jmp alltraps
+80106062:	e9 c3 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106067 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+80106067:	6a 00                	push   $0x0
+  pushl $80
+80106069:	6a 50                	push   $0x50
+  jmp alltraps
+8010606b:	e9 ba f7 ff ff       	jmp    8010582a <alltraps>
+
+80106070 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+80106070:	6a 00                	push   $0x0
+  pushl $81
+80106072:	6a 51                	push   $0x51
+  jmp alltraps
+80106074:	e9 b1 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106079 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+80106079:	6a 00                	push   $0x0
+  pushl $82
+8010607b:	6a 52                	push   $0x52
+  jmp alltraps
+8010607d:	e9 a8 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106082 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+80106082:	6a 00                	push   $0x0
+  pushl $83
+80106084:	6a 53                	push   $0x53
+  jmp alltraps
+80106086:	e9 9f f7 ff ff       	jmp    8010582a <alltraps>
+
+8010608b <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+8010608b:	6a 00                	push   $0x0
+  pushl $84
+8010608d:	6a 54                	push   $0x54
+  jmp alltraps
+8010608f:	e9 96 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106094 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+80106094:	6a 00                	push   $0x0
+  pushl $85
+80106096:	6a 55                	push   $0x55
+  jmp alltraps
+80106098:	e9 8d f7 ff ff       	jmp    8010582a <alltraps>
+
+8010609d <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+8010609d:	6a 00                	push   $0x0
+  pushl $86
+8010609f:	6a 56                	push   $0x56
+  jmp alltraps
+801060a1:	e9 84 f7 ff ff       	jmp    8010582a <alltraps>
+
+801060a6 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+801060a6:	6a 00                	push   $0x0
+  pushl $87
+801060a8:	6a 57                	push   $0x57
+  jmp alltraps
+801060aa:	e9 7b f7 ff ff       	jmp    8010582a <alltraps>
+
+801060af <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+801060af:	6a 00                	push   $0x0
+  pushl $88
+801060b1:	6a 58                	push   $0x58
+  jmp alltraps
+801060b3:	e9 72 f7 ff ff       	jmp    8010582a <alltraps>
+
+801060b8 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+801060b8:	6a 00                	push   $0x0
+  pushl $89
+801060ba:	6a 59                	push   $0x59
+  jmp alltraps
+801060bc:	e9 69 f7 ff ff       	jmp    8010582a <alltraps>
+
+801060c1 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+801060c1:	6a 00                	push   $0x0
+  pushl $90
+801060c3:	6a 5a                	push   $0x5a
+  jmp alltraps
+801060c5:	e9 60 f7 ff ff       	jmp    8010582a <alltraps>
+
+801060ca <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+801060ca:	6a 00                	push   $0x0
+  pushl $91
+801060cc:	6a 5b                	push   $0x5b
+  jmp alltraps
+801060ce:	e9 57 f7 ff ff       	jmp    8010582a <alltraps>
+
+801060d3 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+801060d3:	6a 00                	push   $0x0
+  pushl $92
+801060d5:	6a 5c                	push   $0x5c
+  jmp alltraps
+801060d7:	e9 4e f7 ff ff       	jmp    8010582a <alltraps>
+
+801060dc <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+801060dc:	6a 00                	push   $0x0
+  pushl $93
+801060de:	6a 5d                	push   $0x5d
+  jmp alltraps
+801060e0:	e9 45 f7 ff ff       	jmp    8010582a <alltraps>
+
+801060e5 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+801060e5:	6a 00                	push   $0x0
+  pushl $94
+801060e7:	6a 5e                	push   $0x5e
+  jmp alltraps
+801060e9:	e9 3c f7 ff ff       	jmp    8010582a <alltraps>
+
+801060ee <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+801060ee:	6a 00                	push   $0x0
+  pushl $95
+801060f0:	6a 5f                	push   $0x5f
+  jmp alltraps
+801060f2:	e9 33 f7 ff ff       	jmp    8010582a <alltraps>
+
+801060f7 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+801060f7:	6a 00                	push   $0x0
+  pushl $96
+801060f9:	6a 60                	push   $0x60
+  jmp alltraps
+801060fb:	e9 2a f7 ff ff       	jmp    8010582a <alltraps>
+
+80106100 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80106100:	6a 00                	push   $0x0
+  pushl $97
+80106102:	6a 61                	push   $0x61
+  jmp alltraps
+80106104:	e9 21 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106109 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+80106109:	6a 00                	push   $0x0
+  pushl $98
+8010610b:	6a 62                	push   $0x62
+  jmp alltraps
+8010610d:	e9 18 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106112 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80106112:	6a 00                	push   $0x0
+  pushl $99
+80106114:	6a 63                	push   $0x63
+  jmp alltraps
+80106116:	e9 0f f7 ff ff       	jmp    8010582a <alltraps>
+
+8010611b <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+8010611b:	6a 00                	push   $0x0
+  pushl $100
+8010611d:	6a 64                	push   $0x64
+  jmp alltraps
+8010611f:	e9 06 f7 ff ff       	jmp    8010582a <alltraps>
+
+80106124 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80106124:	6a 00                	push   $0x0
+  pushl $101
+80106126:	6a 65                	push   $0x65
+  jmp alltraps
+80106128:	e9 fd f6 ff ff       	jmp    8010582a <alltraps>
+
+8010612d <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+8010612d:	6a 00                	push   $0x0
+  pushl $102
+8010612f:	6a 66                	push   $0x66
+  jmp alltraps
+80106131:	e9 f4 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106136 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+80106136:	6a 00                	push   $0x0
+  pushl $103
+80106138:	6a 67                	push   $0x67
+  jmp alltraps
+8010613a:	e9 eb f6 ff ff       	jmp    8010582a <alltraps>
+
+8010613f <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+8010613f:	6a 00                	push   $0x0
+  pushl $104
+80106141:	6a 68                	push   $0x68
+  jmp alltraps
+80106143:	e9 e2 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106148 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+80106148:	6a 00                	push   $0x0
+  pushl $105
+8010614a:	6a 69                	push   $0x69
+  jmp alltraps
+8010614c:	e9 d9 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106151 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+80106151:	6a 00                	push   $0x0
+  pushl $106
+80106153:	6a 6a                	push   $0x6a
+  jmp alltraps
+80106155:	e9 d0 f6 ff ff       	jmp    8010582a <alltraps>
+
+8010615a <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+8010615a:	6a 00                	push   $0x0
+  pushl $107
+8010615c:	6a 6b                	push   $0x6b
+  jmp alltraps
+8010615e:	e9 c7 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106163 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+80106163:	6a 00                	push   $0x0
+  pushl $108
+80106165:	6a 6c                	push   $0x6c
+  jmp alltraps
+80106167:	e9 be f6 ff ff       	jmp    8010582a <alltraps>
+
+8010616c <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+8010616c:	6a 00                	push   $0x0
+  pushl $109
+8010616e:	6a 6d                	push   $0x6d
+  jmp alltraps
+80106170:	e9 b5 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106175 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+80106175:	6a 00                	push   $0x0
+  pushl $110
+80106177:	6a 6e                	push   $0x6e
+  jmp alltraps
+80106179:	e9 ac f6 ff ff       	jmp    8010582a <alltraps>
+
+8010617e <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+8010617e:	6a 00                	push   $0x0
+  pushl $111
+80106180:	6a 6f                	push   $0x6f
+  jmp alltraps
+80106182:	e9 a3 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106187 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+80106187:	6a 00                	push   $0x0
+  pushl $112
+80106189:	6a 70                	push   $0x70
+  jmp alltraps
+8010618b:	e9 9a f6 ff ff       	jmp    8010582a <alltraps>
+
+80106190 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+80106190:	6a 00                	push   $0x0
+  pushl $113
+80106192:	6a 71                	push   $0x71
+  jmp alltraps
+80106194:	e9 91 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106199 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+80106199:	6a 00                	push   $0x0
+  pushl $114
+8010619b:	6a 72                	push   $0x72
+  jmp alltraps
+8010619d:	e9 88 f6 ff ff       	jmp    8010582a <alltraps>
+
+801061a2 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+801061a2:	6a 00                	push   $0x0
+  pushl $115
+801061a4:	6a 73                	push   $0x73
+  jmp alltraps
+801061a6:	e9 7f f6 ff ff       	jmp    8010582a <alltraps>
+
+801061ab <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+801061ab:	6a 00                	push   $0x0
+  pushl $116
+801061ad:	6a 74                	push   $0x74
+  jmp alltraps
+801061af:	e9 76 f6 ff ff       	jmp    8010582a <alltraps>
+
+801061b4 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+801061b4:	6a 00                	push   $0x0
+  pushl $117
+801061b6:	6a 75                	push   $0x75
+  jmp alltraps
+801061b8:	e9 6d f6 ff ff       	jmp    8010582a <alltraps>
+
+801061bd <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+801061bd:	6a 00                	push   $0x0
+  pushl $118
+801061bf:	6a 76                	push   $0x76
+  jmp alltraps
+801061c1:	e9 64 f6 ff ff       	jmp    8010582a <alltraps>
+
+801061c6 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+801061c6:	6a 00                	push   $0x0
+  pushl $119
+801061c8:	6a 77                	push   $0x77
+  jmp alltraps
+801061ca:	e9 5b f6 ff ff       	jmp    8010582a <alltraps>
+
+801061cf <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+801061cf:	6a 00                	push   $0x0
+  pushl $120
+801061d1:	6a 78                	push   $0x78
+  jmp alltraps
+801061d3:	e9 52 f6 ff ff       	jmp    8010582a <alltraps>
+
+801061d8 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+801061d8:	6a 00                	push   $0x0
+  pushl $121
+801061da:	6a 79                	push   $0x79
+  jmp alltraps
+801061dc:	e9 49 f6 ff ff       	jmp    8010582a <alltraps>
+
+801061e1 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+801061e1:	6a 00                	push   $0x0
+  pushl $122
+801061e3:	6a 7a                	push   $0x7a
+  jmp alltraps
+801061e5:	e9 40 f6 ff ff       	jmp    8010582a <alltraps>
+
+801061ea <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+801061ea:	6a 00                	push   $0x0
+  pushl $123
+801061ec:	6a 7b                	push   $0x7b
+  jmp alltraps
+801061ee:	e9 37 f6 ff ff       	jmp    8010582a <alltraps>
+
+801061f3 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+801061f3:	6a 00                	push   $0x0
+  pushl $124
+801061f5:	6a 7c                	push   $0x7c
+  jmp alltraps
+801061f7:	e9 2e f6 ff ff       	jmp    8010582a <alltraps>
+
+801061fc <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+801061fc:	6a 00                	push   $0x0
+  pushl $125
+801061fe:	6a 7d                	push   $0x7d
+  jmp alltraps
+80106200:	e9 25 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106205 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+80106205:	6a 00                	push   $0x0
+  pushl $126
+80106207:	6a 7e                	push   $0x7e
+  jmp alltraps
+80106209:	e9 1c f6 ff ff       	jmp    8010582a <alltraps>
+
+8010620e <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+8010620e:	6a 00                	push   $0x0
+  pushl $127
+80106210:	6a 7f                	push   $0x7f
+  jmp alltraps
+80106212:	e9 13 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106217 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+80106217:	6a 00                	push   $0x0
+  pushl $128
+80106219:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+8010621e:	e9 07 f6 ff ff       	jmp    8010582a <alltraps>
+
+80106223 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+80106223:	6a 00                	push   $0x0
+  pushl $129
+80106225:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+8010622a:	e9 fb f5 ff ff       	jmp    8010582a <alltraps>
+
+8010622f <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+8010622f:	6a 00                	push   $0x0
+  pushl $130
+80106231:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+80106236:	e9 ef f5 ff ff       	jmp    8010582a <alltraps>
+
+8010623b <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+8010623b:	6a 00                	push   $0x0
+  pushl $131
+8010623d:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+80106242:	e9 e3 f5 ff ff       	jmp    8010582a <alltraps>
+
+80106247 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+80106247:	6a 00                	push   $0x0
+  pushl $132
+80106249:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+8010624e:	e9 d7 f5 ff ff       	jmp    8010582a <alltraps>
+
+80106253 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+80106253:	6a 00                	push   $0x0
+  pushl $133
+80106255:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+8010625a:	e9 cb f5 ff ff       	jmp    8010582a <alltraps>
+
+8010625f <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+8010625f:	6a 00                	push   $0x0
+  pushl $134
+80106261:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+80106266:	e9 bf f5 ff ff       	jmp    8010582a <alltraps>
+
+8010626b <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+8010626b:	6a 00                	push   $0x0
+  pushl $135
+8010626d:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+80106272:	e9 b3 f5 ff ff       	jmp    8010582a <alltraps>
+
+80106277 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+80106277:	6a 00                	push   $0x0
+  pushl $136
+80106279:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+8010627e:	e9 a7 f5 ff ff       	jmp    8010582a <alltraps>
+
+80106283 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+80106283:	6a 00                	push   $0x0
+  pushl $137
+80106285:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+8010628a:	e9 9b f5 ff ff       	jmp    8010582a <alltraps>
+
+8010628f <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+8010628f:	6a 00                	push   $0x0
+  pushl $138
+80106291:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+80106296:	e9 8f f5 ff ff       	jmp    8010582a <alltraps>
+
+8010629b <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+8010629b:	6a 00                	push   $0x0
+  pushl $139
+8010629d:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+801062a2:	e9 83 f5 ff ff       	jmp    8010582a <alltraps>
+
+801062a7 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+801062a7:	6a 00                	push   $0x0
+  pushl $140
+801062a9:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+801062ae:	e9 77 f5 ff ff       	jmp    8010582a <alltraps>
+
+801062b3 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+801062b3:	6a 00                	push   $0x0
+  pushl $141
+801062b5:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+801062ba:	e9 6b f5 ff ff       	jmp    8010582a <alltraps>
+
+801062bf <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+801062bf:	6a 00                	push   $0x0
+  pushl $142
+801062c1:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+801062c6:	e9 5f f5 ff ff       	jmp    8010582a <alltraps>
+
+801062cb <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+801062cb:	6a 00                	push   $0x0
+  pushl $143
+801062cd:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+801062d2:	e9 53 f5 ff ff       	jmp    8010582a <alltraps>
+
+801062d7 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+801062d7:	6a 00                	push   $0x0
+  pushl $144
+801062d9:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+801062de:	e9 47 f5 ff ff       	jmp    8010582a <alltraps>
+
+801062e3 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+801062e3:	6a 00                	push   $0x0
+  pushl $145
+801062e5:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+801062ea:	e9 3b f5 ff ff       	jmp    8010582a <alltraps>
+
+801062ef <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+801062ef:	6a 00                	push   $0x0
+  pushl $146
+801062f1:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+801062f6:	e9 2f f5 ff ff       	jmp    8010582a <alltraps>
+
+801062fb <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+801062fb:	6a 00                	push   $0x0
+  pushl $147
+801062fd:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80106302:	e9 23 f5 ff ff       	jmp    8010582a <alltraps>
+
+80106307 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+80106307:	6a 00                	push   $0x0
+  pushl $148
+80106309:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+8010630e:	e9 17 f5 ff ff       	jmp    8010582a <alltraps>
+
+80106313 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80106313:	6a 00                	push   $0x0
+  pushl $149
+80106315:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+8010631a:	e9 0b f5 ff ff       	jmp    8010582a <alltraps>
+
+8010631f <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+8010631f:	6a 00                	push   $0x0
+  pushl $150
+80106321:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+80106326:	e9 ff f4 ff ff       	jmp    8010582a <alltraps>
+
+8010632b <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+8010632b:	6a 00                	push   $0x0
+  pushl $151
+8010632d:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+80106332:	e9 f3 f4 ff ff       	jmp    8010582a <alltraps>
+
+80106337 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+80106337:	6a 00                	push   $0x0
+  pushl $152
+80106339:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+8010633e:	e9 e7 f4 ff ff       	jmp    8010582a <alltraps>
+
+80106343 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+80106343:	6a 00                	push   $0x0
+  pushl $153
+80106345:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+8010634a:	e9 db f4 ff ff       	jmp    8010582a <alltraps>
+
+8010634f <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+8010634f:	6a 00                	push   $0x0
+  pushl $154
+80106351:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+80106356:	e9 cf f4 ff ff       	jmp    8010582a <alltraps>
+
+8010635b <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+8010635b:	6a 00                	push   $0x0
+  pushl $155
+8010635d:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+80106362:	e9 c3 f4 ff ff       	jmp    8010582a <alltraps>
+
+80106367 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+80106367:	6a 00                	push   $0x0
+  pushl $156
+80106369:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+8010636e:	e9 b7 f4 ff ff       	jmp    8010582a <alltraps>
+
+80106373 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+80106373:	6a 00                	push   $0x0
+  pushl $157
+80106375:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+8010637a:	e9 ab f4 ff ff       	jmp    8010582a <alltraps>
+
+8010637f <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+8010637f:	6a 00                	push   $0x0
+  pushl $158
+80106381:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+80106386:	e9 9f f4 ff ff       	jmp    8010582a <alltraps>
+
+8010638b <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+8010638b:	6a 00                	push   $0x0
+  pushl $159
+8010638d:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+80106392:	e9 93 f4 ff ff       	jmp    8010582a <alltraps>
+
+80106397 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+80106397:	6a 00                	push   $0x0
+  pushl $160
+80106399:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+8010639e:	e9 87 f4 ff ff       	jmp    8010582a <alltraps>
+
+801063a3 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+801063a3:	6a 00                	push   $0x0
+  pushl $161
+801063a5:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+801063aa:	e9 7b f4 ff ff       	jmp    8010582a <alltraps>
+
+801063af <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+801063af:	6a 00                	push   $0x0
+  pushl $162
+801063b1:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+801063b6:	e9 6f f4 ff ff       	jmp    8010582a <alltraps>
+
+801063bb <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+801063bb:	6a 00                	push   $0x0
+  pushl $163
+801063bd:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+801063c2:	e9 63 f4 ff ff       	jmp    8010582a <alltraps>
+
+801063c7 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+801063c7:	6a 00                	push   $0x0
+  pushl $164
+801063c9:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+801063ce:	e9 57 f4 ff ff       	jmp    8010582a <alltraps>
+
+801063d3 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+801063d3:	6a 00                	push   $0x0
+  pushl $165
+801063d5:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+801063da:	e9 4b f4 ff ff       	jmp    8010582a <alltraps>
+
+801063df <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+801063df:	6a 00                	push   $0x0
+  pushl $166
+801063e1:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+801063e6:	e9 3f f4 ff ff       	jmp    8010582a <alltraps>
+
+801063eb <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+801063eb:	6a 00                	push   $0x0
+  pushl $167
+801063ed:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+801063f2:	e9 33 f4 ff ff       	jmp    8010582a <alltraps>
+
+801063f7 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+801063f7:	6a 00                	push   $0x0
+  pushl $168
+801063f9:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+801063fe:	e9 27 f4 ff ff       	jmp    8010582a <alltraps>
+
+80106403 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80106403:	6a 00                	push   $0x0
+  pushl $169
+80106405:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+8010640a:	e9 1b f4 ff ff       	jmp    8010582a <alltraps>
+
+8010640f <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+8010640f:	6a 00                	push   $0x0
+  pushl $170
+80106411:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+80106416:	e9 0f f4 ff ff       	jmp    8010582a <alltraps>
+
+8010641b <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+8010641b:	6a 00                	push   $0x0
+  pushl $171
+8010641d:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+80106422:	e9 03 f4 ff ff       	jmp    8010582a <alltraps>
+
+80106427 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+80106427:	6a 00                	push   $0x0
+  pushl $172
+80106429:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+8010642e:	e9 f7 f3 ff ff       	jmp    8010582a <alltraps>
+
+80106433 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+80106433:	6a 00                	push   $0x0
+  pushl $173
+80106435:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+8010643a:	e9 eb f3 ff ff       	jmp    8010582a <alltraps>
+
+8010643f <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+8010643f:	6a 00                	push   $0x0
+  pushl $174
+80106441:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+80106446:	e9 df f3 ff ff       	jmp    8010582a <alltraps>
+
+8010644b <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+8010644b:	6a 00                	push   $0x0
+  pushl $175
+8010644d:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+80106452:	e9 d3 f3 ff ff       	jmp    8010582a <alltraps>
+
+80106457 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+80106457:	6a 00                	push   $0x0
+  pushl $176
+80106459:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+8010645e:	e9 c7 f3 ff ff       	jmp    8010582a <alltraps>
+
+80106463 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+80106463:	6a 00                	push   $0x0
+  pushl $177
+80106465:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+8010646a:	e9 bb f3 ff ff       	jmp    8010582a <alltraps>
+
+8010646f <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+8010646f:	6a 00                	push   $0x0
+  pushl $178
+80106471:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+80106476:	e9 af f3 ff ff       	jmp    8010582a <alltraps>
+
+8010647b <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+8010647b:	6a 00                	push   $0x0
+  pushl $179
+8010647d:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+80106482:	e9 a3 f3 ff ff       	jmp    8010582a <alltraps>
+
+80106487 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+80106487:	6a 00                	push   $0x0
+  pushl $180
+80106489:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+8010648e:	e9 97 f3 ff ff       	jmp    8010582a <alltraps>
+
+80106493 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+80106493:	6a 00                	push   $0x0
+  pushl $181
+80106495:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+8010649a:	e9 8b f3 ff ff       	jmp    8010582a <alltraps>
+
+8010649f <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+8010649f:	6a 00                	push   $0x0
+  pushl $182
+801064a1:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+801064a6:	e9 7f f3 ff ff       	jmp    8010582a <alltraps>
+
+801064ab <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+801064ab:	6a 00                	push   $0x0
+  pushl $183
+801064ad:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+801064b2:	e9 73 f3 ff ff       	jmp    8010582a <alltraps>
+
+801064b7 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+801064b7:	6a 00                	push   $0x0
+  pushl $184
+801064b9:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+801064be:	e9 67 f3 ff ff       	jmp    8010582a <alltraps>
+
+801064c3 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+801064c3:	6a 00                	push   $0x0
+  pushl $185
+801064c5:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+801064ca:	e9 5b f3 ff ff       	jmp    8010582a <alltraps>
+
+801064cf <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+801064cf:	6a 00                	push   $0x0
+  pushl $186
+801064d1:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+801064d6:	e9 4f f3 ff ff       	jmp    8010582a <alltraps>
+
+801064db <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+801064db:	6a 00                	push   $0x0
+  pushl $187
+801064dd:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+801064e2:	e9 43 f3 ff ff       	jmp    8010582a <alltraps>
+
+801064e7 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+801064e7:	6a 00                	push   $0x0
+  pushl $188
+801064e9:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+801064ee:	e9 37 f3 ff ff       	jmp    8010582a <alltraps>
+
+801064f3 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+801064f3:	6a 00                	push   $0x0
+  pushl $189
+801064f5:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+801064fa:	e9 2b f3 ff ff       	jmp    8010582a <alltraps>
+
+801064ff <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+801064ff:	6a 00                	push   $0x0
+  pushl $190
+80106501:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+80106506:	e9 1f f3 ff ff       	jmp    8010582a <alltraps>
+
+8010650b <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+8010650b:	6a 00                	push   $0x0
+  pushl $191
+8010650d:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80106512:	e9 13 f3 ff ff       	jmp    8010582a <alltraps>
+
+80106517 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+80106517:	6a 00                	push   $0x0
+  pushl $192
+80106519:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+8010651e:	e9 07 f3 ff ff       	jmp    8010582a <alltraps>
+
+80106523 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+80106523:	6a 00                	push   $0x0
+  pushl $193
+80106525:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+8010652a:	e9 fb f2 ff ff       	jmp    8010582a <alltraps>
+
+8010652f <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+8010652f:	6a 00                	push   $0x0
+  pushl $194
+80106531:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+80106536:	e9 ef f2 ff ff       	jmp    8010582a <alltraps>
+
+8010653b <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+8010653b:	6a 00                	push   $0x0
+  pushl $195
+8010653d:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+80106542:	e9 e3 f2 ff ff       	jmp    8010582a <alltraps>
+
+80106547 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+80106547:	6a 00                	push   $0x0
+  pushl $196
+80106549:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+8010654e:	e9 d7 f2 ff ff       	jmp    8010582a <alltraps>
+
+80106553 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+80106553:	6a 00                	push   $0x0
+  pushl $197
+80106555:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+8010655a:	e9 cb f2 ff ff       	jmp    8010582a <alltraps>
+
+8010655f <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+8010655f:	6a 00                	push   $0x0
+  pushl $198
+80106561:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+80106566:	e9 bf f2 ff ff       	jmp    8010582a <alltraps>
+
+8010656b <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+8010656b:	6a 00                	push   $0x0
+  pushl $199
+8010656d:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+80106572:	e9 b3 f2 ff ff       	jmp    8010582a <alltraps>
+
+80106577 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+80106577:	6a 00                	push   $0x0
+  pushl $200
+80106579:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+8010657e:	e9 a7 f2 ff ff       	jmp    8010582a <alltraps>
+
+80106583 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+80106583:	6a 00                	push   $0x0
+  pushl $201
+80106585:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+8010658a:	e9 9b f2 ff ff       	jmp    8010582a <alltraps>
+
+8010658f <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+8010658f:	6a 00                	push   $0x0
+  pushl $202
+80106591:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+80106596:	e9 8f f2 ff ff       	jmp    8010582a <alltraps>
+
+8010659b <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+8010659b:	6a 00                	push   $0x0
+  pushl $203
+8010659d:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+801065a2:	e9 83 f2 ff ff       	jmp    8010582a <alltraps>
+
+801065a7 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+801065a7:	6a 00                	push   $0x0
+  pushl $204
+801065a9:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+801065ae:	e9 77 f2 ff ff       	jmp    8010582a <alltraps>
+
+801065b3 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+801065b3:	6a 00                	push   $0x0
+  pushl $205
+801065b5:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+801065ba:	e9 6b f2 ff ff       	jmp    8010582a <alltraps>
+
+801065bf <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+801065bf:	6a 00                	push   $0x0
+  pushl $206
+801065c1:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+801065c6:	e9 5f f2 ff ff       	jmp    8010582a <alltraps>
+
+801065cb <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+801065cb:	6a 00                	push   $0x0
+  pushl $207
+801065cd:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+801065d2:	e9 53 f2 ff ff       	jmp    8010582a <alltraps>
+
+801065d7 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+801065d7:	6a 00                	push   $0x0
+  pushl $208
+801065d9:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+801065de:	e9 47 f2 ff ff       	jmp    8010582a <alltraps>
+
+801065e3 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+801065e3:	6a 00                	push   $0x0
+  pushl $209
+801065e5:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+801065ea:	e9 3b f2 ff ff       	jmp    8010582a <alltraps>
+
+801065ef <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+801065ef:	6a 00                	push   $0x0
+  pushl $210
+801065f1:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+801065f6:	e9 2f f2 ff ff       	jmp    8010582a <alltraps>
+
+801065fb <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+801065fb:	6a 00                	push   $0x0
+  pushl $211
+801065fd:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80106602:	e9 23 f2 ff ff       	jmp    8010582a <alltraps>
+
+80106607 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+80106607:	6a 00                	push   $0x0
+  pushl $212
+80106609:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+8010660e:	e9 17 f2 ff ff       	jmp    8010582a <alltraps>
+
+80106613 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80106613:	6a 00                	push   $0x0
+  pushl $213
+80106615:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+8010661a:	e9 0b f2 ff ff       	jmp    8010582a <alltraps>
+
+8010661f <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+8010661f:	6a 00                	push   $0x0
+  pushl $214
+80106621:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+80106626:	e9 ff f1 ff ff       	jmp    8010582a <alltraps>
+
+8010662b <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+8010662b:	6a 00                	push   $0x0
+  pushl $215
+8010662d:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+80106632:	e9 f3 f1 ff ff       	jmp    8010582a <alltraps>
+
+80106637 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+80106637:	6a 00                	push   $0x0
+  pushl $216
+80106639:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+8010663e:	e9 e7 f1 ff ff       	jmp    8010582a <alltraps>
+
+80106643 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+80106643:	6a 00                	push   $0x0
+  pushl $217
+80106645:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+8010664a:	e9 db f1 ff ff       	jmp    8010582a <alltraps>
+
+8010664f <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+8010664f:	6a 00                	push   $0x0
+  pushl $218
+80106651:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+80106656:	e9 cf f1 ff ff       	jmp    8010582a <alltraps>
+
+8010665b <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+8010665b:	6a 00                	push   $0x0
+  pushl $219
+8010665d:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+80106662:	e9 c3 f1 ff ff       	jmp    8010582a <alltraps>
+
+80106667 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+80106667:	6a 00                	push   $0x0
+  pushl $220
+80106669:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+8010666e:	e9 b7 f1 ff ff       	jmp    8010582a <alltraps>
+
+80106673 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+80106673:	6a 00                	push   $0x0
+  pushl $221
+80106675:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+8010667a:	e9 ab f1 ff ff       	jmp    8010582a <alltraps>
+
+8010667f <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+8010667f:	6a 00                	push   $0x0
+  pushl $222
+80106681:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+80106686:	e9 9f f1 ff ff       	jmp    8010582a <alltraps>
+
+8010668b <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+8010668b:	6a 00                	push   $0x0
+  pushl $223
+8010668d:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+80106692:	e9 93 f1 ff ff       	jmp    8010582a <alltraps>
+
+80106697 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+80106697:	6a 00                	push   $0x0
+  pushl $224
+80106699:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+8010669e:	e9 87 f1 ff ff       	jmp    8010582a <alltraps>
+
+801066a3 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+801066a3:	6a 00                	push   $0x0
+  pushl $225
+801066a5:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+801066aa:	e9 7b f1 ff ff       	jmp    8010582a <alltraps>
+
+801066af <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+801066af:	6a 00                	push   $0x0
+  pushl $226
+801066b1:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+801066b6:	e9 6f f1 ff ff       	jmp    8010582a <alltraps>
+
+801066bb <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+801066bb:	6a 00                	push   $0x0
+  pushl $227
+801066bd:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+801066c2:	e9 63 f1 ff ff       	jmp    8010582a <alltraps>
+
+801066c7 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+801066c7:	6a 00                	push   $0x0
+  pushl $228
+801066c9:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+801066ce:	e9 57 f1 ff ff       	jmp    8010582a <alltraps>
+
+801066d3 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+801066d3:	6a 00                	push   $0x0
+  pushl $229
+801066d5:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+801066da:	e9 4b f1 ff ff       	jmp    8010582a <alltraps>
+
+801066df <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+801066df:	6a 00                	push   $0x0
+  pushl $230
+801066e1:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+801066e6:	e9 3f f1 ff ff       	jmp    8010582a <alltraps>
+
+801066eb <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+801066eb:	6a 00                	push   $0x0
+  pushl $231
+801066ed:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+801066f2:	e9 33 f1 ff ff       	jmp    8010582a <alltraps>
+
+801066f7 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+801066f7:	6a 00                	push   $0x0
+  pushl $232
+801066f9:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+801066fe:	e9 27 f1 ff ff       	jmp    8010582a <alltraps>
+
+80106703 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80106703:	6a 00                	push   $0x0
+  pushl $233
+80106705:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+8010670a:	e9 1b f1 ff ff       	jmp    8010582a <alltraps>
+
+8010670f <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+8010670f:	6a 00                	push   $0x0
+  pushl $234
+80106711:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+80106716:	e9 0f f1 ff ff       	jmp    8010582a <alltraps>
+
+8010671b <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+8010671b:	6a 00                	push   $0x0
+  pushl $235
+8010671d:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+80106722:	e9 03 f1 ff ff       	jmp    8010582a <alltraps>
+
+80106727 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+80106727:	6a 00                	push   $0x0
+  pushl $236
+80106729:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+8010672e:	e9 f7 f0 ff ff       	jmp    8010582a <alltraps>
+
+80106733 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+80106733:	6a 00                	push   $0x0
+  pushl $237
+80106735:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+8010673a:	e9 eb f0 ff ff       	jmp    8010582a <alltraps>
+
+8010673f <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+8010673f:	6a 00                	push   $0x0
+  pushl $238
+80106741:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+80106746:	e9 df f0 ff ff       	jmp    8010582a <alltraps>
+
+8010674b <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+8010674b:	6a 00                	push   $0x0
+  pushl $239
+8010674d:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+80106752:	e9 d3 f0 ff ff       	jmp    8010582a <alltraps>
+
+80106757 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+80106757:	6a 00                	push   $0x0
+  pushl $240
+80106759:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+8010675e:	e9 c7 f0 ff ff       	jmp    8010582a <alltraps>
+
+80106763 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+80106763:	6a 00                	push   $0x0
+  pushl $241
+80106765:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+8010676a:	e9 bb f0 ff ff       	jmp    8010582a <alltraps>
+
+8010676f <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+8010676f:	6a 00                	push   $0x0
+  pushl $242
+80106771:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+80106776:	e9 af f0 ff ff       	jmp    8010582a <alltraps>
+
+8010677b <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+8010677b:	6a 00                	push   $0x0
+  pushl $243
+8010677d:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+80106782:	e9 a3 f0 ff ff       	jmp    8010582a <alltraps>
+
+80106787 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+80106787:	6a 00                	push   $0x0
+  pushl $244
+80106789:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+8010678e:	e9 97 f0 ff ff       	jmp    8010582a <alltraps>
+
+80106793 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+80106793:	6a 00                	push   $0x0
+  pushl $245
+80106795:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+8010679a:	e9 8b f0 ff ff       	jmp    8010582a <alltraps>
+
+8010679f <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+8010679f:	6a 00                	push   $0x0
+  pushl $246
+801067a1:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+801067a6:	e9 7f f0 ff ff       	jmp    8010582a <alltraps>
+
+801067ab <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+801067ab:	6a 00                	push   $0x0
+  pushl $247
+801067ad:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+801067b2:	e9 73 f0 ff ff       	jmp    8010582a <alltraps>
+
+801067b7 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+801067b7:	6a 00                	push   $0x0
+  pushl $248
+801067b9:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+801067be:	e9 67 f0 ff ff       	jmp    8010582a <alltraps>
+
+801067c3 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+801067c3:	6a 00                	push   $0x0
+  pushl $249
+801067c5:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+801067ca:	e9 5b f0 ff ff       	jmp    8010582a <alltraps>
+
+801067cf <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+801067cf:	6a 00                	push   $0x0
+  pushl $250
+801067d1:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+801067d6:	e9 4f f0 ff ff       	jmp    8010582a <alltraps>
+
+801067db <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+801067db:	6a 00                	push   $0x0
+  pushl $251
+801067dd:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+801067e2:	e9 43 f0 ff ff       	jmp    8010582a <alltraps>
+
+801067e7 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+801067e7:	6a 00                	push   $0x0
+  pushl $252
+801067e9:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+801067ee:	e9 37 f0 ff ff       	jmp    8010582a <alltraps>
+
+801067f3 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+801067f3:	6a 00                	push   $0x0
+  pushl $253
+801067f5:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+801067fa:	e9 2b f0 ff ff       	jmp    8010582a <alltraps>
+
+801067ff <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+801067ff:	6a 00                	push   $0x0
+  pushl $254
+80106801:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+80106806:	e9 1f f0 ff ff       	jmp    8010582a <alltraps>
+
+8010680b <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+8010680b:	6a 00                	push   $0x0
+  pushl $255
+8010680d:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80106812:	e9 13 f0 ff ff       	jmp    8010582a <alltraps>
+80106817:	66 90                	xchg   %ax,%ax
+80106819:	66 90                	xchg   %ax,%ax
+8010681b:	66 90                	xchg   %ax,%ax
+8010681d:	66 90                	xchg   %ax,%ax
+8010681f:	90                   	nop
+
+80106820 <deallocuvm.part.0>:
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106820:	55                   	push   %ebp
+80106821:	89 e5                	mov    %esp,%ebp
+80106823:	57                   	push   %edi
+80106824:	56                   	push   %esi
+80106825:	53                   	push   %ebx
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+80106826:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+8010682c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106832:	83 ec 1c             	sub    $0x1c,%esp
+80106835:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+80106838:	39 d3                	cmp    %edx,%ebx
+8010683a:	73 49                	jae    80106885 <deallocuvm.part.0+0x65>
+8010683c:	89 c7                	mov    %eax,%edi
+8010683e:	eb 0c                	jmp    8010684c <deallocuvm.part.0+0x2c>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+    if(!pte)
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+80106840:	83 c0 01             	add    $0x1,%eax
+80106843:	c1 e0 16             	shl    $0x16,%eax
+80106846:	89 c3                	mov    %eax,%ebx
+  for(; a  < oldsz; a += PGSIZE){
+80106848:	39 da                	cmp    %ebx,%edx
+8010684a:	76 39                	jbe    80106885 <deallocuvm.part.0+0x65>
+  pde = &pgdir[PDX(va)];
+8010684c:	89 d8                	mov    %ebx,%eax
+8010684e:	c1 e8 16             	shr    $0x16,%eax
+  if(*pde & PTE_P){
+80106851:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
+80106854:	f6 c1 01             	test   $0x1,%cl
+80106857:	74 e7                	je     80106840 <deallocuvm.part.0+0x20>
+  return &pgtab[PTX(va)];
+80106859:	89 de                	mov    %ebx,%esi
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+8010685b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  return &pgtab[PTX(va)];
+80106861:	c1 ee 0a             	shr    $0xa,%esi
+80106864:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
+8010686a:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
+    if(!pte)
+80106871:	85 f6                	test   %esi,%esi
+80106873:	74 cb                	je     80106840 <deallocuvm.part.0+0x20>
+    else if((*pte & PTE_P) != 0){
+80106875:	8b 06                	mov    (%esi),%eax
+80106877:	a8 01                	test   $0x1,%al
+80106879:	75 15                	jne    80106890 <deallocuvm.part.0+0x70>
+  for(; a  < oldsz; a += PGSIZE){
+8010687b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106881:	39 da                	cmp    %ebx,%edx
+80106883:	77 c7                	ja     8010684c <deallocuvm.part.0+0x2c>
+      kfree(v);
+      *pte = 0;
+    }
+  }
+  return newsz;
+}
+80106885:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106888:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010688b:	5b                   	pop    %ebx
+8010688c:	5e                   	pop    %esi
+8010688d:	5f                   	pop    %edi
+8010688e:	5d                   	pop    %ebp
+8010688f:	c3                   	ret    
+      if(pa == 0)
+80106890:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106895:	74 25                	je     801068bc <deallocuvm.part.0+0x9c>
+      kfree(v);
+80106897:	83 ec 0c             	sub    $0xc,%esp
+      char *v = P2V(pa);
+8010689a:	05 00 00 00 80       	add    $0x80000000,%eax
+8010689f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+801068a2:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+      kfree(v);
+801068a8:	50                   	push   %eax
+801068a9:	e8 12 bc ff ff       	call   801024c0 <kfree>
+      *pte = 0;
+801068ae:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+  for(; a  < oldsz; a += PGSIZE){
+801068b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801068b7:	83 c4 10             	add    $0x10,%esp
+801068ba:	eb 8c                	jmp    80106848 <deallocuvm.part.0+0x28>
+        panic("kfree");
+801068bc:	83 ec 0c             	sub    $0xc,%esp
+801068bf:	68 86 74 10 80       	push   $0x80107486
+801068c4:	e8 b7 9a ff ff       	call   80100380 <panic>
+801068c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801068d0 <seginit>:
+{
+801068d0:	55                   	push   %ebp
+801068d1:	89 e5                	mov    %esp,%ebp
+801068d3:	83 ec 18             	sub    $0x18,%esp
+  c = &cpus[cpuid()];
+801068d6:	e8 75 d0 ff ff       	call   80103950 <cpuid>
+  pd[0] = size-1;
+801068db:	ba 2f 00 00 00       	mov    $0x2f,%edx
+801068e0:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+801068e6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+801068ea:	c7 80 18 18 11 80 ff 	movl   $0xffff,-0x7feee7e8(%eax)
+801068f1:	ff 00 00 
+801068f4:	c7 80 1c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7e4(%eax)
+801068fb:	9a cf 00 
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+801068fe:	c7 80 20 18 11 80 ff 	movl   $0xffff,-0x7feee7e0(%eax)
+80106905:	ff 00 00 
+80106908:	c7 80 24 18 11 80 00 	movl   $0xcf9200,-0x7feee7dc(%eax)
+8010690f:	92 cf 00 
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80106912:	c7 80 28 18 11 80 ff 	movl   $0xffff,-0x7feee7d8(%eax)
+80106919:	ff 00 00 
+8010691c:	c7 80 2c 18 11 80 00 	movl   $0xcffa00,-0x7feee7d4(%eax)
+80106923:	fa cf 00 
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+80106926:	c7 80 30 18 11 80 ff 	movl   $0xffff,-0x7feee7d0(%eax)
+8010692d:	ff 00 00 
+80106930:	c7 80 34 18 11 80 00 	movl   $0xcff200,-0x7feee7cc(%eax)
+80106937:	f2 cf 00 
+  lgdt(c->gdt, sizeof(c->gdt));
+8010693a:	05 10 18 11 80       	add    $0x80111810,%eax
+  pd[1] = (uint)p;
+8010693f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+  pd[2] = (uint)p >> 16;
+80106943:	c1 e8 10             	shr    $0x10,%eax
+80106946:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+  asm volatile("lgdt (%0)" : : "r" (pd));
+8010694a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+8010694d:	0f 01 10             	lgdtl  (%eax)
+}
+80106950:	c9                   	leave  
+80106951:	c3                   	ret    
+80106952:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106960 <mappages>:
+{
+80106960:	55                   	push   %ebp
+80106961:	89 e5                	mov    %esp,%ebp
+80106963:	57                   	push   %edi
+80106964:	56                   	push   %esi
+80106965:	53                   	push   %ebx
+80106966:	83 ec 1c             	sub    $0x1c,%esp
+80106969:	8b 45 0c             	mov    0xc(%ebp),%eax
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+8010696c:	8b 55 10             	mov    0x10(%ebp),%edx
+  a = (char*)PGROUNDDOWN((uint)va);
+8010696f:	89 c3                	mov    %eax,%ebx
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80106971:	8d 44 10 ff          	lea    -0x1(%eax,%edx,1),%eax
+80106975:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  a = (char*)PGROUNDDOWN((uint)va);
+8010697a:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80106980:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106983:	8b 45 14             	mov    0x14(%ebp),%eax
+80106986:	29 d8                	sub    %ebx,%eax
+80106988:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010698b:	eb 3a                	jmp    801069c7 <mappages+0x67>
+8010698d:	8d 76 00             	lea    0x0(%esi),%esi
+  return &pgtab[PTX(va)];
+80106990:	89 da                	mov    %ebx,%edx
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106992:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  return &pgtab[PTX(va)];
+80106997:	c1 ea 0a             	shr    $0xa,%edx
+8010699a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+801069a0:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+801069a7:	85 c0                	test   %eax,%eax
+801069a9:	74 75                	je     80106a20 <mappages+0xc0>
+    if(*pte & PTE_P)
+801069ab:	f6 00 01             	testb  $0x1,(%eax)
+801069ae:	0f 85 86 00 00 00    	jne    80106a3a <mappages+0xda>
+    *pte = pa | perm | PTE_P;
+801069b4:	0b 75 18             	or     0x18(%ebp),%esi
+801069b7:	83 ce 01             	or     $0x1,%esi
+801069ba:	89 30                	mov    %esi,(%eax)
+    if(a == last)
+801069bc:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
+801069bf:	74 6f                	je     80106a30 <mappages+0xd0>
+    a += PGSIZE;
+801069c1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+  for(;;){
+801069c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  pde = &pgdir[PDX(va)];
+801069ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801069cd:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+801069d0:	89 d8                	mov    %ebx,%eax
+801069d2:	c1 e8 16             	shr    $0x16,%eax
+801069d5:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
+  if(*pde & PTE_P){
+801069d8:	8b 07                	mov    (%edi),%eax
+801069da:	a8 01                	test   $0x1,%al
+801069dc:	75 b2                	jne    80106990 <mappages+0x30>
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+801069de:	e8 9d bc ff ff       	call   80102680 <kalloc>
+801069e3:	85 c0                	test   %eax,%eax
+801069e5:	74 39                	je     80106a20 <mappages+0xc0>
+    memset(pgtab, 0, PGSIZE);
+801069e7:	83 ec 04             	sub    $0x4,%esp
+801069ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801069ed:	68 00 10 00 00       	push   $0x1000
+801069f2:	6a 00                	push   $0x0
+801069f4:	50                   	push   %eax
+801069f5:	e8 66 dc ff ff       	call   80104660 <memset>
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+801069fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
+  return &pgtab[PTX(va)];
+801069fd:	83 c4 10             	add    $0x10,%esp
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+80106a00:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
+80106a06:	83 c8 07             	or     $0x7,%eax
+80106a09:	89 07                	mov    %eax,(%edi)
+  return &pgtab[PTX(va)];
+80106a0b:	89 d8                	mov    %ebx,%eax
+80106a0d:	c1 e8 0a             	shr    $0xa,%eax
+80106a10:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106a15:	01 d0                	add    %edx,%eax
+80106a17:	eb 92                	jmp    801069ab <mappages+0x4b>
+80106a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+}
+80106a20:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106a23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106a28:	5b                   	pop    %ebx
+80106a29:	5e                   	pop    %esi
+80106a2a:	5f                   	pop    %edi
+80106a2b:	5d                   	pop    %ebp
+80106a2c:	c3                   	ret    
+80106a2d:	8d 76 00             	lea    0x0(%esi),%esi
+80106a30:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106a33:	31 c0                	xor    %eax,%eax
+}
+80106a35:	5b                   	pop    %ebx
+80106a36:	5e                   	pop    %esi
+80106a37:	5f                   	pop    %edi
+80106a38:	5d                   	pop    %ebp
+80106a39:	c3                   	ret    
+      panic("remap");
+80106a3a:	83 ec 0c             	sub    $0xc,%esp
+80106a3d:	68 30 7b 10 80       	push   $0x80107b30
+80106a42:	e8 39 99 ff ff       	call   80100380 <panic>
+80106a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a4e:	66 90                	xchg   %ax,%ax
+
+80106a50 <switchkvm>:
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106a50:	a1 c4 44 11 80       	mov    0x801144c4,%eax
+80106a55:	05 00 00 00 80       	add    $0x80000000,%eax
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106a5a:	0f 22 d8             	mov    %eax,%cr3
+}
+80106a5d:	c3                   	ret    
+80106a5e:	66 90                	xchg   %ax,%ax
+
+80106a60 <switchuvm>:
+{
+80106a60:	55                   	push   %ebp
+80106a61:	89 e5                	mov    %esp,%ebp
+80106a63:	57                   	push   %edi
+80106a64:	56                   	push   %esi
+80106a65:	53                   	push   %ebx
+80106a66:	83 ec 1c             	sub    $0x1c,%esp
+80106a69:	8b 75 08             	mov    0x8(%ebp),%esi
+  if(p == 0)
+80106a6c:	85 f6                	test   %esi,%esi
+80106a6e:	0f 84 cb 00 00 00    	je     80106b3f <switchuvm+0xdf>
+  if(p->kstack == 0)
+80106a74:	8b 46 08             	mov    0x8(%esi),%eax
+80106a77:	85 c0                	test   %eax,%eax
+80106a79:	0f 84 da 00 00 00    	je     80106b59 <switchuvm+0xf9>
+  if(p->pgdir == 0)
+80106a7f:	8b 46 04             	mov    0x4(%esi),%eax
+80106a82:	85 c0                	test   %eax,%eax
+80106a84:	0f 84 c2 00 00 00    	je     80106b4c <switchuvm+0xec>
+  pushcli();
+80106a8a:	e8 c1 d9 ff ff       	call   80104450 <pushcli>
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80106a8f:	e8 5c ce ff ff       	call   801038f0 <mycpu>
+80106a94:	89 c3                	mov    %eax,%ebx
+80106a96:	e8 55 ce ff ff       	call   801038f0 <mycpu>
+80106a9b:	89 c7                	mov    %eax,%edi
+80106a9d:	e8 4e ce ff ff       	call   801038f0 <mycpu>
+80106aa2:	83 c7 08             	add    $0x8,%edi
+80106aa5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106aa8:	e8 43 ce ff ff       	call   801038f0 <mycpu>
+80106aad:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106ab0:	ba 67 00 00 00       	mov    $0x67,%edx
+80106ab5:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106abc:	83 c0 08             	add    $0x8,%eax
+80106abf:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106ac6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80106acb:	83 c1 08             	add    $0x8,%ecx
+80106ace:	c1 e8 18             	shr    $0x18,%eax
+80106ad1:	c1 e9 10             	shr    $0x10,%ecx
+80106ad4:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80106ada:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80106ae0:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106ae5:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80106aec:	bb 10 00 00 00       	mov    $0x10,%ebx
+  mycpu()->gdt[SEG_TSS].s = 0;
+80106af1:	e8 fa cd ff ff       	call   801038f0 <mycpu>
+80106af6:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80106afd:	e8 ee cd ff ff       	call   801038f0 <mycpu>
+80106b02:	66 89 58 10          	mov    %bx,0x10(%eax)
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+80106b06:	8b 5e 08             	mov    0x8(%esi),%ebx
+80106b09:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106b0f:	e8 dc cd ff ff       	call   801038f0 <mycpu>
+80106b14:	89 58 0c             	mov    %ebx,0xc(%eax)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106b17:	e8 d4 cd ff ff       	call   801038f0 <mycpu>
+80106b1c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+  asm volatile("ltr %0" : : "r" (sel));
+80106b20:	b8 28 00 00 00       	mov    $0x28,%eax
+80106b25:	0f 00 d8             	ltr    %ax
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+80106b28:	8b 46 04             	mov    0x4(%esi),%eax
+80106b2b:	05 00 00 00 80       	add    $0x80000000,%eax
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106b30:	0f 22 d8             	mov    %eax,%cr3
+}
+80106b33:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106b36:	5b                   	pop    %ebx
+80106b37:	5e                   	pop    %esi
+80106b38:	5f                   	pop    %edi
+80106b39:	5d                   	pop    %ebp
+  popcli();
+80106b3a:	e9 61 d9 ff ff       	jmp    801044a0 <popcli>
+    panic("switchuvm: no process");
+80106b3f:	83 ec 0c             	sub    $0xc,%esp
+80106b42:	68 36 7b 10 80       	push   $0x80107b36
+80106b47:	e8 34 98 ff ff       	call   80100380 <panic>
+    panic("switchuvm: no pgdir");
+80106b4c:	83 ec 0c             	sub    $0xc,%esp
+80106b4f:	68 61 7b 10 80       	push   $0x80107b61
+80106b54:	e8 27 98 ff ff       	call   80100380 <panic>
+    panic("switchuvm: no kstack");
+80106b59:	83 ec 0c             	sub    $0xc,%esp
+80106b5c:	68 4c 7b 10 80       	push   $0x80107b4c
+80106b61:	e8 1a 98 ff ff       	call   80100380 <panic>
+80106b66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106b70 <inituvm>:
+{
+80106b70:	55                   	push   %ebp
+80106b71:	89 e5                	mov    %esp,%ebp
+80106b73:	57                   	push   %edi
+80106b74:	56                   	push   %esi
+80106b75:	53                   	push   %ebx
+80106b76:	83 ec 1c             	sub    $0x1c,%esp
+80106b79:	8b 75 10             	mov    0x10(%ebp),%esi
+80106b7c:	8b 55 08             	mov    0x8(%ebp),%edx
+80106b7f:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(sz >= PGSIZE)
+80106b82:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106b88:	77 50                	ja     80106bda <inituvm+0x6a>
+80106b8a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  mem = kalloc();
+80106b8d:	e8 ee ba ff ff       	call   80102680 <kalloc>
+  memset(mem, 0, PGSIZE);
+80106b92:	83 ec 04             	sub    $0x4,%esp
+80106b95:	68 00 10 00 00       	push   $0x1000
+  mem = kalloc();
+80106b9a:	89 c3                	mov    %eax,%ebx
+  memset(mem, 0, PGSIZE);
+80106b9c:	6a 00                	push   $0x0
+80106b9e:	50                   	push   %eax
+80106b9f:	e8 bc da ff ff       	call   80104660 <memset>
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+80106ba4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106ba7:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106bad:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+80106bb4:	50                   	push   %eax
+80106bb5:	68 00 10 00 00       	push   $0x1000
+80106bba:	6a 00                	push   $0x0
+80106bbc:	52                   	push   %edx
+80106bbd:	e8 9e fd ff ff       	call   80106960 <mappages>
+  memmove(mem, init, sz);
+80106bc2:	89 75 10             	mov    %esi,0x10(%ebp)
+80106bc5:	83 c4 20             	add    $0x20,%esp
+80106bc8:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80106bcb:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80106bce:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106bd1:	5b                   	pop    %ebx
+80106bd2:	5e                   	pop    %esi
+80106bd3:	5f                   	pop    %edi
+80106bd4:	5d                   	pop    %ebp
+  memmove(mem, init, sz);
+80106bd5:	e9 26 db ff ff       	jmp    80104700 <memmove>
+    panic("inituvm: more than a page");
+80106bda:	83 ec 0c             	sub    $0xc,%esp
+80106bdd:	68 75 7b 10 80       	push   $0x80107b75
+80106be2:	e8 99 97 ff ff       	call   80100380 <panic>
+80106be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106bee:	66 90                	xchg   %ax,%ax
+
+80106bf0 <loaduvm>:
+{
+80106bf0:	55                   	push   %ebp
+80106bf1:	89 e5                	mov    %esp,%ebp
+80106bf3:	57                   	push   %edi
+80106bf4:	56                   	push   %esi
+80106bf5:	53                   	push   %ebx
+80106bf6:	83 ec 1c             	sub    $0x1c,%esp
+80106bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106bfc:	8b 75 18             	mov    0x18(%ebp),%esi
+  if((uint) addr % PGSIZE != 0)
+80106bff:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106c04:	0f 85 bb 00 00 00    	jne    80106cc5 <loaduvm+0xd5>
+  for(i = 0; i < sz; i += PGSIZE){
+80106c0a:	01 f0                	add    %esi,%eax
+80106c0c:	89 f3                	mov    %esi,%ebx
+80106c0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106c11:	8b 45 14             	mov    0x14(%ebp),%eax
+80106c14:	01 f0                	add    %esi,%eax
+80106c16:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(i = 0; i < sz; i += PGSIZE){
+80106c19:	85 f6                	test   %esi,%esi
+80106c1b:	0f 84 87 00 00 00    	je     80106ca8 <loaduvm+0xb8>
+80106c21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  pde = &pgdir[PDX(va)];
+80106c28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  if(*pde & PTE_P){
+80106c2b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80106c2e:	29 d8                	sub    %ebx,%eax
+  pde = &pgdir[PDX(va)];
+80106c30:	89 c2                	mov    %eax,%edx
+80106c32:	c1 ea 16             	shr    $0x16,%edx
+  if(*pde & PTE_P){
+80106c35:	8b 14 91             	mov    (%ecx,%edx,4),%edx
+80106c38:	f6 c2 01             	test   $0x1,%dl
+80106c3b:	75 13                	jne    80106c50 <loaduvm+0x60>
+      panic("loaduvm: address should exist");
+80106c3d:	83 ec 0c             	sub    $0xc,%esp
+80106c40:	68 8f 7b 10 80       	push   $0x80107b8f
+80106c45:	e8 36 97 ff ff       	call   80100380 <panic>
+80106c4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  return &pgtab[PTX(va)];
+80106c50:	c1 e8 0a             	shr    $0xa,%eax
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106c53:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+  return &pgtab[PTX(va)];
+80106c59:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106c5e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80106c65:	85 c0                	test   %eax,%eax
+80106c67:	74 d4                	je     80106c3d <loaduvm+0x4d>
+    pa = PTE_ADDR(*pte);
+80106c69:	8b 00                	mov    (%eax),%eax
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106c6b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+    if(sz - i < PGSIZE)
+80106c6e:	bf 00 10 00 00       	mov    $0x1000,%edi
+    pa = PTE_ADDR(*pte);
+80106c73:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    if(sz - i < PGSIZE)
+80106c78:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80106c7e:	0f 46 fb             	cmovbe %ebx,%edi
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106c81:	29 d9                	sub    %ebx,%ecx
+80106c83:	05 00 00 00 80       	add    $0x80000000,%eax
+80106c88:	57                   	push   %edi
+80106c89:	51                   	push   %ecx
+80106c8a:	50                   	push   %eax
+80106c8b:	ff 75 10             	push   0x10(%ebp)
+80106c8e:	e8 fd ad ff ff       	call   80101a90 <readi>
+80106c93:	83 c4 10             	add    $0x10,%esp
+80106c96:	39 f8                	cmp    %edi,%eax
+80106c98:	75 1e                	jne    80106cb8 <loaduvm+0xc8>
+  for(i = 0; i < sz; i += PGSIZE){
+80106c9a:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80106ca0:	89 f0                	mov    %esi,%eax
+80106ca2:	29 d8                	sub    %ebx,%eax
+80106ca4:	39 c6                	cmp    %eax,%esi
+80106ca6:	77 80                	ja     80106c28 <loaduvm+0x38>
+}
+80106ca8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106cab:	31 c0                	xor    %eax,%eax
+}
+80106cad:	5b                   	pop    %ebx
+80106cae:	5e                   	pop    %esi
+80106caf:	5f                   	pop    %edi
+80106cb0:	5d                   	pop    %ebp
+80106cb1:	c3                   	ret    
+80106cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106cb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106cbb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106cc0:	5b                   	pop    %ebx
+80106cc1:	5e                   	pop    %esi
+80106cc2:	5f                   	pop    %edi
+80106cc3:	5d                   	pop    %ebp
+80106cc4:	c3                   	ret    
+    panic("loaduvm: addr must be page aligned");
+80106cc5:	83 ec 0c             	sub    $0xc,%esp
+80106cc8:	68 30 7c 10 80       	push   $0x80107c30
+80106ccd:	e8 ae 96 ff ff       	call   80100380 <panic>
+80106cd2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106ce0 <allocuvm>:
+{
+80106ce0:	55                   	push   %ebp
+80106ce1:	89 e5                	mov    %esp,%ebp
+80106ce3:	57                   	push   %edi
+80106ce4:	56                   	push   %esi
+80106ce5:	53                   	push   %ebx
+80106ce6:	83 ec 1c             	sub    $0x1c,%esp
+  if(newsz >= KERNBASE)
+80106ce9:	8b 7d 10             	mov    0x10(%ebp),%edi
+80106cec:	85 ff                	test   %edi,%edi
+80106cee:	0f 88 bc 00 00 00    	js     80106db0 <allocuvm+0xd0>
+  if(newsz < oldsz)
+80106cf4:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106cf7:	0f 82 a3 00 00 00    	jb     80106da0 <allocuvm+0xc0>
+  a = PGROUNDUP(oldsz);
+80106cfd:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106d00:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80106d06:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+  for(; a < newsz; a += PGSIZE){
+80106d0c:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106d0f:	0f 86 8e 00 00 00    	jbe    80106da3 <allocuvm+0xc3>
+80106d15:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80106d18:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106d1b:	eb 43                	jmp    80106d60 <allocuvm+0x80>
+80106d1d:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(mem, 0, PGSIZE);
+80106d20:	83 ec 04             	sub    $0x4,%esp
+80106d23:	68 00 10 00 00       	push   $0x1000
+80106d28:	6a 00                	push   $0x0
+80106d2a:	50                   	push   %eax
+80106d2b:	e8 30 d9 ff ff       	call   80104660 <memset>
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+80106d30:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106d36:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+80106d3d:	50                   	push   %eax
+80106d3e:	68 00 10 00 00       	push   $0x1000
+80106d43:	56                   	push   %esi
+80106d44:	57                   	push   %edi
+80106d45:	e8 16 fc ff ff       	call   80106960 <mappages>
+80106d4a:	83 c4 20             	add    $0x20,%esp
+80106d4d:	85 c0                	test   %eax,%eax
+80106d4f:	78 6f                	js     80106dc0 <allocuvm+0xe0>
+  for(; a < newsz; a += PGSIZE){
+80106d51:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106d57:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106d5a:	0f 86 a0 00 00 00    	jbe    80106e00 <allocuvm+0x120>
+    mem = kalloc();
+80106d60:	e8 1b b9 ff ff       	call   80102680 <kalloc>
+80106d65:	89 c3                	mov    %eax,%ebx
+    if(mem == 0){
+80106d67:	85 c0                	test   %eax,%eax
+80106d69:	75 b5                	jne    80106d20 <allocuvm+0x40>
+      cprintf("allocuvm out of memory\n");
+80106d6b:	83 ec 0c             	sub    $0xc,%esp
+80106d6e:	68 ad 7b 10 80       	push   $0x80107bad
+80106d73:	e8 28 99 ff ff       	call   801006a0 <cprintf>
+  if(newsz >= oldsz)
+80106d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106d7b:	83 c4 10             	add    $0x10,%esp
+80106d7e:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106d81:	74 2d                	je     80106db0 <allocuvm+0xd0>
+80106d83:	8b 55 10             	mov    0x10(%ebp),%edx
+80106d86:	89 c1                	mov    %eax,%ecx
+80106d88:	8b 45 08             	mov    0x8(%ebp),%eax
+      return 0;
+80106d8b:	31 ff                	xor    %edi,%edi
+80106d8d:	e8 8e fa ff ff       	call   80106820 <deallocuvm.part.0>
+}
+80106d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d95:	89 f8                	mov    %edi,%eax
+80106d97:	5b                   	pop    %ebx
+80106d98:	5e                   	pop    %esi
+80106d99:	5f                   	pop    %edi
+80106d9a:	5d                   	pop    %ebp
+80106d9b:	c3                   	ret    
+80106d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return oldsz;
+80106da0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+}
+80106da3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106da6:	89 f8                	mov    %edi,%eax
+80106da8:	5b                   	pop    %ebx
+80106da9:	5e                   	pop    %esi
+80106daa:	5f                   	pop    %edi
+80106dab:	5d                   	pop    %ebp
+80106dac:	c3                   	ret    
+80106dad:	8d 76 00             	lea    0x0(%esi),%esi
+80106db0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80106db3:	31 ff                	xor    %edi,%edi
+}
+80106db5:	5b                   	pop    %ebx
+80106db6:	89 f8                	mov    %edi,%eax
+80106db8:	5e                   	pop    %esi
+80106db9:	5f                   	pop    %edi
+80106dba:	5d                   	pop    %ebp
+80106dbb:	c3                   	ret    
+80106dbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      cprintf("allocuvm out of memory (2)\n");
+80106dc0:	83 ec 0c             	sub    $0xc,%esp
+80106dc3:	68 c5 7b 10 80       	push   $0x80107bc5
+80106dc8:	e8 d3 98 ff ff       	call   801006a0 <cprintf>
+  if(newsz >= oldsz)
+80106dcd:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106dd0:	83 c4 10             	add    $0x10,%esp
+80106dd3:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106dd6:	74 0d                	je     80106de5 <allocuvm+0x105>
+80106dd8:	89 c1                	mov    %eax,%ecx
+80106dda:	8b 55 10             	mov    0x10(%ebp),%edx
+80106ddd:	8b 45 08             	mov    0x8(%ebp),%eax
+80106de0:	e8 3b fa ff ff       	call   80106820 <deallocuvm.part.0>
+      kfree(mem);
+80106de5:	83 ec 0c             	sub    $0xc,%esp
+      return 0;
+80106de8:	31 ff                	xor    %edi,%edi
+      kfree(mem);
+80106dea:	53                   	push   %ebx
+80106deb:	e8 d0 b6 ff ff       	call   801024c0 <kfree>
+      return 0;
+80106df0:	83 c4 10             	add    $0x10,%esp
+}
+80106df3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106df6:	89 f8                	mov    %edi,%eax
+80106df8:	5b                   	pop    %ebx
+80106df9:	5e                   	pop    %esi
+80106dfa:	5f                   	pop    %edi
+80106dfb:	5d                   	pop    %ebp
+80106dfc:	c3                   	ret    
+80106dfd:	8d 76 00             	lea    0x0(%esi),%esi
+80106e00:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80106e03:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e06:	5b                   	pop    %ebx
+80106e07:	5e                   	pop    %esi
+80106e08:	89 f8                	mov    %edi,%eax
+80106e0a:	5f                   	pop    %edi
+80106e0b:	5d                   	pop    %ebp
+80106e0c:	c3                   	ret    
+80106e0d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106e10 <deallocuvm>:
+{
+80106e10:	55                   	push   %ebp
+80106e11:	89 e5                	mov    %esp,%ebp
+80106e13:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106e16:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80106e19:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(newsz >= oldsz)
+80106e1c:	39 d1                	cmp    %edx,%ecx
+80106e1e:	73 10                	jae    80106e30 <deallocuvm+0x20>
+}
+80106e20:	5d                   	pop    %ebp
+80106e21:	e9 fa f9 ff ff       	jmp    80106820 <deallocuvm.part.0>
+80106e26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e2d:	8d 76 00             	lea    0x0(%esi),%esi
+80106e30:	89 d0                	mov    %edx,%eax
+80106e32:	5d                   	pop    %ebp
+80106e33:	c3                   	ret    
+80106e34:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106e3f:	90                   	nop
+
+80106e40 <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+80106e40:	55                   	push   %ebp
+80106e41:	89 e5                	mov    %esp,%ebp
+80106e43:	57                   	push   %edi
+80106e44:	56                   	push   %esi
+80106e45:	53                   	push   %ebx
+80106e46:	83 ec 0c             	sub    $0xc,%esp
+80106e49:	8b 75 08             	mov    0x8(%ebp),%esi
+  uint i;
+
+  if(pgdir == 0)
+80106e4c:	85 f6                	test   %esi,%esi
+80106e4e:	74 59                	je     80106ea9 <freevm+0x69>
+  if(newsz >= oldsz)
+80106e50:	31 c9                	xor    %ecx,%ecx
+80106e52:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80106e57:	89 f0                	mov    %esi,%eax
+80106e59:	89 f3                	mov    %esi,%ebx
+80106e5b:	e8 c0 f9 ff ff       	call   80106820 <deallocuvm.part.0>
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+80106e60:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80106e66:	eb 0f                	jmp    80106e77 <freevm+0x37>
+80106e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e6f:	90                   	nop
+80106e70:	83 c3 04             	add    $0x4,%ebx
+80106e73:	39 df                	cmp    %ebx,%edi
+80106e75:	74 23                	je     80106e9a <freevm+0x5a>
+    if(pgdir[i] & PTE_P){
+80106e77:	8b 03                	mov    (%ebx),%eax
+80106e79:	a8 01                	test   $0x1,%al
+80106e7b:	74 f3                	je     80106e70 <freevm+0x30>
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+80106e7d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+      kfree(v);
+80106e82:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+80106e85:	83 c3 04             	add    $0x4,%ebx
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+80106e88:	05 00 00 00 80       	add    $0x80000000,%eax
+      kfree(v);
+80106e8d:	50                   	push   %eax
+80106e8e:	e8 2d b6 ff ff       	call   801024c0 <kfree>
+80106e93:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+80106e96:	39 df                	cmp    %ebx,%edi
+80106e98:	75 dd                	jne    80106e77 <freevm+0x37>
+    }
+  }
+  kfree((char*)pgdir);
+80106e9a:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80106e9d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106ea0:	5b                   	pop    %ebx
+80106ea1:	5e                   	pop    %esi
+80106ea2:	5f                   	pop    %edi
+80106ea3:	5d                   	pop    %ebp
+  kfree((char*)pgdir);
+80106ea4:	e9 17 b6 ff ff       	jmp    801024c0 <kfree>
+    panic("freevm: no pgdir");
+80106ea9:	83 ec 0c             	sub    $0xc,%esp
+80106eac:	68 e1 7b 10 80       	push   $0x80107be1
+80106eb1:	e8 ca 94 ff ff       	call   80100380 <panic>
+80106eb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ebd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106ec0 <setupkvm>:
+{
+80106ec0:	55                   	push   %ebp
+80106ec1:	89 e5                	mov    %esp,%ebp
+80106ec3:	56                   	push   %esi
+80106ec4:	53                   	push   %ebx
+  if((pgdir = (pde_t*)kalloc()) == 0)
+80106ec5:	e8 b6 b7 ff ff       	call   80102680 <kalloc>
+80106eca:	89 c6                	mov    %eax,%esi
+80106ecc:	85 c0                	test   %eax,%eax
+80106ece:	74 42                	je     80106f12 <setupkvm+0x52>
+  memset(pgdir, 0, PGSIZE);
+80106ed0:	83 ec 04             	sub    $0x4,%esp
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80106ed3:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+  memset(pgdir, 0, PGSIZE);
+80106ed8:	68 00 10 00 00       	push   $0x1000
+80106edd:	6a 00                	push   $0x0
+80106edf:	50                   	push   %eax
+80106ee0:	e8 7b d7 ff ff       	call   80104660 <memset>
+80106ee5:	83 c4 10             	add    $0x10,%esp
+                (uint)k->phys_start, k->perm) < 0) {
+80106ee8:	8b 43 04             	mov    0x4(%ebx),%eax
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+80106eeb:	8b 53 08             	mov    0x8(%ebx),%edx
+80106eee:	83 ec 0c             	sub    $0xc,%esp
+80106ef1:	ff 73 0c             	push   0xc(%ebx)
+80106ef4:	29 c2                	sub    %eax,%edx
+80106ef6:	50                   	push   %eax
+80106ef7:	52                   	push   %edx
+80106ef8:	ff 33                	push   (%ebx)
+80106efa:	56                   	push   %esi
+80106efb:	e8 60 fa ff ff       	call   80106960 <mappages>
+80106f00:	83 c4 20             	add    $0x20,%esp
+80106f03:	85 c0                	test   %eax,%eax
+80106f05:	78 19                	js     80106f20 <setupkvm+0x60>
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80106f07:	83 c3 10             	add    $0x10,%ebx
+80106f0a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80106f10:	75 d6                	jne    80106ee8 <setupkvm+0x28>
+}
+80106f12:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106f15:	89 f0                	mov    %esi,%eax
+80106f17:	5b                   	pop    %ebx
+80106f18:	5e                   	pop    %esi
+80106f19:	5d                   	pop    %ebp
+80106f1a:	c3                   	ret    
+80106f1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106f1f:	90                   	nop
+      freevm(pgdir);
+80106f20:	83 ec 0c             	sub    $0xc,%esp
+80106f23:	56                   	push   %esi
+      return 0;
+80106f24:	31 f6                	xor    %esi,%esi
+      freevm(pgdir);
+80106f26:	e8 15 ff ff ff       	call   80106e40 <freevm>
+      return 0;
+80106f2b:	83 c4 10             	add    $0x10,%esp
+}
+80106f2e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106f31:	89 f0                	mov    %esi,%eax
+80106f33:	5b                   	pop    %ebx
+80106f34:	5e                   	pop    %esi
+80106f35:	5d                   	pop    %ebp
+80106f36:	c3                   	ret    
+80106f37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f3e:	66 90                	xchg   %ax,%ax
+
+80106f40 <kvmalloc>:
+{
+80106f40:	55                   	push   %ebp
+80106f41:	89 e5                	mov    %esp,%ebp
+80106f43:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+80106f46:	e8 75 ff ff ff       	call   80106ec0 <setupkvm>
+80106f4b:	a3 c4 44 11 80       	mov    %eax,0x801144c4
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106f50:	05 00 00 00 80       	add    $0x80000000,%eax
+80106f55:	0f 22 d8             	mov    %eax,%cr3
+}
+80106f58:	c9                   	leave  
+80106f59:	c3                   	ret    
+80106f5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106f60 <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+80106f60:	55                   	push   %ebp
+80106f61:	89 e5                	mov    %esp,%ebp
+80106f63:	83 ec 08             	sub    $0x8,%esp
+80106f66:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(*pde & PTE_P){
+80106f69:	8b 55 08             	mov    0x8(%ebp),%edx
+  pde = &pgdir[PDX(va)];
+80106f6c:	89 c1                	mov    %eax,%ecx
+80106f6e:	c1 e9 16             	shr    $0x16,%ecx
+  if(*pde & PTE_P){
+80106f71:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+80106f74:	f6 c2 01             	test   $0x1,%dl
+80106f77:	75 17                	jne    80106f90 <clearpteu+0x30>
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+  if(pte == 0)
+    panic("clearpteu");
+80106f79:	83 ec 0c             	sub    $0xc,%esp
+80106f7c:	68 f2 7b 10 80       	push   $0x80107bf2
+80106f81:	e8 fa 93 ff ff       	call   80100380 <panic>
+80106f86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f8d:	8d 76 00             	lea    0x0(%esi),%esi
+  return &pgtab[PTX(va)];
+80106f90:	c1 e8 0a             	shr    $0xa,%eax
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106f93:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+  return &pgtab[PTX(va)];
+80106f99:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106f9e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+  if(pte == 0)
+80106fa5:	85 c0                	test   %eax,%eax
+80106fa7:	74 d0                	je     80106f79 <clearpteu+0x19>
+  *pte &= ~PTE_U;
+80106fa9:	83 20 fb             	andl   $0xfffffffb,(%eax)
+}
+80106fac:	c9                   	leave  
+80106fad:	c3                   	ret    
+80106fae:	66 90                	xchg   %ax,%ax
+
+80106fb0 <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+80106fb0:	55                   	push   %ebp
+80106fb1:	89 e5                	mov    %esp,%ebp
+80106fb3:	57                   	push   %edi
+80106fb4:	56                   	push   %esi
+80106fb5:	53                   	push   %ebx
+80106fb6:	83 ec 1c             	sub    $0x1c,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+80106fb9:	e8 02 ff ff ff       	call   80106ec0 <setupkvm>
+80106fbe:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106fc1:	85 c0                	test   %eax,%eax
+80106fc3:	0f 84 c0 00 00 00    	je     80107089 <copyuvm+0xd9>
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+80106fc9:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106fcc:	85 d2                	test   %edx,%edx
+80106fce:	0f 84 b5 00 00 00    	je     80107089 <copyuvm+0xd9>
+80106fd4:	31 f6                	xor    %esi,%esi
+80106fd6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106fdd:	8d 76 00             	lea    0x0(%esi),%esi
+  if(*pde & PTE_P){
+80106fe0:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  pde = &pgdir[PDX(va)];
+80106fe3:	89 f0                	mov    %esi,%eax
+80106fe5:	c1 e8 16             	shr    $0x16,%eax
+  if(*pde & PTE_P){
+80106fe8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
+80106feb:	a8 01                	test   $0x1,%al
+80106fed:	75 11                	jne    80107000 <copyuvm+0x50>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+80106fef:	83 ec 0c             	sub    $0xc,%esp
+80106ff2:	68 fc 7b 10 80       	push   $0x80107bfc
+80106ff7:	e8 84 93 ff ff       	call   80100380 <panic>
+80106ffc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return &pgtab[PTX(va)];
+80107000:	89 f2                	mov    %esi,%edx
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80107002:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  return &pgtab[PTX(va)];
+80107007:	c1 ea 0a             	shr    $0xa,%edx
+8010700a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80107010:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+80107017:	85 c0                	test   %eax,%eax
+80107019:	74 d4                	je     80106fef <copyuvm+0x3f>
+    if(!(*pte & PTE_P))
+8010701b:	8b 38                	mov    (%eax),%edi
+8010701d:	f7 c7 01 00 00 00    	test   $0x1,%edi
+80107023:	0f 84 9b 00 00 00    	je     801070c4 <copyuvm+0x114>
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+80107029:	89 fb                	mov    %edi,%ebx
+    flags = PTE_FLAGS(*pte);
+8010702b:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
+80107031:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+    pa = PTE_ADDR(*pte);
+80107034:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+    if((mem = kalloc()) == 0)
+8010703a:	e8 41 b6 ff ff       	call   80102680 <kalloc>
+8010703f:	89 c7                	mov    %eax,%edi
+80107041:	85 c0                	test   %eax,%eax
+80107043:	74 5f                	je     801070a4 <copyuvm+0xf4>
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+80107045:	83 ec 04             	sub    $0x4,%esp
+80107048:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+8010704e:	68 00 10 00 00       	push   $0x1000
+80107053:	53                   	push   %ebx
+80107054:	50                   	push   %eax
+80107055:	e8 a6 d6 ff ff       	call   80104700 <memmove>
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+8010705a:	58                   	pop    %eax
+8010705b:	8d 87 00 00 00 80    	lea    -0x80000000(%edi),%eax
+80107061:	ff 75 e4             	push   -0x1c(%ebp)
+80107064:	50                   	push   %eax
+80107065:	68 00 10 00 00       	push   $0x1000
+8010706a:	56                   	push   %esi
+8010706b:	ff 75 e0             	push   -0x20(%ebp)
+8010706e:	e8 ed f8 ff ff       	call   80106960 <mappages>
+80107073:	83 c4 20             	add    $0x20,%esp
+80107076:	85 c0                	test   %eax,%eax
+80107078:	78 1e                	js     80107098 <copyuvm+0xe8>
+  for(i = 0; i < sz; i += PGSIZE){
+8010707a:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107080:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107083:	0f 87 57 ff ff ff    	ja     80106fe0 <copyuvm+0x30>
+  return d;
+
+bad:
+  freevm(d);
+  return 0;
+}
+80107089:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010708c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010708f:	5b                   	pop    %ebx
+80107090:	5e                   	pop    %esi
+80107091:	5f                   	pop    %edi
+80107092:	5d                   	pop    %ebp
+80107093:	c3                   	ret    
+80107094:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      kfree(mem);
+80107098:	83 ec 0c             	sub    $0xc,%esp
+8010709b:	57                   	push   %edi
+8010709c:	e8 1f b4 ff ff       	call   801024c0 <kfree>
+      goto bad;
+801070a1:	83 c4 10             	add    $0x10,%esp
+  freevm(d);
+801070a4:	83 ec 0c             	sub    $0xc,%esp
+801070a7:	ff 75 e0             	push   -0x20(%ebp)
+801070aa:	e8 91 fd ff ff       	call   80106e40 <freevm>
+  return 0;
+801070af:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+801070b6:	83 c4 10             	add    $0x10,%esp
+}
+801070b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801070bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070bf:	5b                   	pop    %ebx
+801070c0:	5e                   	pop    %esi
+801070c1:	5f                   	pop    %edi
+801070c2:	5d                   	pop    %ebp
+801070c3:	c3                   	ret    
+      panic("copyuvm: page not present");
+801070c4:	83 ec 0c             	sub    $0xc,%esp
+801070c7:	68 16 7c 10 80       	push   $0x80107c16
+801070cc:	e8 af 92 ff ff       	call   80100380 <panic>
+801070d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070df:	90                   	nop
+
+801070e0 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+801070e0:	55                   	push   %ebp
+801070e1:	89 e5                	mov    %esp,%ebp
+801070e3:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(*pde & PTE_P){
+801070e6:	8b 55 08             	mov    0x8(%ebp),%edx
+  pde = &pgdir[PDX(va)];
+801070e9:	89 c1                	mov    %eax,%ecx
+801070eb:	c1 e9 16             	shr    $0x16,%ecx
+  if(*pde & PTE_P){
+801070ee:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+801070f1:	f6 c2 01             	test   $0x1,%dl
+801070f4:	0f 84 00 01 00 00    	je     801071fa <uva2ka.cold>
+  return &pgtab[PTX(va)];
+801070fa:	c1 e8 0c             	shr    $0xc,%eax
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+801070fd:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+  if((*pte & PTE_P) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+}
+80107103:	5d                   	pop    %ebp
+  return &pgtab[PTX(va)];
+80107104:	25 ff 03 00 00       	and    $0x3ff,%eax
+  if((*pte & PTE_P) == 0)
+80107109:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
+  if((*pte & PTE_U) == 0)
+80107110:	89 c2                	mov    %eax,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+80107112:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((*pte & PTE_U) == 0)
+80107117:	83 e2 05             	and    $0x5,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+8010711a:	05 00 00 00 80       	add    $0x80000000,%eax
+8010711f:	83 fa 05             	cmp    $0x5,%edx
+80107122:	ba 00 00 00 00       	mov    $0x0,%edx
+80107127:	0f 45 c2             	cmovne %edx,%eax
+}
+8010712a:	c3                   	ret    
+8010712b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010712f:	90                   	nop
+
+80107130 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+80107130:	55                   	push   %ebp
+80107131:	89 e5                	mov    %esp,%ebp
+80107133:	57                   	push   %edi
+80107134:	56                   	push   %esi
+80107135:	53                   	push   %ebx
+80107136:	83 ec 0c             	sub    $0xc,%esp
+80107139:	8b 75 14             	mov    0x14(%ebp),%esi
+8010713c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010713f:	8b 55 10             	mov    0x10(%ebp),%edx
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80107142:	85 f6                	test   %esi,%esi
+80107144:	75 51                	jne    80107197 <copyout+0x67>
+80107146:	e9 a5 00 00 00       	jmp    801071f0 <copyout+0xc0>
+8010714b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010714f:	90                   	nop
+  return (char*)P2V(PTE_ADDR(*pte));
+80107150:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80107156:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+8010715c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
+80107162:	74 75                	je     801071d9 <copyout+0xa9>
+      return -1;
+    n = PGSIZE - (va - va0);
+80107164:	89 fb                	mov    %edi,%ebx
+    if(n > len)
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+80107166:	89 55 10             	mov    %edx,0x10(%ebp)
+    n = PGSIZE - (va - va0);
+80107169:	29 c3                	sub    %eax,%ebx
+8010716b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107171:	39 f3                	cmp    %esi,%ebx
+80107173:	0f 47 de             	cmova  %esi,%ebx
+    memmove(pa0 + (va - va0), buf, n);
+80107176:	29 f8                	sub    %edi,%eax
+80107178:	83 ec 04             	sub    $0x4,%esp
+8010717b:	01 c1                	add    %eax,%ecx
+8010717d:	53                   	push   %ebx
+8010717e:	52                   	push   %edx
+8010717f:	51                   	push   %ecx
+80107180:	e8 7b d5 ff ff       	call   80104700 <memmove>
+    len -= n;
+    buf += n;
+80107185:	8b 55 10             	mov    0x10(%ebp),%edx
+    va = va0 + PGSIZE;
+80107188:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
+  while(len > 0){
+8010718e:	83 c4 10             	add    $0x10,%esp
+    buf += n;
+80107191:	01 da                	add    %ebx,%edx
+  while(len > 0){
+80107193:	29 de                	sub    %ebx,%esi
+80107195:	74 59                	je     801071f0 <copyout+0xc0>
+  if(*pde & PTE_P){
+80107197:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  pde = &pgdir[PDX(va)];
+8010719a:	89 c1                	mov    %eax,%ecx
+    va0 = (uint)PGROUNDDOWN(va);
+8010719c:	89 c7                	mov    %eax,%edi
+  pde = &pgdir[PDX(va)];
+8010719e:	c1 e9 16             	shr    $0x16,%ecx
+    va0 = (uint)PGROUNDDOWN(va);
+801071a1:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+  if(*pde & PTE_P){
+801071a7:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
+801071aa:	f6 c1 01             	test   $0x1,%cl
+801071ad:	0f 84 4e 00 00 00    	je     80107201 <copyout.cold>
+  return &pgtab[PTX(va)];
+801071b3:	89 fb                	mov    %edi,%ebx
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+801071b5:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+  return &pgtab[PTX(va)];
+801071bb:	c1 eb 0c             	shr    $0xc,%ebx
+801071be:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
+  if((*pte & PTE_P) == 0)
+801071c4:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
+  if((*pte & PTE_U) == 0)
+801071cb:	89 d9                	mov    %ebx,%ecx
+801071cd:	83 e1 05             	and    $0x5,%ecx
+801071d0:	83 f9 05             	cmp    $0x5,%ecx
+801071d3:	0f 84 77 ff ff ff    	je     80107150 <copyout+0x20>
+  }
+  return 0;
+}
+801071d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+801071dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801071e1:	5b                   	pop    %ebx
+801071e2:	5e                   	pop    %esi
+801071e3:	5f                   	pop    %edi
+801071e4:	5d                   	pop    %ebp
+801071e5:	c3                   	ret    
+801071e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801071ed:	8d 76 00             	lea    0x0(%esi),%esi
+801071f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801071f3:	31 c0                	xor    %eax,%eax
+}
+801071f5:	5b                   	pop    %ebx
+801071f6:	5e                   	pop    %esi
+801071f7:	5f                   	pop    %edi
+801071f8:	5d                   	pop    %ebp
+801071f9:	c3                   	ret    
+
+801071fa <uva2ka.cold>:
+  if((*pte & PTE_P) == 0)
+801071fa:	a1 00 00 00 00       	mov    0x0,%eax
+801071ff:	0f 0b                	ud2    
+
+80107201 <copyout.cold>:
+80107201:	a1 00 00 00 00       	mov    0x0,%eax
+80107206:	0f 0b                	ud2    
diff -ruN xv6-public/kernel.sym xv6-publica/kernel.sym
--- xv6-public/kernel.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/kernel.sym	2024-10-15 10:58:41.097888564 +0530
@@ -0,0 +1,504 @@
+00000000 bio.c
+00000000 console.c
+8010ef20 cons
+8010ef58 panicked
+80100400 consputc.part.0
+80100600 printint
+80107290 digits.0
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+801011c0 bfree
+80101240 balloc
+80101350 iget
+80101450 bmap
+80101d90 namex
+00000000 ide.c
+801020e0 idestart
+80111600 idelock
+801115e0 havedisk1
+801115e4 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kbd.c
+8011167c shift.1
+801075c0 shiftcode
+801074c0 togglecode
+801074a0 charcode.0
+80108200 normalmap
+80108100 shiftmap
+80108000 ctlmap
+00000000 lapic.c
+00000000 log.c
+80102bc0 install_trans
+80102c60 write_head
+00000000 main.c
+80103000 mpmain
+80103040 mpenter
+00000000 mp.c
+80103190 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+801037b0 allocproc
+8010a000 first.1
+80113c54 initproc
+8010786c states.0
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+801078e0 syscalls
+00000000 sysfile.c
+80104ad0 create
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80105c20 uartgetc
+801144c0 uart
+00000000 vm.c
+80106820 deallocuvm.part.0
+8010a420 kmap
+801071fa uva2ka.cold
+80107201 copyout.cold
+80106960 mappages
+80100280 consoleread
+8010676f vector242
+801061c6 vector119
+8010000c entry
+801060a6 vector87
+8010609d vector86
+80104820 safestrcpy
+80104df0 sys_close
+801067db vector251
+801060ca vector91
+80105ec0 vector33
+801063af vector162
+80103ff0 yield
+801116a0 log
+80111640 kmem
+80106613 vector213
+80106163 vector108
+80105c50 uartinit
+80105f1a vector43
+80102910 lapiceoi
+801063d3 vector165
+801064c3 vector185
+801023d0 ioapicinit
+801061a2 vector115
+80101020 fileread
+801061e1 vector122
+80105710 sys_sbrk
+80111780 ioapicid
+80106367 vector156
+80106793 vector245
+80111634 ioapic
+801064f3 vector189
+80105de4 vector7
+80105fbc vector61
+80105e6f vector24
+8010617e vector111
+80106577 vector200
+80105ff2 vector67
+8010628f vector138
+80106031 vector74
+80103cd0 sched
+80104700 memmove
+80105f98 vector57
+80104a60 syscall
+8010661f vector214
+80106112 vector99
+80103950 cpuid
+80101b90 writei
+801062b3 vector141
+80105690 sys_fork
+8010a520 bcache
+80106427 vector172
+80106763 vector241
+801043f0 getcallerpcs
+80105330 sys_mkdir
+801067f3 vector253
+80105dc0 vector3
+80105db7 vector2
+80101cc0 namecmp
+801066bb vector227
+801065ef vector210
+801049e0 argstr
+80106697 vector224
+80105f08 vector41
+801006a0 cprintf
+80100ea0 filedup
+801020a0 namei
+80105e54 vector21
+80100040 binit
+80106463 vector177
+801061bd vector118
+8010600d vector70
+80106004 vector69
+80106733 vector237
+80105fd7 vector64
+80105e8a vector27
+80106247 vector132
+801064cf vector186
+80104cf0 sys_read
+80106643 vector217
+80104890 fetchint
+80106ec0 setupkvm
+80104760 memcpy
+80106e40 freevm
+80105dae vector1
+8010646f vector178
+80105eed vector38
+801024c0 kfree
+8010673f vector238
+801038f0 mycpu
+801018b0 iput
+80106253 vector133
+80106028 vector73
+801062d7 vector144
+801067ff vector254
+80101520 readsb
+8010a004 nextpid
+80106124 vector101
+801065fb vector211
+80103210 mpinit
+8010643f vector174
+8010677b vector243
+80100e10 fileinit
+801043d0 initlock
+80106217 vector128
+80107130 copyout
+80106070 vector81
+80104040 sleep
+80102930 microdelay
+80105e12 vector13
+80105f62 vector51
+80105e29 vector16
+8010ee80 input
+80106757 vector240
+80105f7d vector54
+80105e42 vector19
+801060d3 vector92
+80106787 vector244
+80101a60 stati
+801062a7 vector140
+801056c0 sys_kill
+80105f2c vector45
+8010605e vector79
+80103530 pipeclose
+801066d3 vector229
+8010637f vector158
+80104e50 sys_fstat
+80100590 consolewrite
+80105ef6 vector39
+801063f7 vector168
+80102dd0 end_op
+80105ed2 vector35
+80106190 vector113
+80102560 freerange
+801061fc vector125
+80106ce0 allocuvm
+80105842 trapret
+80106637 vector216
+80105fce vector63
+80105e81 vector26
+80106523 vector193
+801027f0 lapicinit
+80106547 vector196
+801065e3 vector209
+80105dc9 vector4
+80105850 pageFaultHandler
+8010640f vector170
+801144d0 stack
+80106277 vector136
+80105dfd vector10
+801065bf vector206
+80101860 iunlock
+80105750 sys_sleep
+8010680b vector255
+80106493 vector181
+80105faa vector59
+80106094 vector85
+8010608b vector84
+801064ab vector183
+8010638b vector159
+80106607 vector212
+80104ec0 sys_link
+80105f3e vector47
+801066c7 vector228
+80105f11 vector42
+80106199 vector114
+801070e0 uva2ka
+8010644b vector175
+801062cb vector143
+80100e30 filealloc
+80104100 wakeup
+8010622f vector130
+8010679f vector246
+80105df4 vector9
+801062bf vector142
+8010611b vector100
+80106583 vector201
+80106f60 clearpteu
+80103970 myproc
+801058b0 tvinit
+80105fb3 vector60
+80105e66 vector23
+80101750 idup
+80106727 vector236
+801027d0 kbdintr
+801051f0 sys_open
+801066eb vector231
+80105fe9 vector66
+80105e9c vector29
+80101a90 readi
+8010626b vector135
+80100880 consoleintr
+80104160 kill
+8010604c vector77
+80101610 ialloc
+80106487 vector180
+801144c4 kpgdir
+801065d7 vector208
+801029d0 cmostime
+80105d90 uartintr
+80106109 vector98
+80106100 vector97
+80106457 vector176
+8010652f vector194
+80105eb7 vector32
+801154d0 end
+8010656b vector199
+8010623b vector131
+801067e7 vector252
+801010b0 filewrite
+80105da5 vector0
+80104920 argint
+80100ab0 exec
+801062e3 vector145
+80104d70 sys_write
+80104540 release
+801048d0 fetchstr
+8010615a vector107
+80105eff vector40
+80103ec0 wait
+8010612d vector102
+80109000 entrypgdir
+0010000c _start
+80105f8f vector56
+80105ffb vector68
+80105ddb vector6
+8010a48c _binary_initcode_end
+80100000 multiboot_header
+80106223 vector129
+80103c30 scheduler
+80101ce0 dirlookup
+80106553 vector197
+80100ef0 fileclose
+80102d60 begin_op
+80106337 vector152
+80106f40 kvmalloc
+801066df vector230
+80104770 strncmp
+80105ee4 vector37
+801065b3 vector205
+801063a3 vector161
+80113c80 tickslock
+801035d0 pipewrite
+801047c0 strncpy
+80106016 vector71
+80106fb0 copyuvm
+8010ef60 ftable
+80106397 vector160
+80104970 argptr
+8010662b vector215
+80106373 vector157
+80104c70 sys_dup
+80106187 vector112
+80100380 panic
+80103880 forkret
+8010649f vector182
+80105e0b vector12
+801046b0 memcmp
+801026f0 kbdgetc
+8010616c vector109
+80105e4b vector20
+80103b10 fork
+80105f74 vector53
+80105e39 vector18
+0000008a _binary_entryother_size
+801117a0 cpus
+80104340 releasesleep
+801060ee vector95
+80104500 holding
+801115b4 sb
+801045a0 acquire
+801066af vector226
+801020c0 nameiparent
+80105f50 vector49
+80105f23 vector44
+80111680 lapic
+80106055 vector78
+8010582a alltraps
+80106433 vector173
+801061b4 vector117
+80106079 vector82
+8010667f vector222
+80105ded vector8
+80106313 vector149
+801016d0 iupdate
+80108000 data
+80104660 memset
+801066f7 vector232
+80103060 main
+80106a50 switchkvm
+80106151 vector106
+80106667 vector220
+801060c1 vector90
+801063bb vector163
+8010670f vector234
+80102f40 log_write
+801042e0 acquiresleep
+80105010 sys_unlink
+80105fc5 vector62
+80105e78 vector25
+8010655f vector198
+801061cf vector120
+8010a48c _binary_entryother_start
+80102610 kinit1
+80105f59 vector50
+80105e20 vector15
+8010632b vector151
+80106082 vector83
+801060b8 vector89
+801060af vector88
+80105960 trap
+80105800 sys_uptime
+8010647b vector179
+80105ec9 vector34
+80105f35 vector46
+8010625f vector134
+8010668b vector223
+80113cc0 idt
+8010664f vector218
+801038d0 pinit
+80106e10 deallocuvm
+801066a3 vector225
+801028f0 lapicid
+801064db vector187
+80103a90 growproc
+80104380 holdingsleep
+80111784 ncpu
+80105ea5 vector30
+801039a0 userinit
+801000d0 bread
+8010620e vector127
+801036d0 piperead
+80113c60 ticks
+80106517 vector192
+801063df vector166
+80100a60 consoleinit
+80106043 vector76
+8010603a vector75
+80102240 ideintr
+8010653b vector195
+8010631f vector150
+80105fa1 vector58
+801067b7 vector248
+801061ea vector123
+801060f7 vector96
+80105eae vector31
+8010659b vector203
+8010629b vector139
+80106343 vector153
+801063c7 vector164
+801041e0 procdump
+801061d8 vector121
+80105d30 uartputc
+80105dd2 vector5
+801063eb vector167
+8010635b vector155
+801067c3 vector249
+801001f0 brelse
+801067cf vector250
+801061f3 vector124
+80106175 vector110
+801065a7 vector204
+80101780 ilock
+801054d0 sys_exec
+80106283 vector137
+8010a460 _binary_initcode_start
+8010487b swtch
+801067ab vector247
+80105e5d vector22
+8010658f vector202
+801068d0 seginit
+80101a10 iunlockput
+8010601f vector72
+80105f86 vector55
+80106205 vector126
+80105fe0 vector65
+80105e93 vector28
+8010a516 _binary_entryother_end
+80106403 vector169
+801001b0 bwrite
+80106703 vector233
+80105930 idtinit
+80103d90 exit
+801056b0 sys_wait
+801056a0 sys_exit
+80101fe0 dirlink
+0000002c _binary_initcode_size
+801062fb vector147
+801042a0 initsleeplock
+801021c0 ideinit
+80106bf0 loaduvm
+8010613f vector104
+801061ab vector116
+80111d20 ptable
+80102480 ioapicenable
+801044a0 popcli
+8010a008 vectors
+80105f6b vector52
+80105e32 vector17
+801064b7 vector184
+80104860 strlen
+801055c0 sys_pipe
+80101560 iinit
+80103410 picinit
+801065cb vector207
+80106b70 inituvm
+801064ff vector190
+8010674b vector239
+801060e5 vector94
+801060dc vector93
+80102cc0 initlog
+801064e7 vector188
+80105f47 vector48
+801022e0 iderw
+8010665b vector219
+80106307 vector148
+80106673 vector221
+80102680 kalloc
+8010f900 devsw
+80105700 sys_getpid
+80106067 vector80
+8010641b vector171
+8010634f vector154
+80105edb vector36
+80103430 pipealloc
+8010671b vector235
+80106148 vector105
+80105420 sys_chdir
+8010f960 icache
+801062ef vector146
+8010650b vector191
+80106136 vector103
+80105390 sys_mknod
+80102940 lapicstartap
+80106a60 switchuvm
+80104450 pushcli
+801025b0 kinit2
+80105e04 vector11
+80105e19 vector14
+80100fd0 filestat
diff -ruN xv6-public/kill.asm xv6-publica/kill.asm
--- xv6-public/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/kill.asm	2024-10-15 10:58:37.617888469 +0530
@@ -0,0 +1,1153 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	bb 01 00 00 00       	mov    $0x1,%ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  if(argc < 2){
+  1e:	83 fe 01             	cmp    $0x1,%esi
+  21:	7e 27                	jle    4a <main+0x4a>
+  23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  27:	90                   	nop
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 34 9f             	push   (%edi,%ebx,4)
+  for(i=1; i<argc; i++)
+  2e:	83 c3 01             	add    $0x1,%ebx
+    kill(atoi(argv[i]));
+  31:	e8 0a 02 00 00       	call   240 <atoi>
+  36:	89 04 24             	mov    %eax,(%esp)
+  39:	e8 a5 02 00 00       	call   2e3 <kill>
+  for(i=1; i<argc; i++)
+  3e:	83 c4 10             	add    $0x10,%esp
+  41:	39 de                	cmp    %ebx,%esi
+  43:	75 e3                	jne    28 <main+0x28>
+  exit();
+  45:	e8 69 02 00 00       	call   2b3 <exit>
+    printf(2, "usage: kill pid...\n");
+  4a:	50                   	push   %eax
+  4b:	50                   	push   %eax
+  4c:	68 38 07 00 00       	push   $0x738
+  51:	6a 02                	push   $0x2
+  53:	e8 b8 03 00 00       	call   410 <printf>
+    exit();
+  58:	e8 56 02 00 00       	call   2b3 <exit>
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  61:	31 c0                	xor    %eax,%eax
+{
+  63:	89 e5                	mov    %esp,%ebp
+  65:	53                   	push   %ebx
+  66:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  81:	89 c8                	mov    %ecx,%eax
+  83:	c9                   	leave  
+  84:	c3                   	ret    
+  85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	84 c0                	test   %al,%al
+  9f:	75 17                	jne    b8 <strcmp+0x28>
+  a1:	eb 3a                	jmp    dd <strcmp+0x4d>
+  a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  a7:	90                   	nop
+  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  ac:	83 c2 01             	add    $0x1,%edx
+  af:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  b2:	84 c0                	test   %al,%al
+  b4:	74 1a                	je     d0 <strcmp+0x40>
+    p++, q++;
+  b6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  b8:	0f b6 19             	movzbl (%ecx),%ebx
+  bb:	38 c3                	cmp    %al,%bl
+  bd:	74 e9                	je     a8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  bf:	29 d8                	sub    %ebx,%eax
+}
+  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c4:	c9                   	leave  
+  c5:	c3                   	ret    
+  c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  d4:	31 c0                	xor    %eax,%eax
+  d6:	29 d8                	sub    %ebx,%eax
+}
+  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  db:	c9                   	leave  
+  dc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  dd:	0f b6 19             	movzbl (%ecx),%ebx
+  e0:	31 c0                	xor    %eax,%eax
+  e2:	eb db                	jmp    bf <strcmp+0x2f>
+  e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ef:	90                   	nop
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 3a 00             	cmpb   $0x0,(%edx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 c0                	xor    %eax,%eax
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c0 01             	add    $0x1,%eax
+ 103:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 107:	89 c1                	mov    %eax,%ecx
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	89 c8                	mov    %ecx,%eax
+ 10d:	5d                   	pop    %ebp
+ 10e:	c3                   	ret    
+ 10f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 135:	89 d0                	mov    %edx,%eax
+ 137:	c9                   	leave  
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	8b 45 08             	mov    0x8(%ebp),%eax
+ 146:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	75 12                	jne    163 <strchr+0x23>
+ 151:	eb 1d                	jmp    170 <strchr+0x30>
+ 153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 157:	90                   	nop
+ 158:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 15c:	83 c0 01             	add    $0x1,%eax
+ 15f:	84 d2                	test   %dl,%dl
+ 161:	74 0d                	je     170 <strchr+0x30>
+    if(*s == c)
+ 163:	38 d1                	cmp    %dl,%cl
+ 165:	75 f1                	jne    158 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 167:	5d                   	pop    %ebp
+ 168:	c3                   	ret    
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 170:	31 c0                	xor    %eax,%eax
+}
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 185:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 188:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 189:	31 db                	xor    %ebx,%ebx
+{
+ 18b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 18e:	eb 27                	jmp    1b7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 190:	83 ec 04             	sub    $0x4,%esp
+ 193:	6a 01                	push   $0x1
+ 195:	57                   	push   %edi
+ 196:	6a 00                	push   $0x0
+ 198:	e8 2e 01 00 00       	call   2cb <read>
+    if(cc < 1)
+ 19d:	83 c4 10             	add    $0x10,%esp
+ 1a0:	85 c0                	test   %eax,%eax
+ 1a2:	7e 1d                	jle    1c1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1a4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1ab:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1af:	3c 0a                	cmp    $0xa,%al
+ 1b1:	74 1d                	je     1d0 <gets+0x50>
+ 1b3:	3c 0d                	cmp    $0xd,%al
+ 1b5:	74 19                	je     1d0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1b7:	89 de                	mov    %ebx,%esi
+ 1b9:	83 c3 01             	add    $0x1,%ebx
+ 1bc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1bf:	7c cf                	jl     190 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1c1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cb:	5b                   	pop    %ebx
+ 1cc:	5e                   	pop    %esi
+ 1cd:	5f                   	pop    %edi
+ 1ce:	5d                   	pop    %ebp
+ 1cf:	c3                   	ret    
+  buf[i] = '\0';
+ 1d0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d3:	89 de                	mov    %ebx,%esi
+ 1d5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1dc:	5b                   	pop    %ebx
+ 1dd:	5e                   	pop    %esi
+ 1de:	5f                   	pop    %edi
+ 1df:	5d                   	pop    %ebp
+ 1e0:	c3                   	ret    
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	push   0x8(%ebp)
+ 1fd:	e8 f1 00 00 00       	call   2f3 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	push   0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f4 00 00 00       	call   30b <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 ba 00 00 00       	call   2db <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 02             	movsbl (%edx),%eax
+ 24a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 24d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 250:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 255:	77 1e                	ja     275 <atoi+0x35>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 260:	83 c2 01             	add    $0x1,%edx
+ 263:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 266:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 02             	movsbl (%edx),%eax
+ 26d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 278:	89 c8                	mov    %ecx,%eax
+ 27a:	c9                   	leave  
+ 27b:	c3                   	ret    
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 45 10             	mov    0x10(%ebp),%eax
+ 287:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28a:	56                   	push   %esi
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 c0                	test   %eax,%eax
+ 290:	7e 13                	jle    2a5 <memmove+0x25>
+ 292:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 294:	89 d7                	mov    %edx,%edi
+ 296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 f8                	cmp    %edi,%eax
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	89 d0                	mov    %edx,%eax
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+
+000002ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <exit>:
+SYSCALL(exit)
+ 2b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <wait>:
+SYSCALL(wait)
+ 2bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <pipe>:
+SYSCALL(pipe)
+ 2c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <read>:
+SYSCALL(read)
+ 2cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <write>:
+SYSCALL(write)
+ 2d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <close>:
+SYSCALL(close)
+ 2db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <kill>:
+SYSCALL(kill)
+ 2e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <exec>:
+SYSCALL(exec)
+ 2eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <open>:
+SYSCALL(open)
+ 2f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mknod>:
+SYSCALL(mknod)
+ 2fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <unlink>:
+SYSCALL(unlink)
+ 303:	b8 12 00 00 00       	mov    $0x12,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <fstat>:
+SYSCALL(fstat)
+ 30b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <link>:
+SYSCALL(link)
+ 313:	b8 13 00 00 00       	mov    $0x13,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mkdir>:
+SYSCALL(mkdir)
+ 31b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <chdir>:
+SYSCALL(chdir)
+ 323:	b8 09 00 00 00       	mov    $0x9,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <dup>:
+SYSCALL(dup)
+ 32b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getpid>:
+SYSCALL(getpid)
+ 333:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <sbrk>:
+SYSCALL(sbrk)
+ 33b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <sleep>:
+SYSCALL(sleep)
+ 343:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <uptime>:
+SYSCALL(uptime)
+ 34b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+ 353:	66 90                	xchg   %ax,%ax
+ 355:	66 90                	xchg   %ax,%ax
+ 357:	66 90                	xchg   %ax,%ax
+ 359:	66 90                	xchg   %ax,%ax
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
+ 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 36c:	89 d1                	mov    %edx,%ecx
+{
+ 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 371:	85 d2                	test   %edx,%edx
+ 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
+ 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37d:	74 79                	je     3f8 <printint+0x98>
+    neg = 1;
+ 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 386:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 388:	31 db                	xor    %ebx,%ebx
+ 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 390:	89 c8                	mov    %ecx,%eax
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	89 cf                	mov    %ecx,%edi
+ 396:	f7 75 c4             	divl   -0x3c(%ebp)
+ 399:	0f b6 92 ac 07 00 00 	movzbl 0x7ac(%edx),%edx
+ 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3a3:	89 d8                	mov    %ebx,%eax
+ 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3b1:	76 dd                	jbe    390 <printint+0x30>
+  if(neg)
+ 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3b6:	85 c9                	test   %ecx,%ecx
+ 3b8:	74 0c                	je     3c6 <printint+0x66>
+    buf[i++] = '-';
+ 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3cd:	eb 07                	jmp    3d6 <printint+0x76>
+ 3cf:	90                   	nop
+    putc(fd, buf[i]);
+ 3d0:	0f b6 13             	movzbl (%ebx),%edx
+ 3d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3d6:	83 ec 04             	sub    $0x4,%esp
+ 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3dc:	6a 01                	push   $0x1
+ 3de:	56                   	push   %esi
+ 3df:	57                   	push   %edi
+ 3e0:	e8 ee fe ff ff       	call   2d3 <write>
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x70>
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ff:	eb 87                	jmp    388 <printint+0x28>
+ 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 419:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 41c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 41f:	0f b6 13             	movzbl (%ebx),%edx
+ 422:	84 d2                	test   %dl,%dl
+ 424:	74 6a                	je     490 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 426:	8d 45 10             	lea    0x10(%ebp),%eax
+ 429:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 42c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 42f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 431:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 434:	eb 36                	jmp    46c <printf+0x5c>
+ 436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+ 440:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 443:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	74 15                	je     462 <printf+0x52>
+  write(fd, &c, 1);
+ 44d:	83 ec 04             	sub    $0x4,%esp
+ 450:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 453:	6a 01                	push   $0x1
+ 455:	57                   	push   %edi
+ 456:	56                   	push   %esi
+ 457:	e8 77 fe ff ff       	call   2d3 <write>
+ 45c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 45f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 462:	0f b6 13             	movzbl (%ebx),%edx
+ 465:	83 c3 01             	add    $0x1,%ebx
+ 468:	84 d2                	test   %dl,%dl
+ 46a:	74 24                	je     490 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 46c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 46f:	85 c9                	test   %ecx,%ecx
+ 471:	74 cd                	je     440 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 473:	83 f9 25             	cmp    $0x25,%ecx
+ 476:	75 ea                	jne    462 <printf+0x52>
+      if(c == 'd'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	0f 84 07 01 00 00    	je     588 <printf+0x178>
+ 481:	83 e8 63             	sub    $0x63,%eax
+ 484:	83 f8 15             	cmp    $0x15,%eax
+ 487:	77 17                	ja     4a0 <printf+0x90>
+ 489:	ff 24 85 54 07 00 00 	jmp    *0x754(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 490:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 493:	5b                   	pop    %ebx
+ 494:	5e                   	pop    %esi
+ 495:	5f                   	pop    %edi
+ 496:	5d                   	pop    %ebp
+ 497:	c3                   	ret    
+ 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+  write(fd, &c, 1);
+ 4a0:	83 ec 04             	sub    $0x4,%esp
+ 4a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4a6:	6a 01                	push   $0x1
+ 4a8:	57                   	push   %edi
+ 4a9:	56                   	push   %esi
+ 4aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ae:	e8 20 fe ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4b7:	83 c4 0c             	add    $0xc,%esp
+ 4ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4bd:	6a 01                	push   $0x1
+ 4bf:	57                   	push   %edi
+ 4c0:	56                   	push   %esi
+ 4c1:	e8 0d fe ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4c6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4c9:	31 c9                	xor    %ecx,%ecx
+ 4cb:	eb 95                	jmp    462 <printf+0x52>
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4d0:	83 ec 0c             	sub    $0xc,%esp
+ 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4d8:	6a 00                	push   $0x0
+ 4da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4dd:	8b 10                	mov    (%eax),%edx
+ 4df:	89 f0                	mov    %esi,%eax
+ 4e1:	e8 7a fe ff ff       	call   360 <printint>
+        ap++;
+ 4e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4ea:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4ed:	31 c9                	xor    %ecx,%ecx
+ 4ef:	e9 6e ff ff ff       	jmp    462 <printf+0x52>
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 4f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 4fd:	83 c0 04             	add    $0x4,%eax
+ 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 503:	85 d2                	test   %edx,%edx
+ 505:	0f 84 8d 00 00 00    	je     598 <printf+0x188>
+        while(*s != 0){
+ 50b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 50e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 510:	84 c0                	test   %al,%al
+ 512:	0f 84 4a ff ff ff    	je     462 <printf+0x52>
+ 518:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 51b:	89 d3                	mov    %edx,%ebx
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 520:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 523:	83 c3 01             	add    $0x1,%ebx
+ 526:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 529:	6a 01                	push   $0x1
+ 52b:	57                   	push   %edi
+ 52c:	56                   	push   %esi
+ 52d:	e8 a1 fd ff ff       	call   2d3 <write>
+        while(*s != 0){
+ 532:	0f b6 03             	movzbl (%ebx),%eax
+ 535:	83 c4 10             	add    $0x10,%esp
+ 538:	84 c0                	test   %al,%al
+ 53a:	75 e4                	jne    520 <printf+0x110>
+      state = 0;
+ 53c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 53f:	31 c9                	xor    %ecx,%ecx
+ 541:	e9 1c ff ff ff       	jmp    462 <printf+0x52>
+ 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	e9 7b ff ff ff       	jmp    4da <printf+0xca>
+ 55f:	90                   	nop
+        putc(fd, *ap);
+ 560:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+ 56a:	57                   	push   %edi
+ 56b:	56                   	push   %esi
+        putc(fd, *ap);
+ 56c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 56f:	e8 5f fd ff ff       	call   2d3 <write>
+        ap++;
+ 574:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 578:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57b:	31 c9                	xor    %ecx,%ecx
+ 57d:	e9 e0 fe ff ff       	jmp    462 <printf+0x52>
+ 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 588:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58b:	83 ec 04             	sub    $0x4,%esp
+ 58e:	e9 2a ff ff ff       	jmp    4bd <printf+0xad>
+ 593:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 597:	90                   	nop
+          s = "(null)";
+ 598:	ba 4c 07 00 00       	mov    $0x74c,%edx
+        while(*s != 0){
+ 59d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5a5:	89 d3                	mov    %edx,%ebx
+ 5a7:	e9 74 ff ff ff       	jmp    520 <printf+0x110>
+ 5ac:	66 90                	xchg   %ax,%ax
+ 5ae:	66 90                	xchg   %ax,%ax
+
+000005b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5b0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b1:	a1 64 0a 00 00       	mov    0xa64,%eax
+{
+ 5b6:	89 e5                	mov    %esp,%ebp
+ 5b8:	57                   	push   %edi
+ 5b9:	56                   	push   %esi
+ 5ba:	53                   	push   %ebx
+ 5bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5c8:	89 c2                	mov    %eax,%edx
+ 5ca:	8b 00                	mov    (%eax),%eax
+ 5cc:	39 ca                	cmp    %ecx,%edx
+ 5ce:	73 30                	jae    600 <free+0x50>
+ 5d0:	39 c1                	cmp    %eax,%ecx
+ 5d2:	72 04                	jb     5d8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d4:	39 c2                	cmp    %eax,%edx
+ 5d6:	72 f0                	jb     5c8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5de:	39 f8                	cmp    %edi,%eax
+ 5e0:	74 30                	je     612 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5eb:	39 f1                	cmp    %esi,%ecx
+ 5ed:	74 3a                	je     629 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 5ef:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 5f1:	5b                   	pop    %ebx
+  freep = p;
+ 5f2:	89 15 64 0a 00 00    	mov    %edx,0xa64
+}
+ 5f8:	5e                   	pop    %esi
+ 5f9:	5f                   	pop    %edi
+ 5fa:	5d                   	pop    %ebp
+ 5fb:	c3                   	ret    
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 600:	39 c2                	cmp    %eax,%edx
+ 602:	72 c4                	jb     5c8 <free+0x18>
+ 604:	39 c1                	cmp    %eax,%ecx
+ 606:	73 c0                	jae    5c8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60e:	39 f8                	cmp    %edi,%eax
+ 610:	75 d0                	jne    5e2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 612:	03 70 04             	add    0x4(%eax),%esi
+ 615:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 618:	8b 02                	mov    (%edx),%eax
+ 61a:	8b 00                	mov    (%eax),%eax
+ 61c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 61f:	8b 42 04             	mov    0x4(%edx),%eax
+ 622:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 625:	39 f1                	cmp    %esi,%ecx
+ 627:	75 c6                	jne    5ef <free+0x3f>
+    p->s.size += bp->s.size;
+ 629:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 62c:	89 15 64 0a 00 00    	mov    %edx,0xa64
+    p->s.size += bp->s.size;
+ 632:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 635:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 638:	89 0a                	mov    %ecx,(%edx)
+}
+ 63a:	5b                   	pop    %ebx
+ 63b:	5e                   	pop    %esi
+ 63c:	5f                   	pop    %edi
+ 63d:	5d                   	pop    %ebp
+ 63e:	c3                   	ret    
+ 63f:	90                   	nop
+
+00000640 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+ 646:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 649:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 64c:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 652:	8d 70 07             	lea    0x7(%eax),%esi
+ 655:	c1 ee 03             	shr    $0x3,%esi
+ 658:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 65b:	85 ff                	test   %edi,%edi
+ 65d:	0f 84 9d 00 00 00    	je     700 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 663:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 665:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 668:	39 f1                	cmp    %esi,%ecx
+ 66a:	73 6a                	jae    6d6 <malloc+0x96>
+ 66c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 671:	39 de                	cmp    %ebx,%esi
+ 673:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 676:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 67d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 680:	eb 17                	jmp    699 <malloc+0x59>
+ 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 688:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 68a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68d:	39 f1                	cmp    %esi,%ecx
+ 68f:	73 4f                	jae    6e0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 691:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 697:	89 c2                	mov    %eax,%edx
+ 699:	39 d7                	cmp    %edx,%edi
+ 69b:	75 eb                	jne    688 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 69d:	83 ec 0c             	sub    $0xc,%esp
+ 6a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6a3:	e8 93 fc ff ff       	call   33b <sbrk>
+  if(p == (char*)-1)
+ 6a8:	83 c4 10             	add    $0x10,%esp
+ 6ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ae:	74 1c                	je     6cc <malloc+0x8c>
+  hp->s.size = nu;
+ 6b0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6b3:	83 ec 0c             	sub    $0xc,%esp
+ 6b6:	83 c0 08             	add    $0x8,%eax
+ 6b9:	50                   	push   %eax
+ 6ba:	e8 f1 fe ff ff       	call   5b0 <free>
+  return freep;
+ 6bf:	8b 15 64 0a 00 00    	mov    0xa64,%edx
+      if((p = morecore(nunits)) == 0)
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	85 d2                	test   %edx,%edx
+ 6ca:	75 bc                	jne    688 <malloc+0x48>
+        return 0;
+  }
+}
+ 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6cf:	31 c0                	xor    %eax,%eax
+}
+ 6d1:	5b                   	pop    %ebx
+ 6d2:	5e                   	pop    %esi
+ 6d3:	5f                   	pop    %edi
+ 6d4:	5d                   	pop    %ebp
+ 6d5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6d6:	89 d0                	mov    %edx,%eax
+ 6d8:	89 fa                	mov    %edi,%edx
+ 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6e0:	39 ce                	cmp    %ecx,%esi
+ 6e2:	74 4c                	je     730 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6e4:	29 f1                	sub    %esi,%ecx
+ 6e6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6ec:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 6ef:	89 15 64 0a 00 00    	mov    %edx,0xa64
+}
+ 6f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 6f8:	83 c0 08             	add    $0x8,%eax
+}
+ 6fb:	5b                   	pop    %ebx
+ 6fc:	5e                   	pop    %esi
+ 6fd:	5f                   	pop    %edi
+ 6fe:	5d                   	pop    %ebp
+ 6ff:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 700:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
+ 707:	0a 00 00 
+    base.s.size = 0;
+ 70a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+    base.s.ptr = freep = prevp = &base;
+ 70f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
+ 716:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 719:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 71b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
+ 722:	00 00 00 
+    if(p->s.size >= nunits){
+ 725:	e9 42 ff ff ff       	jmp    66c <malloc+0x2c>
+ 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 730:	8b 08                	mov    (%eax),%ecx
+ 732:	89 0a                	mov    %ecx,(%edx)
+ 734:	eb b9                	jmp    6ef <malloc+0xaf>
diff -ruN xv6-public/kill.d xv6-publica/kill.d
--- xv6-public/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/kill.d	2024-10-15 10:58:37.597888470 +0530
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/kill.o and xv6-publica/kill.o differ
diff -ruN xv6-public/kill.sym xv6-publica/kill.sym
--- xv6-public/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/kill.sym	2024-10-15 10:58:37.627888469 +0530
@@ -0,0 +1,45 @@
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+000007ac digits.0
+00000000 umalloc.c
+00000a64 freep
+00000a68 base
+00000060 strcpy
+00000410 printf
+00000280 memmove
+000002fb mknod
+00000180 gets
+00000333 getpid
+00000640 malloc
+00000343 sleep
+000002c3 pipe
+000002d3 write
+0000030b fstat
+000002e3 kill
+00000323 chdir
+000002eb exec
+000002bb wait
+000002cb read
+00000303 unlink
+000002ab fork
+0000033b sbrk
+0000034b uptime
+00000a64 __bss_start
+00000120 memset
+00000000 main
+00000090 strcmp
+0000032b dup
+000001f0 stat
+00000a64 _edata
+00000a70 _end
+00000313 link
+000002b3 exit
+00000240 atoi
+000000f0 strlen
+000002f3 open
+00000140 strchr
+0000031b mkdir
+000002db close
+000005b0 free
diff -ruN xv6-public/lapic.d xv6-publica/lapic.d
--- xv6-public/lapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/lapic.d	2024-10-15 10:58:39.697888523 +0530
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files xv6-public/lapic.o and xv6-publica/lapic.o differ
diff -ruN xv6-public/ln.asm xv6-publica/ln.asm
--- xv6-public/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ln.asm	2024-10-15 10:58:37.687888467 +0530
@@ -0,0 +1,1149 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+  if(argc != 3){
+   a:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+   d:	55                   	push   %ebp
+   e:	89 e5                	mov    %esp,%ebp
+  10:	53                   	push   %ebx
+  11:	51                   	push   %ecx
+  12:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  15:	74 13                	je     2a <main+0x2a>
+    printf(2, "Usage: ln old new\n");
+  17:	52                   	push   %edx
+  18:	52                   	push   %edx
+  19:	68 38 07 00 00       	push   $0x738
+  1e:	6a 02                	push   $0x2
+  20:	e8 eb 03 00 00       	call   410 <printf>
+    exit();
+  25:	e8 89 02 00 00       	call   2b3 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2a:	50                   	push   %eax
+  2b:	50                   	push   %eax
+  2c:	ff 73 08             	push   0x8(%ebx)
+  2f:	ff 73 04             	push   0x4(%ebx)
+  32:	e8 dc 02 00 00       	call   313 <link>
+  37:	83 c4 10             	add    $0x10,%esp
+  3a:	85 c0                	test   %eax,%eax
+  3c:	78 05                	js     43 <main+0x43>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  3e:	e8 70 02 00 00       	call   2b3 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  43:	ff 73 08             	push   0x8(%ebx)
+  46:	ff 73 04             	push   0x4(%ebx)
+  49:	68 4b 07 00 00       	push   $0x74b
+  4e:	6a 02                	push   $0x2
+  50:	e8 bb 03 00 00       	call   410 <printf>
+  55:	83 c4 10             	add    $0x10,%esp
+  58:	eb e4                	jmp    3e <main+0x3e>
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  61:	31 c0                	xor    %eax,%eax
+{
+  63:	89 e5                	mov    %esp,%ebp
+  65:	53                   	push   %ebx
+  66:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  81:	89 c8                	mov    %ecx,%eax
+  83:	c9                   	leave  
+  84:	c3                   	ret    
+  85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	84 c0                	test   %al,%al
+  9f:	75 17                	jne    b8 <strcmp+0x28>
+  a1:	eb 3a                	jmp    dd <strcmp+0x4d>
+  a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  a7:	90                   	nop
+  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  ac:	83 c2 01             	add    $0x1,%edx
+  af:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  b2:	84 c0                	test   %al,%al
+  b4:	74 1a                	je     d0 <strcmp+0x40>
+    p++, q++;
+  b6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  b8:	0f b6 19             	movzbl (%ecx),%ebx
+  bb:	38 c3                	cmp    %al,%bl
+  bd:	74 e9                	je     a8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  bf:	29 d8                	sub    %ebx,%eax
+}
+  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c4:	c9                   	leave  
+  c5:	c3                   	ret    
+  c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  d4:	31 c0                	xor    %eax,%eax
+  d6:	29 d8                	sub    %ebx,%eax
+}
+  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  db:	c9                   	leave  
+  dc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  dd:	0f b6 19             	movzbl (%ecx),%ebx
+  e0:	31 c0                	xor    %eax,%eax
+  e2:	eb db                	jmp    bf <strcmp+0x2f>
+  e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ef:	90                   	nop
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 3a 00             	cmpb   $0x0,(%edx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 c0                	xor    %eax,%eax
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c0 01             	add    $0x1,%eax
+ 103:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 107:	89 c1                	mov    %eax,%ecx
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	89 c8                	mov    %ecx,%eax
+ 10d:	5d                   	pop    %ebp
+ 10e:	c3                   	ret    
+ 10f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 135:	89 d0                	mov    %edx,%eax
+ 137:	c9                   	leave  
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	8b 45 08             	mov    0x8(%ebp),%eax
+ 146:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	75 12                	jne    163 <strchr+0x23>
+ 151:	eb 1d                	jmp    170 <strchr+0x30>
+ 153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 157:	90                   	nop
+ 158:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 15c:	83 c0 01             	add    $0x1,%eax
+ 15f:	84 d2                	test   %dl,%dl
+ 161:	74 0d                	je     170 <strchr+0x30>
+    if(*s == c)
+ 163:	38 d1                	cmp    %dl,%cl
+ 165:	75 f1                	jne    158 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 167:	5d                   	pop    %ebp
+ 168:	c3                   	ret    
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 170:	31 c0                	xor    %eax,%eax
+}
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 185:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 188:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 189:	31 db                	xor    %ebx,%ebx
+{
+ 18b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 18e:	eb 27                	jmp    1b7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 190:	83 ec 04             	sub    $0x4,%esp
+ 193:	6a 01                	push   $0x1
+ 195:	57                   	push   %edi
+ 196:	6a 00                	push   $0x0
+ 198:	e8 2e 01 00 00       	call   2cb <read>
+    if(cc < 1)
+ 19d:	83 c4 10             	add    $0x10,%esp
+ 1a0:	85 c0                	test   %eax,%eax
+ 1a2:	7e 1d                	jle    1c1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1a4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1ab:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1af:	3c 0a                	cmp    $0xa,%al
+ 1b1:	74 1d                	je     1d0 <gets+0x50>
+ 1b3:	3c 0d                	cmp    $0xd,%al
+ 1b5:	74 19                	je     1d0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1b7:	89 de                	mov    %ebx,%esi
+ 1b9:	83 c3 01             	add    $0x1,%ebx
+ 1bc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1bf:	7c cf                	jl     190 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1c1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cb:	5b                   	pop    %ebx
+ 1cc:	5e                   	pop    %esi
+ 1cd:	5f                   	pop    %edi
+ 1ce:	5d                   	pop    %ebp
+ 1cf:	c3                   	ret    
+  buf[i] = '\0';
+ 1d0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d3:	89 de                	mov    %ebx,%esi
+ 1d5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1dc:	5b                   	pop    %ebx
+ 1dd:	5e                   	pop    %esi
+ 1de:	5f                   	pop    %edi
+ 1df:	5d                   	pop    %ebp
+ 1e0:	c3                   	ret    
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	push   0x8(%ebp)
+ 1fd:	e8 f1 00 00 00       	call   2f3 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	push   0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f4 00 00 00       	call   30b <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 ba 00 00 00       	call   2db <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 02             	movsbl (%edx),%eax
+ 24a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 24d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 250:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 255:	77 1e                	ja     275 <atoi+0x35>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 260:	83 c2 01             	add    $0x1,%edx
+ 263:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 266:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 02             	movsbl (%edx),%eax
+ 26d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 278:	89 c8                	mov    %ecx,%eax
+ 27a:	c9                   	leave  
+ 27b:	c3                   	ret    
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 45 10             	mov    0x10(%ebp),%eax
+ 287:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28a:	56                   	push   %esi
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 c0                	test   %eax,%eax
+ 290:	7e 13                	jle    2a5 <memmove+0x25>
+ 292:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 294:	89 d7                	mov    %edx,%edi
+ 296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 f8                	cmp    %edi,%eax
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	89 d0                	mov    %edx,%eax
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+
+000002ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <exit>:
+SYSCALL(exit)
+ 2b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <wait>:
+SYSCALL(wait)
+ 2bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <pipe>:
+SYSCALL(pipe)
+ 2c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <read>:
+SYSCALL(read)
+ 2cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <write>:
+SYSCALL(write)
+ 2d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <close>:
+SYSCALL(close)
+ 2db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <kill>:
+SYSCALL(kill)
+ 2e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <exec>:
+SYSCALL(exec)
+ 2eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <open>:
+SYSCALL(open)
+ 2f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mknod>:
+SYSCALL(mknod)
+ 2fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <unlink>:
+SYSCALL(unlink)
+ 303:	b8 12 00 00 00       	mov    $0x12,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <fstat>:
+SYSCALL(fstat)
+ 30b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <link>:
+SYSCALL(link)
+ 313:	b8 13 00 00 00       	mov    $0x13,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mkdir>:
+SYSCALL(mkdir)
+ 31b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <chdir>:
+SYSCALL(chdir)
+ 323:	b8 09 00 00 00       	mov    $0x9,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <dup>:
+SYSCALL(dup)
+ 32b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getpid>:
+SYSCALL(getpid)
+ 333:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <sbrk>:
+SYSCALL(sbrk)
+ 33b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <sleep>:
+SYSCALL(sleep)
+ 343:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <uptime>:
+SYSCALL(uptime)
+ 34b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+ 353:	66 90                	xchg   %ax,%ax
+ 355:	66 90                	xchg   %ax,%ax
+ 357:	66 90                	xchg   %ax,%ax
+ 359:	66 90                	xchg   %ax,%ax
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
+ 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 36c:	89 d1                	mov    %edx,%ecx
+{
+ 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 371:	85 d2                	test   %edx,%edx
+ 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
+ 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37d:	74 79                	je     3f8 <printint+0x98>
+    neg = 1;
+ 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 386:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 388:	31 db                	xor    %ebx,%ebx
+ 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 390:	89 c8                	mov    %ecx,%eax
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	89 cf                	mov    %ecx,%edi
+ 396:	f7 75 c4             	divl   -0x3c(%ebp)
+ 399:	0f b6 92 c0 07 00 00 	movzbl 0x7c0(%edx),%edx
+ 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3a3:	89 d8                	mov    %ebx,%eax
+ 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3b1:	76 dd                	jbe    390 <printint+0x30>
+  if(neg)
+ 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3b6:	85 c9                	test   %ecx,%ecx
+ 3b8:	74 0c                	je     3c6 <printint+0x66>
+    buf[i++] = '-';
+ 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3cd:	eb 07                	jmp    3d6 <printint+0x76>
+ 3cf:	90                   	nop
+    putc(fd, buf[i]);
+ 3d0:	0f b6 13             	movzbl (%ebx),%edx
+ 3d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3d6:	83 ec 04             	sub    $0x4,%esp
+ 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3dc:	6a 01                	push   $0x1
+ 3de:	56                   	push   %esi
+ 3df:	57                   	push   %edi
+ 3e0:	e8 ee fe ff ff       	call   2d3 <write>
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x70>
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ff:	eb 87                	jmp    388 <printint+0x28>
+ 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 419:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 41c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 41f:	0f b6 13             	movzbl (%ebx),%edx
+ 422:	84 d2                	test   %dl,%dl
+ 424:	74 6a                	je     490 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 426:	8d 45 10             	lea    0x10(%ebp),%eax
+ 429:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 42c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 42f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 431:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 434:	eb 36                	jmp    46c <printf+0x5c>
+ 436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+ 440:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 443:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	74 15                	je     462 <printf+0x52>
+  write(fd, &c, 1);
+ 44d:	83 ec 04             	sub    $0x4,%esp
+ 450:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 453:	6a 01                	push   $0x1
+ 455:	57                   	push   %edi
+ 456:	56                   	push   %esi
+ 457:	e8 77 fe ff ff       	call   2d3 <write>
+ 45c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 45f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 462:	0f b6 13             	movzbl (%ebx),%edx
+ 465:	83 c3 01             	add    $0x1,%ebx
+ 468:	84 d2                	test   %dl,%dl
+ 46a:	74 24                	je     490 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 46c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 46f:	85 c9                	test   %ecx,%ecx
+ 471:	74 cd                	je     440 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 473:	83 f9 25             	cmp    $0x25,%ecx
+ 476:	75 ea                	jne    462 <printf+0x52>
+      if(c == 'd'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	0f 84 07 01 00 00    	je     588 <printf+0x178>
+ 481:	83 e8 63             	sub    $0x63,%eax
+ 484:	83 f8 15             	cmp    $0x15,%eax
+ 487:	77 17                	ja     4a0 <printf+0x90>
+ 489:	ff 24 85 68 07 00 00 	jmp    *0x768(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 490:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 493:	5b                   	pop    %ebx
+ 494:	5e                   	pop    %esi
+ 495:	5f                   	pop    %edi
+ 496:	5d                   	pop    %ebp
+ 497:	c3                   	ret    
+ 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+  write(fd, &c, 1);
+ 4a0:	83 ec 04             	sub    $0x4,%esp
+ 4a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4a6:	6a 01                	push   $0x1
+ 4a8:	57                   	push   %edi
+ 4a9:	56                   	push   %esi
+ 4aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ae:	e8 20 fe ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4b7:	83 c4 0c             	add    $0xc,%esp
+ 4ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4bd:	6a 01                	push   $0x1
+ 4bf:	57                   	push   %edi
+ 4c0:	56                   	push   %esi
+ 4c1:	e8 0d fe ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4c6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4c9:	31 c9                	xor    %ecx,%ecx
+ 4cb:	eb 95                	jmp    462 <printf+0x52>
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4d0:	83 ec 0c             	sub    $0xc,%esp
+ 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4d8:	6a 00                	push   $0x0
+ 4da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4dd:	8b 10                	mov    (%eax),%edx
+ 4df:	89 f0                	mov    %esi,%eax
+ 4e1:	e8 7a fe ff ff       	call   360 <printint>
+        ap++;
+ 4e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4ea:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4ed:	31 c9                	xor    %ecx,%ecx
+ 4ef:	e9 6e ff ff ff       	jmp    462 <printf+0x52>
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 4f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 4fd:	83 c0 04             	add    $0x4,%eax
+ 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 503:	85 d2                	test   %edx,%edx
+ 505:	0f 84 8d 00 00 00    	je     598 <printf+0x188>
+        while(*s != 0){
+ 50b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 50e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 510:	84 c0                	test   %al,%al
+ 512:	0f 84 4a ff ff ff    	je     462 <printf+0x52>
+ 518:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 51b:	89 d3                	mov    %edx,%ebx
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 520:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 523:	83 c3 01             	add    $0x1,%ebx
+ 526:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 529:	6a 01                	push   $0x1
+ 52b:	57                   	push   %edi
+ 52c:	56                   	push   %esi
+ 52d:	e8 a1 fd ff ff       	call   2d3 <write>
+        while(*s != 0){
+ 532:	0f b6 03             	movzbl (%ebx),%eax
+ 535:	83 c4 10             	add    $0x10,%esp
+ 538:	84 c0                	test   %al,%al
+ 53a:	75 e4                	jne    520 <printf+0x110>
+      state = 0;
+ 53c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 53f:	31 c9                	xor    %ecx,%ecx
+ 541:	e9 1c ff ff ff       	jmp    462 <printf+0x52>
+ 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	e9 7b ff ff ff       	jmp    4da <printf+0xca>
+ 55f:	90                   	nop
+        putc(fd, *ap);
+ 560:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+ 56a:	57                   	push   %edi
+ 56b:	56                   	push   %esi
+        putc(fd, *ap);
+ 56c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 56f:	e8 5f fd ff ff       	call   2d3 <write>
+        ap++;
+ 574:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 578:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57b:	31 c9                	xor    %ecx,%ecx
+ 57d:	e9 e0 fe ff ff       	jmp    462 <printf+0x52>
+ 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 588:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58b:	83 ec 04             	sub    $0x4,%esp
+ 58e:	e9 2a ff ff ff       	jmp    4bd <printf+0xad>
+ 593:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 597:	90                   	nop
+          s = "(null)";
+ 598:	ba 5f 07 00 00       	mov    $0x75f,%edx
+        while(*s != 0){
+ 59d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5a5:	89 d3                	mov    %edx,%ebx
+ 5a7:	e9 74 ff ff ff       	jmp    520 <printf+0x110>
+ 5ac:	66 90                	xchg   %ax,%ax
+ 5ae:	66 90                	xchg   %ax,%ax
+
+000005b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5b0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b1:	a1 6c 0a 00 00       	mov    0xa6c,%eax
+{
+ 5b6:	89 e5                	mov    %esp,%ebp
+ 5b8:	57                   	push   %edi
+ 5b9:	56                   	push   %esi
+ 5ba:	53                   	push   %ebx
+ 5bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5c8:	89 c2                	mov    %eax,%edx
+ 5ca:	8b 00                	mov    (%eax),%eax
+ 5cc:	39 ca                	cmp    %ecx,%edx
+ 5ce:	73 30                	jae    600 <free+0x50>
+ 5d0:	39 c1                	cmp    %eax,%ecx
+ 5d2:	72 04                	jb     5d8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d4:	39 c2                	cmp    %eax,%edx
+ 5d6:	72 f0                	jb     5c8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5de:	39 f8                	cmp    %edi,%eax
+ 5e0:	74 30                	je     612 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5eb:	39 f1                	cmp    %esi,%ecx
+ 5ed:	74 3a                	je     629 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 5ef:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 5f1:	5b                   	pop    %ebx
+  freep = p;
+ 5f2:	89 15 6c 0a 00 00    	mov    %edx,0xa6c
+}
+ 5f8:	5e                   	pop    %esi
+ 5f9:	5f                   	pop    %edi
+ 5fa:	5d                   	pop    %ebp
+ 5fb:	c3                   	ret    
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 600:	39 c2                	cmp    %eax,%edx
+ 602:	72 c4                	jb     5c8 <free+0x18>
+ 604:	39 c1                	cmp    %eax,%ecx
+ 606:	73 c0                	jae    5c8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60e:	39 f8                	cmp    %edi,%eax
+ 610:	75 d0                	jne    5e2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 612:	03 70 04             	add    0x4(%eax),%esi
+ 615:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 618:	8b 02                	mov    (%edx),%eax
+ 61a:	8b 00                	mov    (%eax),%eax
+ 61c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 61f:	8b 42 04             	mov    0x4(%edx),%eax
+ 622:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 625:	39 f1                	cmp    %esi,%ecx
+ 627:	75 c6                	jne    5ef <free+0x3f>
+    p->s.size += bp->s.size;
+ 629:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 62c:	89 15 6c 0a 00 00    	mov    %edx,0xa6c
+    p->s.size += bp->s.size;
+ 632:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 635:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 638:	89 0a                	mov    %ecx,(%edx)
+}
+ 63a:	5b                   	pop    %ebx
+ 63b:	5e                   	pop    %esi
+ 63c:	5f                   	pop    %edi
+ 63d:	5d                   	pop    %ebp
+ 63e:	c3                   	ret    
+ 63f:	90                   	nop
+
+00000640 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+ 646:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 649:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 64c:	8b 3d 6c 0a 00 00    	mov    0xa6c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 652:	8d 70 07             	lea    0x7(%eax),%esi
+ 655:	c1 ee 03             	shr    $0x3,%esi
+ 658:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 65b:	85 ff                	test   %edi,%edi
+ 65d:	0f 84 9d 00 00 00    	je     700 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 663:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 665:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 668:	39 f1                	cmp    %esi,%ecx
+ 66a:	73 6a                	jae    6d6 <malloc+0x96>
+ 66c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 671:	39 de                	cmp    %ebx,%esi
+ 673:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 676:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 67d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 680:	eb 17                	jmp    699 <malloc+0x59>
+ 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 688:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 68a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68d:	39 f1                	cmp    %esi,%ecx
+ 68f:	73 4f                	jae    6e0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 691:	8b 3d 6c 0a 00 00    	mov    0xa6c,%edi
+ 697:	89 c2                	mov    %eax,%edx
+ 699:	39 d7                	cmp    %edx,%edi
+ 69b:	75 eb                	jne    688 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 69d:	83 ec 0c             	sub    $0xc,%esp
+ 6a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6a3:	e8 93 fc ff ff       	call   33b <sbrk>
+  if(p == (char*)-1)
+ 6a8:	83 c4 10             	add    $0x10,%esp
+ 6ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ae:	74 1c                	je     6cc <malloc+0x8c>
+  hp->s.size = nu;
+ 6b0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6b3:	83 ec 0c             	sub    $0xc,%esp
+ 6b6:	83 c0 08             	add    $0x8,%eax
+ 6b9:	50                   	push   %eax
+ 6ba:	e8 f1 fe ff ff       	call   5b0 <free>
+  return freep;
+ 6bf:	8b 15 6c 0a 00 00    	mov    0xa6c,%edx
+      if((p = morecore(nunits)) == 0)
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	85 d2                	test   %edx,%edx
+ 6ca:	75 bc                	jne    688 <malloc+0x48>
+        return 0;
+  }
+}
+ 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6cf:	31 c0                	xor    %eax,%eax
+}
+ 6d1:	5b                   	pop    %ebx
+ 6d2:	5e                   	pop    %esi
+ 6d3:	5f                   	pop    %edi
+ 6d4:	5d                   	pop    %ebp
+ 6d5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6d6:	89 d0                	mov    %edx,%eax
+ 6d8:	89 fa                	mov    %edi,%edx
+ 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6e0:	39 ce                	cmp    %ecx,%esi
+ 6e2:	74 4c                	je     730 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6e4:	29 f1                	sub    %esi,%ecx
+ 6e6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6ec:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 6ef:	89 15 6c 0a 00 00    	mov    %edx,0xa6c
+}
+ 6f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 6f8:	83 c0 08             	add    $0x8,%eax
+}
+ 6fb:	5b                   	pop    %ebx
+ 6fc:	5e                   	pop    %esi
+ 6fd:	5f                   	pop    %edi
+ 6fe:	5d                   	pop    %ebp
+ 6ff:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 700:	c7 05 6c 0a 00 00 70 	movl   $0xa70,0xa6c
+ 707:	0a 00 00 
+    base.s.size = 0;
+ 70a:	bf 70 0a 00 00       	mov    $0xa70,%edi
+    base.s.ptr = freep = prevp = &base;
+ 70f:	c7 05 70 0a 00 00 70 	movl   $0xa70,0xa70
+ 716:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 719:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 71b:	c7 05 74 0a 00 00 00 	movl   $0x0,0xa74
+ 722:	00 00 00 
+    if(p->s.size >= nunits){
+ 725:	e9 42 ff ff ff       	jmp    66c <malloc+0x2c>
+ 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 730:	8b 08                	mov    (%eax),%ecx
+ 732:	89 0a                	mov    %ecx,(%edx)
+ 734:	eb b9                	jmp    6ef <malloc+0xaf>
diff -ruN xv6-public/ln.d xv6-publica/ln.d
--- xv6-public/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ln.d	2024-10-15 10:58:37.657888468 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/ln.o and xv6-publica/ln.o differ
diff -ruN xv6-public/ln.sym xv6-publica/ln.sym
--- xv6-public/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ln.sym	2024-10-15 10:58:37.697888467 +0530
@@ -0,0 +1,45 @@
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+000007c0 digits.0
+00000000 umalloc.c
+00000a6c freep
+00000a70 base
+00000060 strcpy
+00000410 printf
+00000280 memmove
+000002fb mknod
+00000180 gets
+00000333 getpid
+00000640 malloc
+00000343 sleep
+000002c3 pipe
+000002d3 write
+0000030b fstat
+000002e3 kill
+00000323 chdir
+000002eb exec
+000002bb wait
+000002cb read
+00000303 unlink
+000002ab fork
+0000033b sbrk
+0000034b uptime
+00000a6c __bss_start
+00000120 memset
+00000000 main
+00000090 strcmp
+0000032b dup
+000001f0 stat
+00000a6c _edata
+00000a78 _end
+00000313 link
+000002b3 exit
+00000240 atoi
+000000f0 strlen
+000002f3 open
+00000140 strchr
+0000031b mkdir
+000002db close
+000005b0 free
diff -ruN xv6-public/log.d xv6-publica/log.d
--- xv6-public/log.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/log.d	2024-10-15 10:58:39.777888525 +0530
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/log.o and xv6-publica/log.o differ
diff -ruN xv6-public/ls.asm xv6-publica/ls.asm
--- xv6-public/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ls.asm	2024-10-15 10:58:37.767888467 +0530
@@ -0,0 +1,1434 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	bb 01 00 00 00       	mov    $0x1,%ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  if(argc < 2){
+  1e:	83 fe 01             	cmp    $0x1,%esi
+  21:	7e 1f                	jle    42 <main+0x42>
+  23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  27:	90                   	nop
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 34 9f             	push   (%edi,%ebx,4)
+  for(i=1; i<argc; i++)
+  2e:	83 c3 01             	add    $0x1,%ebx
+    ls(argv[i]);
+  31:	e8 ca 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  36:	83 c4 10             	add    $0x10,%esp
+  39:	39 de                	cmp    %ebx,%esi
+  3b:	75 eb                	jne    28 <main+0x28>
+  exit();
+  3d:	e8 51 05 00 00       	call   593 <exit>
+    ls(".");
+  42:	83 ec 0c             	sub    $0xc,%esp
+  45:	68 60 0a 00 00       	push   $0xa60
+  4a:	e8 b1 00 00 00       	call   100 <ls>
+    exit();
+  4f:	e8 3f 05 00 00       	call   593 <exit>
+  54:	66 90                	xchg   %ax,%ax
+  56:	66 90                	xchg   %ax,%ax
+  58:	66 90                	xchg   %ax,%ax
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <fmtname>:
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  68:	83 ec 0c             	sub    $0xc,%esp
+  6b:	56                   	push   %esi
+  6c:	e8 5f 03 00 00       	call   3d0 <strlen>
+  71:	83 c4 10             	add    $0x10,%esp
+  74:	01 f0                	add    %esi,%eax
+  76:	89 c3                	mov    %eax,%ebx
+  78:	73 0f                	jae    89 <fmtname+0x29>
+  7a:	eb 12                	jmp    8e <fmtname+0x2e>
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
+  83:	39 c6                	cmp    %eax,%esi
+  85:	77 0a                	ja     91 <fmtname+0x31>
+  87:	89 c3                	mov    %eax,%ebx
+  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+  8c:	75 f2                	jne    80 <fmtname+0x20>
+  p++;
+  8e:	83 c3 01             	add    $0x1,%ebx
+  if(strlen(p) >= DIRSIZ)
+  91:	83 ec 0c             	sub    $0xc,%esp
+  94:	53                   	push   %ebx
+  95:	e8 36 03 00 00       	call   3d0 <strlen>
+  9a:	83 c4 10             	add    $0x10,%esp
+  9d:	83 f8 0d             	cmp    $0xd,%eax
+  a0:	77 4a                	ja     ec <fmtname+0x8c>
+  memmove(buf, p, strlen(p));
+  a2:	83 ec 0c             	sub    $0xc,%esp
+  a5:	53                   	push   %ebx
+  a6:	e8 25 03 00 00       	call   3d0 <strlen>
+  ab:	83 c4 0c             	add    $0xc,%esp
+  ae:	50                   	push   %eax
+  af:	53                   	push   %ebx
+  b0:	68 f4 0d 00 00       	push   $0xdf4
+  b5:	e8 a6 04 00 00       	call   560 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ba:	89 1c 24             	mov    %ebx,(%esp)
+  bd:	e8 0e 03 00 00       	call   3d0 <strlen>
+  c2:	89 1c 24             	mov    %ebx,(%esp)
+  return buf;
+  c5:	bb f4 0d 00 00       	mov    $0xdf4,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	89 c6                	mov    %eax,%esi
+  cc:	e8 ff 02 00 00       	call   3d0 <strlen>
+  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d6:	83 c4 0c             	add    $0xc,%esp
+  d9:	29 f2                	sub    %esi,%edx
+  db:	05 f4 0d 00 00       	add    $0xdf4,%eax
+  e0:	52                   	push   %edx
+  e1:	6a 20                	push   $0x20
+  e3:	50                   	push   %eax
+  e4:	e8 17 03 00 00       	call   400 <memset>
+  return buf;
+  e9:	83 c4 10             	add    $0x10,%esp
+}
+  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ef:	89 d8                	mov    %ebx,%eax
+  f1:	5b                   	pop    %ebx
+  f2:	5e                   	pop    %esi
+  f3:	5d                   	pop    %ebp
+  f4:	c3                   	ret    
+  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <ls>:
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	56                   	push   %esi
+ 105:	53                   	push   %ebx
+ 106:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 10c:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 10f:	6a 00                	push   $0x0
+ 111:	57                   	push   %edi
+ 112:	e8 bc 04 00 00       	call   5d3 <open>
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	85 c0                	test   %eax,%eax
+ 11c:	0f 88 9e 01 00 00    	js     2c0 <ls+0x1c0>
+  if(fstat(fd, &st) < 0){
+ 122:	83 ec 08             	sub    $0x8,%esp
+ 125:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 12b:	89 c3                	mov    %eax,%ebx
+ 12d:	56                   	push   %esi
+ 12e:	50                   	push   %eax
+ 12f:	e8 b7 04 00 00       	call   5eb <fstat>
+ 134:	83 c4 10             	add    $0x10,%esp
+ 137:	85 c0                	test   %eax,%eax
+ 139:	0f 88 c1 01 00 00    	js     300 <ls+0x200>
+  switch(st.type){
+ 13f:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 146:	66 83 f8 01          	cmp    $0x1,%ax
+ 14a:	74 64                	je     1b0 <ls+0xb0>
+ 14c:	66 83 f8 02          	cmp    $0x2,%ax
+ 150:	74 1e                	je     170 <ls+0x70>
+  close(fd);
+ 152:	83 ec 0c             	sub    $0xc,%esp
+ 155:	53                   	push   %ebx
+ 156:	e8 60 04 00 00       	call   5bb <close>
+ 15b:	83 c4 10             	add    $0x10,%esp
+}
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 170:	83 ec 0c             	sub    $0xc,%esp
+ 173:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 179:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 17f:	57                   	push   %edi
+ 180:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 186:	e8 d5 fe ff ff       	call   60 <fmtname>
+ 18b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 191:	59                   	pop    %ecx
+ 192:	5f                   	pop    %edi
+ 193:	52                   	push   %edx
+ 194:	56                   	push   %esi
+ 195:	6a 02                	push   $0x2
+ 197:	50                   	push   %eax
+ 198:	68 40 0a 00 00       	push   $0xa40
+ 19d:	6a 01                	push   $0x1
+ 19f:	e8 4c 05 00 00       	call   6f0 <printf>
+    break;
+ 1a4:	83 c4 20             	add    $0x20,%esp
+ 1a7:	eb a9                	jmp    152 <ls+0x52>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1b0:	83 ec 0c             	sub    $0xc,%esp
+ 1b3:	57                   	push   %edi
+ 1b4:	e8 17 02 00 00       	call   3d0 <strlen>
+ 1b9:	83 c4 10             	add    $0x10,%esp
+ 1bc:	83 c0 10             	add    $0x10,%eax
+ 1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1c4:	0f 87 16 01 00 00    	ja     2e0 <ls+0x1e0>
+    strcpy(buf, path);
+ 1ca:	83 ec 08             	sub    $0x8,%esp
+ 1cd:	57                   	push   %edi
+ 1ce:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 1d4:	57                   	push   %edi
+ 1d5:	e8 66 01 00 00       	call   340 <strcpy>
+    p = buf+strlen(buf);
+ 1da:	89 3c 24             	mov    %edi,(%esp)
+ 1dd:	e8 ee 01 00 00       	call   3d0 <strlen>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1e2:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1e5:	01 f8                	add    %edi,%eax
+    *p++ = '/';
+ 1e7:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 1ea:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 1f0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 1f6:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 209:	6a 10                	push   $0x10
+ 20b:	50                   	push   %eax
+ 20c:	53                   	push   %ebx
+ 20d:	e8 99 03 00 00       	call   5ab <read>
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	83 f8 10             	cmp    $0x10,%eax
+ 218:	0f 85 34 ff ff ff    	jne    152 <ls+0x52>
+      if(de.inum == 0)
+ 21e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 225:	00 
+ 226:	74 d8                	je     200 <ls+0x100>
+      memmove(p, de.name, DIRSIZ);
+ 228:	83 ec 04             	sub    $0x4,%esp
+ 22b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 231:	6a 0e                	push   $0xe
+ 233:	50                   	push   %eax
+ 234:	ff b5 a4 fd ff ff    	push   -0x25c(%ebp)
+ 23a:	e8 21 03 00 00       	call   560 <memmove>
+      p[DIRSIZ] = 0;
+ 23f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 245:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 249:	58                   	pop    %eax
+ 24a:	5a                   	pop    %edx
+ 24b:	56                   	push   %esi
+ 24c:	57                   	push   %edi
+ 24d:	e8 7e 02 00 00       	call   4d0 <stat>
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	0f 88 cb 00 00 00    	js     328 <ls+0x228>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 25d:	83 ec 0c             	sub    $0xc,%esp
+ 260:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 266:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 26c:	57                   	push   %edi
+ 26d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 274:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 27a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 280:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 286:	e8 d5 fd ff ff       	call   60 <fmtname>
+ 28b:	5a                   	pop    %edx
+ 28c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 292:	59                   	pop    %ecx
+ 293:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 299:	51                   	push   %ecx
+ 29a:	52                   	push   %edx
+ 29b:	ff b5 b4 fd ff ff    	push   -0x24c(%ebp)
+ 2a1:	50                   	push   %eax
+ 2a2:	68 40 0a 00 00       	push   $0xa40
+ 2a7:	6a 01                	push   $0x1
+ 2a9:	e8 42 04 00 00       	call   6f0 <printf>
+ 2ae:	83 c4 20             	add    $0x20,%esp
+ 2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot open %s\n", path);
+ 2c0:	83 ec 04             	sub    $0x4,%esp
+ 2c3:	57                   	push   %edi
+ 2c4:	68 18 0a 00 00       	push   $0xa18
+ 2c9:	6a 02                	push   $0x2
+ 2cb:	e8 20 04 00 00       	call   6f0 <printf>
+    return;
+ 2d0:	83 c4 10             	add    $0x10,%esp
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+      printf(1, "ls: path too long\n");
+ 2e0:	83 ec 08             	sub    $0x8,%esp
+ 2e3:	68 4d 0a 00 00       	push   $0xa4d
+ 2e8:	6a 01                	push   $0x1
+ 2ea:	e8 01 04 00 00       	call   6f0 <printf>
+      break;
+ 2ef:	83 c4 10             	add    $0x10,%esp
+ 2f2:	e9 5b fe ff ff       	jmp    152 <ls+0x52>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+    printf(2, "ls: cannot stat %s\n", path);
+ 300:	83 ec 04             	sub    $0x4,%esp
+ 303:	57                   	push   %edi
+ 304:	68 2c 0a 00 00       	push   $0xa2c
+ 309:	6a 02                	push   $0x2
+ 30b:	e8 e0 03 00 00       	call   6f0 <printf>
+    close(fd);
+ 310:	89 1c 24             	mov    %ebx,(%esp)
+ 313:	e8 a3 02 00 00       	call   5bb <close>
+    return;
+ 318:	83 c4 10             	add    $0x10,%esp
+}
+ 31b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 31e:	5b                   	pop    %ebx
+ 31f:	5e                   	pop    %esi
+ 320:	5f                   	pop    %edi
+ 321:	5d                   	pop    %ebp
+ 322:	c3                   	ret    
+ 323:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 327:	90                   	nop
+        printf(1, "ls: cannot stat %s\n", buf);
+ 328:	83 ec 04             	sub    $0x4,%esp
+ 32b:	57                   	push   %edi
+ 32c:	68 2c 0a 00 00       	push   $0xa2c
+ 331:	6a 01                	push   $0x1
+ 333:	e8 b8 03 00 00       	call   6f0 <printf>
+        continue;
+ 338:	83 c4 10             	add    $0x10,%esp
+ 33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 341:	31 c0                	xor    %eax,%eax
+{
+ 343:	89 e5                	mov    %esp,%ebp
+ 345:	53                   	push   %ebx
+ 346:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 349:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 361:	89 c8                	mov    %ecx,%eax
+ 363:	c9                   	leave  
+ 364:	c3                   	ret    
+ 365:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	53                   	push   %ebx
+ 374:	8b 55 08             	mov    0x8(%ebp),%edx
+ 377:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 37a:	0f b6 02             	movzbl (%edx),%eax
+ 37d:	84 c0                	test   %al,%al
+ 37f:	75 17                	jne    398 <strcmp+0x28>
+ 381:	eb 3a                	jmp    3bd <strcmp+0x4d>
+ 383:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 387:	90                   	nop
+ 388:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 38c:	83 c2 01             	add    $0x1,%edx
+ 38f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 392:	84 c0                	test   %al,%al
+ 394:	74 1a                	je     3b0 <strcmp+0x40>
+    p++, q++;
+ 396:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 398:	0f b6 19             	movzbl (%ecx),%ebx
+ 39b:	38 c3                	cmp    %al,%bl
+ 39d:	74 e9                	je     388 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 39f:	29 d8                	sub    %ebx,%eax
+}
+ 3a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3a4:	c9                   	leave  
+ 3a5:	c3                   	ret    
+ 3a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 3b0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 3b4:	31 c0                	xor    %eax,%eax
+ 3b6:	29 d8                	sub    %ebx,%eax
+}
+ 3b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3bb:	c9                   	leave  
+ 3bc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 3bd:	0f b6 19             	movzbl (%ecx),%ebx
+ 3c0:	31 c0                	xor    %eax,%eax
+ 3c2:	eb db                	jmp    39f <strcmp+0x2f>
+ 3c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3cf:	90                   	nop
+
+000003d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3d6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3d9:	74 15                	je     3f0 <strlen+0x20>
+ 3db:	31 c0                	xor    %eax,%eax
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e0:	83 c0 01             	add    $0x1,%eax
+ 3e3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3e7:	89 c1                	mov    %eax,%ecx
+ 3e9:	75 f5                	jne    3e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3eb:	89 c8                	mov    %ecx,%eax
+ 3ed:	5d                   	pop    %ebp
+ 3ee:	c3                   	ret    
+ 3ef:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 407:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 40d:	89 d7                	mov    %edx,%edi
+ 40f:	fc                   	cld    
+ 410:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 412:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 415:	89 d0                	mov    %edx,%eax
+ 417:	c9                   	leave  
+ 418:	c3                   	ret    
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	8b 45 08             	mov    0x8(%ebp),%eax
+ 426:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42a:	0f b6 10             	movzbl (%eax),%edx
+ 42d:	84 d2                	test   %dl,%dl
+ 42f:	75 12                	jne    443 <strchr+0x23>
+ 431:	eb 1d                	jmp    450 <strchr+0x30>
+ 433:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 437:	90                   	nop
+ 438:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 43c:	83 c0 01             	add    $0x1,%eax
+ 43f:	84 d2                	test   %dl,%dl
+ 441:	74 0d                	je     450 <strchr+0x30>
+    if(*s == c)
+ 443:	38 d1                	cmp    %dl,%cl
+ 445:	75 f1                	jne    438 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 447:	5d                   	pop    %ebp
+ 448:	c3                   	ret    
+ 449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 450:	31 c0                	xor    %eax,%eax
+}
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 465:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 468:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 469:	31 db                	xor    %ebx,%ebx
+{
+ 46b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 46e:	eb 27                	jmp    497 <gets+0x37>
+    cc = read(0, &c, 1);
+ 470:	83 ec 04             	sub    $0x4,%esp
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	6a 00                	push   $0x0
+ 478:	e8 2e 01 00 00       	call   5ab <read>
+    if(cc < 1)
+ 47d:	83 c4 10             	add    $0x10,%esp
+ 480:	85 c0                	test   %eax,%eax
+ 482:	7e 1d                	jle    4a1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 484:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 488:	8b 55 08             	mov    0x8(%ebp),%edx
+ 48b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 48f:	3c 0a                	cmp    $0xa,%al
+ 491:	74 1d                	je     4b0 <gets+0x50>
+ 493:	3c 0d                	cmp    $0xd,%al
+ 495:	74 19                	je     4b0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 497:	89 de                	mov    %ebx,%esi
+ 499:	83 c3 01             	add    $0x1,%ebx
+ 49c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 49f:	7c cf                	jl     470 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 4a1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4a4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 4a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ab:	5b                   	pop    %ebx
+ 4ac:	5e                   	pop    %esi
+ 4ad:	5f                   	pop    %edi
+ 4ae:	5d                   	pop    %ebp
+ 4af:	c3                   	ret    
+  buf[i] = '\0';
+ 4b0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4b3:	89 de                	mov    %ebx,%esi
+ 4b5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 4b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bc:	5b                   	pop    %ebx
+ 4bd:	5e                   	pop    %esi
+ 4be:	5f                   	pop    %edi
+ 4bf:	5d                   	pop    %ebp
+ 4c0:	c3                   	ret    
+ 4c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
+
+000004d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	56                   	push   %esi
+ 4d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4d5:	83 ec 08             	sub    $0x8,%esp
+ 4d8:	6a 00                	push   $0x0
+ 4da:	ff 75 08             	push   0x8(%ebp)
+ 4dd:	e8 f1 00 00 00       	call   5d3 <open>
+  if(fd < 0)
+ 4e2:	83 c4 10             	add    $0x10,%esp
+ 4e5:	85 c0                	test   %eax,%eax
+ 4e7:	78 27                	js     510 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	ff 75 0c             	push   0xc(%ebp)
+ 4ef:	89 c3                	mov    %eax,%ebx
+ 4f1:	50                   	push   %eax
+ 4f2:	e8 f4 00 00 00       	call   5eb <fstat>
+  close(fd);
+ 4f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4fc:	e8 ba 00 00 00       	call   5bb <close>
+  return r;
+ 501:	83 c4 10             	add    $0x10,%esp
+}
+ 504:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 507:	89 f0                	mov    %esi,%eax
+ 509:	5b                   	pop    %ebx
+ 50a:	5e                   	pop    %esi
+ 50b:	5d                   	pop    %ebp
+ 50c:	c3                   	ret    
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 510:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 515:	eb ed                	jmp    504 <stat+0x34>
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+
+00000520 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	53                   	push   %ebx
+ 524:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 527:	0f be 02             	movsbl (%edx),%eax
+ 52a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 52d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 530:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 535:	77 1e                	ja     555 <atoi+0x35>
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 540:	83 c2 01             	add    $0x1,%edx
+ 543:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 546:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 54a:	0f be 02             	movsbl (%edx),%eax
+ 54d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 550:	80 fb 09             	cmp    $0x9,%bl
+ 553:	76 eb                	jbe    540 <atoi+0x20>
+  return n;
+}
+ 555:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 558:	89 c8                	mov    %ecx,%eax
+ 55a:	c9                   	leave  
+ 55b:	c3                   	ret    
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000560 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 560:	55                   	push   %ebp
+ 561:	89 e5                	mov    %esp,%ebp
+ 563:	57                   	push   %edi
+ 564:	8b 45 10             	mov    0x10(%ebp),%eax
+ 567:	8b 55 08             	mov    0x8(%ebp),%edx
+ 56a:	56                   	push   %esi
+ 56b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 56e:	85 c0                	test   %eax,%eax
+ 570:	7e 13                	jle    585 <memmove+0x25>
+ 572:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 574:	89 d7                	mov    %edx,%edi
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 580:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 581:	39 f8                	cmp    %edi,%eax
+ 583:	75 fb                	jne    580 <memmove+0x20>
+  return vdst;
+}
+ 585:	5e                   	pop    %esi
+ 586:	89 d0                	mov    %edx,%eax
+ 588:	5f                   	pop    %edi
+ 589:	5d                   	pop    %ebp
+ 58a:	c3                   	ret    
+
+0000058b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 58b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 590:	cd 40                	int    $0x40
+ 592:	c3                   	ret    
+
+00000593 <exit>:
+SYSCALL(exit)
+ 593:	b8 02 00 00 00       	mov    $0x2,%eax
+ 598:	cd 40                	int    $0x40
+ 59a:	c3                   	ret    
+
+0000059b <wait>:
+SYSCALL(wait)
+ 59b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <pipe>:
+SYSCALL(pipe)
+ 5a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <read>:
+SYSCALL(read)
+ 5ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <write>:
+SYSCALL(write)
+ 5b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <close>:
+SYSCALL(close)
+ 5bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <kill>:
+SYSCALL(kill)
+ 5c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <exec>:
+SYSCALL(exec)
+ 5cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <open>:
+SYSCALL(open)
+ 5d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <mknod>:
+SYSCALL(mknod)
+ 5db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <unlink>:
+SYSCALL(unlink)
+ 5e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <fstat>:
+SYSCALL(fstat)
+ 5eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <link>:
+SYSCALL(link)
+ 5f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <mkdir>:
+SYSCALL(mkdir)
+ 5fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <chdir>:
+SYSCALL(chdir)
+ 603:	b8 09 00 00 00       	mov    $0x9,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <dup>:
+SYSCALL(dup)
+ 60b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <getpid>:
+SYSCALL(getpid)
+ 613:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <sbrk>:
+SYSCALL(sbrk)
+ 61b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <sleep>:
+SYSCALL(sleep)
+ 623:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <uptime>:
+SYSCALL(uptime)
+ 62b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+ 633:	66 90                	xchg   %ax,%ax
+ 635:	66 90                	xchg   %ax,%ax
+ 637:	66 90                	xchg   %ax,%ax
+ 639:	66 90                	xchg   %ax,%ax
+ 63b:	66 90                	xchg   %ax,%ax
+ 63d:	66 90                	xchg   %ax,%ax
+ 63f:	90                   	nop
+
+00000640 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+ 646:	83 ec 3c             	sub    $0x3c,%esp
+ 649:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 64c:	89 d1                	mov    %edx,%ecx
+{
+ 64e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 651:	85 d2                	test   %edx,%edx
+ 653:	0f 89 7f 00 00 00    	jns    6d8 <printint+0x98>
+ 659:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 65d:	74 79                	je     6d8 <printint+0x98>
+    neg = 1;
+ 65f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 666:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 668:	31 db                	xor    %ebx,%ebx
+ 66a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 66d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 670:	89 c8                	mov    %ecx,%eax
+ 672:	31 d2                	xor    %edx,%edx
+ 674:	89 cf                	mov    %ecx,%edi
+ 676:	f7 75 c4             	divl   -0x3c(%ebp)
+ 679:	0f b6 92 c4 0a 00 00 	movzbl 0xac4(%edx),%edx
+ 680:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 683:	89 d8                	mov    %ebx,%eax
+ 685:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 688:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 68b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 68e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 691:	76 dd                	jbe    670 <printint+0x30>
+  if(neg)
+ 693:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 696:	85 c9                	test   %ecx,%ecx
+ 698:	74 0c                	je     6a6 <printint+0x66>
+    buf[i++] = '-';
+ 69a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 69f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6ad:	eb 07                	jmp    6b6 <printint+0x76>
+ 6af:	90                   	nop
+    putc(fd, buf[i]);
+ 6b0:	0f b6 13             	movzbl (%ebx),%edx
+ 6b3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6b6:	83 ec 04             	sub    $0x4,%esp
+ 6b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6bc:	6a 01                	push   $0x1
+ 6be:	56                   	push   %esi
+ 6bf:	57                   	push   %edi
+ 6c0:	e8 ee fe ff ff       	call   5b3 <write>
+  while(--i >= 0)
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	39 de                	cmp    %ebx,%esi
+ 6ca:	75 e4                	jne    6b0 <printint+0x70>
+}
+ 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6cf:	5b                   	pop    %ebx
+ 6d0:	5e                   	pop    %esi
+ 6d1:	5f                   	pop    %edi
+ 6d2:	5d                   	pop    %ebp
+ 6d3:	c3                   	ret    
+ 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6df:	eb 87                	jmp    668 <printint+0x28>
+ 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	90                   	nop
+
+000006f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 6fc:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 6ff:	0f b6 13             	movzbl (%ebx),%edx
+ 702:	84 d2                	test   %dl,%dl
+ 704:	74 6a                	je     770 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 706:	8d 45 10             	lea    0x10(%ebp),%eax
+ 709:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 70c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 70f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 711:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 714:	eb 36                	jmp    74c <printf+0x5c>
+ 716:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71d:	8d 76 00             	lea    0x0(%esi),%esi
+ 720:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 723:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 728:	83 f8 25             	cmp    $0x25,%eax
+ 72b:	74 15                	je     742 <printf+0x52>
+  write(fd, &c, 1);
+ 72d:	83 ec 04             	sub    $0x4,%esp
+ 730:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 733:	6a 01                	push   $0x1
+ 735:	57                   	push   %edi
+ 736:	56                   	push   %esi
+ 737:	e8 77 fe ff ff       	call   5b3 <write>
+ 73c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 73f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 742:	0f b6 13             	movzbl (%ebx),%edx
+ 745:	83 c3 01             	add    $0x1,%ebx
+ 748:	84 d2                	test   %dl,%dl
+ 74a:	74 24                	je     770 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 74c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 74f:	85 c9                	test   %ecx,%ecx
+ 751:	74 cd                	je     720 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 753:	83 f9 25             	cmp    $0x25,%ecx
+ 756:	75 ea                	jne    742 <printf+0x52>
+      if(c == 'd'){
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	0f 84 07 01 00 00    	je     868 <printf+0x178>
+ 761:	83 e8 63             	sub    $0x63,%eax
+ 764:	83 f8 15             	cmp    $0x15,%eax
+ 767:	77 17                	ja     780 <printf+0x90>
+ 769:	ff 24 85 6c 0a 00 00 	jmp    *0xa6c(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 770:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 773:	5b                   	pop    %ebx
+ 774:	5e                   	pop    %esi
+ 775:	5f                   	pop    %edi
+ 776:	5d                   	pop    %ebp
+ 777:	c3                   	ret    
+ 778:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77f:	90                   	nop
+  write(fd, &c, 1);
+ 780:	83 ec 04             	sub    $0x4,%esp
+ 783:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 786:	6a 01                	push   $0x1
+ 788:	57                   	push   %edi
+ 789:	56                   	push   %esi
+ 78a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 78e:	e8 20 fe ff ff       	call   5b3 <write>
+        putc(fd, c);
+ 793:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 797:	83 c4 0c             	add    $0xc,%esp
+ 79a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 79d:	6a 01                	push   $0x1
+ 79f:	57                   	push   %edi
+ 7a0:	56                   	push   %esi
+ 7a1:	e8 0d fe ff ff       	call   5b3 <write>
+        putc(fd, c);
+ 7a6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7a9:	31 c9                	xor    %ecx,%ecx
+ 7ab:	eb 95                	jmp    742 <printf+0x52>
+ 7ad:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 7b0:	83 ec 0c             	sub    $0xc,%esp
+ 7b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7b8:	6a 00                	push   $0x0
+ 7ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7bd:	8b 10                	mov    (%eax),%edx
+ 7bf:	89 f0                	mov    %esi,%eax
+ 7c1:	e8 7a fe ff ff       	call   640 <printint>
+        ap++;
+ 7c6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 7ca:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7cd:	31 c9                	xor    %ecx,%ecx
+ 7cf:	e9 6e ff ff ff       	jmp    742 <printf+0x52>
+ 7d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 7d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7db:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 7dd:	83 c0 04             	add    $0x4,%eax
+ 7e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 7e3:	85 d2                	test   %edx,%edx
+ 7e5:	0f 84 8d 00 00 00    	je     878 <printf+0x188>
+        while(*s != 0){
+ 7eb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 7ee:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 7f0:	84 c0                	test   %al,%al
+ 7f2:	0f 84 4a ff ff ff    	je     742 <printf+0x52>
+ 7f8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 7fb:	89 d3                	mov    %edx,%ebx
+ 7fd:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 800:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 803:	83 c3 01             	add    $0x1,%ebx
+ 806:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 809:	6a 01                	push   $0x1
+ 80b:	57                   	push   %edi
+ 80c:	56                   	push   %esi
+ 80d:	e8 a1 fd ff ff       	call   5b3 <write>
+        while(*s != 0){
+ 812:	0f b6 03             	movzbl (%ebx),%eax
+ 815:	83 c4 10             	add    $0x10,%esp
+ 818:	84 c0                	test   %al,%al
+ 81a:	75 e4                	jne    800 <printf+0x110>
+      state = 0;
+ 81c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 81f:	31 c9                	xor    %ecx,%ecx
+ 821:	e9 1c ff ff ff       	jmp    742 <printf+0x52>
+ 826:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 838:	6a 01                	push   $0x1
+ 83a:	e9 7b ff ff ff       	jmp    7ba <printf+0xca>
+ 83f:	90                   	nop
+        putc(fd, *ap);
+ 840:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 843:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 846:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 848:	6a 01                	push   $0x1
+ 84a:	57                   	push   %edi
+ 84b:	56                   	push   %esi
+        putc(fd, *ap);
+ 84c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 84f:	e8 5f fd ff ff       	call   5b3 <write>
+        ap++;
+ 854:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 858:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 85b:	31 c9                	xor    %ecx,%ecx
+ 85d:	e9 e0 fe ff ff       	jmp    742 <printf+0x52>
+ 862:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 868:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 86b:	83 ec 04             	sub    $0x4,%esp
+ 86e:	e9 2a ff ff ff       	jmp    79d <printf+0xad>
+ 873:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 877:	90                   	nop
+          s = "(null)";
+ 878:	ba 62 0a 00 00       	mov    $0xa62,%edx
+        while(*s != 0){
+ 87d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 880:	b8 28 00 00 00       	mov    $0x28,%eax
+ 885:	89 d3                	mov    %edx,%ebx
+ 887:	e9 74 ff ff ff       	jmp    800 <printf+0x110>
+ 88c:	66 90                	xchg   %ax,%ax
+ 88e:	66 90                	xchg   %ax,%ax
+
+00000890 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 890:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 891:	a1 04 0e 00 00       	mov    0xe04,%eax
+{
+ 896:	89 e5                	mov    %esp,%ebp
+ 898:	57                   	push   %edi
+ 899:	56                   	push   %esi
+ 89a:	53                   	push   %ebx
+ 89b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 89e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8a8:	89 c2                	mov    %eax,%edx
+ 8aa:	8b 00                	mov    (%eax),%eax
+ 8ac:	39 ca                	cmp    %ecx,%edx
+ 8ae:	73 30                	jae    8e0 <free+0x50>
+ 8b0:	39 c1                	cmp    %eax,%ecx
+ 8b2:	72 04                	jb     8b8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8b4:	39 c2                	cmp    %eax,%edx
+ 8b6:	72 f0                	jb     8a8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8be:	39 f8                	cmp    %edi,%eax
+ 8c0:	74 30                	je     8f2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8c2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 8c5:	8b 42 04             	mov    0x4(%edx),%eax
+ 8c8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 8cb:	39 f1                	cmp    %esi,%ecx
+ 8cd:	74 3a                	je     909 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 8cf:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 8d1:	5b                   	pop    %ebx
+  freep = p;
+ 8d2:	89 15 04 0e 00 00    	mov    %edx,0xe04
+}
+ 8d8:	5e                   	pop    %esi
+ 8d9:	5f                   	pop    %edi
+ 8da:	5d                   	pop    %ebp
+ 8db:	c3                   	ret    
+ 8dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8e0:	39 c2                	cmp    %eax,%edx
+ 8e2:	72 c4                	jb     8a8 <free+0x18>
+ 8e4:	39 c1                	cmp    %eax,%ecx
+ 8e6:	73 c0                	jae    8a8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 8e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8ee:	39 f8                	cmp    %edi,%eax
+ 8f0:	75 d0                	jne    8c2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 8f2:	03 70 04             	add    0x4(%eax),%esi
+ 8f5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8f8:	8b 02                	mov    (%edx),%eax
+ 8fa:	8b 00                	mov    (%eax),%eax
+ 8fc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8ff:	8b 42 04             	mov    0x4(%edx),%eax
+ 902:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 905:	39 f1                	cmp    %esi,%ecx
+ 907:	75 c6                	jne    8cf <free+0x3f>
+    p->s.size += bp->s.size;
+ 909:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 90c:	89 15 04 0e 00 00    	mov    %edx,0xe04
+    p->s.size += bp->s.size;
+ 912:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 915:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 918:	89 0a                	mov    %ecx,(%edx)
+}
+ 91a:	5b                   	pop    %ebx
+ 91b:	5e                   	pop    %esi
+ 91c:	5f                   	pop    %edi
+ 91d:	5d                   	pop    %ebp
+ 91e:	c3                   	ret    
+ 91f:	90                   	nop
+
+00000920 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 920:	55                   	push   %ebp
+ 921:	89 e5                	mov    %esp,%ebp
+ 923:	57                   	push   %edi
+ 924:	56                   	push   %esi
+ 925:	53                   	push   %ebx
+ 926:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 929:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 92c:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 932:	8d 70 07             	lea    0x7(%eax),%esi
+ 935:	c1 ee 03             	shr    $0x3,%esi
+ 938:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 93b:	85 ff                	test   %edi,%edi
+ 93d:	0f 84 9d 00 00 00    	je     9e0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 943:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 945:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 948:	39 f1                	cmp    %esi,%ecx
+ 94a:	73 6a                	jae    9b6 <malloc+0x96>
+ 94c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 951:	39 de                	cmp    %ebx,%esi
+ 953:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 956:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 95d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 960:	eb 17                	jmp    979 <malloc+0x59>
+ 962:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 968:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 96a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 96d:	39 f1                	cmp    %esi,%ecx
+ 96f:	73 4f                	jae    9c0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 971:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
+ 977:	89 c2                	mov    %eax,%edx
+ 979:	39 d7                	cmp    %edx,%edi
+ 97b:	75 eb                	jne    968 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 97d:	83 ec 0c             	sub    $0xc,%esp
+ 980:	ff 75 e4             	push   -0x1c(%ebp)
+ 983:	e8 93 fc ff ff       	call   61b <sbrk>
+  if(p == (char*)-1)
+ 988:	83 c4 10             	add    $0x10,%esp
+ 98b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 98e:	74 1c                	je     9ac <malloc+0x8c>
+  hp->s.size = nu;
+ 990:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 993:	83 ec 0c             	sub    $0xc,%esp
+ 996:	83 c0 08             	add    $0x8,%eax
+ 999:	50                   	push   %eax
+ 99a:	e8 f1 fe ff ff       	call   890 <free>
+  return freep;
+ 99f:	8b 15 04 0e 00 00    	mov    0xe04,%edx
+      if((p = morecore(nunits)) == 0)
+ 9a5:	83 c4 10             	add    $0x10,%esp
+ 9a8:	85 d2                	test   %edx,%edx
+ 9aa:	75 bc                	jne    968 <malloc+0x48>
+        return 0;
+  }
+}
+ 9ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9af:	31 c0                	xor    %eax,%eax
+}
+ 9b1:	5b                   	pop    %ebx
+ 9b2:	5e                   	pop    %esi
+ 9b3:	5f                   	pop    %edi
+ 9b4:	5d                   	pop    %ebp
+ 9b5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 9b6:	89 d0                	mov    %edx,%eax
+ 9b8:	89 fa                	mov    %edi,%edx
+ 9ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 9c0:	39 ce                	cmp    %ecx,%esi
+ 9c2:	74 4c                	je     a10 <malloc+0xf0>
+        p->s.size -= nunits;
+ 9c4:	29 f1                	sub    %esi,%ecx
+ 9c6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 9c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 9cc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 9cf:	89 15 04 0e 00 00    	mov    %edx,0xe04
+}
+ 9d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 9d8:	83 c0 08             	add    $0x8,%eax
+}
+ 9db:	5b                   	pop    %ebx
+ 9dc:	5e                   	pop    %esi
+ 9dd:	5f                   	pop    %edi
+ 9de:	5d                   	pop    %ebp
+ 9df:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 9e0:	c7 05 04 0e 00 00 08 	movl   $0xe08,0xe04
+ 9e7:	0e 00 00 
+    base.s.size = 0;
+ 9ea:	bf 08 0e 00 00       	mov    $0xe08,%edi
+    base.s.ptr = freep = prevp = &base;
+ 9ef:	c7 05 08 0e 00 00 08 	movl   $0xe08,0xe08
+ 9f6:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9f9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 9fb:	c7 05 0c 0e 00 00 00 	movl   $0x0,0xe0c
+ a02:	00 00 00 
+    if(p->s.size >= nunits){
+ a05:	e9 42 ff ff ff       	jmp    94c <malloc+0x2c>
+ a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a10:	8b 08                	mov    (%eax),%ecx
+ a12:	89 0a                	mov    %ecx,(%edx)
+ a14:	eb b9                	jmp    9cf <malloc+0xaf>
diff -ruN xv6-public/ls.d xv6-publica/ls.d
--- xv6-public/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ls.d	2024-10-15 10:58:37.747888466 +0530
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files xv6-public/ls.o and xv6-publica/ls.o differ
diff -ruN xv6-public/ls.sym xv6-publica/ls.sym
--- xv6-public/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ls.sym	2024-10-15 10:58:37.777888467 +0530
@@ -0,0 +1,48 @@
+00000000 ls.c
+00000df4 buf.0
+00000000 ulib.c
+00000000 printf.c
+00000640 printint
+00000ac4 digits.0
+00000000 umalloc.c
+00000e04 freep
+00000e08 base
+00000340 strcpy
+00000060 fmtname
+000006f0 printf
+00000560 memmove
+000005db mknod
+00000460 gets
+00000613 getpid
+00000920 malloc
+00000623 sleep
+000005a3 pipe
+000005b3 write
+000005eb fstat
+000005c3 kill
+00000603 chdir
+000005cb exec
+0000059b wait
+000005ab read
+000005e3 unlink
+0000058b fork
+0000061b sbrk
+0000062b uptime
+00000df4 __bss_start
+00000400 memset
+00000000 main
+00000370 strcmp
+0000060b dup
+000004d0 stat
+00000df4 _edata
+00000e10 _end
+000005f3 link
+00000100 ls
+00000593 exit
+00000520 atoi
+000003d0 strlen
+000005d3 open
+00000420 strchr
+000005fb mkdir
+000005bb close
+00000890 free
diff -ruN xv6-public/main.d xv6-publica/main.d
--- xv6-public/main.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/main.d	2024-10-15 10:58:39.827888527 +0530
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files xv6-public/main.o and xv6-publica/main.o differ
diff -ruN xv6-public/mkdir.asm xv6-publica/mkdir.asm
--- xv6-public/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/mkdir.asm	2024-10-15 10:58:37.827888468 +0530
@@ -0,0 +1,1171 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	bf 01 00 00 00       	mov    $0x1,%edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1c:	8b 31                	mov    (%ecx),%esi
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	push   (%ebx)
+  35:	e8 01 03 00 00       	call   33b <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 83 02 00 00       	call   2d3 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	push   (%ebx)
+  53:	68 6f 07 00 00       	push   $0x76f
+  58:	6a 02                	push   $0x2
+  5a:	e8 d1 03 00 00       	call   430 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 58 07 00 00       	push   $0x758
+  6b:	6a 02                	push   $0x2
+  6d:	e8 be 03 00 00       	call   430 <printf>
+    exit();
+  72:	e8 5c 02 00 00       	call   2d3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  81:	31 c0                	xor    %eax,%eax
+{
+  83:	89 e5                	mov    %esp,%ebp
+  85:	53                   	push   %ebx
+  86:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  a1:	89 c8                	mov    %ecx,%eax
+  a3:	c9                   	leave  
+  a4:	c3                   	ret    
+  a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	84 c0                	test   %al,%al
+  bf:	75 17                	jne    d8 <strcmp+0x28>
+  c1:	eb 3a                	jmp    fd <strcmp+0x4d>
+  c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  c7:	90                   	nop
+  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  cc:	83 c2 01             	add    $0x1,%edx
+  cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  d2:	84 c0                	test   %al,%al
+  d4:	74 1a                	je     f0 <strcmp+0x40>
+    p++, q++;
+  d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  d8:	0f b6 19             	movzbl (%ecx),%ebx
+  db:	38 c3                	cmp    %al,%bl
+  dd:	74 e9                	je     c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  df:	29 d8                	sub    %ebx,%eax
+}
+  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  e4:	c9                   	leave  
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  f4:	31 c0                	xor    %eax,%eax
+  f6:	29 d8                	sub    %ebx,%eax
+}
+  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  fb:	c9                   	leave  
+  fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 100:	31 c0                	xor    %eax,%eax
+ 102:	eb db                	jmp    df <strcmp+0x2f>
+ 104:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 116:	80 3a 00             	cmpb   $0x0,(%edx)
+ 119:	74 15                	je     130 <strlen+0x20>
+ 11b:	31 c0                	xor    %eax,%eax
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+ 120:	83 c0 01             	add    $0x1,%eax
+ 123:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 127:	89 c1                	mov    %eax,%ecx
+ 129:	75 f5                	jne    120 <strlen+0x10>
+    ;
+  return n;
+}
+ 12b:	89 c8                	mov    %ecx,%eax
+ 12d:	5d                   	pop    %ebp
+ 12e:	c3                   	ret    
+ 12f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 147:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 14d:	89 d7                	mov    %edx,%edi
+ 14f:	fc                   	cld    
+ 150:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 152:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 155:	89 d0                	mov    %edx,%eax
+ 157:	c9                   	leave  
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	8b 45 08             	mov    0x8(%ebp),%eax
+ 166:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16a:	0f b6 10             	movzbl (%eax),%edx
+ 16d:	84 d2                	test   %dl,%dl
+ 16f:	75 12                	jne    183 <strchr+0x23>
+ 171:	eb 1d                	jmp    190 <strchr+0x30>
+ 173:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 177:	90                   	nop
+ 178:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 17c:	83 c0 01             	add    $0x1,%eax
+ 17f:	84 d2                	test   %dl,%dl
+ 181:	74 0d                	je     190 <strchr+0x30>
+    if(*s == c)
+ 183:	38 d1                	cmp    %dl,%cl
+ 185:	75 f1                	jne    178 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 190:	31 c0                	xor    %eax,%eax
+}
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 1a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 1a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 1a9:	31 db                	xor    %ebx,%ebx
+{
+ 1ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 1ae:	eb 27                	jmp    1d7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	6a 01                	push   $0x1
+ 1b5:	57                   	push   %edi
+ 1b6:	6a 00                	push   $0x0
+ 1b8:	e8 2e 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1bd:	83 c4 10             	add    $0x10,%esp
+ 1c0:	85 c0                	test   %eax,%eax
+ 1c2:	7e 1d                	jle    1e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1cf:	3c 0a                	cmp    $0xa,%al
+ 1d1:	74 1d                	je     1f0 <gets+0x50>
+ 1d3:	3c 0d                	cmp    $0xd,%al
+ 1d5:	74 19                	je     1f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1d7:	89 de                	mov    %ebx,%esi
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1df:	7c cf                	jl     1b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1eb:	5b                   	pop    %ebx
+ 1ec:	5e                   	pop    %esi
+ 1ed:	5f                   	pop    %edi
+ 1ee:	5d                   	pop    %ebp
+ 1ef:	c3                   	ret    
+  buf[i] = '\0';
+ 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f3:	89 de                	mov    %ebx,%esi
+ 1f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fc:	5b                   	pop    %ebx
+ 1fd:	5e                   	pop    %esi
+ 1fe:	5f                   	pop    %edi
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	push   0x8(%ebp)
+ 21d:	e8 f1 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	push   0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f4 00 00 00       	call   32b <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 ba 00 00 00       	call   2fb <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 02             	movsbl (%edx),%eax
+ 26a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 26d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 270:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 275:	77 1e                	ja     295 <atoi+0x35>
+ 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 298:	89 c8                	mov    %ecx,%eax
+ 29a:	c9                   	leave  
+ 29b:	c3                   	ret    
+ 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2a7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2aa:	56                   	push   %esi
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 c0                	test   %eax,%eax
+ 2b0:	7e 13                	jle    2c5 <memmove+0x25>
+ 2b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b4:	89 d7                	mov    %edx,%edi
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 ec 07 00 00 	movzbl 0x7ec(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+    putc(fd, buf[i]);
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 ee fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 44f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 77 fe ff ff       	call   2f3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 47f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 48c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
+      if(c == 'd'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 94 07 00 00 	jmp    *0x794(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+  write(fd, &c, 1);
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 20 fe ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 0d fe ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
+        ap++;
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+        while(*s != 0){
+ 52b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 52e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 540:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 a1 fd ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
+      state = 0;
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
+        putc(fd, *ap);
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
+        putc(fd, *ap);
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58f:	e8 5f fd ff ff       	call   2f3 <write>
+        ap++;
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
+          s = "(null)";
+ 5b8:	ba 8b 07 00 00       	mov    $0x78b,%edx
+        while(*s != 0){
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	a1 a4 0a 00 00       	mov    0xaa4,%eax
+{
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 60f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 611:	5b                   	pop    %ebx
+  freep = p;
+ 612:	89 15 a4 0a 00 00    	mov    %edx,0xaa4
+}
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
+    p->s.size += bp->s.size;
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 64c:	89 15 a4 0a 00 00    	mov    %edx,0xaa4
+    p->s.size += bp->s.size;
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
+}
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 66c:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 683:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 93 fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
+  hp->s.size = nu;
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6df:	8b 15 a4 0a 00 00    	mov    0xaa4,%edx
+      if((p = morecore(nunits)) == 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6ef:	31 c0                	xor    %eax,%eax
+}
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
+        p->s.size -= nunits;
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 70f:	89 15 a4 0a 00 00    	mov    %edx,0xaa4
+}
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 718:	83 c0 08             	add    $0x8,%eax
+}
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 a4 0a 00 00 a8 	movl   $0xaa8,0xaa4
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	bf a8 0a 00 00       	mov    $0xaa8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 72f:	c7 05 a8 0a 00 00 a8 	movl   $0xaa8,0xaa8
+ 736:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 739:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 73b:	c7 05 ac 0a 00 00 00 	movl   $0x0,0xaac
+ 742:	00 00 00 
+    if(p->s.size >= nunits){
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
diff -ruN xv6-public/mkdir.d xv6-publica/mkdir.d
--- xv6-public/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/mkdir.d	2024-10-15 10:58:37.807888468 +0530
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/mkdir.o and xv6-publica/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-publica/mkdir.sym
--- xv6-public/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/mkdir.sym	2024-10-15 10:58:37.837888469 +0530
@@ -0,0 +1,45 @@
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007ec digits.0
+00000000 umalloc.c
+00000aa4 freep
+00000aa8 base
+00000080 strcpy
+00000430 printf
+000002a0 memmove
+0000031b mknod
+000001a0 gets
+00000353 getpid
+00000660 malloc
+00000363 sleep
+000002e3 pipe
+000002f3 write
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000aa4 __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000034b dup
+00000210 stat
+00000aa4 _edata
+00000ab0 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+00000110 strlen
+00000313 open
+00000160 strchr
+0000033b mkdir
+000002fb close
+000005d0 free
Binary files xv6-public/mkfs and xv6-publica/mkfs differ
diff -ruN xv6-public/mp.d xv6-publica/mp.d
--- xv6-public/mp.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/mp.d	2024-10-15 10:58:39.897888529 +0530
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files xv6-public/mp.o and xv6-publica/mp.o differ
diff -ruN xv6-public/picirq.d xv6-publica/picirq.d
--- xv6-public/picirq.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/picirq.d	2024-10-15 10:58:39.927888530 +0530
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files xv6-public/picirq.o and xv6-publica/picirq.o differ
diff -ruN xv6-public/pipe.d xv6-publica/pipe.d
--- xv6-public/pipe.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/pipe.d	2024-10-15 10:58:39.997888532 +0530
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6-public/pipe.o and xv6-publica/pipe.o differ
diff -ruN xv6-public/printf.d xv6-publica/printf.d
--- xv6-public/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/printf.d	2024-10-15 10:58:37.187888483 +0530
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/printf.o and xv6-publica/printf.o differ
diff -ruN xv6-public/proc.d xv6-publica/proc.d
--- xv6-public/proc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/proc.d	2024-10-15 10:58:40.147888536 +0530
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h
Binary files xv6-public/proc.o and xv6-publica/proc.o differ
diff -ruN xv6-public/rm.asm xv6-publica/rm.asm
--- xv6-public/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/rm.asm	2024-10-15 10:58:37.887888470 +0530
@@ -0,0 +1,1171 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	bf 01 00 00 00       	mov    $0x1,%edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1c:	8b 31                	mov    (%ecx),%esi
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	push   (%ebx)
+  35:	e8 e9 02 00 00       	call   323 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 83 02 00 00       	call   2d3 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	push   (%ebx)
+  53:	68 6c 07 00 00       	push   $0x76c
+  58:	6a 02                	push   $0x2
+  5a:	e8 d1 03 00 00       	call   430 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 58 07 00 00       	push   $0x758
+  6b:	6a 02                	push   $0x2
+  6d:	e8 be 03 00 00       	call   430 <printf>
+    exit();
+  72:	e8 5c 02 00 00       	call   2d3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  81:	31 c0                	xor    %eax,%eax
+{
+  83:	89 e5                	mov    %esp,%ebp
+  85:	53                   	push   %ebx
+  86:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  a1:	89 c8                	mov    %ecx,%eax
+  a3:	c9                   	leave  
+  a4:	c3                   	ret    
+  a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	84 c0                	test   %al,%al
+  bf:	75 17                	jne    d8 <strcmp+0x28>
+  c1:	eb 3a                	jmp    fd <strcmp+0x4d>
+  c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  c7:	90                   	nop
+  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  cc:	83 c2 01             	add    $0x1,%edx
+  cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  d2:	84 c0                	test   %al,%al
+  d4:	74 1a                	je     f0 <strcmp+0x40>
+    p++, q++;
+  d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  d8:	0f b6 19             	movzbl (%ecx),%ebx
+  db:	38 c3                	cmp    %al,%bl
+  dd:	74 e9                	je     c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  df:	29 d8                	sub    %ebx,%eax
+}
+  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  e4:	c9                   	leave  
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  f4:	31 c0                	xor    %eax,%eax
+  f6:	29 d8                	sub    %ebx,%eax
+}
+  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  fb:	c9                   	leave  
+  fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 100:	31 c0                	xor    %eax,%eax
+ 102:	eb db                	jmp    df <strcmp+0x2f>
+ 104:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 116:	80 3a 00             	cmpb   $0x0,(%edx)
+ 119:	74 15                	je     130 <strlen+0x20>
+ 11b:	31 c0                	xor    %eax,%eax
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+ 120:	83 c0 01             	add    $0x1,%eax
+ 123:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 127:	89 c1                	mov    %eax,%ecx
+ 129:	75 f5                	jne    120 <strlen+0x10>
+    ;
+  return n;
+}
+ 12b:	89 c8                	mov    %ecx,%eax
+ 12d:	5d                   	pop    %ebp
+ 12e:	c3                   	ret    
+ 12f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 147:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 14d:	89 d7                	mov    %edx,%edi
+ 14f:	fc                   	cld    
+ 150:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 152:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 155:	89 d0                	mov    %edx,%eax
+ 157:	c9                   	leave  
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	8b 45 08             	mov    0x8(%ebp),%eax
+ 166:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16a:	0f b6 10             	movzbl (%eax),%edx
+ 16d:	84 d2                	test   %dl,%dl
+ 16f:	75 12                	jne    183 <strchr+0x23>
+ 171:	eb 1d                	jmp    190 <strchr+0x30>
+ 173:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 177:	90                   	nop
+ 178:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 17c:	83 c0 01             	add    $0x1,%eax
+ 17f:	84 d2                	test   %dl,%dl
+ 181:	74 0d                	je     190 <strchr+0x30>
+    if(*s == c)
+ 183:	38 d1                	cmp    %dl,%cl
+ 185:	75 f1                	jne    178 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 190:	31 c0                	xor    %eax,%eax
+}
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 1a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 1a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 1a9:	31 db                	xor    %ebx,%ebx
+{
+ 1ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 1ae:	eb 27                	jmp    1d7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	6a 01                	push   $0x1
+ 1b5:	57                   	push   %edi
+ 1b6:	6a 00                	push   $0x0
+ 1b8:	e8 2e 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1bd:	83 c4 10             	add    $0x10,%esp
+ 1c0:	85 c0                	test   %eax,%eax
+ 1c2:	7e 1d                	jle    1e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1cf:	3c 0a                	cmp    $0xa,%al
+ 1d1:	74 1d                	je     1f0 <gets+0x50>
+ 1d3:	3c 0d                	cmp    $0xd,%al
+ 1d5:	74 19                	je     1f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1d7:	89 de                	mov    %ebx,%esi
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1df:	7c cf                	jl     1b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1eb:	5b                   	pop    %ebx
+ 1ec:	5e                   	pop    %esi
+ 1ed:	5f                   	pop    %edi
+ 1ee:	5d                   	pop    %ebp
+ 1ef:	c3                   	ret    
+  buf[i] = '\0';
+ 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f3:	89 de                	mov    %ebx,%esi
+ 1f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fc:	5b                   	pop    %ebx
+ 1fd:	5e                   	pop    %esi
+ 1fe:	5f                   	pop    %edi
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	push   0x8(%ebp)
+ 21d:	e8 f1 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	push   0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f4 00 00 00       	call   32b <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 ba 00 00 00       	call   2fb <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 02             	movsbl (%edx),%eax
+ 26a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 26d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 270:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 275:	77 1e                	ja     295 <atoi+0x35>
+ 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 298:	89 c8                	mov    %ecx,%eax
+ 29a:	c9                   	leave  
+ 29b:	c3                   	ret    
+ 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2a7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2aa:	56                   	push   %esi
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 c0                	test   %eax,%eax
+ 2b0:	7e 13                	jle    2c5 <memmove+0x25>
+ 2b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b4:	89 d7                	mov    %edx,%edi
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+    putc(fd, buf[i]);
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 ee fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 44f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 77 fe ff ff       	call   2f3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 47f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 48c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
+      if(c == 'd'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 8c 07 00 00 	jmp    *0x78c(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+  write(fd, &c, 1);
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 20 fe ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 0d fe ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
+        ap++;
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+        while(*s != 0){
+ 52b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 52e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 540:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 a1 fd ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
+      state = 0;
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
+        putc(fd, *ap);
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
+        putc(fd, *ap);
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58f:	e8 5f fd ff ff       	call   2f3 <write>
+        ap++;
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
+          s = "(null)";
+ 5b8:	ba 85 07 00 00       	mov    $0x785,%edx
+        while(*s != 0){
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+{
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 60f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 611:	5b                   	pop    %ebx
+  freep = p;
+ 612:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+}
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
+    p->s.size += bp->s.size;
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 64c:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+    p->s.size += bp->s.size;
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
+}
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 66c:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 683:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 93 fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
+  hp->s.size = nu;
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6df:	8b 15 9c 0a 00 00    	mov    0xa9c,%edx
+      if((p = morecore(nunits)) == 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6ef:	31 c0                	xor    %eax,%eax
+}
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
+        p->s.size -= nunits;
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 70f:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+}
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 718:	83 c0 08             	add    $0x8,%eax
+}
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 9c 0a 00 00 a0 	movl   $0xaa0,0xa9c
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	bf a0 0a 00 00       	mov    $0xaa0,%edi
+    base.s.ptr = freep = prevp = &base;
+ 72f:	c7 05 a0 0a 00 00 a0 	movl   $0xaa0,0xaa0
+ 736:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 739:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 73b:	c7 05 a4 0a 00 00 00 	movl   $0x0,0xaa4
+ 742:	00 00 00 
+    if(p->s.size >= nunits){
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
diff -ruN xv6-public/rm.d xv6-publica/rm.d
--- xv6-public/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/rm.d	2024-10-15 10:58:37.867888469 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/rm.o and xv6-publica/rm.o differ
diff -ruN xv6-public/rm.sym xv6-publica/rm.sym
--- xv6-public/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/rm.sym	2024-10-15 10:58:37.897888470 +0530
@@ -0,0 +1,45 @@
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007e4 digits.0
+00000000 umalloc.c
+00000a9c freep
+00000aa0 base
+00000080 strcpy
+00000430 printf
+000002a0 memmove
+0000031b mknod
+000001a0 gets
+00000353 getpid
+00000660 malloc
+00000363 sleep
+000002e3 pipe
+000002f3 write
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000a9c __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000034b dup
+00000210 stat
+00000a9c _edata
+00000aa8 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+00000110 strlen
+00000313 open
+00000160 strchr
+0000033b mkdir
+000002fb close
+000005d0 free
diff -ruN xv6-public/sh.asm xv6-publica/sh.asm
--- xv6-public/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/sh.asm	2024-10-15 10:58:38.067888475 +0530
@@ -0,0 +1,2688 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	push   -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      11:	eb 0e                	jmp    21 <main+0x21>
+      13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      17:	90                   	nop
+    if(fd >= 3){
+      18:	83 f8 02             	cmp    $0x2,%eax
+      1b:	0f 8f 91 00 00 00    	jg     b2 <main+0xb2>
+  while((fd = open("console", O_RDWR)) >= 0){
+      21:	83 ec 08             	sub    $0x8,%esp
+      24:	6a 02                	push   $0x2
+      26:	68 49 13 00 00       	push   $0x1349
+      2b:	e8 33 0e 00 00       	call   e63 <open>
+      30:	83 c4 10             	add    $0x10,%esp
+      33:	85 c0                	test   %eax,%eax
+      35:	79 e1                	jns    18 <main+0x18>
+      37:	eb 2e                	jmp    67 <main+0x67>
+      39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      40:	80 3d e2 19 00 00 20 	cmpb   $0x20,0x19e2
+      47:	0f 84 88 00 00 00    	je     d5 <main+0xd5>
+      4d:	8d 76 00             	lea    0x0(%esi),%esi
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      50:	e8 c6 0d 00 00       	call   e1b <fork>
+  if(pid == -1)
+      55:	83 f8 ff             	cmp    $0xffffffff,%eax
+      58:	0f 84 c1 00 00 00    	je     11f <main+0x11f>
+    if(fork1() == 0)
+      5e:	85 c0                	test   %eax,%eax
+      60:	74 5e                	je     c0 <main+0xc0>
+    wait();
+      62:	e8 c4 0d 00 00       	call   e2b <wait>
+  printf(2, "$ ");
+      67:	83 ec 08             	sub    $0x8,%esp
+      6a:	68 a8 12 00 00       	push   $0x12a8
+      6f:	6a 02                	push   $0x2
+      71:	e8 0a 0f 00 00       	call   f80 <printf>
+  memset(buf, 0, nbuf);
+      76:	83 c4 0c             	add    $0xc,%esp
+      79:	6a 64                	push   $0x64
+      7b:	6a 00                	push   $0x0
+      7d:	68 e0 19 00 00       	push   $0x19e0
+      82:	e8 09 0c 00 00       	call   c90 <memset>
+  gets(buf, nbuf);
+      87:	58                   	pop    %eax
+      88:	5a                   	pop    %edx
+      89:	6a 64                	push   $0x64
+      8b:	68 e0 19 00 00       	push   $0x19e0
+      90:	e8 5b 0c 00 00       	call   cf0 <gets>
+  if(buf[0] == 0) // EOF
+      95:	0f b6 05 e0 19 00 00 	movzbl 0x19e0,%eax
+      9c:	83 c4 10             	add    $0x10,%esp
+      9f:	84 c0                	test   %al,%al
+      a1:	74 77                	je     11a <main+0x11a>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      a3:	3c 63                	cmp    $0x63,%al
+      a5:	75 a9                	jne    50 <main+0x50>
+      a7:	80 3d e1 19 00 00 64 	cmpb   $0x64,0x19e1
+      ae:	75 a0                	jne    50 <main+0x50>
+      b0:	eb 8e                	jmp    40 <main+0x40>
+      close(fd);
+      b2:	83 ec 0c             	sub    $0xc,%esp
+      b5:	50                   	push   %eax
+      b6:	e8 90 0d 00 00       	call   e4b <close>
+      break;
+      bb:	83 c4 10             	add    $0x10,%esp
+      be:	eb a7                	jmp    67 <main+0x67>
+      runcmd(parsecmd(buf));
+      c0:	83 ec 0c             	sub    $0xc,%esp
+      c3:	68 e0 19 00 00       	push   $0x19e0
+      c8:	e8 93 0a 00 00       	call   b60 <parsecmd>
+      cd:	89 04 24             	mov    %eax,(%esp)
+      d0:	e8 db 00 00 00       	call   1b0 <runcmd>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      d5:	83 ec 0c             	sub    $0xc,%esp
+      d8:	68 e0 19 00 00       	push   $0x19e0
+      dd:	e8 7e 0b 00 00       	call   c60 <strlen>
+      if(chdir(buf+3) < 0)
+      e2:	c7 04 24 e3 19 00 00 	movl   $0x19e3,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      e9:	c6 80 df 19 00 00 00 	movb   $0x0,0x19df(%eax)
+      if(chdir(buf+3) < 0)
+      f0:	e8 9e 0d 00 00       	call   e93 <chdir>
+      f5:	83 c4 10             	add    $0x10,%esp
+      f8:	85 c0                	test   %eax,%eax
+      fa:	0f 89 67 ff ff ff    	jns    67 <main+0x67>
+        printf(2, "cannot cd %s\n", buf+3);
+     100:	51                   	push   %ecx
+     101:	68 e3 19 00 00       	push   $0x19e3
+     106:	68 51 13 00 00       	push   $0x1351
+     10b:	6a 02                	push   $0x2
+     10d:	e8 6e 0e 00 00       	call   f80 <printf>
+     112:	83 c4 10             	add    $0x10,%esp
+     115:	e9 4d ff ff ff       	jmp    67 <main+0x67>
+  exit();
+     11a:	e8 04 0d 00 00       	call   e23 <exit>
+    panic("fork");
+     11f:	83 ec 0c             	sub    $0xc,%esp
+     122:	68 ab 12 00 00       	push   $0x12ab
+     127:	e8 44 00 00 00       	call   170 <panic>
+     12c:	66 90                	xchg   %ax,%ax
+     12e:	66 90                	xchg   %ax,%ax
+
+00000130 <getcmd>:
+{
+     130:	55                   	push   %ebp
+     131:	89 e5                	mov    %esp,%ebp
+     133:	56                   	push   %esi
+     134:	53                   	push   %ebx
+     135:	8b 75 0c             	mov    0xc(%ebp),%esi
+     138:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     13b:	83 ec 08             	sub    $0x8,%esp
+     13e:	68 a8 12 00 00       	push   $0x12a8
+     143:	6a 02                	push   $0x2
+     145:	e8 36 0e 00 00       	call   f80 <printf>
+  memset(buf, 0, nbuf);
+     14a:	83 c4 0c             	add    $0xc,%esp
+     14d:	56                   	push   %esi
+     14e:	6a 00                	push   $0x0
+     150:	53                   	push   %ebx
+     151:	e8 3a 0b 00 00       	call   c90 <memset>
+  gets(buf, nbuf);
+     156:	58                   	pop    %eax
+     157:	5a                   	pop    %edx
+     158:	56                   	push   %esi
+     159:	53                   	push   %ebx
+     15a:	e8 91 0b 00 00       	call   cf0 <gets>
+  if(buf[0] == 0) // EOF
+     15f:	83 c4 10             	add    $0x10,%esp
+     162:	80 3b 01             	cmpb   $0x1,(%ebx)
+     165:	19 c0                	sbb    %eax,%eax
+}
+     167:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     16a:	5b                   	pop    %ebx
+     16b:	5e                   	pop    %esi
+     16c:	5d                   	pop    %ebp
+     16d:	c3                   	ret    
+     16e:	66 90                	xchg   %ax,%ax
+
+00000170 <panic>:
+{
+     170:	55                   	push   %ebp
+     171:	89 e5                	mov    %esp,%ebp
+     173:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     176:	ff 75 08             	push   0x8(%ebp)
+     179:	68 45 13 00 00       	push   $0x1345
+     17e:	6a 02                	push   $0x2
+     180:	e8 fb 0d 00 00       	call   f80 <printf>
+  exit();
+     185:	e8 99 0c 00 00       	call   e23 <exit>
+     18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000190 <fork1>:
+{
+     190:	55                   	push   %ebp
+     191:	89 e5                	mov    %esp,%ebp
+     193:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     196:	e8 80 0c 00 00       	call   e1b <fork>
+  if(pid == -1)
+     19b:	83 f8 ff             	cmp    $0xffffffff,%eax
+     19e:	74 02                	je     1a2 <fork1+0x12>
+  return pid;
+}
+     1a0:	c9                   	leave  
+     1a1:	c3                   	ret    
+    panic("fork");
+     1a2:	83 ec 0c             	sub    $0xc,%esp
+     1a5:	68 ab 12 00 00       	push   $0x12ab
+     1aa:	e8 c1 ff ff ff       	call   170 <panic>
+     1af:	90                   	nop
+
+000001b0 <runcmd>:
+{
+     1b0:	55                   	push   %ebp
+     1b1:	89 e5                	mov    %esp,%ebp
+     1b3:	53                   	push   %ebx
+     1b4:	83 ec 14             	sub    $0x14,%esp
+     1b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     1ba:	85 db                	test   %ebx,%ebx
+     1bc:	74 42                	je     200 <runcmd+0x50>
+  switch(cmd->type){
+     1be:	83 3b 05             	cmpl   $0x5,(%ebx)
+     1c1:	0f 87 e3 00 00 00    	ja     2aa <runcmd+0xfa>
+     1c7:	8b 03                	mov    (%ebx),%eax
+     1c9:	ff 24 85 60 13 00 00 	jmp    *0x1360(,%eax,4)
+    if(ecmd->argv[0] == 0)
+     1d0:	8b 43 04             	mov    0x4(%ebx),%eax
+     1d3:	85 c0                	test   %eax,%eax
+     1d5:	74 29                	je     200 <runcmd+0x50>
+    exec(ecmd->argv[0], ecmd->argv);
+     1d7:	8d 53 04             	lea    0x4(%ebx),%edx
+     1da:	51                   	push   %ecx
+     1db:	51                   	push   %ecx
+     1dc:	52                   	push   %edx
+     1dd:	50                   	push   %eax
+     1de:	e8 78 0c 00 00       	call   e5b <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     1e3:	83 c4 0c             	add    $0xc,%esp
+     1e6:	ff 73 04             	push   0x4(%ebx)
+     1e9:	68 b7 12 00 00       	push   $0x12b7
+     1ee:	6a 02                	push   $0x2
+     1f0:	e8 8b 0d 00 00       	call   f80 <printf>
+    break;
+     1f5:	83 c4 10             	add    $0x10,%esp
+     1f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     1ff:	90                   	nop
+    exit();
+     200:	e8 1e 0c 00 00       	call   e23 <exit>
+    if(fork1() == 0)
+     205:	e8 86 ff ff ff       	call   190 <fork1>
+     20a:	85 c0                	test   %eax,%eax
+     20c:	75 f2                	jne    200 <runcmd+0x50>
+     20e:	e9 8c 00 00 00       	jmp    29f <runcmd+0xef>
+    if(pipe(p) < 0)
+     213:	83 ec 0c             	sub    $0xc,%esp
+     216:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     219:	50                   	push   %eax
+     21a:	e8 14 0c 00 00       	call   e33 <pipe>
+     21f:	83 c4 10             	add    $0x10,%esp
+     222:	85 c0                	test   %eax,%eax
+     224:	0f 88 a2 00 00 00    	js     2cc <runcmd+0x11c>
+    if(fork1() == 0){
+     22a:	e8 61 ff ff ff       	call   190 <fork1>
+     22f:	85 c0                	test   %eax,%eax
+     231:	0f 84 a2 00 00 00    	je     2d9 <runcmd+0x129>
+    if(fork1() == 0){
+     237:	e8 54 ff ff ff       	call   190 <fork1>
+     23c:	85 c0                	test   %eax,%eax
+     23e:	0f 84 c3 00 00 00    	je     307 <runcmd+0x157>
+    close(p[0]);
+     244:	83 ec 0c             	sub    $0xc,%esp
+     247:	ff 75 f0             	push   -0x10(%ebp)
+     24a:	e8 fc 0b 00 00       	call   e4b <close>
+    close(p[1]);
+     24f:	58                   	pop    %eax
+     250:	ff 75 f4             	push   -0xc(%ebp)
+     253:	e8 f3 0b 00 00       	call   e4b <close>
+    wait();
+     258:	e8 ce 0b 00 00       	call   e2b <wait>
+    wait();
+     25d:	e8 c9 0b 00 00       	call   e2b <wait>
+    break;
+     262:	83 c4 10             	add    $0x10,%esp
+     265:	eb 99                	jmp    200 <runcmd+0x50>
+    if(fork1() == 0)
+     267:	e8 24 ff ff ff       	call   190 <fork1>
+     26c:	85 c0                	test   %eax,%eax
+     26e:	74 2f                	je     29f <runcmd+0xef>
+    wait();
+     270:	e8 b6 0b 00 00       	call   e2b <wait>
+    runcmd(lcmd->right);
+     275:	83 ec 0c             	sub    $0xc,%esp
+     278:	ff 73 08             	push   0x8(%ebx)
+     27b:	e8 30 ff ff ff       	call   1b0 <runcmd>
+    close(rcmd->fd);
+     280:	83 ec 0c             	sub    $0xc,%esp
+     283:	ff 73 14             	push   0x14(%ebx)
+     286:	e8 c0 0b 00 00       	call   e4b <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     28b:	58                   	pop    %eax
+     28c:	5a                   	pop    %edx
+     28d:	ff 73 10             	push   0x10(%ebx)
+     290:	ff 73 08             	push   0x8(%ebx)
+     293:	e8 cb 0b 00 00       	call   e63 <open>
+     298:	83 c4 10             	add    $0x10,%esp
+     29b:	85 c0                	test   %eax,%eax
+     29d:	78 18                	js     2b7 <runcmd+0x107>
+      runcmd(bcmd->cmd);
+     29f:	83 ec 0c             	sub    $0xc,%esp
+     2a2:	ff 73 04             	push   0x4(%ebx)
+     2a5:	e8 06 ff ff ff       	call   1b0 <runcmd>
+    panic("runcmd");
+     2aa:	83 ec 0c             	sub    $0xc,%esp
+     2ad:	68 b0 12 00 00       	push   $0x12b0
+     2b2:	e8 b9 fe ff ff       	call   170 <panic>
+      printf(2, "open %s failed\n", rcmd->file);
+     2b7:	51                   	push   %ecx
+     2b8:	ff 73 08             	push   0x8(%ebx)
+     2bb:	68 c7 12 00 00       	push   $0x12c7
+     2c0:	6a 02                	push   $0x2
+     2c2:	e8 b9 0c 00 00       	call   f80 <printf>
+      exit();
+     2c7:	e8 57 0b 00 00       	call   e23 <exit>
+      panic("pipe");
+     2cc:	83 ec 0c             	sub    $0xc,%esp
+     2cf:	68 d7 12 00 00       	push   $0x12d7
+     2d4:	e8 97 fe ff ff       	call   170 <panic>
+      close(1);
+     2d9:	83 ec 0c             	sub    $0xc,%esp
+     2dc:	6a 01                	push   $0x1
+     2de:	e8 68 0b 00 00       	call   e4b <close>
+      dup(p[1]);
+     2e3:	58                   	pop    %eax
+     2e4:	ff 75 f4             	push   -0xc(%ebp)
+     2e7:	e8 af 0b 00 00       	call   e9b <dup>
+      close(p[0]);
+     2ec:	58                   	pop    %eax
+     2ed:	ff 75 f0             	push   -0x10(%ebp)
+     2f0:	e8 56 0b 00 00       	call   e4b <close>
+      close(p[1]);
+     2f5:	58                   	pop    %eax
+     2f6:	ff 75 f4             	push   -0xc(%ebp)
+     2f9:	e8 4d 0b 00 00       	call   e4b <close>
+      runcmd(pcmd->left);
+     2fe:	5a                   	pop    %edx
+     2ff:	ff 73 04             	push   0x4(%ebx)
+     302:	e8 a9 fe ff ff       	call   1b0 <runcmd>
+      close(0);
+     307:	83 ec 0c             	sub    $0xc,%esp
+     30a:	6a 00                	push   $0x0
+     30c:	e8 3a 0b 00 00       	call   e4b <close>
+      dup(p[0]);
+     311:	5a                   	pop    %edx
+     312:	ff 75 f0             	push   -0x10(%ebp)
+     315:	e8 81 0b 00 00       	call   e9b <dup>
+      close(p[0]);
+     31a:	59                   	pop    %ecx
+     31b:	ff 75 f0             	push   -0x10(%ebp)
+     31e:	e8 28 0b 00 00       	call   e4b <close>
+      close(p[1]);
+     323:	58                   	pop    %eax
+     324:	ff 75 f4             	push   -0xc(%ebp)
+     327:	e8 1f 0b 00 00       	call   e4b <close>
+      runcmd(pcmd->right);
+     32c:	58                   	pop    %eax
+     32d:	ff 73 08             	push   0x8(%ebx)
+     330:	e8 7b fe ff ff       	call   1b0 <runcmd>
+     335:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000340 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     340:	55                   	push   %ebp
+     341:	89 e5                	mov    %esp,%ebp
+     343:	53                   	push   %ebx
+     344:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     347:	6a 54                	push   $0x54
+     349:	e8 62 0e 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     34e:	83 c4 0c             	add    $0xc,%esp
+     351:	6a 54                	push   $0x54
+  cmd = malloc(sizeof(*cmd));
+     353:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     355:	6a 00                	push   $0x0
+     357:	50                   	push   %eax
+     358:	e8 33 09 00 00       	call   c90 <memset>
+  cmd->type = EXEC;
+     35d:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     363:	89 d8                	mov    %ebx,%eax
+     365:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     368:	c9                   	leave  
+     369:	c3                   	ret    
+     36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     370:	55                   	push   %ebp
+     371:	89 e5                	mov    %esp,%ebp
+     373:	53                   	push   %ebx
+     374:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     377:	6a 18                	push   $0x18
+     379:	e8 32 0e 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     37e:	83 c4 0c             	add    $0xc,%esp
+     381:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     383:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     385:	6a 00                	push   $0x0
+     387:	50                   	push   %eax
+     388:	e8 03 09 00 00       	call   c90 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     38d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     390:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     396:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     399:	8b 45 0c             	mov    0xc(%ebp),%eax
+     39c:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     39f:	8b 45 10             	mov    0x10(%ebp),%eax
+     3a2:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     3a5:	8b 45 14             	mov    0x14(%ebp),%eax
+     3a8:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     3ab:	8b 45 18             	mov    0x18(%ebp),%eax
+     3ae:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3b1:	89 d8                	mov    %ebx,%eax
+     3b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3b6:	c9                   	leave  
+     3b7:	c3                   	ret    
+     3b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     3bf:	90                   	nop
+
+000003c0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3c0:	55                   	push   %ebp
+     3c1:	89 e5                	mov    %esp,%ebp
+     3c3:	53                   	push   %ebx
+     3c4:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3c7:	6a 0c                	push   $0xc
+     3c9:	e8 e2 0d 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3ce:	83 c4 0c             	add    $0xc,%esp
+     3d1:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     3d3:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3d5:	6a 00                	push   $0x0
+     3d7:	50                   	push   %eax
+     3d8:	e8 b3 08 00 00       	call   c90 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     3dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     3e0:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     3e6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     3e9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3ec:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     3ef:	89 d8                	mov    %ebx,%eax
+     3f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3f4:	c9                   	leave  
+     3f5:	c3                   	ret    
+     3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     400:	55                   	push   %ebp
+     401:	89 e5                	mov    %esp,%ebp
+     403:	53                   	push   %ebx
+     404:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     407:	6a 0c                	push   $0xc
+     409:	e8 a2 0d 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     40e:	83 c4 0c             	add    $0xc,%esp
+     411:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     413:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     415:	6a 00                	push   $0x0
+     417:	50                   	push   %eax
+     418:	e8 73 08 00 00       	call   c90 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     41d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     420:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     426:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     429:	8b 45 0c             	mov    0xc(%ebp),%eax
+     42c:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     42f:	89 d8                	mov    %ebx,%eax
+     431:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     434:	c9                   	leave  
+     435:	c3                   	ret    
+     436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     43d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000440 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     440:	55                   	push   %ebp
+     441:	89 e5                	mov    %esp,%ebp
+     443:	53                   	push   %ebx
+     444:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     447:	6a 08                	push   $0x8
+     449:	e8 62 0d 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     44e:	83 c4 0c             	add    $0xc,%esp
+     451:	6a 08                	push   $0x8
+  cmd = malloc(sizeof(*cmd));
+     453:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     455:	6a 00                	push   $0x0
+     457:	50                   	push   %eax
+     458:	e8 33 08 00 00       	call   c90 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     45d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     460:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     466:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     469:	89 d8                	mov    %ebx,%eax
+     46b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     46e:	c9                   	leave  
+     46f:	c3                   	ret    
+
+00000470 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     470:	55                   	push   %ebp
+     471:	89 e5                	mov    %esp,%ebp
+     473:	57                   	push   %edi
+     474:	56                   	push   %esi
+     475:	53                   	push   %ebx
+     476:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     479:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     47c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     47f:	8b 75 10             	mov    0x10(%ebp),%esi
+  s = *ps;
+     482:	8b 38                	mov    (%eax),%edi
+  while(s < es && strchr(whitespace, *s))
+     484:	39 df                	cmp    %ebx,%edi
+     486:	72 0f                	jb     497 <gettoken+0x27>
+     488:	eb 25                	jmp    4af <gettoken+0x3f>
+     48a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    s++;
+     490:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     493:	39 fb                	cmp    %edi,%ebx
+     495:	74 18                	je     4af <gettoken+0x3f>
+     497:	0f be 07             	movsbl (%edi),%eax
+     49a:	83 ec 08             	sub    $0x8,%esp
+     49d:	50                   	push   %eax
+     49e:	68 cc 19 00 00       	push   $0x19cc
+     4a3:	e8 08 08 00 00       	call   cb0 <strchr>
+     4a8:	83 c4 10             	add    $0x10,%esp
+     4ab:	85 c0                	test   %eax,%eax
+     4ad:	75 e1                	jne    490 <gettoken+0x20>
+  if(q)
+     4af:	85 f6                	test   %esi,%esi
+     4b1:	74 02                	je     4b5 <gettoken+0x45>
+    *q = s;
+     4b3:	89 3e                	mov    %edi,(%esi)
+  ret = *s;
+     4b5:	0f b6 07             	movzbl (%edi),%eax
+  switch(*s){
+     4b8:	3c 3c                	cmp    $0x3c,%al
+     4ba:	0f 8f d0 00 00 00    	jg     590 <gettoken+0x120>
+     4c0:	3c 3a                	cmp    $0x3a,%al
+     4c2:	0f 8f b4 00 00 00    	jg     57c <gettoken+0x10c>
+     4c8:	84 c0                	test   %al,%al
+     4ca:	75 44                	jne    510 <gettoken+0xa0>
+     4cc:	31 f6                	xor    %esi,%esi
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     4ce:	8b 55 14             	mov    0x14(%ebp),%edx
+     4d1:	85 d2                	test   %edx,%edx
+     4d3:	74 05                	je     4da <gettoken+0x6a>
+    *eq = s;
+     4d5:	8b 45 14             	mov    0x14(%ebp),%eax
+     4d8:	89 38                	mov    %edi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     4da:	39 df                	cmp    %ebx,%edi
+     4dc:	72 09                	jb     4e7 <gettoken+0x77>
+     4de:	eb 1f                	jmp    4ff <gettoken+0x8f>
+    s++;
+     4e0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     4e3:	39 fb                	cmp    %edi,%ebx
+     4e5:	74 18                	je     4ff <gettoken+0x8f>
+     4e7:	0f be 07             	movsbl (%edi),%eax
+     4ea:	83 ec 08             	sub    $0x8,%esp
+     4ed:	50                   	push   %eax
+     4ee:	68 cc 19 00 00       	push   $0x19cc
+     4f3:	e8 b8 07 00 00       	call   cb0 <strchr>
+     4f8:	83 c4 10             	add    $0x10,%esp
+     4fb:	85 c0                	test   %eax,%eax
+     4fd:	75 e1                	jne    4e0 <gettoken+0x70>
+  *ps = s;
+     4ff:	8b 45 08             	mov    0x8(%ebp),%eax
+     502:	89 38                	mov    %edi,(%eax)
+  return ret;
+}
+     504:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     507:	89 f0                	mov    %esi,%eax
+     509:	5b                   	pop    %ebx
+     50a:	5e                   	pop    %esi
+     50b:	5f                   	pop    %edi
+     50c:	5d                   	pop    %ebp
+     50d:	c3                   	ret    
+     50e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     510:	79 5e                	jns    570 <gettoken+0x100>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     512:	39 fb                	cmp    %edi,%ebx
+     514:	77 34                	ja     54a <gettoken+0xda>
+  if(eq)
+     516:	8b 45 14             	mov    0x14(%ebp),%eax
+     519:	be 61 00 00 00       	mov    $0x61,%esi
+     51e:	85 c0                	test   %eax,%eax
+     520:	75 b3                	jne    4d5 <gettoken+0x65>
+     522:	eb db                	jmp    4ff <gettoken+0x8f>
+     524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     528:	0f be 07             	movsbl (%edi),%eax
+     52b:	83 ec 08             	sub    $0x8,%esp
+     52e:	50                   	push   %eax
+     52f:	68 c4 19 00 00       	push   $0x19c4
+     534:	e8 77 07 00 00       	call   cb0 <strchr>
+     539:	83 c4 10             	add    $0x10,%esp
+     53c:	85 c0                	test   %eax,%eax
+     53e:	75 22                	jne    562 <gettoken+0xf2>
+      s++;
+     540:	83 c7 01             	add    $0x1,%edi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     543:	39 fb                	cmp    %edi,%ebx
+     545:	74 cf                	je     516 <gettoken+0xa6>
+     547:	0f b6 07             	movzbl (%edi),%eax
+     54a:	83 ec 08             	sub    $0x8,%esp
+     54d:	0f be f0             	movsbl %al,%esi
+     550:	56                   	push   %esi
+     551:	68 cc 19 00 00       	push   $0x19cc
+     556:	e8 55 07 00 00       	call   cb0 <strchr>
+     55b:	83 c4 10             	add    $0x10,%esp
+     55e:	85 c0                	test   %eax,%eax
+     560:	74 c6                	je     528 <gettoken+0xb8>
+    ret = 'a';
+     562:	be 61 00 00 00       	mov    $0x61,%esi
+     567:	e9 62 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     570:	3c 26                	cmp    $0x26,%al
+     572:	74 08                	je     57c <gettoken+0x10c>
+     574:	8d 48 d8             	lea    -0x28(%eax),%ecx
+     577:	80 f9 01             	cmp    $0x1,%cl
+     57a:	77 96                	ja     512 <gettoken+0xa2>
+  ret = *s;
+     57c:	0f be f0             	movsbl %al,%esi
+    s++;
+     57f:	83 c7 01             	add    $0x1,%edi
+    break;
+     582:	e9 47 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     58e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     590:	3c 3e                	cmp    $0x3e,%al
+     592:	75 1c                	jne    5b0 <gettoken+0x140>
+    if(*s == '>'){
+     594:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+    s++;
+     598:	8d 47 01             	lea    0x1(%edi),%eax
+    if(*s == '>'){
+     59b:	74 1c                	je     5b9 <gettoken+0x149>
+    s++;
+     59d:	89 c7                	mov    %eax,%edi
+     59f:	be 3e 00 00 00       	mov    $0x3e,%esi
+     5a4:	e9 25 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     5a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5b0:	3c 7c                	cmp    $0x7c,%al
+     5b2:	74 c8                	je     57c <gettoken+0x10c>
+     5b4:	e9 59 ff ff ff       	jmp    512 <gettoken+0xa2>
+      s++;
+     5b9:	83 c7 02             	add    $0x2,%edi
+      ret = '+';
+     5bc:	be 2b 00 00 00       	mov    $0x2b,%esi
+     5c1:	e9 08 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     5c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000005d0 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     5d0:	55                   	push   %ebp
+     5d1:	89 e5                	mov    %esp,%ebp
+     5d3:	57                   	push   %edi
+     5d4:	56                   	push   %esi
+     5d5:	53                   	push   %ebx
+     5d6:	83 ec 0c             	sub    $0xc,%esp
+     5d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+     5dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     5df:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     5e1:	39 f3                	cmp    %esi,%ebx
+     5e3:	72 12                	jb     5f7 <peek+0x27>
+     5e5:	eb 28                	jmp    60f <peek+0x3f>
+     5e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5ee:	66 90                	xchg   %ax,%ax
+    s++;
+     5f0:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     5f3:	39 de                	cmp    %ebx,%esi
+     5f5:	74 18                	je     60f <peek+0x3f>
+     5f7:	0f be 03             	movsbl (%ebx),%eax
+     5fa:	83 ec 08             	sub    $0x8,%esp
+     5fd:	50                   	push   %eax
+     5fe:	68 cc 19 00 00       	push   $0x19cc
+     603:	e8 a8 06 00 00       	call   cb0 <strchr>
+     608:	83 c4 10             	add    $0x10,%esp
+     60b:	85 c0                	test   %eax,%eax
+     60d:	75 e1                	jne    5f0 <peek+0x20>
+  *ps = s;
+     60f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     611:	0f be 03             	movsbl (%ebx),%eax
+     614:	31 d2                	xor    %edx,%edx
+     616:	84 c0                	test   %al,%al
+     618:	75 0e                	jne    628 <peek+0x58>
+}
+     61a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     61d:	89 d0                	mov    %edx,%eax
+     61f:	5b                   	pop    %ebx
+     620:	5e                   	pop    %esi
+     621:	5f                   	pop    %edi
+     622:	5d                   	pop    %ebp
+     623:	c3                   	ret    
+     624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return *s && strchr(toks, *s);
+     628:	83 ec 08             	sub    $0x8,%esp
+     62b:	50                   	push   %eax
+     62c:	ff 75 10             	push   0x10(%ebp)
+     62f:	e8 7c 06 00 00       	call   cb0 <strchr>
+     634:	83 c4 10             	add    $0x10,%esp
+     637:	31 d2                	xor    %edx,%edx
+     639:	85 c0                	test   %eax,%eax
+     63b:	0f 95 c2             	setne  %dl
+}
+     63e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     641:	5b                   	pop    %ebx
+     642:	89 d0                	mov    %edx,%eax
+     644:	5e                   	pop    %esi
+     645:	5f                   	pop    %edi
+     646:	5d                   	pop    %ebp
+     647:	c3                   	ret    
+     648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     64f:	90                   	nop
+
+00000650 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     650:	55                   	push   %ebp
+     651:	89 e5                	mov    %esp,%ebp
+     653:	57                   	push   %edi
+     654:	56                   	push   %esi
+     655:	53                   	push   %ebx
+     656:	83 ec 2c             	sub    $0x2c,%esp
+     659:	8b 75 0c             	mov    0xc(%ebp),%esi
+     65c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     65f:	90                   	nop
+     660:	83 ec 04             	sub    $0x4,%esp
+     663:	68 f9 12 00 00       	push   $0x12f9
+     668:	53                   	push   %ebx
+     669:	56                   	push   %esi
+     66a:	e8 61 ff ff ff       	call   5d0 <peek>
+     66f:	83 c4 10             	add    $0x10,%esp
+     672:	85 c0                	test   %eax,%eax
+     674:	0f 84 f6 00 00 00    	je     770 <parseredirs+0x120>
+    tok = gettoken(ps, es, 0, 0);
+     67a:	6a 00                	push   $0x0
+     67c:	6a 00                	push   $0x0
+     67e:	53                   	push   %ebx
+     67f:	56                   	push   %esi
+     680:	e8 eb fd ff ff       	call   470 <gettoken>
+     685:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     687:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     68a:	50                   	push   %eax
+     68b:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     68e:	50                   	push   %eax
+     68f:	53                   	push   %ebx
+     690:	56                   	push   %esi
+     691:	e8 da fd ff ff       	call   470 <gettoken>
+     696:	83 c4 20             	add    $0x20,%esp
+     699:	83 f8 61             	cmp    $0x61,%eax
+     69c:	0f 85 d9 00 00 00    	jne    77b <parseredirs+0x12b>
+      panic("missing file for redirection");
+    switch(tok){
+     6a2:	83 ff 3c             	cmp    $0x3c,%edi
+     6a5:	74 69                	je     710 <parseredirs+0xc0>
+     6a7:	83 ff 3e             	cmp    $0x3e,%edi
+     6aa:	74 05                	je     6b1 <parseredirs+0x61>
+     6ac:	83 ff 2b             	cmp    $0x2b,%edi
+     6af:	75 af                	jne    660 <parseredirs+0x10>
+  cmd = malloc(sizeof(*cmd));
+     6b1:	83 ec 0c             	sub    $0xc,%esp
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+     6b7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+  cmd = malloc(sizeof(*cmd));
+     6ba:	6a 18                	push   $0x18
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6bc:	89 55 d0             	mov    %edx,-0x30(%ebp)
+     6bf:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  cmd = malloc(sizeof(*cmd));
+     6c2:	e8 e9 0a 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     6c7:	83 c4 0c             	add    $0xc,%esp
+     6ca:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     6cc:	89 c7                	mov    %eax,%edi
+  memset(cmd, 0, sizeof(*cmd));
+     6ce:	6a 00                	push   $0x0
+     6d0:	50                   	push   %eax
+     6d1:	e8 ba 05 00 00       	call   c90 <memset>
+  cmd->type = REDIR;
+     6d6:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  cmd->cmd = subcmd;
+     6dc:	8b 45 08             	mov    0x8(%ebp),%eax
+      break;
+     6df:	83 c4 10             	add    $0x10,%esp
+  cmd->cmd = subcmd;
+     6e2:	89 47 04             	mov    %eax,0x4(%edi)
+  cmd->file = file;
+     6e5:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     6e8:	89 4f 08             	mov    %ecx,0x8(%edi)
+  cmd->efile = efile;
+     6eb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+  cmd->mode = mode;
+     6ee:	c7 47 10 01 02 00 00 	movl   $0x201,0x10(%edi)
+  cmd->efile = efile;
+     6f5:	89 57 0c             	mov    %edx,0xc(%edi)
+  cmd->fd = fd;
+     6f8:	c7 47 14 01 00 00 00 	movl   $0x1,0x14(%edi)
+      break;
+     6ff:	89 7d 08             	mov    %edi,0x8(%ebp)
+     702:	e9 59 ff ff ff       	jmp    660 <parseredirs+0x10>
+     707:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     70e:	66 90                	xchg   %ax,%ax
+  cmd = malloc(sizeof(*cmd));
+     710:	83 ec 0c             	sub    $0xc,%esp
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     713:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+     716:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+  cmd = malloc(sizeof(*cmd));
+     719:	6a 18                	push   $0x18
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     71b:	89 55 d0             	mov    %edx,-0x30(%ebp)
+     71e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  cmd = malloc(sizeof(*cmd));
+     721:	e8 8a 0a 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     726:	83 c4 0c             	add    $0xc,%esp
+     729:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     72b:	89 c7                	mov    %eax,%edi
+  memset(cmd, 0, sizeof(*cmd));
+     72d:	6a 00                	push   $0x0
+     72f:	50                   	push   %eax
+     730:	e8 5b 05 00 00       	call   c90 <memset>
+  cmd->cmd = subcmd;
+     735:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->file = file;
+     738:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      break;
+     73b:	89 7d 08             	mov    %edi,0x8(%ebp)
+  cmd->efile = efile;
+     73e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+  cmd->type = REDIR;
+     741:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+      break;
+     747:	83 c4 10             	add    $0x10,%esp
+  cmd->cmd = subcmd;
+     74a:	89 47 04             	mov    %eax,0x4(%edi)
+  cmd->file = file;
+     74d:	89 4f 08             	mov    %ecx,0x8(%edi)
+  cmd->efile = efile;
+     750:	89 57 0c             	mov    %edx,0xc(%edi)
+  cmd->mode = mode;
+     753:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
+  cmd->fd = fd;
+     75a:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+      break;
+     761:	e9 fa fe ff ff       	jmp    660 <parseredirs+0x10>
+     766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     76d:	8d 76 00             	lea    0x0(%esi),%esi
+    }
+  }
+  return cmd;
+}
+     770:	8b 45 08             	mov    0x8(%ebp),%eax
+     773:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     776:	5b                   	pop    %ebx
+     777:	5e                   	pop    %esi
+     778:	5f                   	pop    %edi
+     779:	5d                   	pop    %ebp
+     77a:	c3                   	ret    
+      panic("missing file for redirection");
+     77b:	83 ec 0c             	sub    $0xc,%esp
+     77e:	68 dc 12 00 00       	push   $0x12dc
+     783:	e8 e8 f9 ff ff       	call   170 <panic>
+     788:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     78f:	90                   	nop
+
+00000790 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     790:	55                   	push   %ebp
+     791:	89 e5                	mov    %esp,%ebp
+     793:	57                   	push   %edi
+     794:	56                   	push   %esi
+     795:	53                   	push   %ebx
+     796:	83 ec 30             	sub    $0x30,%esp
+     799:	8b 75 08             	mov    0x8(%ebp),%esi
+     79c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     79f:	68 fc 12 00 00       	push   $0x12fc
+     7a4:	57                   	push   %edi
+     7a5:	56                   	push   %esi
+     7a6:	e8 25 fe ff ff       	call   5d0 <peek>
+     7ab:	83 c4 10             	add    $0x10,%esp
+     7ae:	85 c0                	test   %eax,%eax
+     7b0:	0f 85 aa 00 00 00    	jne    860 <parseexec+0xd0>
+  cmd = malloc(sizeof(*cmd));
+     7b6:	83 ec 0c             	sub    $0xc,%esp
+     7b9:	89 c3                	mov    %eax,%ebx
+     7bb:	6a 54                	push   $0x54
+     7bd:	e8 ee 09 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     7c2:	83 c4 0c             	add    $0xc,%esp
+     7c5:	6a 54                	push   $0x54
+     7c7:	6a 00                	push   $0x0
+     7c9:	50                   	push   %eax
+     7ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     7cd:	e8 be 04 00 00       	call   c90 <memset>
+  cmd->type = EXEC;
+     7d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
+
+  ret = execcmd();
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     7d5:	83 c4 0c             	add    $0xc,%esp
+  cmd->type = EXEC;
+     7d8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  ret = parseredirs(ret, ps, es);
+     7de:	57                   	push   %edi
+     7df:	56                   	push   %esi
+     7e0:	50                   	push   %eax
+     7e1:	e8 6a fe ff ff       	call   650 <parseredirs>
+  while(!peek(ps, es, "|)&;")){
+     7e6:	83 c4 10             	add    $0x10,%esp
+  ret = parseredirs(ret, ps, es);
+     7e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     7ec:	eb 15                	jmp    803 <parseexec+0x73>
+     7ee:	66 90                	xchg   %ax,%ax
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     7f0:	83 ec 04             	sub    $0x4,%esp
+     7f3:	57                   	push   %edi
+     7f4:	56                   	push   %esi
+     7f5:	ff 75 d4             	push   -0x2c(%ebp)
+     7f8:	e8 53 fe ff ff       	call   650 <parseredirs>
+     7fd:	83 c4 10             	add    $0x10,%esp
+     800:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     803:	83 ec 04             	sub    $0x4,%esp
+     806:	68 13 13 00 00       	push   $0x1313
+     80b:	57                   	push   %edi
+     80c:	56                   	push   %esi
+     80d:	e8 be fd ff ff       	call   5d0 <peek>
+     812:	83 c4 10             	add    $0x10,%esp
+     815:	85 c0                	test   %eax,%eax
+     817:	75 5f                	jne    878 <parseexec+0xe8>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     819:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     81c:	50                   	push   %eax
+     81d:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     820:	50                   	push   %eax
+     821:	57                   	push   %edi
+     822:	56                   	push   %esi
+     823:	e8 48 fc ff ff       	call   470 <gettoken>
+     828:	83 c4 10             	add    $0x10,%esp
+     82b:	85 c0                	test   %eax,%eax
+     82d:	74 49                	je     878 <parseexec+0xe8>
+    if(tok != 'a')
+     82f:	83 f8 61             	cmp    $0x61,%eax
+     832:	75 62                	jne    896 <parseexec+0x106>
+    cmd->argv[argc] = q;
+     834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     837:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     83a:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     83e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     841:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     845:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     848:	83 fb 0a             	cmp    $0xa,%ebx
+     84b:	75 a3                	jne    7f0 <parseexec+0x60>
+      panic("too many args");
+     84d:	83 ec 0c             	sub    $0xc,%esp
+     850:	68 05 13 00 00       	push   $0x1305
+     855:	e8 16 f9 ff ff       	call   170 <panic>
+     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     860:	89 7d 0c             	mov    %edi,0xc(%ebp)
+     863:	89 75 08             	mov    %esi,0x8(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     866:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     869:	5b                   	pop    %ebx
+     86a:	5e                   	pop    %esi
+     86b:	5f                   	pop    %edi
+     86c:	5d                   	pop    %ebp
+    return parseblock(ps, es);
+     86d:	e9 ae 01 00 00       	jmp    a20 <parseblock>
+     872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  cmd->argv[argc] = 0;
+     878:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     87b:	c7 44 98 04 00 00 00 	movl   $0x0,0x4(%eax,%ebx,4)
+     882:	00 
+  cmd->eargv[argc] = 0;
+     883:	c7 44 98 2c 00 00 00 	movl   $0x0,0x2c(%eax,%ebx,4)
+     88a:	00 
+}
+     88b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     88e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     891:	5b                   	pop    %ebx
+     892:	5e                   	pop    %esi
+     893:	5f                   	pop    %edi
+     894:	5d                   	pop    %ebp
+     895:	c3                   	ret    
+      panic("syntax");
+     896:	83 ec 0c             	sub    $0xc,%esp
+     899:	68 fe 12 00 00       	push   $0x12fe
+     89e:	e8 cd f8 ff ff       	call   170 <panic>
+     8a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000008b0 <parsepipe>:
+{
+     8b0:	55                   	push   %ebp
+     8b1:	89 e5                	mov    %esp,%ebp
+     8b3:	57                   	push   %edi
+     8b4:	56                   	push   %esi
+     8b5:	53                   	push   %ebx
+     8b6:	83 ec 14             	sub    $0x14,%esp
+     8b9:	8b 75 08             	mov    0x8(%ebp),%esi
+     8bc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parseexec(ps, es);
+     8bf:	57                   	push   %edi
+     8c0:	56                   	push   %esi
+     8c1:	e8 ca fe ff ff       	call   790 <parseexec>
+  if(peek(ps, es, "|")){
+     8c6:	83 c4 0c             	add    $0xc,%esp
+     8c9:	68 18 13 00 00       	push   $0x1318
+  cmd = parseexec(ps, es);
+     8ce:	89 c3                	mov    %eax,%ebx
+  if(peek(ps, es, "|")){
+     8d0:	57                   	push   %edi
+     8d1:	56                   	push   %esi
+     8d2:	e8 f9 fc ff ff       	call   5d0 <peek>
+     8d7:	83 c4 10             	add    $0x10,%esp
+     8da:	85 c0                	test   %eax,%eax
+     8dc:	75 12                	jne    8f0 <parsepipe+0x40>
+}
+     8de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8e1:	89 d8                	mov    %ebx,%eax
+     8e3:	5b                   	pop    %ebx
+     8e4:	5e                   	pop    %esi
+     8e5:	5f                   	pop    %edi
+     8e6:	5d                   	pop    %ebp
+     8e7:	c3                   	ret    
+     8e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8ef:	90                   	nop
+    gettoken(ps, es, 0, 0);
+     8f0:	6a 00                	push   $0x0
+     8f2:	6a 00                	push   $0x0
+     8f4:	57                   	push   %edi
+     8f5:	56                   	push   %esi
+     8f6:	e8 75 fb ff ff       	call   470 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     8fb:	58                   	pop    %eax
+     8fc:	5a                   	pop    %edx
+     8fd:	57                   	push   %edi
+     8fe:	56                   	push   %esi
+     8ff:	e8 ac ff ff ff       	call   8b0 <parsepipe>
+  cmd = malloc(sizeof(*cmd));
+     904:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     90b:	89 c7                	mov    %eax,%edi
+  cmd = malloc(sizeof(*cmd));
+     90d:	e8 9e 08 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     912:	83 c4 0c             	add    $0xc,%esp
+     915:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     917:	89 c6                	mov    %eax,%esi
+  memset(cmd, 0, sizeof(*cmd));
+     919:	6a 00                	push   $0x0
+     91b:	50                   	push   %eax
+     91c:	e8 6f 03 00 00       	call   c90 <memset>
+  cmd->left = left;
+     921:	89 5e 04             	mov    %ebx,0x4(%esi)
+  cmd->right = right;
+     924:	83 c4 10             	add    $0x10,%esp
+     927:	89 f3                	mov    %esi,%ebx
+  cmd->type = PIPE;
+     929:	c7 06 03 00 00 00    	movl   $0x3,(%esi)
+}
+     92f:	89 d8                	mov    %ebx,%eax
+  cmd->right = right;
+     931:	89 7e 08             	mov    %edi,0x8(%esi)
+}
+     934:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     937:	5b                   	pop    %ebx
+     938:	5e                   	pop    %esi
+     939:	5f                   	pop    %edi
+     93a:	5d                   	pop    %ebp
+     93b:	c3                   	ret    
+     93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000940 <parseline>:
+{
+     940:	55                   	push   %ebp
+     941:	89 e5                	mov    %esp,%ebp
+     943:	57                   	push   %edi
+     944:	56                   	push   %esi
+     945:	53                   	push   %ebx
+     946:	83 ec 24             	sub    $0x24,%esp
+     949:	8b 75 08             	mov    0x8(%ebp),%esi
+     94c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parsepipe(ps, es);
+     94f:	57                   	push   %edi
+     950:	56                   	push   %esi
+     951:	e8 5a ff ff ff       	call   8b0 <parsepipe>
+  while(peek(ps, es, "&")){
+     956:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     959:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     95b:	eb 3b                	jmp    998 <parseline+0x58>
+     95d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     960:	6a 00                	push   $0x0
+     962:	6a 00                	push   $0x0
+     964:	57                   	push   %edi
+     965:	56                   	push   %esi
+     966:	e8 05 fb ff ff       	call   470 <gettoken>
+  cmd = malloc(sizeof(*cmd));
+     96b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+     972:	e8 39 08 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     977:	83 c4 0c             	add    $0xc,%esp
+     97a:	6a 08                	push   $0x8
+     97c:	6a 00                	push   $0x0
+     97e:	50                   	push   %eax
+     97f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+     982:	e8 09 03 00 00       	call   c90 <memset>
+  cmd->type = BACK;
+     987:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  cmd->cmd = subcmd;
+     98a:	83 c4 10             	add    $0x10,%esp
+  cmd->type = BACK;
+     98d:	c7 02 05 00 00 00    	movl   $0x5,(%edx)
+  cmd->cmd = subcmd;
+     993:	89 5a 04             	mov    %ebx,0x4(%edx)
+     996:	89 d3                	mov    %edx,%ebx
+  while(peek(ps, es, "&")){
+     998:	83 ec 04             	sub    $0x4,%esp
+     99b:	68 1a 13 00 00       	push   $0x131a
+     9a0:	57                   	push   %edi
+     9a1:	56                   	push   %esi
+     9a2:	e8 29 fc ff ff       	call   5d0 <peek>
+     9a7:	83 c4 10             	add    $0x10,%esp
+     9aa:	85 c0                	test   %eax,%eax
+     9ac:	75 b2                	jne    960 <parseline+0x20>
+  if(peek(ps, es, ";")){
+     9ae:	83 ec 04             	sub    $0x4,%esp
+     9b1:	68 16 13 00 00       	push   $0x1316
+     9b6:	57                   	push   %edi
+     9b7:	56                   	push   %esi
+     9b8:	e8 13 fc ff ff       	call   5d0 <peek>
+     9bd:	83 c4 10             	add    $0x10,%esp
+     9c0:	85 c0                	test   %eax,%eax
+     9c2:	75 0c                	jne    9d0 <parseline+0x90>
+}
+     9c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     9c7:	89 d8                	mov    %ebx,%eax
+     9c9:	5b                   	pop    %ebx
+     9ca:	5e                   	pop    %esi
+     9cb:	5f                   	pop    %edi
+     9cc:	5d                   	pop    %ebp
+     9cd:	c3                   	ret    
+     9ce:	66 90                	xchg   %ax,%ax
+    gettoken(ps, es, 0, 0);
+     9d0:	6a 00                	push   $0x0
+     9d2:	6a 00                	push   $0x0
+     9d4:	57                   	push   %edi
+     9d5:	56                   	push   %esi
+     9d6:	e8 95 fa ff ff       	call   470 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     9db:	58                   	pop    %eax
+     9dc:	5a                   	pop    %edx
+     9dd:	57                   	push   %edi
+     9de:	56                   	push   %esi
+     9df:	e8 5c ff ff ff       	call   940 <parseline>
+  cmd = malloc(sizeof(*cmd));
+     9e4:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+    cmd = listcmd(cmd, parseline(ps, es));
+     9eb:	89 c7                	mov    %eax,%edi
+  cmd = malloc(sizeof(*cmd));
+     9ed:	e8 be 07 00 00       	call   11b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     9f2:	83 c4 0c             	add    $0xc,%esp
+     9f5:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     9f7:	89 c6                	mov    %eax,%esi
+  memset(cmd, 0, sizeof(*cmd));
+     9f9:	6a 00                	push   $0x0
+     9fb:	50                   	push   %eax
+     9fc:	e8 8f 02 00 00       	call   c90 <memset>
+  cmd->left = left;
+     a01:	89 5e 04             	mov    %ebx,0x4(%esi)
+  cmd->right = right;
+     a04:	83 c4 10             	add    $0x10,%esp
+     a07:	89 f3                	mov    %esi,%ebx
+  cmd->type = LIST;
+     a09:	c7 06 04 00 00 00    	movl   $0x4,(%esi)
+}
+     a0f:	89 d8                	mov    %ebx,%eax
+  cmd->right = right;
+     a11:	89 7e 08             	mov    %edi,0x8(%esi)
+}
+     a14:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     a17:	5b                   	pop    %ebx
+     a18:	5e                   	pop    %esi
+     a19:	5f                   	pop    %edi
+     a1a:	5d                   	pop    %ebp
+     a1b:	c3                   	ret    
+     a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a20 <parseblock>:
+{
+     a20:	55                   	push   %ebp
+     a21:	89 e5                	mov    %esp,%ebp
+     a23:	57                   	push   %edi
+     a24:	56                   	push   %esi
+     a25:	53                   	push   %ebx
+     a26:	83 ec 10             	sub    $0x10,%esp
+     a29:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a2c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     a2f:	68 fc 12 00 00       	push   $0x12fc
+     a34:	56                   	push   %esi
+     a35:	53                   	push   %ebx
+     a36:	e8 95 fb ff ff       	call   5d0 <peek>
+     a3b:	83 c4 10             	add    $0x10,%esp
+     a3e:	85 c0                	test   %eax,%eax
+     a40:	74 4a                	je     a8c <parseblock+0x6c>
+  gettoken(ps, es, 0, 0);
+     a42:	6a 00                	push   $0x0
+     a44:	6a 00                	push   $0x0
+     a46:	56                   	push   %esi
+     a47:	53                   	push   %ebx
+     a48:	e8 23 fa ff ff       	call   470 <gettoken>
+  cmd = parseline(ps, es);
+     a4d:	58                   	pop    %eax
+     a4e:	5a                   	pop    %edx
+     a4f:	56                   	push   %esi
+     a50:	53                   	push   %ebx
+     a51:	e8 ea fe ff ff       	call   940 <parseline>
+  if(!peek(ps, es, ")"))
+     a56:	83 c4 0c             	add    $0xc,%esp
+     a59:	68 38 13 00 00       	push   $0x1338
+  cmd = parseline(ps, es);
+     a5e:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     a60:	56                   	push   %esi
+     a61:	53                   	push   %ebx
+     a62:	e8 69 fb ff ff       	call   5d0 <peek>
+     a67:	83 c4 10             	add    $0x10,%esp
+     a6a:	85 c0                	test   %eax,%eax
+     a6c:	74 2b                	je     a99 <parseblock+0x79>
+  gettoken(ps, es, 0, 0);
+     a6e:	6a 00                	push   $0x0
+     a70:	6a 00                	push   $0x0
+     a72:	56                   	push   %esi
+     a73:	53                   	push   %ebx
+     a74:	e8 f7 f9 ff ff       	call   470 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     a79:	83 c4 0c             	add    $0xc,%esp
+     a7c:	56                   	push   %esi
+     a7d:	53                   	push   %ebx
+     a7e:	57                   	push   %edi
+     a7f:	e8 cc fb ff ff       	call   650 <parseredirs>
+}
+     a84:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     a87:	5b                   	pop    %ebx
+     a88:	5e                   	pop    %esi
+     a89:	5f                   	pop    %edi
+     a8a:	5d                   	pop    %ebp
+     a8b:	c3                   	ret    
+    panic("parseblock");
+     a8c:	83 ec 0c             	sub    $0xc,%esp
+     a8f:	68 1c 13 00 00       	push   $0x131c
+     a94:	e8 d7 f6 ff ff       	call   170 <panic>
+    panic("syntax - missing )");
+     a99:	83 ec 0c             	sub    $0xc,%esp
+     a9c:	68 27 13 00 00       	push   $0x1327
+     aa1:	e8 ca f6 ff ff       	call   170 <panic>
+     aa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     aad:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000ab0 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     ab0:	55                   	push   %ebp
+     ab1:	89 e5                	mov    %esp,%ebp
+     ab3:	53                   	push   %ebx
+     ab4:	83 ec 04             	sub    $0x4,%esp
+     ab7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     aba:	85 db                	test   %ebx,%ebx
+     abc:	0f 84 8e 00 00 00    	je     b50 <nulterminate+0xa0>
+    return 0;
+
+  switch(cmd->type){
+     ac2:	83 3b 05             	cmpl   $0x5,(%ebx)
+     ac5:	77 61                	ja     b28 <nulterminate+0x78>
+     ac7:	8b 03                	mov    (%ebx),%eax
+     ac9:	ff 24 85 78 13 00 00 	jmp    *0x1378(,%eax,4)
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+     ad0:	83 ec 0c             	sub    $0xc,%esp
+     ad3:	ff 73 04             	push   0x4(%ebx)
+     ad6:	e8 d5 ff ff ff       	call   ab0 <nulterminate>
+    nulterminate(lcmd->right);
+     adb:	58                   	pop    %eax
+     adc:	ff 73 08             	push   0x8(%ebx)
+     adf:	e8 cc ff ff ff       	call   ab0 <nulterminate>
+    break;
+     ae4:	83 c4 10             	add    $0x10,%esp
+     ae7:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     ae9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     aec:	c9                   	leave  
+     aed:	c3                   	ret    
+     aee:	66 90                	xchg   %ax,%ax
+    nulterminate(bcmd->cmd);
+     af0:	83 ec 0c             	sub    $0xc,%esp
+     af3:	ff 73 04             	push   0x4(%ebx)
+     af6:	e8 b5 ff ff ff       	call   ab0 <nulterminate>
+    break;
+     afb:	89 d8                	mov    %ebx,%eax
+     afd:	83 c4 10             	add    $0x10,%esp
+}
+     b00:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b03:	c9                   	leave  
+     b04:	c3                   	ret    
+     b05:	8d 76 00             	lea    0x0(%esi),%esi
+    for(i=0; ecmd->argv[i]; i++)
+     b08:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     b0b:	8d 43 08             	lea    0x8(%ebx),%eax
+     b0e:	85 c9                	test   %ecx,%ecx
+     b10:	74 16                	je     b28 <nulterminate+0x78>
+     b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     b18:	8b 50 24             	mov    0x24(%eax),%edx
+    for(i=0; ecmd->argv[i]; i++)
+     b1b:	83 c0 04             	add    $0x4,%eax
+      *ecmd->eargv[i] = 0;
+     b1e:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     b21:	8b 50 fc             	mov    -0x4(%eax),%edx
+     b24:	85 d2                	test   %edx,%edx
+     b26:	75 f0                	jne    b18 <nulterminate+0x68>
+  switch(cmd->type){
+     b28:	89 d8                	mov    %ebx,%eax
+}
+     b2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b2d:	c9                   	leave  
+     b2e:	c3                   	ret    
+     b2f:	90                   	nop
+    nulterminate(rcmd->cmd);
+     b30:	83 ec 0c             	sub    $0xc,%esp
+     b33:	ff 73 04             	push   0x4(%ebx)
+     b36:	e8 75 ff ff ff       	call   ab0 <nulterminate>
+    *rcmd->efile = 0;
+     b3b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     b3e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     b41:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     b44:	89 d8                	mov    %ebx,%eax
+}
+     b46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b49:	c9                   	leave  
+     b4a:	c3                   	ret    
+     b4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b4f:	90                   	nop
+    return 0;
+     b50:	31 c0                	xor    %eax,%eax
+     b52:	eb 95                	jmp    ae9 <nulterminate+0x39>
+     b54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b5f:	90                   	nop
+
+00000b60 <parsecmd>:
+{
+     b60:	55                   	push   %ebp
+     b61:	89 e5                	mov    %esp,%ebp
+     b63:	57                   	push   %edi
+     b64:	56                   	push   %esi
+  cmd = parseline(&s, es);
+     b65:	8d 7d 08             	lea    0x8(%ebp),%edi
+{
+     b68:	53                   	push   %ebx
+     b69:	83 ec 18             	sub    $0x18,%esp
+  es = s + strlen(s);
+     b6c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     b6f:	53                   	push   %ebx
+     b70:	e8 eb 00 00 00       	call   c60 <strlen>
+  cmd = parseline(&s, es);
+     b75:	59                   	pop    %ecx
+     b76:	5e                   	pop    %esi
+  es = s + strlen(s);
+     b77:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     b79:	53                   	push   %ebx
+     b7a:	57                   	push   %edi
+     b7b:	e8 c0 fd ff ff       	call   940 <parseline>
+  peek(&s, es, "");
+     b80:	83 c4 0c             	add    $0xc,%esp
+     b83:	68 c6 12 00 00       	push   $0x12c6
+  cmd = parseline(&s, es);
+     b88:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     b8a:	53                   	push   %ebx
+     b8b:	57                   	push   %edi
+     b8c:	e8 3f fa ff ff       	call   5d0 <peek>
+  if(s != es){
+     b91:	8b 45 08             	mov    0x8(%ebp),%eax
+     b94:	83 c4 10             	add    $0x10,%esp
+     b97:	39 d8                	cmp    %ebx,%eax
+     b99:	75 13                	jne    bae <parsecmd+0x4e>
+  nulterminate(cmd);
+     b9b:	83 ec 0c             	sub    $0xc,%esp
+     b9e:	56                   	push   %esi
+     b9f:	e8 0c ff ff ff       	call   ab0 <nulterminate>
+}
+     ba4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ba7:	89 f0                	mov    %esi,%eax
+     ba9:	5b                   	pop    %ebx
+     baa:	5e                   	pop    %esi
+     bab:	5f                   	pop    %edi
+     bac:	5d                   	pop    %ebp
+     bad:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     bae:	52                   	push   %edx
+     baf:	50                   	push   %eax
+     bb0:	68 3a 13 00 00       	push   $0x133a
+     bb5:	6a 02                	push   $0x2
+     bb7:	e8 c4 03 00 00       	call   f80 <printf>
+    panic("syntax");
+     bbc:	c7 04 24 fe 12 00 00 	movl   $0x12fe,(%esp)
+     bc3:	e8 a8 f5 ff ff       	call   170 <panic>
+     bc8:	66 90                	xchg   %ax,%ax
+     bca:	66 90                	xchg   %ax,%ax
+     bcc:	66 90                	xchg   %ax,%ax
+     bce:	66 90                	xchg   %ax,%ax
+
+00000bd0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     bd0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     bd1:	31 c0                	xor    %eax,%eax
+{
+     bd3:	89 e5                	mov    %esp,%ebp
+     bd5:	53                   	push   %ebx
+     bd6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     bd9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     bdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+     be0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     be4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+     be7:	83 c0 01             	add    $0x1,%eax
+     bea:	84 d2                	test   %dl,%dl
+     bec:	75 f2                	jne    be0 <strcpy+0x10>
+    ;
+  return os;
+}
+     bee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     bf1:	89 c8                	mov    %ecx,%eax
+     bf3:	c9                   	leave  
+     bf4:	c3                   	ret    
+     bf5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c00 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     c00:	55                   	push   %ebp
+     c01:	89 e5                	mov    %esp,%ebp
+     c03:	53                   	push   %ebx
+     c04:	8b 55 08             	mov    0x8(%ebp),%edx
+     c07:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+     c0a:	0f b6 02             	movzbl (%edx),%eax
+     c0d:	84 c0                	test   %al,%al
+     c0f:	75 17                	jne    c28 <strcmp+0x28>
+     c11:	eb 3a                	jmp    c4d <strcmp+0x4d>
+     c13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c17:	90                   	nop
+     c18:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+     c1c:	83 c2 01             	add    $0x1,%edx
+     c1f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+     c22:	84 c0                	test   %al,%al
+     c24:	74 1a                	je     c40 <strcmp+0x40>
+    p++, q++;
+     c26:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+     c28:	0f b6 19             	movzbl (%ecx),%ebx
+     c2b:	38 c3                	cmp    %al,%bl
+     c2d:	74 e9                	je     c18 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+     c2f:	29 d8                	sub    %ebx,%eax
+}
+     c31:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     c34:	c9                   	leave  
+     c35:	c3                   	ret    
+     c36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c3d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+     c40:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+     c44:	31 c0                	xor    %eax,%eax
+     c46:	29 d8                	sub    %ebx,%eax
+}
+     c48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     c4b:	c9                   	leave  
+     c4c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+     c4d:	0f b6 19             	movzbl (%ecx),%ebx
+     c50:	31 c0                	xor    %eax,%eax
+     c52:	eb db                	jmp    c2f <strcmp+0x2f>
+     c54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c5f:	90                   	nop
+
+00000c60 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     c60:	55                   	push   %ebp
+     c61:	89 e5                	mov    %esp,%ebp
+     c63:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     c66:	80 3a 00             	cmpb   $0x0,(%edx)
+     c69:	74 15                	je     c80 <strlen+0x20>
+     c6b:	31 c0                	xor    %eax,%eax
+     c6d:	8d 76 00             	lea    0x0(%esi),%esi
+     c70:	83 c0 01             	add    $0x1,%eax
+     c73:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+     c77:	89 c1                	mov    %eax,%ecx
+     c79:	75 f5                	jne    c70 <strlen+0x10>
+    ;
+  return n;
+}
+     c7b:	89 c8                	mov    %ecx,%eax
+     c7d:	5d                   	pop    %ebp
+     c7e:	c3                   	ret    
+     c7f:	90                   	nop
+  for(n = 0; s[n]; n++)
+     c80:	31 c9                	xor    %ecx,%ecx
+}
+     c82:	5d                   	pop    %ebp
+     c83:	89 c8                	mov    %ecx,%eax
+     c85:	c3                   	ret    
+     c86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c8d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000c90 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     c90:	55                   	push   %ebp
+     c91:	89 e5                	mov    %esp,%ebp
+     c93:	57                   	push   %edi
+     c94:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     c97:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     c9d:	89 d7                	mov    %edx,%edi
+     c9f:	fc                   	cld    
+     ca0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     ca2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+     ca5:	89 d0                	mov    %edx,%eax
+     ca7:	c9                   	leave  
+     ca8:	c3                   	ret    
+     ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000cb0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     cb0:	55                   	push   %ebp
+     cb1:	89 e5                	mov    %esp,%ebp
+     cb3:	8b 45 08             	mov    0x8(%ebp),%eax
+     cb6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+     cba:	0f b6 10             	movzbl (%eax),%edx
+     cbd:	84 d2                	test   %dl,%dl
+     cbf:	75 12                	jne    cd3 <strchr+0x23>
+     cc1:	eb 1d                	jmp    ce0 <strchr+0x30>
+     cc3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cc7:	90                   	nop
+     cc8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+     ccc:	83 c0 01             	add    $0x1,%eax
+     ccf:	84 d2                	test   %dl,%dl
+     cd1:	74 0d                	je     ce0 <strchr+0x30>
+    if(*s == c)
+     cd3:	38 d1                	cmp    %dl,%cl
+     cd5:	75 f1                	jne    cc8 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+     cd7:	5d                   	pop    %ebp
+     cd8:	c3                   	ret    
+     cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+     ce0:	31 c0                	xor    %eax,%eax
+}
+     ce2:	5d                   	pop    %ebp
+     ce3:	c3                   	ret    
+     ce4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cef:	90                   	nop
+
+00000cf0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     cf0:	55                   	push   %ebp
+     cf1:	89 e5                	mov    %esp,%ebp
+     cf3:	57                   	push   %edi
+     cf4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+     cf5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+     cf8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+     cf9:	31 db                	xor    %ebx,%ebx
+{
+     cfb:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+     cfe:	eb 27                	jmp    d27 <gets+0x37>
+    cc = read(0, &c, 1);
+     d00:	83 ec 04             	sub    $0x4,%esp
+     d03:	6a 01                	push   $0x1
+     d05:	57                   	push   %edi
+     d06:	6a 00                	push   $0x0
+     d08:	e8 2e 01 00 00       	call   e3b <read>
+    if(cc < 1)
+     d0d:	83 c4 10             	add    $0x10,%esp
+     d10:	85 c0                	test   %eax,%eax
+     d12:	7e 1d                	jle    d31 <gets+0x41>
+      break;
+    buf[i++] = c;
+     d14:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     d18:	8b 55 08             	mov    0x8(%ebp),%edx
+     d1b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+     d1f:	3c 0a                	cmp    $0xa,%al
+     d21:	74 1d                	je     d40 <gets+0x50>
+     d23:	3c 0d                	cmp    $0xd,%al
+     d25:	74 19                	je     d40 <gets+0x50>
+  for(i=0; i+1 < max; ){
+     d27:	89 de                	mov    %ebx,%esi
+     d29:	83 c3 01             	add    $0x1,%ebx
+     d2c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     d2f:	7c cf                	jl     d00 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+     d31:	8b 45 08             	mov    0x8(%ebp),%eax
+     d34:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+     d38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d3b:	5b                   	pop    %ebx
+     d3c:	5e                   	pop    %esi
+     d3d:	5f                   	pop    %edi
+     d3e:	5d                   	pop    %ebp
+     d3f:	c3                   	ret    
+  buf[i] = '\0';
+     d40:	8b 45 08             	mov    0x8(%ebp),%eax
+     d43:	89 de                	mov    %ebx,%esi
+     d45:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+     d49:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d4c:	5b                   	pop    %ebx
+     d4d:	5e                   	pop    %esi
+     d4e:	5f                   	pop    %edi
+     d4f:	5d                   	pop    %ebp
+     d50:	c3                   	ret    
+     d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d5f:	90                   	nop
+
+00000d60 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     d60:	55                   	push   %ebp
+     d61:	89 e5                	mov    %esp,%ebp
+     d63:	56                   	push   %esi
+     d64:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     d65:	83 ec 08             	sub    $0x8,%esp
+     d68:	6a 00                	push   $0x0
+     d6a:	ff 75 08             	push   0x8(%ebp)
+     d6d:	e8 f1 00 00 00       	call   e63 <open>
+  if(fd < 0)
+     d72:	83 c4 10             	add    $0x10,%esp
+     d75:	85 c0                	test   %eax,%eax
+     d77:	78 27                	js     da0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+     d79:	83 ec 08             	sub    $0x8,%esp
+     d7c:	ff 75 0c             	push   0xc(%ebp)
+     d7f:	89 c3                	mov    %eax,%ebx
+     d81:	50                   	push   %eax
+     d82:	e8 f4 00 00 00       	call   e7b <fstat>
+  close(fd);
+     d87:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     d8a:	89 c6                	mov    %eax,%esi
+  close(fd);
+     d8c:	e8 ba 00 00 00       	call   e4b <close>
+  return r;
+     d91:	83 c4 10             	add    $0x10,%esp
+}
+     d94:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d97:	89 f0                	mov    %esi,%eax
+     d99:	5b                   	pop    %ebx
+     d9a:	5e                   	pop    %esi
+     d9b:	5d                   	pop    %ebp
+     d9c:	c3                   	ret    
+     d9d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+     da0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     da5:	eb ed                	jmp    d94 <stat+0x34>
+     da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     dae:	66 90                	xchg   %ax,%ax
+
+00000db0 <atoi>:
+
+int
+atoi(const char *s)
+{
+     db0:	55                   	push   %ebp
+     db1:	89 e5                	mov    %esp,%ebp
+     db3:	53                   	push   %ebx
+     db4:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     db7:	0f be 02             	movsbl (%edx),%eax
+     dba:	8d 48 d0             	lea    -0x30(%eax),%ecx
+     dbd:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+     dc0:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+     dc5:	77 1e                	ja     de5 <atoi+0x35>
+     dc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     dce:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+     dd0:	83 c2 01             	add    $0x1,%edx
+     dd3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+     dd6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+     dda:	0f be 02             	movsbl (%edx),%eax
+     ddd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+     de0:	80 fb 09             	cmp    $0x9,%bl
+     de3:	76 eb                	jbe    dd0 <atoi+0x20>
+  return n;
+}
+     de5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     de8:	89 c8                	mov    %ecx,%eax
+     dea:	c9                   	leave  
+     deb:	c3                   	ret    
+     dec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000df0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     df0:	55                   	push   %ebp
+     df1:	89 e5                	mov    %esp,%ebp
+     df3:	57                   	push   %edi
+     df4:	8b 45 10             	mov    0x10(%ebp),%eax
+     df7:	8b 55 08             	mov    0x8(%ebp),%edx
+     dfa:	56                   	push   %esi
+     dfb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     dfe:	85 c0                	test   %eax,%eax
+     e00:	7e 13                	jle    e15 <memmove+0x25>
+     e02:	01 d0                	add    %edx,%eax
+  dst = vdst;
+     e04:	89 d7                	mov    %edx,%edi
+     e06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e0d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+     e10:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+     e11:	39 f8                	cmp    %edi,%eax
+     e13:	75 fb                	jne    e10 <memmove+0x20>
+  return vdst;
+}
+     e15:	5e                   	pop    %esi
+     e16:	89 d0                	mov    %edx,%eax
+     e18:	5f                   	pop    %edi
+     e19:	5d                   	pop    %ebp
+     e1a:	c3                   	ret    
+
+00000e1b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     e1b:	b8 01 00 00 00       	mov    $0x1,%eax
+     e20:	cd 40                	int    $0x40
+     e22:	c3                   	ret    
+
+00000e23 <exit>:
+SYSCALL(exit)
+     e23:	b8 02 00 00 00       	mov    $0x2,%eax
+     e28:	cd 40                	int    $0x40
+     e2a:	c3                   	ret    
+
+00000e2b <wait>:
+SYSCALL(wait)
+     e2b:	b8 03 00 00 00       	mov    $0x3,%eax
+     e30:	cd 40                	int    $0x40
+     e32:	c3                   	ret    
+
+00000e33 <pipe>:
+SYSCALL(pipe)
+     e33:	b8 04 00 00 00       	mov    $0x4,%eax
+     e38:	cd 40                	int    $0x40
+     e3a:	c3                   	ret    
+
+00000e3b <read>:
+SYSCALL(read)
+     e3b:	b8 05 00 00 00       	mov    $0x5,%eax
+     e40:	cd 40                	int    $0x40
+     e42:	c3                   	ret    
+
+00000e43 <write>:
+SYSCALL(write)
+     e43:	b8 10 00 00 00       	mov    $0x10,%eax
+     e48:	cd 40                	int    $0x40
+     e4a:	c3                   	ret    
+
+00000e4b <close>:
+SYSCALL(close)
+     e4b:	b8 15 00 00 00       	mov    $0x15,%eax
+     e50:	cd 40                	int    $0x40
+     e52:	c3                   	ret    
+
+00000e53 <kill>:
+SYSCALL(kill)
+     e53:	b8 06 00 00 00       	mov    $0x6,%eax
+     e58:	cd 40                	int    $0x40
+     e5a:	c3                   	ret    
+
+00000e5b <exec>:
+SYSCALL(exec)
+     e5b:	b8 07 00 00 00       	mov    $0x7,%eax
+     e60:	cd 40                	int    $0x40
+     e62:	c3                   	ret    
+
+00000e63 <open>:
+SYSCALL(open)
+     e63:	b8 0f 00 00 00       	mov    $0xf,%eax
+     e68:	cd 40                	int    $0x40
+     e6a:	c3                   	ret    
+
+00000e6b <mknod>:
+SYSCALL(mknod)
+     e6b:	b8 11 00 00 00       	mov    $0x11,%eax
+     e70:	cd 40                	int    $0x40
+     e72:	c3                   	ret    
+
+00000e73 <unlink>:
+SYSCALL(unlink)
+     e73:	b8 12 00 00 00       	mov    $0x12,%eax
+     e78:	cd 40                	int    $0x40
+     e7a:	c3                   	ret    
+
+00000e7b <fstat>:
+SYSCALL(fstat)
+     e7b:	b8 08 00 00 00       	mov    $0x8,%eax
+     e80:	cd 40                	int    $0x40
+     e82:	c3                   	ret    
+
+00000e83 <link>:
+SYSCALL(link)
+     e83:	b8 13 00 00 00       	mov    $0x13,%eax
+     e88:	cd 40                	int    $0x40
+     e8a:	c3                   	ret    
+
+00000e8b <mkdir>:
+SYSCALL(mkdir)
+     e8b:	b8 14 00 00 00       	mov    $0x14,%eax
+     e90:	cd 40                	int    $0x40
+     e92:	c3                   	ret    
+
+00000e93 <chdir>:
+SYSCALL(chdir)
+     e93:	b8 09 00 00 00       	mov    $0x9,%eax
+     e98:	cd 40                	int    $0x40
+     e9a:	c3                   	ret    
+
+00000e9b <dup>:
+SYSCALL(dup)
+     e9b:	b8 0a 00 00 00       	mov    $0xa,%eax
+     ea0:	cd 40                	int    $0x40
+     ea2:	c3                   	ret    
+
+00000ea3 <getpid>:
+SYSCALL(getpid)
+     ea3:	b8 0b 00 00 00       	mov    $0xb,%eax
+     ea8:	cd 40                	int    $0x40
+     eaa:	c3                   	ret    
+
+00000eab <sbrk>:
+SYSCALL(sbrk)
+     eab:	b8 0c 00 00 00       	mov    $0xc,%eax
+     eb0:	cd 40                	int    $0x40
+     eb2:	c3                   	ret    
+
+00000eb3 <sleep>:
+SYSCALL(sleep)
+     eb3:	b8 0d 00 00 00       	mov    $0xd,%eax
+     eb8:	cd 40                	int    $0x40
+     eba:	c3                   	ret    
+
+00000ebb <uptime>:
+SYSCALL(uptime)
+     ebb:	b8 0e 00 00 00       	mov    $0xe,%eax
+     ec0:	cd 40                	int    $0x40
+     ec2:	c3                   	ret    
+     ec3:	66 90                	xchg   %ax,%ax
+     ec5:	66 90                	xchg   %ax,%ax
+     ec7:	66 90                	xchg   %ax,%ax
+     ec9:	66 90                	xchg   %ax,%ax
+     ecb:	66 90                	xchg   %ax,%ax
+     ecd:	66 90                	xchg   %ax,%ax
+     ecf:	90                   	nop
+
+00000ed0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     ed0:	55                   	push   %ebp
+     ed1:	89 e5                	mov    %esp,%ebp
+     ed3:	57                   	push   %edi
+     ed4:	56                   	push   %esi
+     ed5:	53                   	push   %ebx
+     ed6:	83 ec 3c             	sub    $0x3c,%esp
+     ed9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+     edc:	89 d1                	mov    %edx,%ecx
+{
+     ede:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+     ee1:	85 d2                	test   %edx,%edx
+     ee3:	0f 89 7f 00 00 00    	jns    f68 <printint+0x98>
+     ee9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     eed:	74 79                	je     f68 <printint+0x98>
+    neg = 1;
+     eef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+     ef6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     ef8:	31 db                	xor    %ebx,%ebx
+     efa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     efd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     f00:	89 c8                	mov    %ecx,%eax
+     f02:	31 d2                	xor    %edx,%edx
+     f04:	89 cf                	mov    %ecx,%edi
+     f06:	f7 75 c4             	divl   -0x3c(%ebp)
+     f09:	0f b6 92 f0 13 00 00 	movzbl 0x13f0(%edx),%edx
+     f10:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     f13:	89 d8                	mov    %ebx,%eax
+     f15:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+     f18:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+     f1b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+     f1e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     f21:	76 dd                	jbe    f00 <printint+0x30>
+  if(neg)
+     f23:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     f26:	85 c9                	test   %ecx,%ecx
+     f28:	74 0c                	je     f36 <printint+0x66>
+    buf[i++] = '-';
+     f2a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+     f2f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+     f31:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+     f36:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     f39:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     f3d:	eb 07                	jmp    f46 <printint+0x76>
+     f3f:	90                   	nop
+    putc(fd, buf[i]);
+     f40:	0f b6 13             	movzbl (%ebx),%edx
+     f43:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+     f46:	83 ec 04             	sub    $0x4,%esp
+     f49:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     f4c:	6a 01                	push   $0x1
+     f4e:	56                   	push   %esi
+     f4f:	57                   	push   %edi
+     f50:	e8 ee fe ff ff       	call   e43 <write>
+  while(--i >= 0)
+     f55:	83 c4 10             	add    $0x10,%esp
+     f58:	39 de                	cmp    %ebx,%esi
+     f5a:	75 e4                	jne    f40 <printint+0x70>
+}
+     f5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f5f:	5b                   	pop    %ebx
+     f60:	5e                   	pop    %esi
+     f61:	5f                   	pop    %edi
+     f62:	5d                   	pop    %ebp
+     f63:	c3                   	ret    
+     f64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     f68:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     f6f:	eb 87                	jmp    ef8 <printint+0x28>
+     f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f7f:	90                   	nop
+
+00000f80 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     f80:	55                   	push   %ebp
+     f81:	89 e5                	mov    %esp,%ebp
+     f83:	57                   	push   %edi
+     f84:	56                   	push   %esi
+     f85:	53                   	push   %ebx
+     f86:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     f89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+     f8c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+     f8f:	0f b6 13             	movzbl (%ebx),%edx
+     f92:	84 d2                	test   %dl,%dl
+     f94:	74 6a                	je     1000 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+     f96:	8d 45 10             	lea    0x10(%ebp),%eax
+     f99:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+     f9c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+     f9f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+     fa1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     fa4:	eb 36                	jmp    fdc <printf+0x5c>
+     fa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fad:	8d 76 00             	lea    0x0(%esi),%esi
+     fb0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+     fb3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+     fb8:	83 f8 25             	cmp    $0x25,%eax
+     fbb:	74 15                	je     fd2 <printf+0x52>
+  write(fd, &c, 1);
+     fbd:	83 ec 04             	sub    $0x4,%esp
+     fc0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+     fc3:	6a 01                	push   $0x1
+     fc5:	57                   	push   %edi
+     fc6:	56                   	push   %esi
+     fc7:	e8 77 fe ff ff       	call   e43 <write>
+     fcc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+     fcf:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+     fd2:	0f b6 13             	movzbl (%ebx),%edx
+     fd5:	83 c3 01             	add    $0x1,%ebx
+     fd8:	84 d2                	test   %dl,%dl
+     fda:	74 24                	je     1000 <printf+0x80>
+    c = fmt[i] & 0xff;
+     fdc:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+     fdf:	85 c9                	test   %ecx,%ecx
+     fe1:	74 cd                	je     fb0 <printf+0x30>
+      }
+    } else if(state == '%'){
+     fe3:	83 f9 25             	cmp    $0x25,%ecx
+     fe6:	75 ea                	jne    fd2 <printf+0x52>
+      if(c == 'd'){
+     fe8:	83 f8 25             	cmp    $0x25,%eax
+     feb:	0f 84 07 01 00 00    	je     10f8 <printf+0x178>
+     ff1:	83 e8 63             	sub    $0x63,%eax
+     ff4:	83 f8 15             	cmp    $0x15,%eax
+     ff7:	77 17                	ja     1010 <printf+0x90>
+     ff9:	ff 24 85 98 13 00 00 	jmp    *0x1398(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+    1000:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1003:	5b                   	pop    %ebx
+    1004:	5e                   	pop    %esi
+    1005:	5f                   	pop    %edi
+    1006:	5d                   	pop    %ebp
+    1007:	c3                   	ret    
+    1008:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    100f:	90                   	nop
+  write(fd, &c, 1);
+    1010:	83 ec 04             	sub    $0x4,%esp
+    1013:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+    1016:	6a 01                	push   $0x1
+    1018:	57                   	push   %edi
+    1019:	56                   	push   %esi
+    101a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    101e:	e8 20 fe ff ff       	call   e43 <write>
+        putc(fd, c);
+    1023:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+    1027:	83 c4 0c             	add    $0xc,%esp
+    102a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    102d:	6a 01                	push   $0x1
+    102f:	57                   	push   %edi
+    1030:	56                   	push   %esi
+    1031:	e8 0d fe ff ff       	call   e43 <write>
+        putc(fd, c);
+    1036:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    1039:	31 c9                	xor    %ecx,%ecx
+    103b:	eb 95                	jmp    fd2 <printf+0x52>
+    103d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+    1040:	83 ec 0c             	sub    $0xc,%esp
+    1043:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1048:	6a 00                	push   $0x0
+    104a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    104d:	8b 10                	mov    (%eax),%edx
+    104f:	89 f0                	mov    %esi,%eax
+    1051:	e8 7a fe ff ff       	call   ed0 <printint>
+        ap++;
+    1056:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    105a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    105d:	31 c9                	xor    %ecx,%ecx
+    105f:	e9 6e ff ff ff       	jmp    fd2 <printf+0x52>
+    1064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+    1068:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    106b:	8b 10                	mov    (%eax),%edx
+        ap++;
+    106d:	83 c0 04             	add    $0x4,%eax
+    1070:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    1073:	85 d2                	test   %edx,%edx
+    1075:	0f 84 8d 00 00 00    	je     1108 <printf+0x188>
+        while(*s != 0){
+    107b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+    107e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+    1080:	84 c0                	test   %al,%al
+    1082:	0f 84 4a ff ff ff    	je     fd2 <printf+0x52>
+    1088:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    108b:	89 d3                	mov    %edx,%ebx
+    108d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+    1090:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    1093:	83 c3 01             	add    $0x1,%ebx
+    1096:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1099:	6a 01                	push   $0x1
+    109b:	57                   	push   %edi
+    109c:	56                   	push   %esi
+    109d:	e8 a1 fd ff ff       	call   e43 <write>
+        while(*s != 0){
+    10a2:	0f b6 03             	movzbl (%ebx),%eax
+    10a5:	83 c4 10             	add    $0x10,%esp
+    10a8:	84 c0                	test   %al,%al
+    10aa:	75 e4                	jne    1090 <printf+0x110>
+      state = 0;
+    10ac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+    10af:	31 c9                	xor    %ecx,%ecx
+    10b1:	e9 1c ff ff ff       	jmp    fd2 <printf+0x52>
+    10b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10bd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+    10c0:	83 ec 0c             	sub    $0xc,%esp
+    10c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    10c8:	6a 01                	push   $0x1
+    10ca:	e9 7b ff ff ff       	jmp    104a <printf+0xca>
+    10cf:	90                   	nop
+        putc(fd, *ap);
+    10d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+    10d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    10d6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+    10d8:	6a 01                	push   $0x1
+    10da:	57                   	push   %edi
+    10db:	56                   	push   %esi
+        putc(fd, *ap);
+    10dc:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    10df:	e8 5f fd ff ff       	call   e43 <write>
+        ap++;
+    10e4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    10e8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    10eb:	31 c9                	xor    %ecx,%ecx
+    10ed:	e9 e0 fe ff ff       	jmp    fd2 <printf+0x52>
+    10f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+    10f8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+    10fb:	83 ec 04             	sub    $0x4,%esp
+    10fe:	e9 2a ff ff ff       	jmp    102d <printf+0xad>
+    1103:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1107:	90                   	nop
+          s = "(null)";
+    1108:	ba 90 13 00 00       	mov    $0x1390,%edx
+        while(*s != 0){
+    110d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    1110:	b8 28 00 00 00       	mov    $0x28,%eax
+    1115:	89 d3                	mov    %edx,%ebx
+    1117:	e9 74 ff ff ff       	jmp    1090 <printf+0x110>
+    111c:	66 90                	xchg   %ax,%ax
+    111e:	66 90                	xchg   %ax,%ax
+
+00001120 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1120:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1121:	a1 44 1a 00 00       	mov    0x1a44,%eax
+{
+    1126:	89 e5                	mov    %esp,%ebp
+    1128:	57                   	push   %edi
+    1129:	56                   	push   %esi
+    112a:	53                   	push   %ebx
+    112b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    112e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1131:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1138:	89 c2                	mov    %eax,%edx
+    113a:	8b 00                	mov    (%eax),%eax
+    113c:	39 ca                	cmp    %ecx,%edx
+    113e:	73 30                	jae    1170 <free+0x50>
+    1140:	39 c1                	cmp    %eax,%ecx
+    1142:	72 04                	jb     1148 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1144:	39 c2                	cmp    %eax,%edx
+    1146:	72 f0                	jb     1138 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1148:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    114b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    114e:	39 f8                	cmp    %edi,%eax
+    1150:	74 30                	je     1182 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1152:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    1155:	8b 42 04             	mov    0x4(%edx),%eax
+    1158:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    115b:	39 f1                	cmp    %esi,%ecx
+    115d:	74 3a                	je     1199 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+    115f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+    1161:	5b                   	pop    %ebx
+  freep = p;
+    1162:	89 15 44 1a 00 00    	mov    %edx,0x1a44
+}
+    1168:	5e                   	pop    %esi
+    1169:	5f                   	pop    %edi
+    116a:	5d                   	pop    %ebp
+    116b:	c3                   	ret    
+    116c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1170:	39 c2                	cmp    %eax,%edx
+    1172:	72 c4                	jb     1138 <free+0x18>
+    1174:	39 c1                	cmp    %eax,%ecx
+    1176:	73 c0                	jae    1138 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+    1178:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    117b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    117e:	39 f8                	cmp    %edi,%eax
+    1180:	75 d0                	jne    1152 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+    1182:	03 70 04             	add    0x4(%eax),%esi
+    1185:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1188:	8b 02                	mov    (%edx),%eax
+    118a:	8b 00                	mov    (%eax),%eax
+    118c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    118f:	8b 42 04             	mov    0x4(%edx),%eax
+    1192:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    1195:	39 f1                	cmp    %esi,%ecx
+    1197:	75 c6                	jne    115f <free+0x3f>
+    p->s.size += bp->s.size;
+    1199:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+    119c:	89 15 44 1a 00 00    	mov    %edx,0x1a44
+    p->s.size += bp->s.size;
+    11a2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+    11a5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+    11a8:	89 0a                	mov    %ecx,(%edx)
+}
+    11aa:	5b                   	pop    %ebx
+    11ab:	5e                   	pop    %esi
+    11ac:	5f                   	pop    %edi
+    11ad:	5d                   	pop    %ebp
+    11ae:	c3                   	ret    
+    11af:	90                   	nop
+
+000011b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    11b0:	55                   	push   %ebp
+    11b1:	89 e5                	mov    %esp,%ebp
+    11b3:	57                   	push   %edi
+    11b4:	56                   	push   %esi
+    11b5:	53                   	push   %ebx
+    11b6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    11b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    11bc:	8b 3d 44 1a 00 00    	mov    0x1a44,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    11c2:	8d 70 07             	lea    0x7(%eax),%esi
+    11c5:	c1 ee 03             	shr    $0x3,%esi
+    11c8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    11cb:	85 ff                	test   %edi,%edi
+    11cd:	0f 84 9d 00 00 00    	je     1270 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    11d3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+    11d5:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11d8:	39 f1                	cmp    %esi,%ecx
+    11da:	73 6a                	jae    1246 <malloc+0x96>
+    11dc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    11e1:	39 de                	cmp    %ebx,%esi
+    11e3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    11e6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    11ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    11f0:	eb 17                	jmp    1209 <malloc+0x59>
+    11f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    11f8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    11fa:	8b 48 04             	mov    0x4(%eax),%ecx
+    11fd:	39 f1                	cmp    %esi,%ecx
+    11ff:	73 4f                	jae    1250 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1201:	8b 3d 44 1a 00 00    	mov    0x1a44,%edi
+    1207:	89 c2                	mov    %eax,%edx
+    1209:	39 d7                	cmp    %edx,%edi
+    120b:	75 eb                	jne    11f8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    120d:	83 ec 0c             	sub    $0xc,%esp
+    1210:	ff 75 e4             	push   -0x1c(%ebp)
+    1213:	e8 93 fc ff ff       	call   eab <sbrk>
+  if(p == (char*)-1)
+    1218:	83 c4 10             	add    $0x10,%esp
+    121b:	83 f8 ff             	cmp    $0xffffffff,%eax
+    121e:	74 1c                	je     123c <malloc+0x8c>
+  hp->s.size = nu;
+    1220:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    1223:	83 ec 0c             	sub    $0xc,%esp
+    1226:	83 c0 08             	add    $0x8,%eax
+    1229:	50                   	push   %eax
+    122a:	e8 f1 fe ff ff       	call   1120 <free>
+  return freep;
+    122f:	8b 15 44 1a 00 00    	mov    0x1a44,%edx
+      if((p = morecore(nunits)) == 0)
+    1235:	83 c4 10             	add    $0x10,%esp
+    1238:	85 d2                	test   %edx,%edx
+    123a:	75 bc                	jne    11f8 <malloc+0x48>
+        return 0;
+  }
+}
+    123c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    123f:	31 c0                	xor    %eax,%eax
+}
+    1241:	5b                   	pop    %ebx
+    1242:	5e                   	pop    %esi
+    1243:	5f                   	pop    %edi
+    1244:	5d                   	pop    %ebp
+    1245:	c3                   	ret    
+    if(p->s.size >= nunits){
+    1246:	89 d0                	mov    %edx,%eax
+    1248:	89 fa                	mov    %edi,%edx
+    124a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    1250:	39 ce                	cmp    %ecx,%esi
+    1252:	74 4c                	je     12a0 <malloc+0xf0>
+        p->s.size -= nunits;
+    1254:	29 f1                	sub    %esi,%ecx
+    1256:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    1259:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    125c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+    125f:	89 15 44 1a 00 00    	mov    %edx,0x1a44
+}
+    1265:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    1268:	83 c0 08             	add    $0x8,%eax
+}
+    126b:	5b                   	pop    %ebx
+    126c:	5e                   	pop    %esi
+    126d:	5f                   	pop    %edi
+    126e:	5d                   	pop    %ebp
+    126f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+    1270:	c7 05 44 1a 00 00 48 	movl   $0x1a48,0x1a44
+    1277:	1a 00 00 
+    base.s.size = 0;
+    127a:	bf 48 1a 00 00       	mov    $0x1a48,%edi
+    base.s.ptr = freep = prevp = &base;
+    127f:	c7 05 48 1a 00 00 48 	movl   $0x1a48,0x1a48
+    1286:	1a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1289:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+    128b:	c7 05 4c 1a 00 00 00 	movl   $0x0,0x1a4c
+    1292:	00 00 00 
+    if(p->s.size >= nunits){
+    1295:	e9 42 ff ff ff       	jmp    11dc <malloc+0x2c>
+    129a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    12a0:	8b 08                	mov    (%eax),%ecx
+    12a2:	89 0a                	mov    %ecx,(%edx)
+    12a4:	eb b9                	jmp    125f <malloc+0xaf>
diff -ruN xv6-public/sh.d xv6-publica/sh.d
--- xv6-public/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/sh.d	2024-10-15 10:58:38.037888474 +0530
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files xv6-public/sh.o and xv6-publica/sh.o differ
diff -ruN xv6-public/sh.sym xv6-publica/sh.sym
--- xv6-public/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/sh.sym	2024-10-15 10:58:38.077888476 +0530
@@ -0,0 +1,66 @@
+00000000 sh.c
+000019e0 buf.0
+00000000 ulib.c
+00000000 printf.c
+00000ed0 printint
+000013f0 digits.0
+00000000 umalloc.c
+00001a44 freep
+00001a48 base
+00000bd0 strcpy
+00000f80 printf
+00000df0 memmove
+00000e6b mknod
+00000340 execcmd
+00000cf0 gets
+00000ea3 getpid
+000008b0 parsepipe
+00000b60 parsecmd
+00000440 backcmd
+000005d0 peek
+00000650 parseredirs
+00000470 gettoken
+000011b0 malloc
+00000eb3 sleep
+000019cc whitespace
+00000190 fork1
+00000ab0 nulterminate
+00000e33 pipe
+00000130 getcmd
+00000e43 write
+00000e7b fstat
+00000e53 kill
+00000e93 chdir
+00000940 parseline
+000001b0 runcmd
+00000a20 parseblock
+00000e5b exec
+00000e2b wait
+000019c4 symbols
+00000e3b read
+00000790 parseexec
+00000e73 unlink
+00000170 panic
+00000e1b fork
+00000eab sbrk
+00000ebb uptime
+000019d2 __bss_start
+00000c90 memset
+00000000 main
+00000c00 strcmp
+00000e9b dup
+000003c0 pipecmd
+00000370 redircmd
+00000d60 stat
+000019d2 _edata
+00001a50 _end
+00000e83 link
+00000e23 exit
+00000db0 atoi
+00000c60 strlen
+00000e63 open
+00000cb0 strchr
+00000e8b mkdir
+00000e4b close
+00000400 listcmd
+00001120 free
diff -ruN xv6-public/sleeplock.d xv6-publica/sleeplock.d
--- xv6-public/sleeplock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/sleeplock.d	2024-10-15 10:58:40.197888538 +0530
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files xv6-public/sleeplock.o and xv6-publica/sleeplock.o differ
diff -ruN xv6-public/spinlock.d xv6-publica/spinlock.d
--- xv6-public/spinlock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/spinlock.d	2024-10-15 10:58:40.267888540 +0530
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files xv6-public/spinlock.o and xv6-publica/spinlock.o differ
diff -ruN xv6-public/stressfs.asm xv6-publica/stressfs.asm
--- xv6-public/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/stressfs.asm	2024-10-15 10:58:38.137888477 +0530
@@ -0,0 +1,1252 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   7:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+   c:	ff 71 fc             	push   -0x4(%ecx)
+   f:	55                   	push   %ebp
+  10:	89 e5                	mov    %esp,%ebp
+  12:	57                   	push   %edi
+  13:	56                   	push   %esi
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  14:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+{
+  1a:	53                   	push   %ebx
+
+  for(i = 0; i < 4; i++)
+  1b:	31 db                	xor    %ebx,%ebx
+{
+  1d:	51                   	push   %ecx
+  1e:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  printf(1, "stressfs starting\n");
+  2b:	68 18 08 00 00       	push   $0x818
+  30:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  32:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  39:	74 72 65 
+  3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  43:	73 66 73 
+  printf(1, "stressfs starting\n");
+  46:	e8 a5 04 00 00       	call   4f0 <printf>
+  memset(data, 'a', sizeof(data));
+  4b:	83 c4 0c             	add    $0xc,%esp
+  4e:	68 00 02 00 00       	push   $0x200
+  53:	6a 61                	push   $0x61
+  55:	56                   	push   %esi
+  56:	e8 a5 01 00 00       	call   200 <memset>
+  5b:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  5e:	e8 28 03 00 00       	call   38b <fork>
+  63:	85 c0                	test   %eax,%eax
+  65:	0f 8f bf 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6b:	83 c3 01             	add    $0x1,%ebx
+  6e:	83 fb 04             	cmp    $0x4,%ebx
+  71:	75 eb                	jne    5e <main+0x5e>
+  73:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  78:	83 ec 04             	sub    $0x4,%esp
+  7b:	53                   	push   %ebx
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  7c:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  81:	68 2b 08 00 00       	push   $0x82b
+  86:	6a 01                	push   $0x1
+  88:	e8 63 04 00 00       	call   4f0 <printf>
+  path[8] += i;
+  8d:	89 f8                	mov    %edi,%eax
+  fd = open(path, O_CREATE | O_RDWR);
+  8f:	5f                   	pop    %edi
+  path[8] += i;
+  90:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  96:	58                   	pop    %eax
+  97:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  9d:	68 02 02 00 00       	push   $0x202
+  a2:	50                   	push   %eax
+  a3:	e8 2b 03 00 00       	call   3d3 <open>
+  a8:	83 c4 10             	add    $0x10,%esp
+  ab:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < 20; i++)
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b0:	83 ec 04             	sub    $0x4,%esp
+  b3:	68 00 02 00 00       	push   $0x200
+  b8:	56                   	push   %esi
+  b9:	57                   	push   %edi
+  ba:	e8 f4 02 00 00       	call   3b3 <write>
+  for(i = 0; i < 20; i++)
+  bf:	83 c4 10             	add    $0x10,%esp
+  c2:	83 eb 01             	sub    $0x1,%ebx
+  c5:	75 e9                	jne    b0 <main+0xb0>
+  close(fd);
+  c7:	83 ec 0c             	sub    $0xc,%esp
+  ca:	57                   	push   %edi
+  cb:	e8 eb 02 00 00       	call   3bb <close>
+
+  printf(1, "read\n");
+  d0:	58                   	pop    %eax
+  d1:	5a                   	pop    %edx
+  d2:	68 35 08 00 00       	push   $0x835
+  d7:	6a 01                	push   $0x1
+  d9:	e8 12 04 00 00       	call   4f0 <printf>
+
+  fd = open(path, O_RDONLY);
+  de:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  e4:	59                   	pop    %ecx
+  e5:	5b                   	pop    %ebx
+  e6:	6a 00                	push   $0x0
+  e8:	bb 14 00 00 00       	mov    $0x14,%ebx
+  ed:	50                   	push   %eax
+  ee:	e8 e0 02 00 00       	call   3d3 <open>
+  f3:	83 c4 10             	add    $0x10,%esp
+  f6:	89 c7                	mov    %eax,%edi
+  for (i = 0; i < 20; i++)
+  f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ff:	90                   	nop
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 9c 02 00 00       	call   3ab <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 9b 02 00 00       	call   3bb <close>
+
+  wait();
+ 120:	e8 76 02 00 00       	call   39b <wait>
+
+  exit();
+ 125:	e8 69 02 00 00       	call   393 <exit>
+  path[8] += i;
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 47 ff ff ff       	jmp    78 <main+0x78>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 141:	31 c0                	xor    %eax,%eax
+{
+ 143:	89 e5                	mov    %esp,%ebp
+ 145:	53                   	push   %ebx
+ 146:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 149:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 154:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 157:	83 c0 01             	add    $0x1,%eax
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 161:	89 c8                	mov    %ecx,%eax
+ 163:	c9                   	leave  
+ 164:	c3                   	ret    
+ 165:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	53                   	push   %ebx
+ 174:	8b 55 08             	mov    0x8(%ebp),%edx
+ 177:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 17a:	0f b6 02             	movzbl (%edx),%eax
+ 17d:	84 c0                	test   %al,%al
+ 17f:	75 17                	jne    198 <strcmp+0x28>
+ 181:	eb 3a                	jmp    1bd <strcmp+0x4d>
+ 183:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 187:	90                   	nop
+ 188:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 18c:	83 c2 01             	add    $0x1,%edx
+ 18f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 192:	84 c0                	test   %al,%al
+ 194:	74 1a                	je     1b0 <strcmp+0x40>
+    p++, q++;
+ 196:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 198:	0f b6 19             	movzbl (%ecx),%ebx
+ 19b:	38 c3                	cmp    %al,%bl
+ 19d:	74 e9                	je     188 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 19f:	29 d8                	sub    %ebx,%eax
+}
+ 1a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1a4:	c9                   	leave  
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 1b0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1b4:	31 c0                	xor    %eax,%eax
+ 1b6:	29 d8                	sub    %ebx,%eax
+}
+ 1b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1bb:	c9                   	leave  
+ 1bc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 1bd:	0f b6 19             	movzbl (%ecx),%ebx
+ 1c0:	31 c0                	xor    %eax,%eax
+ 1c2:	eb db                	jmp    19f <strcmp+0x2f>
+ 1c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1d6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1d9:	74 15                	je     1f0 <strlen+0x20>
+ 1db:	31 c0                	xor    %eax,%eax
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c0 01             	add    $0x1,%eax
+ 1e3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1e7:	89 c1                	mov    %eax,%ecx
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1eb:	89 c8                	mov    %ecx,%eax
+ 1ed:	5d                   	pop    %ebp
+ 1ee:	c3                   	ret    
+ 1ef:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c9                	xor    %ecx,%ecx
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	c3                   	ret    
+ 1f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 212:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 215:	89 d0                	mov    %edx,%eax
+ 217:	c9                   	leave  
+ 218:	c3                   	ret    
+ 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	8b 45 08             	mov    0x8(%ebp),%eax
+ 226:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 22a:	0f b6 10             	movzbl (%eax),%edx
+ 22d:	84 d2                	test   %dl,%dl
+ 22f:	75 12                	jne    243 <strchr+0x23>
+ 231:	eb 1d                	jmp    250 <strchr+0x30>
+ 233:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 237:	90                   	nop
+ 238:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 23c:	83 c0 01             	add    $0x1,%eax
+ 23f:	84 d2                	test   %dl,%dl
+ 241:	74 0d                	je     250 <strchr+0x30>
+    if(*s == c)
+ 243:	38 d1                	cmp    %dl,%cl
+ 245:	75 f1                	jne    238 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 247:	5d                   	pop    %ebp
+ 248:	c3                   	ret    
+ 249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 250:	31 c0                	xor    %eax,%eax
+}
+ 252:	5d                   	pop    %ebp
+ 253:	c3                   	ret    
+ 254:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 25f:	90                   	nop
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 265:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 268:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 269:	31 db                	xor    %ebx,%ebx
+{
+ 26b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 26e:	eb 27                	jmp    297 <gets+0x37>
+    cc = read(0, &c, 1);
+ 270:	83 ec 04             	sub    $0x4,%esp
+ 273:	6a 01                	push   $0x1
+ 275:	57                   	push   %edi
+ 276:	6a 00                	push   $0x0
+ 278:	e8 2e 01 00 00       	call   3ab <read>
+    if(cc < 1)
+ 27d:	83 c4 10             	add    $0x10,%esp
+ 280:	85 c0                	test   %eax,%eax
+ 282:	7e 1d                	jle    2a1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 284:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 288:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 28f:	3c 0a                	cmp    $0xa,%al
+ 291:	74 1d                	je     2b0 <gets+0x50>
+ 293:	3c 0d                	cmp    $0xd,%al
+ 295:	74 19                	je     2b0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 297:	89 de                	mov    %ebx,%esi
+ 299:	83 c3 01             	add    $0x1,%ebx
+ 29c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 29f:	7c cf                	jl     270 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 2a1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ab:	5b                   	pop    %ebx
+ 2ac:	5e                   	pop    %esi
+ 2ad:	5f                   	pop    %edi
+ 2ae:	5d                   	pop    %ebp
+ 2af:	c3                   	ret    
+  buf[i] = '\0';
+ 2b0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b3:	89 de                	mov    %ebx,%esi
+ 2b5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 2b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2bc:	5b                   	pop    %ebx
+ 2bd:	5e                   	pop    %esi
+ 2be:	5f                   	pop    %edi
+ 2bf:	5d                   	pop    %ebp
+ 2c0:	c3                   	ret    
+ 2c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cf:	90                   	nop
+
+000002d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d5:	83 ec 08             	sub    $0x8,%esp
+ 2d8:	6a 00                	push   $0x0
+ 2da:	ff 75 08             	push   0x8(%ebp)
+ 2dd:	e8 f1 00 00 00       	call   3d3 <open>
+  if(fd < 0)
+ 2e2:	83 c4 10             	add    $0x10,%esp
+ 2e5:	85 c0                	test   %eax,%eax
+ 2e7:	78 27                	js     310 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	ff 75 0c             	push   0xc(%ebp)
+ 2ef:	89 c3                	mov    %eax,%ebx
+ 2f1:	50                   	push   %eax
+ 2f2:	e8 f4 00 00 00       	call   3eb <fstat>
+  close(fd);
+ 2f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2fc:	e8 ba 00 00 00       	call   3bb <close>
+  return r;
+ 301:	83 c4 10             	add    $0x10,%esp
+}
+ 304:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 307:	89 f0                	mov    %esi,%eax
+ 309:	5b                   	pop    %ebx
+ 30a:	5e                   	pop    %esi
+ 30b:	5d                   	pop    %ebp
+ 30c:	c3                   	ret    
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 310:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 315:	eb ed                	jmp    304 <stat+0x34>
+ 317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31e:	66 90                	xchg   %ax,%ax
+
+00000320 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 327:	0f be 02             	movsbl (%edx),%eax
+ 32a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 32d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 330:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 335:	77 1e                	ja     355 <atoi+0x35>
+ 337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 33e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 340:	83 c2 01             	add    $0x1,%edx
+ 343:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 346:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 34a:	0f be 02             	movsbl (%edx),%eax
+ 34d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 350:	80 fb 09             	cmp    $0x9,%bl
+ 353:	76 eb                	jbe    340 <atoi+0x20>
+  return n;
+}
+ 355:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 358:	89 c8                	mov    %ecx,%eax
+ 35a:	c9                   	leave  
+ 35b:	c3                   	ret    
+ 35c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000360 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	8b 45 10             	mov    0x10(%ebp),%eax
+ 367:	8b 55 08             	mov    0x8(%ebp),%edx
+ 36a:	56                   	push   %esi
+ 36b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 36e:	85 c0                	test   %eax,%eax
+ 370:	7e 13                	jle    385 <memmove+0x25>
+ 372:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 374:	89 d7                	mov    %edx,%edi
+ 376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 380:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 381:	39 f8                	cmp    %edi,%eax
+ 383:	75 fb                	jne    380 <memmove+0x20>
+  return vdst;
+}
+ 385:	5e                   	pop    %esi
+ 386:	89 d0                	mov    %edx,%eax
+ 388:	5f                   	pop    %edi
+ 389:	5d                   	pop    %ebp
+ 38a:	c3                   	ret    
+
+0000038b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 38b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <exit>:
+SYSCALL(exit)
+ 393:	b8 02 00 00 00       	mov    $0x2,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <wait>:
+SYSCALL(wait)
+ 39b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <pipe>:
+SYSCALL(pipe)
+ 3a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <read>:
+SYSCALL(read)
+ 3ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <write>:
+SYSCALL(write)
+ 3b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <close>:
+SYSCALL(close)
+ 3bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <kill>:
+SYSCALL(kill)
+ 3c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <exec>:
+SYSCALL(exec)
+ 3cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <open>:
+SYSCALL(open)
+ 3d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mknod>:
+SYSCALL(mknod)
+ 3db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <unlink>:
+SYSCALL(unlink)
+ 3e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <fstat>:
+SYSCALL(fstat)
+ 3eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <link>:
+SYSCALL(link)
+ 3f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <mkdir>:
+SYSCALL(mkdir)
+ 3fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <chdir>:
+SYSCALL(chdir)
+ 403:	b8 09 00 00 00       	mov    $0x9,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <dup>:
+SYSCALL(dup)
+ 40b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <getpid>:
+SYSCALL(getpid)
+ 413:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <sbrk>:
+SYSCALL(sbrk)
+ 41b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <sleep>:
+SYSCALL(sleep)
+ 423:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <uptime>:
+SYSCALL(uptime)
+ 42b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+ 433:	66 90                	xchg   %ax,%ax
+ 435:	66 90                	xchg   %ax,%ax
+ 437:	66 90                	xchg   %ax,%ax
+ 439:	66 90                	xchg   %ax,%ax
+ 43b:	66 90                	xchg   %ax,%ax
+ 43d:	66 90                	xchg   %ax,%ax
+ 43f:	90                   	nop
+
+00000440 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 3c             	sub    $0x3c,%esp
+ 449:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 44c:	89 d1                	mov    %edx,%ecx
+{
+ 44e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 451:	85 d2                	test   %edx,%edx
+ 453:	0f 89 7f 00 00 00    	jns    4d8 <printint+0x98>
+ 459:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 45d:	74 79                	je     4d8 <printint+0x98>
+    neg = 1;
+ 45f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 466:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 468:	31 db                	xor    %ebx,%ebx
+ 46a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 470:	89 c8                	mov    %ecx,%eax
+ 472:	31 d2                	xor    %edx,%edx
+ 474:	89 cf                	mov    %ecx,%edi
+ 476:	f7 75 c4             	divl   -0x3c(%ebp)
+ 479:	0f b6 92 9c 08 00 00 	movzbl 0x89c(%edx),%edx
+ 480:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 483:	89 d8                	mov    %ebx,%eax
+ 485:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 488:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 48b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 48e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 491:	76 dd                	jbe    470 <printint+0x30>
+  if(neg)
+ 493:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 496:	85 c9                	test   %ecx,%ecx
+ 498:	74 0c                	je     4a6 <printint+0x66>
+    buf[i++] = '-';
+ 49a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 49f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4ad:	eb 07                	jmp    4b6 <printint+0x76>
+ 4af:	90                   	nop
+    putc(fd, buf[i]);
+ 4b0:	0f b6 13             	movzbl (%ebx),%edx
+ 4b3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4b6:	83 ec 04             	sub    $0x4,%esp
+ 4b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4bc:	6a 01                	push   $0x1
+ 4be:	56                   	push   %esi
+ 4bf:	57                   	push   %edi
+ 4c0:	e8 ee fe ff ff       	call   3b3 <write>
+  while(--i >= 0)
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	39 de                	cmp    %ebx,%esi
+ 4ca:	75 e4                	jne    4b0 <printint+0x70>
+}
+ 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cf:	5b                   	pop    %ebx
+ 4d0:	5e                   	pop    %esi
+ 4d1:	5f                   	pop    %edi
+ 4d2:	5d                   	pop    %ebp
+ 4d3:	c3                   	ret    
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4df:	eb 87                	jmp    468 <printint+0x28>
+ 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
+
+000004f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4f0:	55                   	push   %ebp
+ 4f1:	89 e5                	mov    %esp,%ebp
+ 4f3:	57                   	push   %edi
+ 4f4:	56                   	push   %esi
+ 4f5:	53                   	push   %ebx
+ 4f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 4fc:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 4ff:	0f b6 13             	movzbl (%ebx),%edx
+ 502:	84 d2                	test   %dl,%dl
+ 504:	74 6a                	je     570 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 506:	8d 45 10             	lea    0x10(%ebp),%eax
+ 509:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 50c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 50f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 511:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 514:	eb 36                	jmp    54c <printf+0x5c>
+ 516:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+ 520:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 523:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	74 15                	je     542 <printf+0x52>
+  write(fd, &c, 1);
+ 52d:	83 ec 04             	sub    $0x4,%esp
+ 530:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 533:	6a 01                	push   $0x1
+ 535:	57                   	push   %edi
+ 536:	56                   	push   %esi
+ 537:	e8 77 fe ff ff       	call   3b3 <write>
+ 53c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 53f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 542:	0f b6 13             	movzbl (%ebx),%edx
+ 545:	83 c3 01             	add    $0x1,%ebx
+ 548:	84 d2                	test   %dl,%dl
+ 54a:	74 24                	je     570 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 54c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 54f:	85 c9                	test   %ecx,%ecx
+ 551:	74 cd                	je     520 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 553:	83 f9 25             	cmp    $0x25,%ecx
+ 556:	75 ea                	jne    542 <printf+0x52>
+      if(c == 'd'){
+ 558:	83 f8 25             	cmp    $0x25,%eax
+ 55b:	0f 84 07 01 00 00    	je     668 <printf+0x178>
+ 561:	83 e8 63             	sub    $0x63,%eax
+ 564:	83 f8 15             	cmp    $0x15,%eax
+ 567:	77 17                	ja     580 <printf+0x90>
+ 569:	ff 24 85 44 08 00 00 	jmp    *0x844(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 570:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 573:	5b                   	pop    %ebx
+ 574:	5e                   	pop    %esi
+ 575:	5f                   	pop    %edi
+ 576:	5d                   	pop    %ebp
+ 577:	c3                   	ret    
+ 578:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+  write(fd, &c, 1);
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 586:	6a 01                	push   $0x1
+ 588:	57                   	push   %edi
+ 589:	56                   	push   %esi
+ 58a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 58e:	e8 20 fe ff ff       	call   3b3 <write>
+        putc(fd, c);
+ 593:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 597:	83 c4 0c             	add    $0xc,%esp
+ 59a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 59d:	6a 01                	push   $0x1
+ 59f:	57                   	push   %edi
+ 5a0:	56                   	push   %esi
+ 5a1:	e8 0d fe ff ff       	call   3b3 <write>
+        putc(fd, c);
+ 5a6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5a9:	31 c9                	xor    %ecx,%ecx
+ 5ab:	eb 95                	jmp    542 <printf+0x52>
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5b8:	6a 00                	push   $0x0
+ 5ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5bd:	8b 10                	mov    (%eax),%edx
+ 5bf:	89 f0                	mov    %esi,%eax
+ 5c1:	e8 7a fe ff ff       	call   440 <printint>
+        ap++;
+ 5c6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5ca:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5cd:	31 c9                	xor    %ecx,%ecx
+ 5cf:	e9 6e ff ff ff       	jmp    542 <printf+0x52>
+ 5d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5db:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 5dd:	83 c0 04             	add    $0x4,%eax
+ 5e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5e3:	85 d2                	test   %edx,%edx
+ 5e5:	0f 84 8d 00 00 00    	je     678 <printf+0x188>
+        while(*s != 0){
+ 5eb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 5ee:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 5f0:	84 c0                	test   %al,%al
+ 5f2:	0f 84 4a ff ff ff    	je     542 <printf+0x52>
+ 5f8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5fb:	89 d3                	mov    %edx,%ebx
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c3 01             	add    $0x1,%ebx
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	56                   	push   %esi
+ 60d:	e8 a1 fd ff ff       	call   3b3 <write>
+        while(*s != 0){
+ 612:	0f b6 03             	movzbl (%ebx),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x110>
+      state = 0;
+ 61c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 61f:	31 c9                	xor    %ecx,%ecx
+ 621:	e9 1c ff ff ff       	jmp    542 <printf+0x52>
+ 626:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 630:	83 ec 0c             	sub    $0xc,%esp
+ 633:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 638:	6a 01                	push   $0x1
+ 63a:	e9 7b ff ff ff       	jmp    5ba <printf+0xca>
+ 63f:	90                   	nop
+        putc(fd, *ap);
+ 640:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 646:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 648:	6a 01                	push   $0x1
+ 64a:	57                   	push   %edi
+ 64b:	56                   	push   %esi
+        putc(fd, *ap);
+ 64c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 64f:	e8 5f fd ff ff       	call   3b3 <write>
+        ap++;
+ 654:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 658:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 65b:	31 c9                	xor    %ecx,%ecx
+ 65d:	e9 e0 fe ff ff       	jmp    542 <printf+0x52>
+ 662:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 668:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 66b:	83 ec 04             	sub    $0x4,%esp
+ 66e:	e9 2a ff ff ff       	jmp    59d <printf+0xad>
+ 673:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 677:	90                   	nop
+          s = "(null)";
+ 678:	ba 3b 08 00 00       	mov    $0x83b,%edx
+        while(*s != 0){
+ 67d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 680:	b8 28 00 00 00       	mov    $0x28,%eax
+ 685:	89 d3                	mov    %edx,%ebx
+ 687:	e9 74 ff ff ff       	jmp    600 <printf+0x110>
+ 68c:	66 90                	xchg   %ax,%ax
+ 68e:	66 90                	xchg   %ax,%ax
+
+00000690 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 690:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 691:	a1 54 0b 00 00       	mov    0xb54,%eax
+{
+ 696:	89 e5                	mov    %esp,%ebp
+ 698:	57                   	push   %edi
+ 699:	56                   	push   %esi
+ 69a:	53                   	push   %ebx
+ 69b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 69e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6a8:	89 c2                	mov    %eax,%edx
+ 6aa:	8b 00                	mov    (%eax),%eax
+ 6ac:	39 ca                	cmp    %ecx,%edx
+ 6ae:	73 30                	jae    6e0 <free+0x50>
+ 6b0:	39 c1                	cmp    %eax,%ecx
+ 6b2:	72 04                	jb     6b8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b4:	39 c2                	cmp    %eax,%edx
+ 6b6:	72 f0                	jb     6a8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6be:	39 f8                	cmp    %edi,%eax
+ 6c0:	74 30                	je     6f2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6c2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 6c5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6c8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6cb:	39 f1                	cmp    %esi,%ecx
+ 6cd:	74 3a                	je     709 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 6cf:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6d1:	5b                   	pop    %ebx
+  freep = p;
+ 6d2:	89 15 54 0b 00 00    	mov    %edx,0xb54
+}
+ 6d8:	5e                   	pop    %esi
+ 6d9:	5f                   	pop    %edi
+ 6da:	5d                   	pop    %ebp
+ 6db:	c3                   	ret    
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e0:	39 c2                	cmp    %eax,%edx
+ 6e2:	72 c4                	jb     6a8 <free+0x18>
+ 6e4:	39 c1                	cmp    %eax,%ecx
+ 6e6:	73 c0                	jae    6a8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 6e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ee:	39 f8                	cmp    %edi,%eax
+ 6f0:	75 d0                	jne    6c2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 6f2:	03 70 04             	add    0x4(%eax),%esi
+ 6f5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6f8:	8b 02                	mov    (%edx),%eax
+ 6fa:	8b 00                	mov    (%eax),%eax
+ 6fc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ff:	8b 42 04             	mov    0x4(%edx),%eax
+ 702:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	75 c6                	jne    6cf <free+0x3f>
+    p->s.size += bp->s.size;
+ 709:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 70c:	89 15 54 0b 00 00    	mov    %edx,0xb54
+    p->s.size += bp->s.size;
+ 712:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 715:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 718:	89 0a                	mov    %ecx,(%edx)
+}
+ 71a:	5b                   	pop    %ebx
+ 71b:	5e                   	pop    %esi
+ 71c:	5f                   	pop    %edi
+ 71d:	5d                   	pop    %ebp
+ 71e:	c3                   	ret    
+ 71f:	90                   	nop
+
+00000720 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 720:	55                   	push   %ebp
+ 721:	89 e5                	mov    %esp,%ebp
+ 723:	57                   	push   %edi
+ 724:	56                   	push   %esi
+ 725:	53                   	push   %ebx
+ 726:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 729:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 72c:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 732:	8d 70 07             	lea    0x7(%eax),%esi
+ 735:	c1 ee 03             	shr    $0x3,%esi
+ 738:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 73b:	85 ff                	test   %edi,%edi
+ 73d:	0f 84 9d 00 00 00    	je     7e0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 743:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 745:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 748:	39 f1                	cmp    %esi,%ecx
+ 74a:	73 6a                	jae    7b6 <malloc+0x96>
+ 74c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 751:	39 de                	cmp    %ebx,%esi
+ 753:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 756:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 75d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 760:	eb 17                	jmp    779 <malloc+0x59>
+ 762:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 768:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 76a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 76d:	39 f1                	cmp    %esi,%ecx
+ 76f:	73 4f                	jae    7c0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 771:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
+ 777:	89 c2                	mov    %eax,%edx
+ 779:	39 d7                	cmp    %edx,%edi
+ 77b:	75 eb                	jne    768 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 77d:	83 ec 0c             	sub    $0xc,%esp
+ 780:	ff 75 e4             	push   -0x1c(%ebp)
+ 783:	e8 93 fc ff ff       	call   41b <sbrk>
+  if(p == (char*)-1)
+ 788:	83 c4 10             	add    $0x10,%esp
+ 78b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 78e:	74 1c                	je     7ac <malloc+0x8c>
+  hp->s.size = nu;
+ 790:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 793:	83 ec 0c             	sub    $0xc,%esp
+ 796:	83 c0 08             	add    $0x8,%eax
+ 799:	50                   	push   %eax
+ 79a:	e8 f1 fe ff ff       	call   690 <free>
+  return freep;
+ 79f:	8b 15 54 0b 00 00    	mov    0xb54,%edx
+      if((p = morecore(nunits)) == 0)
+ 7a5:	83 c4 10             	add    $0x10,%esp
+ 7a8:	85 d2                	test   %edx,%edx
+ 7aa:	75 bc                	jne    768 <malloc+0x48>
+        return 0;
+  }
+}
+ 7ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7af:	31 c0                	xor    %eax,%eax
+}
+ 7b1:	5b                   	pop    %ebx
+ 7b2:	5e                   	pop    %esi
+ 7b3:	5f                   	pop    %edi
+ 7b4:	5d                   	pop    %ebp
+ 7b5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7b6:	89 d0                	mov    %edx,%eax
+ 7b8:	89 fa                	mov    %edi,%edx
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7c0:	39 ce                	cmp    %ecx,%esi
+ 7c2:	74 4c                	je     810 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7c4:	29 f1                	sub    %esi,%ecx
+ 7c6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7cc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 7cf:	89 15 54 0b 00 00    	mov    %edx,0xb54
+}
+ 7d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7d8:	83 c0 08             	add    $0x8,%eax
+}
+ 7db:	5b                   	pop    %ebx
+ 7dc:	5e                   	pop    %esi
+ 7dd:	5f                   	pop    %edi
+ 7de:	5d                   	pop    %ebp
+ 7df:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 7e0:	c7 05 54 0b 00 00 58 	movl   $0xb58,0xb54
+ 7e7:	0b 00 00 
+    base.s.size = 0;
+ 7ea:	bf 58 0b 00 00       	mov    $0xb58,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7ef:	c7 05 58 0b 00 00 58 	movl   $0xb58,0xb58
+ 7f6:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7fb:	c7 05 5c 0b 00 00 00 	movl   $0x0,0xb5c
+ 802:	00 00 00 
+    if(p->s.size >= nunits){
+ 805:	e9 42 ff ff ff       	jmp    74c <malloc+0x2c>
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 810:	8b 08                	mov    (%eax),%ecx
+ 812:	89 0a                	mov    %ecx,(%edx)
+ 814:	eb b9                	jmp    7cf <malloc+0xaf>
diff -ruN xv6-public/stressfs.d xv6-publica/stressfs.d
--- xv6-public/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/stressfs.d	2024-10-15 10:58:38.107888477 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-publica/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-publica/stressfs.sym
--- xv6-public/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/stressfs.sym	2024-10-15 10:58:38.137888477 +0530
@@ -0,0 +1,45 @@
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000440 printint
+0000089c digits.0
+00000000 umalloc.c
+00000b54 freep
+00000b58 base
+00000140 strcpy
+000004f0 printf
+00000360 memmove
+000003db mknod
+00000260 gets
+00000413 getpid
+00000720 malloc
+00000423 sleep
+000003a3 pipe
+000003b3 write
+000003eb fstat
+000003c3 kill
+00000403 chdir
+000003cb exec
+0000039b wait
+000003ab read
+000003e3 unlink
+0000038b fork
+0000041b sbrk
+0000042b uptime
+00000b54 __bss_start
+00000200 memset
+00000000 main
+00000170 strcmp
+0000040b dup
+000002d0 stat
+00000b54 _edata
+00000b60 _end
+000003f3 link
+00000393 exit
+00000320 atoi
+000001d0 strlen
+000003d3 open
+00000220 strchr
+000003fb mkdir
+000003bb close
+00000690 free
diff -ruN xv6-public/string.d xv6-publica/string.d
--- xv6-public/string.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/string.d	2024-10-15 10:58:40.337888542 +0530
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files xv6-public/string.o and xv6-publica/string.o differ
Binary files xv6-public/swtch.o and xv6-publica/swtch.o differ
diff -ruN xv6-public/syscall.d xv6-publica/syscall.d
--- xv6-public/syscall.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/syscall.d	2024-10-15 10:58:40.417888544 +0530
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
Binary files xv6-public/syscall.o and xv6-publica/syscall.o differ
diff -ruN xv6-public/sysfile.d xv6-publica/sysfile.d
--- xv6-public/sysfile.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/sysfile.d	2024-10-15 10:58:40.567888548 +0530
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files xv6-public/sysfile.o and xv6-publica/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-publica/sysproc.c
--- xv6-public/sysproc.c	2024-10-15 22:20:29.432270318 +0530
+++ xv6-publica/sysproc.c	2024-10-15 10:55:16.857894614 +0530
@@ -51,8 +51,10 @@
   if(argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
-    return -1;
+  myproc()->sz += n;
+  
+  //  if(growproc(n) < 0)
+  //    return -1;
   return addr;
 }
 
@@ -88,4 +90,4 @@
   xticks = ticks;
   release(&tickslock);
   return xticks;
-}
+}
\ No newline at end of file
diff -ruN xv6-public/sysproc.d xv6-publica/sysproc.d
--- xv6-public/sysproc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/sysproc.d	2024-10-15 10:58:40.617888550 +0530
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h
Binary files xv6-public/sysproc.o and xv6-publica/sysproc.o differ
diff -ruN xv6-public/trap.c xv6-publica/trap.c
--- xv6-public/trap.c	2024-10-15 22:20:29.432270318 +0530
+++ xv6-publica/trap.c	2024-10-15 10:58:03.417886836 +0530
@@ -14,6 +14,21 @@
 struct spinlock tickslock;
 uint ticks;
 
+int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+
+int pageFaultHandler(){
+  int addr=rcr2();
+  int rounded_addr = PGROUNDDOWN(addr);
+  char *mem=kalloc();
+  if(mem!=0){
+    memset(mem, 0, PGSIZE);
+    if(mappages(myproc()->pgdir, (char*)rounded_addr, PGSIZE, V2P(mem), PTE_W|PTE_U)<0)
+      return -1;
+    return 0;
+  } else 
+    return -1;
+}
+
 void
 tvinit(void)
 {
@@ -78,6 +93,14 @@
     lapiceoi();
     break;
 
+    //we are going to add the case to handle page fault
+  case T_PGFLT:
+  int x=pageFaultHandler();
+    if(x<0){
+      cprintf("page is not getting allocated\n");
+      panic("trap");
+    }
+  break;
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
@@ -109,4 +132,4 @@
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
     exit();
-}
+}
\ No newline at end of file
diff -ruN xv6-public/trap.d xv6-publica/trap.d
--- xv6-public/trap.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/trap.d	2024-10-15 10:58:40.697888552 +0530
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files xv6-public/trap.o and xv6-publica/trap.o differ
Binary files xv6-public/trapasm.o and xv6-publica/trapasm.o differ
diff -ruN xv6-public/uart.d xv6-publica/uart.d
--- xv6-public/uart.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/uart.d	2024-10-15 10:58:40.757888554 +0530
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files xv6-public/uart.o and xv6-publica/uart.o differ
diff -ruN xv6-public/ulib.d xv6-publica/ulib.d
--- xv6-public/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/ulib.d	2024-10-15 10:58:37.107888486 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files xv6-public/ulib.o and xv6-publica/ulib.o differ
diff -ruN xv6-public/umalloc.d xv6-publica/umalloc.d
--- xv6-public/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/umalloc.d	2024-10-15 10:58:37.237888482 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files xv6-public/umalloc.o and xv6-publica/umalloc.o differ
diff -ruN xv6-public/usertests.asm xv6-publica/usertests.asm
--- xv6-public/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/usertests.asm	2024-10-15 10:58:38.637888492 +0530
@@ -0,0 +1,6598 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	push   -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      11:	68 46 4d 00 00       	push   $0x4d46
+      16:	6a 01                	push   $0x1
+      18:	e8 13 3a 00 00       	call   3a30 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      1d:	59                   	pop    %ecx
+      1e:	58                   	pop    %eax
+      1f:	6a 00                	push   $0x0
+      21:	68 5a 4d 00 00       	push   $0x4d5a
+      26:	e8 e8 38 00 00       	call   3913 <open>
+      2b:	83 c4 10             	add    $0x10,%esp
+      2e:	85 c0                	test   %eax,%eax
+      30:	78 13                	js     45 <main+0x45>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      32:	52                   	push   %edx
+      33:	52                   	push   %edx
+      34:	68 c4 54 00 00       	push   $0x54c4
+      39:	6a 01                	push   $0x1
+      3b:	e8 f0 39 00 00       	call   3a30 <printf>
+    exit();
+      40:	e8 8e 38 00 00       	call   38d3 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      45:	50                   	push   %eax
+      46:	50                   	push   %eax
+      47:	68 00 02 00 00       	push   $0x200
+      4c:	68 5a 4d 00 00       	push   $0x4d5a
+      51:	e8 bd 38 00 00       	call   3913 <open>
+      56:	89 04 24             	mov    %eax,(%esp)
+      59:	e8 9d 38 00 00       	call   38fb <close>
+
+  argptest();
+      5e:	e8 8d 35 00 00       	call   35f0 <argptest>
+  createdelete();
+      63:	e8 b8 11 00 00       	call   1220 <createdelete>
+  linkunlink();
+      68:	e8 73 1a 00 00       	call   1ae0 <linkunlink>
+  concreate();
+      6d:	e8 6e 17 00 00       	call   17e0 <concreate>
+  fourfiles();
+      72:	e8 a9 0f 00 00       	call   1020 <fourfiles>
+  sharedfd();
+      77:	e8 e4 0d 00 00       	call   e60 <sharedfd>
+
+  bigargtest();
+      7c:	e8 2f 32 00 00       	call   32b0 <bigargtest>
+  bigwrite();
+      81:	e8 7a 23 00 00       	call   2400 <bigwrite>
+  bigargtest();
+      86:	e8 25 32 00 00       	call   32b0 <bigargtest>
+  bsstest();
+      8b:	e8 b0 31 00 00       	call   3240 <bsstest>
+  sbrktest();
+      90:	e8 ab 2c 00 00       	call   2d40 <sbrktest>
+  validatetest();
+      95:	e8 f6 30 00 00       	call   3190 <validatetest>
+
+  opentest();
+      9a:	e8 61 03 00 00       	call   400 <opentest>
+  writetest();
+      9f:	e8 ec 03 00 00       	call   490 <writetest>
+  writetest1();
+      a4:	e8 c7 05 00 00       	call   670 <writetest1>
+  createtest();
+      a9:	e8 92 07 00 00       	call   840 <createtest>
+
+  openiputtest();
+      ae:	e8 4d 02 00 00       	call   300 <openiputtest>
+  exitiputtest();
+      b3:	e8 48 01 00 00       	call   200 <exitiputtest>
+  iputtest();
+      b8:	e8 63 00 00 00       	call   120 <iputtest>
+
+  mem();
+      bd:	e8 ce 0c 00 00       	call   d90 <mem>
+  pipe1();
+      c2:	e8 59 09 00 00       	call   a20 <pipe1>
+  preempt();
+      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>
+  exitwait();
+      cc:	e8 3f 0c 00 00       	call   d10 <exitwait>
+
+  rmdot();
+      d1:	e8 1a 27 00 00       	call   27f0 <rmdot>
+  fourteen();
+      d6:	e8 d5 25 00 00       	call   26b0 <fourteen>
+  bigfile();
+      db:	e8 00 24 00 00       	call   24e0 <bigfile>
+  subdir();
+      e0:	e8 3b 1c 00 00       	call   1d20 <subdir>
+  linktest();
+      e5:	e8 e6 14 00 00       	call   15d0 <linktest>
+  unlinkread();
+      ea:	e8 51 13 00 00       	call   1440 <unlinkread>
+  dirfile();
+      ef:	e8 7c 28 00 00       	call   2970 <dirfile>
+  iref();
+      f4:	e8 77 2a 00 00       	call   2b70 <iref>
+  forktest();
+      f9:	e8 92 2b 00 00       	call   2c90 <forktest>
+  bigdir(); // slow
+      fe:	e8 ed 1a 00 00       	call   1bf0 <bigdir>
+
+  uio();
+     103:	e8 78 34 00 00       	call   3580 <uio>
+
+  exectest();
+     108:	e8 c3 08 00 00       	call   9d0 <exectest>
+
+  exit();
+     10d:	e8 c1 37 00 00       	call   38d3 <exit>
+     112:	66 90                	xchg   %ax,%ax
+     114:	66 90                	xchg   %ax,%ax
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	55                   	push   %ebp
+     121:	89 e5                	mov    %esp,%ebp
+     123:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     126:	68 ec 3d 00 00       	push   $0x3dec
+     12b:	ff 35 48 5e 00 00    	push   0x5e48
+     131:	e8 fa 38 00 00       	call   3a30 <printf>
+  if(mkdir("iputdir") < 0){
+     136:	c7 04 24 7f 3d 00 00 	movl   $0x3d7f,(%esp)
+     13d:	e8 f9 37 00 00       	call   393b <mkdir>
+     142:	83 c4 10             	add    $0x10,%esp
+     145:	85 c0                	test   %eax,%eax
+     147:	78 58                	js     1a1 <iputtest+0x81>
+  if(chdir("iputdir") < 0){
+     149:	83 ec 0c             	sub    $0xc,%esp
+     14c:	68 7f 3d 00 00       	push   $0x3d7f
+     151:	e8 ed 37 00 00       	call   3943 <chdir>
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	85 c0                	test   %eax,%eax
+     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
+  if(unlink("../iputdir") < 0){
+     161:	83 ec 0c             	sub    $0xc,%esp
+     164:	68 7c 3d 00 00       	push   $0x3d7c
+     169:	e8 b5 37 00 00       	call   3923 <unlink>
+     16e:	83 c4 10             	add    $0x10,%esp
+     171:	85 c0                	test   %eax,%eax
+     173:	78 5a                	js     1cf <iputtest+0xaf>
+  if(chdir("/") < 0){
+     175:	83 ec 0c             	sub    $0xc,%esp
+     178:	68 a1 3d 00 00       	push   $0x3da1
+     17d:	e8 c1 37 00 00       	call   3943 <chdir>
+     182:	83 c4 10             	add    $0x10,%esp
+     185:	85 c0                	test   %eax,%eax
+     187:	78 2f                	js     1b8 <iputtest+0x98>
+  printf(stdout, "iput test ok\n");
+     189:	83 ec 08             	sub    $0x8,%esp
+     18c:	68 24 3e 00 00       	push   $0x3e24
+     191:	ff 35 48 5e 00 00    	push   0x5e48
+     197:	e8 94 38 00 00       	call   3a30 <printf>
+}
+     19c:	83 c4 10             	add    $0x10,%esp
+     19f:	c9                   	leave  
+     1a0:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a1:	50                   	push   %eax
+     1a2:	50                   	push   %eax
+     1a3:	68 58 3d 00 00       	push   $0x3d58
+     1a8:	ff 35 48 5e 00 00    	push   0x5e48
+     1ae:	e8 7d 38 00 00       	call   3a30 <printf>
+    exit();
+     1b3:	e8 1b 37 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir / failed\n");
+     1b8:	50                   	push   %eax
+     1b9:	50                   	push   %eax
+     1ba:	68 a3 3d 00 00       	push   $0x3da3
+     1bf:	ff 35 48 5e 00 00    	push   0x5e48
+     1c5:	e8 66 38 00 00       	call   3a30 <printf>
+    exit();
+     1ca:	e8 04 37 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1cf:	52                   	push   %edx
+     1d0:	52                   	push   %edx
+     1d1:	68 87 3d 00 00       	push   $0x3d87
+     1d6:	ff 35 48 5e 00 00    	push   0x5e48
+     1dc:	e8 4f 38 00 00       	call   3a30 <printf>
+    exit();
+     1e1:	e8 ed 36 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1e6:	51                   	push   %ecx
+     1e7:	51                   	push   %ecx
+     1e8:	68 66 3d 00 00       	push   $0x3d66
+     1ed:	ff 35 48 5e 00 00    	push   0x5e48
+     1f3:	e8 38 38 00 00       	call   3a30 <printf>
+    exit();
+     1f8:	e8 d6 36 00 00       	call   38d3 <exit>
+     1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <exitiputtest>:
+{
+     200:	55                   	push   %ebp
+     201:	89 e5                	mov    %esp,%ebp
+     203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     206:	68 b3 3d 00 00       	push   $0x3db3
+     20b:	ff 35 48 5e 00 00    	push   0x5e48
+     211:	e8 1a 38 00 00       	call   3a30 <printf>
+  pid = fork();
+     216:	e8 b0 36 00 00       	call   38cb <fork>
+  if(pid < 0){
+     21b:	83 c4 10             	add    $0x10,%esp
+     21e:	85 c0                	test   %eax,%eax
+     220:	0f 88 8a 00 00 00    	js     2b0 <exitiputtest+0xb0>
+  if(pid == 0){
+     226:	75 50                	jne    278 <exitiputtest+0x78>
+    if(mkdir("iputdir") < 0){
+     228:	83 ec 0c             	sub    $0xc,%esp
+     22b:	68 7f 3d 00 00       	push   $0x3d7f
+     230:	e8 06 37 00 00       	call   393b <mkdir>
+     235:	83 c4 10             	add    $0x10,%esp
+     238:	85 c0                	test   %eax,%eax
+     23a:	0f 88 87 00 00 00    	js     2c7 <exitiputtest+0xc7>
+    if(chdir("iputdir") < 0){
+     240:	83 ec 0c             	sub    $0xc,%esp
+     243:	68 7f 3d 00 00       	push   $0x3d7f
+     248:	e8 f6 36 00 00       	call   3943 <chdir>
+     24d:	83 c4 10             	add    $0x10,%esp
+     250:	85 c0                	test   %eax,%eax
+     252:	0f 88 86 00 00 00    	js     2de <exitiputtest+0xde>
+    if(unlink("../iputdir") < 0){
+     258:	83 ec 0c             	sub    $0xc,%esp
+     25b:	68 7c 3d 00 00       	push   $0x3d7c
+     260:	e8 be 36 00 00       	call   3923 <unlink>
+     265:	83 c4 10             	add    $0x10,%esp
+     268:	85 c0                	test   %eax,%eax
+     26a:	78 2c                	js     298 <exitiputtest+0x98>
+    exit();
+     26c:	e8 62 36 00 00       	call   38d3 <exit>
+     271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  wait();
+     278:	e8 5e 36 00 00       	call   38db <wait>
+  printf(stdout, "exitiput test ok\n");
+     27d:	83 ec 08             	sub    $0x8,%esp
+     280:	68 d6 3d 00 00       	push   $0x3dd6
+     285:	ff 35 48 5e 00 00    	push   0x5e48
+     28b:	e8 a0 37 00 00       	call   3a30 <printf>
+}
+     290:	83 c4 10             	add    $0x10,%esp
+     293:	c9                   	leave  
+     294:	c3                   	ret    
+     295:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     298:	83 ec 08             	sub    $0x8,%esp
+     29b:	68 87 3d 00 00       	push   $0x3d87
+     2a0:	ff 35 48 5e 00 00    	push   0x5e48
+     2a6:	e8 85 37 00 00       	call   3a30 <printf>
+      exit();
+     2ab:	e8 23 36 00 00       	call   38d3 <exit>
+    printf(stdout, "fork failed\n");
+     2b0:	51                   	push   %ecx
+     2b1:	51                   	push   %ecx
+     2b2:	68 99 4c 00 00       	push   $0x4c99
+     2b7:	ff 35 48 5e 00 00    	push   0x5e48
+     2bd:	e8 6e 37 00 00       	call   3a30 <printf>
+    exit();
+     2c2:	e8 0c 36 00 00       	call   38d3 <exit>
+      printf(stdout, "mkdir failed\n");
+     2c7:	52                   	push   %edx
+     2c8:	52                   	push   %edx
+     2c9:	68 58 3d 00 00       	push   $0x3d58
+     2ce:	ff 35 48 5e 00 00    	push   0x5e48
+     2d4:	e8 57 37 00 00       	call   3a30 <printf>
+      exit();
+     2d9:	e8 f5 35 00 00       	call   38d3 <exit>
+      printf(stdout, "child chdir failed\n");
+     2de:	50                   	push   %eax
+     2df:	50                   	push   %eax
+     2e0:	68 c2 3d 00 00       	push   $0x3dc2
+     2e5:	ff 35 48 5e 00 00    	push   0x5e48
+     2eb:	e8 40 37 00 00       	call   3a30 <printf>
+      exit();
+     2f0:	e8 de 35 00 00       	call   38d3 <exit>
+     2f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     2fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000300 <openiputtest>:
+{
+     300:	55                   	push   %ebp
+     301:	89 e5                	mov    %esp,%ebp
+     303:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     306:	68 e8 3d 00 00       	push   $0x3de8
+     30b:	ff 35 48 5e 00 00    	push   0x5e48
+     311:	e8 1a 37 00 00       	call   3a30 <printf>
+  if(mkdir("oidir") < 0){
+     316:	c7 04 24 f7 3d 00 00 	movl   $0x3df7,(%esp)
+     31d:	e8 19 36 00 00       	call   393b <mkdir>
+     322:	83 c4 10             	add    $0x10,%esp
+     325:	85 c0                	test   %eax,%eax
+     327:	0f 88 9f 00 00 00    	js     3cc <openiputtest+0xcc>
+  pid = fork();
+     32d:	e8 99 35 00 00       	call   38cb <fork>
+  if(pid < 0){
+     332:	85 c0                	test   %eax,%eax
+     334:	78 7f                	js     3b5 <openiputtest+0xb5>
+  if(pid == 0){
+     336:	75 38                	jne    370 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     338:	83 ec 08             	sub    $0x8,%esp
+     33b:	6a 02                	push   $0x2
+     33d:	68 f7 3d 00 00       	push   $0x3df7
+     342:	e8 cc 35 00 00       	call   3913 <open>
+    if(fd >= 0){
+     347:	83 c4 10             	add    $0x10,%esp
+     34a:	85 c0                	test   %eax,%eax
+     34c:	78 62                	js     3b0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     34e:	83 ec 08             	sub    $0x8,%esp
+     351:	68 7c 4d 00 00       	push   $0x4d7c
+     356:	ff 35 48 5e 00 00    	push   0x5e48
+     35c:	e8 cf 36 00 00       	call   3a30 <printf>
+      exit();
+     361:	e8 6d 35 00 00       	call   38d3 <exit>
+     366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     36d:	8d 76 00             	lea    0x0(%esi),%esi
+  sleep(1);
+     370:	83 ec 0c             	sub    $0xc,%esp
+     373:	6a 01                	push   $0x1
+     375:	e8 e9 35 00 00       	call   3963 <sleep>
+  if(unlink("oidir") != 0){
+     37a:	c7 04 24 f7 3d 00 00 	movl   $0x3df7,(%esp)
+     381:	e8 9d 35 00 00       	call   3923 <unlink>
+     386:	83 c4 10             	add    $0x10,%esp
+     389:	85 c0                	test   %eax,%eax
+     38b:	75 56                	jne    3e3 <openiputtest+0xe3>
+  wait();
+     38d:	e8 49 35 00 00       	call   38db <wait>
+  printf(stdout, "openiput test ok\n");
+     392:	83 ec 08             	sub    $0x8,%esp
+     395:	68 20 3e 00 00       	push   $0x3e20
+     39a:	ff 35 48 5e 00 00    	push   0x5e48
+     3a0:	e8 8b 36 00 00       	call   3a30 <printf>
+}
+     3a5:	83 c4 10             	add    $0x10,%esp
+     3a8:	c9                   	leave  
+     3a9:	c3                   	ret    
+     3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3b0:	e8 1e 35 00 00       	call   38d3 <exit>
+    printf(stdout, "fork failed\n");
+     3b5:	52                   	push   %edx
+     3b6:	52                   	push   %edx
+     3b7:	68 99 4c 00 00       	push   $0x4c99
+     3bc:	ff 35 48 5e 00 00    	push   0x5e48
+     3c2:	e8 69 36 00 00       	call   3a30 <printf>
+    exit();
+     3c7:	e8 07 35 00 00       	call   38d3 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3cc:	51                   	push   %ecx
+     3cd:	51                   	push   %ecx
+     3ce:	68 fd 3d 00 00       	push   $0x3dfd
+     3d3:	ff 35 48 5e 00 00    	push   0x5e48
+     3d9:	e8 52 36 00 00       	call   3a30 <printf>
+    exit();
+     3de:	e8 f0 34 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink failed\n");
+     3e3:	50                   	push   %eax
+     3e4:	50                   	push   %eax
+     3e5:	68 11 3e 00 00       	push   $0x3e11
+     3ea:	ff 35 48 5e 00 00    	push   0x5e48
+     3f0:	e8 3b 36 00 00       	call   3a30 <printf>
+    exit();
+     3f5:	e8 d9 34 00 00       	call   38d3 <exit>
+     3fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000400 <opentest>:
+{
+     400:	55                   	push   %ebp
+     401:	89 e5                	mov    %esp,%ebp
+     403:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     406:	68 32 3e 00 00       	push   $0x3e32
+     40b:	ff 35 48 5e 00 00    	push   0x5e48
+     411:	e8 1a 36 00 00       	call   3a30 <printf>
+  fd = open("echo", 0);
+     416:	58                   	pop    %eax
+     417:	5a                   	pop    %edx
+     418:	6a 00                	push   $0x0
+     41a:	68 3d 3e 00 00       	push   $0x3e3d
+     41f:	e8 ef 34 00 00       	call   3913 <open>
+  if(fd < 0){
+     424:	83 c4 10             	add    $0x10,%esp
+     427:	85 c0                	test   %eax,%eax
+     429:	78 36                	js     461 <opentest+0x61>
+  close(fd);
+     42b:	83 ec 0c             	sub    $0xc,%esp
+     42e:	50                   	push   %eax
+     42f:	e8 c7 34 00 00       	call   38fb <close>
+  fd = open("doesnotexist", 0);
+     434:	5a                   	pop    %edx
+     435:	59                   	pop    %ecx
+     436:	6a 00                	push   $0x0
+     438:	68 55 3e 00 00       	push   $0x3e55
+     43d:	e8 d1 34 00 00       	call   3913 <open>
+  if(fd >= 0){
+     442:	83 c4 10             	add    $0x10,%esp
+     445:	85 c0                	test   %eax,%eax
+     447:	79 2f                	jns    478 <opentest+0x78>
+  printf(stdout, "open test ok\n");
+     449:	83 ec 08             	sub    $0x8,%esp
+     44c:	68 80 3e 00 00       	push   $0x3e80
+     451:	ff 35 48 5e 00 00    	push   0x5e48
+     457:	e8 d4 35 00 00       	call   3a30 <printf>
+}
+     45c:	83 c4 10             	add    $0x10,%esp
+     45f:	c9                   	leave  
+     460:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     461:	50                   	push   %eax
+     462:	50                   	push   %eax
+     463:	68 42 3e 00 00       	push   $0x3e42
+     468:	ff 35 48 5e 00 00    	push   0x5e48
+     46e:	e8 bd 35 00 00       	call   3a30 <printf>
+    exit();
+     473:	e8 5b 34 00 00       	call   38d3 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     478:	50                   	push   %eax
+     479:	50                   	push   %eax
+     47a:	68 62 3e 00 00       	push   $0x3e62
+     47f:	ff 35 48 5e 00 00    	push   0x5e48
+     485:	e8 a6 35 00 00       	call   3a30 <printf>
+    exit();
+     48a:	e8 44 34 00 00       	call   38d3 <exit>
+     48f:	90                   	nop
+
+00000490 <writetest>:
+{
+     490:	55                   	push   %ebp
+     491:	89 e5                	mov    %esp,%ebp
+     493:	56                   	push   %esi
+     494:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     495:	83 ec 08             	sub    $0x8,%esp
+     498:	68 8e 3e 00 00       	push   $0x3e8e
+     49d:	ff 35 48 5e 00 00    	push   0x5e48
+     4a3:	e8 88 35 00 00       	call   3a30 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     4a8:	58                   	pop    %eax
+     4a9:	5a                   	pop    %edx
+     4aa:	68 02 02 00 00       	push   $0x202
+     4af:	68 9f 3e 00 00       	push   $0x3e9f
+     4b4:	e8 5a 34 00 00       	call   3913 <open>
+  if(fd >= 0){
+     4b9:	83 c4 10             	add    $0x10,%esp
+     4bc:	85 c0                	test   %eax,%eax
+     4be:	0f 88 88 01 00 00    	js     64c <writetest+0x1bc>
+    printf(stdout, "creat small succeeded; ok\n");
+     4c4:	83 ec 08             	sub    $0x8,%esp
+     4c7:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4c9:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4cb:	68 a5 3e 00 00       	push   $0x3ea5
+     4d0:	ff 35 48 5e 00 00    	push   0x5e48
+     4d6:	e8 55 35 00 00       	call   3a30 <printf>
+     4db:	83 c4 10             	add    $0x10,%esp
+     4de:	66 90                	xchg   %ax,%ax
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     4e0:	83 ec 04             	sub    $0x4,%esp
+     4e3:	6a 0a                	push   $0xa
+     4e5:	68 dc 3e 00 00       	push   $0x3edc
+     4ea:	56                   	push   %esi
+     4eb:	e8 03 34 00 00       	call   38f3 <write>
+     4f0:	83 c4 10             	add    $0x10,%esp
+     4f3:	83 f8 0a             	cmp    $0xa,%eax
+     4f6:	0f 85 d9 00 00 00    	jne    5d5 <writetest+0x145>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     4fc:	83 ec 04             	sub    $0x4,%esp
+     4ff:	6a 0a                	push   $0xa
+     501:	68 e7 3e 00 00       	push   $0x3ee7
+     506:	56                   	push   %esi
+     507:	e8 e7 33 00 00       	call   38f3 <write>
+     50c:	83 c4 10             	add    $0x10,%esp
+     50f:	83 f8 0a             	cmp    $0xa,%eax
+     512:	0f 85 d6 00 00 00    	jne    5ee <writetest+0x15e>
+  for(i = 0; i < 100; i++){
+     518:	83 c3 01             	add    $0x1,%ebx
+     51b:	83 fb 64             	cmp    $0x64,%ebx
+     51e:	75 c0                	jne    4e0 <writetest+0x50>
+  printf(stdout, "writes ok\n");
+     520:	83 ec 08             	sub    $0x8,%esp
+     523:	68 f2 3e 00 00       	push   $0x3ef2
+     528:	ff 35 48 5e 00 00    	push   0x5e48
+     52e:	e8 fd 34 00 00       	call   3a30 <printf>
+  close(fd);
+     533:	89 34 24             	mov    %esi,(%esp)
+     536:	e8 c0 33 00 00       	call   38fb <close>
+  fd = open("small", O_RDONLY);
+     53b:	5b                   	pop    %ebx
+     53c:	5e                   	pop    %esi
+     53d:	6a 00                	push   $0x0
+     53f:	68 9f 3e 00 00       	push   $0x3e9f
+     544:	e8 ca 33 00 00       	call   3913 <open>
+  if(fd >= 0){
+     549:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     54c:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     54e:	85 c0                	test   %eax,%eax
+     550:	0f 88 b1 00 00 00    	js     607 <writetest+0x177>
+    printf(stdout, "open small succeeded ok\n");
+     556:	83 ec 08             	sub    $0x8,%esp
+     559:	68 fd 3e 00 00       	push   $0x3efd
+     55e:	ff 35 48 5e 00 00    	push   0x5e48
+     564:	e8 c7 34 00 00       	call   3a30 <printf>
+  i = read(fd, buf, 2000);
+     569:	83 c4 0c             	add    $0xc,%esp
+     56c:	68 d0 07 00 00       	push   $0x7d0
+     571:	68 80 85 00 00       	push   $0x8580
+     576:	53                   	push   %ebx
+     577:	e8 6f 33 00 00       	call   38eb <read>
+  if(i == 2000){
+     57c:	83 c4 10             	add    $0x10,%esp
+     57f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     584:	0f 85 94 00 00 00    	jne    61e <writetest+0x18e>
+    printf(stdout, "read succeeded ok\n");
+     58a:	83 ec 08             	sub    $0x8,%esp
+     58d:	68 31 3f 00 00       	push   $0x3f31
+     592:	ff 35 48 5e 00 00    	push   0x5e48
+     598:	e8 93 34 00 00       	call   3a30 <printf>
+  close(fd);
+     59d:	89 1c 24             	mov    %ebx,(%esp)
+     5a0:	e8 56 33 00 00       	call   38fb <close>
+  if(unlink("small") < 0){
+     5a5:	c7 04 24 9f 3e 00 00 	movl   $0x3e9f,(%esp)
+     5ac:	e8 72 33 00 00       	call   3923 <unlink>
+     5b1:	83 c4 10             	add    $0x10,%esp
+     5b4:	85 c0                	test   %eax,%eax
+     5b6:	78 7d                	js     635 <writetest+0x1a5>
+  printf(stdout, "small file test ok\n");
+     5b8:	83 ec 08             	sub    $0x8,%esp
+     5bb:	68 59 3f 00 00       	push   $0x3f59
+     5c0:	ff 35 48 5e 00 00    	push   0x5e48
+     5c6:	e8 65 34 00 00       	call   3a30 <printf>
+}
+     5cb:	83 c4 10             	add    $0x10,%esp
+     5ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5d1:	5b                   	pop    %ebx
+     5d2:	5e                   	pop    %esi
+     5d3:	5d                   	pop    %ebp
+     5d4:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5d5:	83 ec 04             	sub    $0x4,%esp
+     5d8:	53                   	push   %ebx
+     5d9:	68 a0 4d 00 00       	push   $0x4da0
+     5de:	ff 35 48 5e 00 00    	push   0x5e48
+     5e4:	e8 47 34 00 00       	call   3a30 <printf>
+      exit();
+     5e9:	e8 e5 32 00 00       	call   38d3 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     5ee:	83 ec 04             	sub    $0x4,%esp
+     5f1:	53                   	push   %ebx
+     5f2:	68 c4 4d 00 00       	push   $0x4dc4
+     5f7:	ff 35 48 5e 00 00    	push   0x5e48
+     5fd:	e8 2e 34 00 00       	call   3a30 <printf>
+      exit();
+     602:	e8 cc 32 00 00       	call   38d3 <exit>
+    printf(stdout, "error: open small failed!\n");
+     607:	51                   	push   %ecx
+     608:	51                   	push   %ecx
+     609:	68 16 3f 00 00       	push   $0x3f16
+     60e:	ff 35 48 5e 00 00    	push   0x5e48
+     614:	e8 17 34 00 00       	call   3a30 <printf>
+    exit();
+     619:	e8 b5 32 00 00       	call   38d3 <exit>
+    printf(stdout, "read failed\n");
+     61e:	52                   	push   %edx
+     61f:	52                   	push   %edx
+     620:	68 5d 42 00 00       	push   $0x425d
+     625:	ff 35 48 5e 00 00    	push   0x5e48
+     62b:	e8 00 34 00 00       	call   3a30 <printf>
+    exit();
+     630:	e8 9e 32 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink small failed\n");
+     635:	50                   	push   %eax
+     636:	50                   	push   %eax
+     637:	68 44 3f 00 00       	push   $0x3f44
+     63c:	ff 35 48 5e 00 00    	push   0x5e48
+     642:	e8 e9 33 00 00       	call   3a30 <printf>
+    exit();
+     647:	e8 87 32 00 00       	call   38d3 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     64c:	50                   	push   %eax
+     64d:	50                   	push   %eax
+     64e:	68 c0 3e 00 00       	push   $0x3ec0
+     653:	ff 35 48 5e 00 00    	push   0x5e48
+     659:	e8 d2 33 00 00       	call   3a30 <printf>
+    exit();
+     65e:	e8 70 32 00 00       	call   38d3 <exit>
+     663:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     66a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000670 <writetest1>:
+{
+     670:	55                   	push   %ebp
+     671:	89 e5                	mov    %esp,%ebp
+     673:	56                   	push   %esi
+     674:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     675:	83 ec 08             	sub    $0x8,%esp
+     678:	68 6d 3f 00 00       	push   $0x3f6d
+     67d:	ff 35 48 5e 00 00    	push   0x5e48
+     683:	e8 a8 33 00 00       	call   3a30 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     688:	58                   	pop    %eax
+     689:	5a                   	pop    %edx
+     68a:	68 02 02 00 00       	push   $0x202
+     68f:	68 e7 3f 00 00       	push   $0x3fe7
+     694:	e8 7a 32 00 00       	call   3913 <open>
+  if(fd < 0){
+     699:	83 c4 10             	add    $0x10,%esp
+     69c:	85 c0                	test   %eax,%eax
+     69e:	0f 88 61 01 00 00    	js     805 <writetest1+0x195>
+     6a4:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     6a6:	31 db                	xor    %ebx,%ebx
+     6a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     6af:	90                   	nop
+    if(write(fd, buf, 512) != 512){
+     6b0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6b3:	89 1d 80 85 00 00    	mov    %ebx,0x8580
+    if(write(fd, buf, 512) != 512){
+     6b9:	68 00 02 00 00       	push   $0x200
+     6be:	68 80 85 00 00       	push   $0x8580
+     6c3:	56                   	push   %esi
+     6c4:	e8 2a 32 00 00       	call   38f3 <write>
+     6c9:	83 c4 10             	add    $0x10,%esp
+     6cc:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6d1:	0f 85 b3 00 00 00    	jne    78a <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6d7:	83 c3 01             	add    $0x1,%ebx
+     6da:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6e0:	75 ce                	jne    6b0 <writetest1+0x40>
+  close(fd);
+     6e2:	83 ec 0c             	sub    $0xc,%esp
+     6e5:	56                   	push   %esi
+     6e6:	e8 10 32 00 00       	call   38fb <close>
+  fd = open("big", O_RDONLY);
+     6eb:	5b                   	pop    %ebx
+     6ec:	5e                   	pop    %esi
+     6ed:	6a 00                	push   $0x0
+     6ef:	68 e7 3f 00 00       	push   $0x3fe7
+     6f4:	e8 1a 32 00 00       	call   3913 <open>
+  if(fd < 0){
+     6f9:	83 c4 10             	add    $0x10,%esp
+  fd = open("big", O_RDONLY);
+     6fc:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+     6fe:	85 c0                	test   %eax,%eax
+     700:	0f 88 e8 00 00 00    	js     7ee <writetest1+0x17e>
+  n = 0;
+     706:	31 f6                	xor    %esi,%esi
+     708:	eb 1d                	jmp    727 <writetest1+0xb7>
+     70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     710:	3d 00 02 00 00       	cmp    $0x200,%eax
+     715:	0f 85 9f 00 00 00    	jne    7ba <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     71b:	a1 80 85 00 00       	mov    0x8580,%eax
+     720:	39 f0                	cmp    %esi,%eax
+     722:	75 7f                	jne    7a3 <writetest1+0x133>
+    n++;
+     724:	83 c6 01             	add    $0x1,%esi
+    i = read(fd, buf, 512);
+     727:	83 ec 04             	sub    $0x4,%esp
+     72a:	68 00 02 00 00       	push   $0x200
+     72f:	68 80 85 00 00       	push   $0x8580
+     734:	53                   	push   %ebx
+     735:	e8 b1 31 00 00       	call   38eb <read>
+    if(i == 0){
+     73a:	83 c4 10             	add    $0x10,%esp
+     73d:	85 c0                	test   %eax,%eax
+     73f:	75 cf                	jne    710 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     741:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
+     747:	0f 84 86 00 00 00    	je     7d3 <writetest1+0x163>
+  close(fd);
+     74d:	83 ec 0c             	sub    $0xc,%esp
+     750:	53                   	push   %ebx
+     751:	e8 a5 31 00 00       	call   38fb <close>
+  if(unlink("big") < 0){
+     756:	c7 04 24 e7 3f 00 00 	movl   $0x3fe7,(%esp)
+     75d:	e8 c1 31 00 00       	call   3923 <unlink>
+     762:	83 c4 10             	add    $0x10,%esp
+     765:	85 c0                	test   %eax,%eax
+     767:	0f 88 af 00 00 00    	js     81c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     76d:	83 ec 08             	sub    $0x8,%esp
+     770:	68 0e 40 00 00       	push   $0x400e
+     775:	ff 35 48 5e 00 00    	push   0x5e48
+     77b:	e8 b0 32 00 00       	call   3a30 <printf>
+}
+     780:	83 c4 10             	add    $0x10,%esp
+     783:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     786:	5b                   	pop    %ebx
+     787:	5e                   	pop    %esi
+     788:	5d                   	pop    %ebp
+     789:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     78a:	83 ec 04             	sub    $0x4,%esp
+     78d:	53                   	push   %ebx
+     78e:	68 97 3f 00 00       	push   $0x3f97
+     793:	ff 35 48 5e 00 00    	push   0x5e48
+     799:	e8 92 32 00 00       	call   3a30 <printf>
+      exit();
+     79e:	e8 30 31 00 00       	call   38d3 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     7a3:	50                   	push   %eax
+     7a4:	56                   	push   %esi
+     7a5:	68 e8 4d 00 00       	push   $0x4de8
+     7aa:	ff 35 48 5e 00 00    	push   0x5e48
+     7b0:	e8 7b 32 00 00       	call   3a30 <printf>
+      exit();
+     7b5:	e8 19 31 00 00       	call   38d3 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7ba:	83 ec 04             	sub    $0x4,%esp
+     7bd:	50                   	push   %eax
+     7be:	68 eb 3f 00 00       	push   $0x3feb
+     7c3:	ff 35 48 5e 00 00    	push   0x5e48
+     7c9:	e8 62 32 00 00       	call   3a30 <printf>
+      exit();
+     7ce:	e8 00 31 00 00       	call   38d3 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7d3:	52                   	push   %edx
+     7d4:	68 8b 00 00 00       	push   $0x8b
+     7d9:	68 ce 3f 00 00       	push   $0x3fce
+     7de:	ff 35 48 5e 00 00    	push   0x5e48
+     7e4:	e8 47 32 00 00       	call   3a30 <printf>
+        exit();
+     7e9:	e8 e5 30 00 00       	call   38d3 <exit>
+    printf(stdout, "error: open big failed!\n");
+     7ee:	51                   	push   %ecx
+     7ef:	51                   	push   %ecx
+     7f0:	68 b5 3f 00 00       	push   $0x3fb5
+     7f5:	ff 35 48 5e 00 00    	push   0x5e48
+     7fb:	e8 30 32 00 00       	call   3a30 <printf>
+    exit();
+     800:	e8 ce 30 00 00       	call   38d3 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     805:	50                   	push   %eax
+     806:	50                   	push   %eax
+     807:	68 7d 3f 00 00       	push   $0x3f7d
+     80c:	ff 35 48 5e 00 00    	push   0x5e48
+     812:	e8 19 32 00 00       	call   3a30 <printf>
+    exit();
+     817:	e8 b7 30 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink big failed\n");
+     81c:	50                   	push   %eax
+     81d:	50                   	push   %eax
+     81e:	68 fb 3f 00 00       	push   $0x3ffb
+     823:	ff 35 48 5e 00 00    	push   0x5e48
+     829:	e8 02 32 00 00       	call   3a30 <printf>
+    exit();
+     82e:	e8 a0 30 00 00       	call   38d3 <exit>
+     833:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000840 <createtest>:
+{
+     840:	55                   	push   %ebp
+     841:	89 e5                	mov    %esp,%ebp
+     843:	53                   	push   %ebx
+  name[2] = '\0';
+     844:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     849:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     84c:	68 08 4e 00 00       	push   $0x4e08
+     851:	ff 35 48 5e 00 00    	push   0x5e48
+     857:	e8 d4 31 00 00       	call   3a30 <printf>
+  name[0] = 'a';
+     85c:	c6 05 70 85 00 00 61 	movb   $0x61,0x8570
+  name[2] = '\0';
+     863:	83 c4 10             	add    $0x10,%esp
+     866:	c6 05 72 85 00 00 00 	movb   $0x0,0x8572
+  for(i = 0; i < 52; i++){
+     86d:	8d 76 00             	lea    0x0(%esi),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     870:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     873:	88 1d 71 85 00 00    	mov    %bl,0x8571
+  for(i = 0; i < 52; i++){
+     879:	83 c3 01             	add    $0x1,%ebx
+    fd = open(name, O_CREATE|O_RDWR);
+     87c:	68 02 02 00 00       	push   $0x202
+     881:	68 70 85 00 00       	push   $0x8570
+     886:	e8 88 30 00 00       	call   3913 <open>
+    close(fd);
+     88b:	89 04 24             	mov    %eax,(%esp)
+     88e:	e8 68 30 00 00       	call   38fb <close>
+  for(i = 0; i < 52; i++){
+     893:	83 c4 10             	add    $0x10,%esp
+     896:	80 fb 64             	cmp    $0x64,%bl
+     899:	75 d5                	jne    870 <createtest+0x30>
+  name[0] = 'a';
+     89b:	c6 05 70 85 00 00 61 	movb   $0x61,0x8570
+  name[2] = '\0';
+     8a2:	bb 30 00 00 00       	mov    $0x30,%ebx
+     8a7:	c6 05 72 85 00 00 00 	movb   $0x0,0x8572
+  for(i = 0; i < 52; i++){
+     8ae:	66 90                	xchg   %ax,%ax
+    unlink(name);
+     8b0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8b3:	88 1d 71 85 00 00    	mov    %bl,0x8571
+  for(i = 0; i < 52; i++){
+     8b9:	83 c3 01             	add    $0x1,%ebx
+    unlink(name);
+     8bc:	68 70 85 00 00       	push   $0x8570
+     8c1:	e8 5d 30 00 00       	call   3923 <unlink>
+  for(i = 0; i < 52; i++){
+     8c6:	83 c4 10             	add    $0x10,%esp
+     8c9:	80 fb 64             	cmp    $0x64,%bl
+     8cc:	75 e2                	jne    8b0 <createtest+0x70>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8ce:	83 ec 08             	sub    $0x8,%esp
+     8d1:	68 30 4e 00 00       	push   $0x4e30
+     8d6:	ff 35 48 5e 00 00    	push   0x5e48
+     8dc:	e8 4f 31 00 00       	call   3a30 <printf>
+}
+     8e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     8e4:	83 c4 10             	add    $0x10,%esp
+     8e7:	c9                   	leave  
+     8e8:	c3                   	ret    
+     8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008f0 <dirtest>:
+{
+     8f0:	55                   	push   %ebp
+     8f1:	89 e5                	mov    %esp,%ebp
+     8f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     8f6:	68 1c 40 00 00       	push   $0x401c
+     8fb:	ff 35 48 5e 00 00    	push   0x5e48
+     901:	e8 2a 31 00 00       	call   3a30 <printf>
+  if(mkdir("dir0") < 0){
+     906:	c7 04 24 28 40 00 00 	movl   $0x4028,(%esp)
+     90d:	e8 29 30 00 00       	call   393b <mkdir>
+     912:	83 c4 10             	add    $0x10,%esp
+     915:	85 c0                	test   %eax,%eax
+     917:	78 58                	js     971 <dirtest+0x81>
+  if(chdir("dir0") < 0){
+     919:	83 ec 0c             	sub    $0xc,%esp
+     91c:	68 28 40 00 00       	push   $0x4028
+     921:	e8 1d 30 00 00       	call   3943 <chdir>
+     926:	83 c4 10             	add    $0x10,%esp
+     929:	85 c0                	test   %eax,%eax
+     92b:	0f 88 85 00 00 00    	js     9b6 <dirtest+0xc6>
+  if(chdir("..") < 0){
+     931:	83 ec 0c             	sub    $0xc,%esp
+     934:	68 cd 45 00 00       	push   $0x45cd
+     939:	e8 05 30 00 00       	call   3943 <chdir>
+     93e:	83 c4 10             	add    $0x10,%esp
+     941:	85 c0                	test   %eax,%eax
+     943:	78 5a                	js     99f <dirtest+0xaf>
+  if(unlink("dir0") < 0){
+     945:	83 ec 0c             	sub    $0xc,%esp
+     948:	68 28 40 00 00       	push   $0x4028
+     94d:	e8 d1 2f 00 00       	call   3923 <unlink>
+     952:	83 c4 10             	add    $0x10,%esp
+     955:	85 c0                	test   %eax,%eax
+     957:	78 2f                	js     988 <dirtest+0x98>
+  printf(stdout, "mkdir test ok\n");
+     959:	83 ec 08             	sub    $0x8,%esp
+     95c:	68 65 40 00 00       	push   $0x4065
+     961:	ff 35 48 5e 00 00    	push   0x5e48
+     967:	e8 c4 30 00 00       	call   3a30 <printf>
+}
+     96c:	83 c4 10             	add    $0x10,%esp
+     96f:	c9                   	leave  
+     970:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     971:	50                   	push   %eax
+     972:	50                   	push   %eax
+     973:	68 58 3d 00 00       	push   $0x3d58
+     978:	ff 35 48 5e 00 00    	push   0x5e48
+     97e:	e8 ad 30 00 00       	call   3a30 <printf>
+    exit();
+     983:	e8 4b 2f 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     988:	50                   	push   %eax
+     989:	50                   	push   %eax
+     98a:	68 51 40 00 00       	push   $0x4051
+     98f:	ff 35 48 5e 00 00    	push   0x5e48
+     995:	e8 96 30 00 00       	call   3a30 <printf>
+    exit();
+     99a:	e8 34 2f 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir .. failed\n");
+     99f:	52                   	push   %edx
+     9a0:	52                   	push   %edx
+     9a1:	68 40 40 00 00       	push   $0x4040
+     9a6:	ff 35 48 5e 00 00    	push   0x5e48
+     9ac:	e8 7f 30 00 00       	call   3a30 <printf>
+    exit();
+     9b1:	e8 1d 2f 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9b6:	51                   	push   %ecx
+     9b7:	51                   	push   %ecx
+     9b8:	68 2d 40 00 00       	push   $0x402d
+     9bd:	ff 35 48 5e 00 00    	push   0x5e48
+     9c3:	e8 68 30 00 00       	call   3a30 <printf>
+    exit();
+     9c8:	e8 06 2f 00 00       	call   38d3 <exit>
+     9cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009d0 <exectest>:
+{
+     9d0:	55                   	push   %ebp
+     9d1:	89 e5                	mov    %esp,%ebp
+     9d3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     9d6:	68 74 40 00 00       	push   $0x4074
+     9db:	ff 35 48 5e 00 00    	push   0x5e48
+     9e1:	e8 4a 30 00 00       	call   3a30 <printf>
+  if(exec("echo", echoargv) < 0){
+     9e6:	5a                   	pop    %edx
+     9e7:	59                   	pop    %ecx
+     9e8:	68 4c 5e 00 00       	push   $0x5e4c
+     9ed:	68 3d 3e 00 00       	push   $0x3e3d
+     9f2:	e8 14 2f 00 00       	call   390b <exec>
+     9f7:	83 c4 10             	add    $0x10,%esp
+     9fa:	85 c0                	test   %eax,%eax
+     9fc:	78 02                	js     a00 <exectest+0x30>
+}
+     9fe:	c9                   	leave  
+     9ff:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     a00:	50                   	push   %eax
+     a01:	50                   	push   %eax
+     a02:	68 7f 40 00 00       	push   $0x407f
+     a07:	ff 35 48 5e 00 00    	push   0x5e48
+     a0d:	e8 1e 30 00 00       	call   3a30 <printf>
+    exit();
+     a12:	e8 bc 2e 00 00       	call   38d3 <exit>
+     a17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a1e:	66 90                	xchg   %ax,%ax
+
+00000a20 <pipe1>:
+{
+     a20:	55                   	push   %ebp
+     a21:	89 e5                	mov    %esp,%ebp
+     a23:	57                   	push   %edi
+     a24:	56                   	push   %esi
+  if(pipe(fds) != 0){
+     a25:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a28:	53                   	push   %ebx
+     a29:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a2c:	50                   	push   %eax
+     a2d:	e8 b1 2e 00 00       	call   38e3 <pipe>
+     a32:	83 c4 10             	add    $0x10,%esp
+     a35:	85 c0                	test   %eax,%eax
+     a37:	0f 85 34 01 00 00    	jne    b71 <pipe1+0x151>
+  pid = fork();
+     a3d:	e8 89 2e 00 00       	call   38cb <fork>
+  if(pid == 0){
+     a42:	85 c0                	test   %eax,%eax
+     a44:	0f 84 85 00 00 00    	je     acf <pipe1+0xaf>
+  } else if(pid > 0){
+     a4a:	0f 8e 34 01 00 00    	jle    b84 <pipe1+0x164>
+    close(fds[1]);
+     a50:	83 ec 0c             	sub    $0xc,%esp
+     a53:	ff 75 e4             	push   -0x1c(%ebp)
+  seq = 0;
+     a56:	31 db                	xor    %ebx,%ebx
+    cc = 1;
+     a58:	be 01 00 00 00       	mov    $0x1,%esi
+    close(fds[1]);
+     a5d:	e8 99 2e 00 00       	call   38fb <close>
+    total = 0;
+     a62:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     a69:	83 c4 10             	add    $0x10,%esp
+     a6c:	83 ec 04             	sub    $0x4,%esp
+     a6f:	56                   	push   %esi
+     a70:	68 80 85 00 00       	push   $0x8580
+     a75:	ff 75 e0             	push   -0x20(%ebp)
+     a78:	e8 6e 2e 00 00       	call   38eb <read>
+     a7d:	83 c4 10             	add    $0x10,%esp
+     a80:	89 c7                	mov    %eax,%edi
+     a82:	85 c0                	test   %eax,%eax
+     a84:	0f 8e a3 00 00 00    	jle    b2d <pipe1+0x10d>
+     a8a:	8d 0c 1f             	lea    (%edi,%ebx,1),%ecx
+      for(i = 0; i < n; i++){
+     a8d:	31 c0                	xor    %eax,%eax
+     a8f:	90                   	nop
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     a90:	89 da                	mov    %ebx,%edx
+     a92:	83 c3 01             	add    $0x1,%ebx
+     a95:	38 90 80 85 00 00    	cmp    %dl,0x8580(%eax)
+     a9b:	75 18                	jne    ab5 <pipe1+0x95>
+      for(i = 0; i < n; i++){
+     a9d:	83 c0 01             	add    $0x1,%eax
+     aa0:	39 d9                	cmp    %ebx,%ecx
+     aa2:	75 ec                	jne    a90 <pipe1+0x70>
+      cc = cc * 2;
+     aa4:	01 f6                	add    %esi,%esi
+     aa6:	b8 00 20 00 00       	mov    $0x2000,%eax
+      total += n;
+     aab:	01 7d d4             	add    %edi,-0x2c(%ebp)
+     aae:	39 c6                	cmp    %eax,%esi
+     ab0:	0f 4f f0             	cmovg  %eax,%esi
+     ab3:	eb b7                	jmp    a6c <pipe1+0x4c>
+          printf(1, "pipe1 oops 2\n");
+     ab5:	83 ec 08             	sub    $0x8,%esp
+     ab8:	68 ae 40 00 00       	push   $0x40ae
+     abd:	6a 01                	push   $0x1
+     abf:	e8 6c 2f 00 00       	call   3a30 <printf>
+     ac4:	83 c4 10             	add    $0x10,%esp
+}
+     ac7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     aca:	5b                   	pop    %ebx
+     acb:	5e                   	pop    %esi
+     acc:	5f                   	pop    %edi
+     acd:	5d                   	pop    %ebp
+     ace:	c3                   	ret    
+    close(fds[0]);
+     acf:	83 ec 0c             	sub    $0xc,%esp
+     ad2:	ff 75 e0             	push   -0x20(%ebp)
+  seq = 0;
+     ad5:	31 db                	xor    %ebx,%ebx
+    close(fds[0]);
+     ad7:	e8 1f 2e 00 00       	call   38fb <close>
+     adc:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 1033; i++)
+     adf:	31 c0                	xor    %eax,%eax
+     ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        buf[i] = seq++;
+     ae8:	8d 14 18             	lea    (%eax,%ebx,1),%edx
+      for(i = 0; i < 1033; i++)
+     aeb:	83 c0 01             	add    $0x1,%eax
+        buf[i] = seq++;
+     aee:	88 90 7f 85 00 00    	mov    %dl,0x857f(%eax)
+      for(i = 0; i < 1033; i++)
+     af4:	3d 09 04 00 00       	cmp    $0x409,%eax
+     af9:	75 ed                	jne    ae8 <pipe1+0xc8>
+      if(write(fds[1], buf, 1033) != 1033){
+     afb:	83 ec 04             	sub    $0x4,%esp
+        buf[i] = seq++;
+     afe:	81 c3 09 04 00 00    	add    $0x409,%ebx
+      if(write(fds[1], buf, 1033) != 1033){
+     b04:	68 09 04 00 00       	push   $0x409
+     b09:	68 80 85 00 00       	push   $0x8580
+     b0e:	ff 75 e4             	push   -0x1c(%ebp)
+     b11:	e8 dd 2d 00 00       	call   38f3 <write>
+     b16:	83 c4 10             	add    $0x10,%esp
+     b19:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b1e:	75 77                	jne    b97 <pipe1+0x177>
+    for(n = 0; n < 5; n++){
+     b20:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b26:	75 b7                	jne    adf <pipe1+0xbf>
+    exit();
+     b28:	e8 a6 2d 00 00       	call   38d3 <exit>
+    if(total != 5 * 1033){
+     b2d:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b34:	75 26                	jne    b5c <pipe1+0x13c>
+    close(fds[0]);
+     b36:	83 ec 0c             	sub    $0xc,%esp
+     b39:	ff 75 e0             	push   -0x20(%ebp)
+     b3c:	e8 ba 2d 00 00       	call   38fb <close>
+    wait();
+     b41:	e8 95 2d 00 00       	call   38db <wait>
+  printf(1, "pipe1 ok\n");
+     b46:	5a                   	pop    %edx
+     b47:	59                   	pop    %ecx
+     b48:	68 d3 40 00 00       	push   $0x40d3
+     b4d:	6a 01                	push   $0x1
+     b4f:	e8 dc 2e 00 00       	call   3a30 <printf>
+     b54:	83 c4 10             	add    $0x10,%esp
+     b57:	e9 6b ff ff ff       	jmp    ac7 <pipe1+0xa7>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b5c:	53                   	push   %ebx
+     b5d:	ff 75 d4             	push   -0x2c(%ebp)
+     b60:	68 bc 40 00 00       	push   $0x40bc
+     b65:	6a 01                	push   $0x1
+     b67:	e8 c4 2e 00 00       	call   3a30 <printf>
+      exit();
+     b6c:	e8 62 2d 00 00       	call   38d3 <exit>
+    printf(1, "pipe() failed\n");
+     b71:	57                   	push   %edi
+     b72:	57                   	push   %edi
+     b73:	68 91 40 00 00       	push   $0x4091
+     b78:	6a 01                	push   $0x1
+     b7a:	e8 b1 2e 00 00       	call   3a30 <printf>
+    exit();
+     b7f:	e8 4f 2d 00 00       	call   38d3 <exit>
+    printf(1, "fork() failed\n");
+     b84:	50                   	push   %eax
+     b85:	50                   	push   %eax
+     b86:	68 dd 40 00 00       	push   $0x40dd
+     b8b:	6a 01                	push   $0x1
+     b8d:	e8 9e 2e 00 00       	call   3a30 <printf>
+    exit();
+     b92:	e8 3c 2d 00 00       	call   38d3 <exit>
+        printf(1, "pipe1 oops 1\n");
+     b97:	56                   	push   %esi
+     b98:	56                   	push   %esi
+     b99:	68 a0 40 00 00       	push   $0x40a0
+     b9e:	6a 01                	push   $0x1
+     ba0:	e8 8b 2e 00 00       	call   3a30 <printf>
+        exit();
+     ba5:	e8 29 2d 00 00       	call   38d3 <exit>
+     baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000bb0 <preempt>:
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	57                   	push   %edi
+     bb4:	56                   	push   %esi
+     bb5:	53                   	push   %ebx
+     bb6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     bb9:	68 ec 40 00 00       	push   $0x40ec
+     bbe:	6a 01                	push   $0x1
+     bc0:	e8 6b 2e 00 00       	call   3a30 <printf>
+  pid1 = fork();
+     bc5:	e8 01 2d 00 00       	call   38cb <fork>
+  if(pid1 == 0)
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	85 c0                	test   %eax,%eax
+     bcf:	75 07                	jne    bd8 <preempt+0x28>
+    for(;;)
+     bd1:	eb fe                	jmp    bd1 <preempt+0x21>
+     bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     bd7:	90                   	nop
+     bd8:	89 c3                	mov    %eax,%ebx
+  pid2 = fork();
+     bda:	e8 ec 2c 00 00       	call   38cb <fork>
+     bdf:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     be1:	85 c0                	test   %eax,%eax
+     be3:	75 0b                	jne    bf0 <preempt+0x40>
+    for(;;)
+     be5:	eb fe                	jmp    be5 <preempt+0x35>
+     be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bee:	66 90                	xchg   %ax,%ax
+  pipe(pfds);
+     bf0:	83 ec 0c             	sub    $0xc,%esp
+     bf3:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     bf6:	50                   	push   %eax
+     bf7:	e8 e7 2c 00 00       	call   38e3 <pipe>
+  pid3 = fork();
+     bfc:	e8 ca 2c 00 00       	call   38cb <fork>
+  if(pid3 == 0){
+     c01:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     c04:	89 c7                	mov    %eax,%edi
+  if(pid3 == 0){
+     c06:	85 c0                	test   %eax,%eax
+     c08:	75 3e                	jne    c48 <preempt+0x98>
+    close(pfds[0]);
+     c0a:	83 ec 0c             	sub    $0xc,%esp
+     c0d:	ff 75 e0             	push   -0x20(%ebp)
+     c10:	e8 e6 2c 00 00       	call   38fb <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c15:	83 c4 0c             	add    $0xc,%esp
+     c18:	6a 01                	push   $0x1
+     c1a:	68 b1 46 00 00       	push   $0x46b1
+     c1f:	ff 75 e4             	push   -0x1c(%ebp)
+     c22:	e8 cc 2c 00 00       	call   38f3 <write>
+     c27:	83 c4 10             	add    $0x10,%esp
+     c2a:	83 f8 01             	cmp    $0x1,%eax
+     c2d:	0f 85 b8 00 00 00    	jne    ceb <preempt+0x13b>
+    close(pfds[1]);
+     c33:	83 ec 0c             	sub    $0xc,%esp
+     c36:	ff 75 e4             	push   -0x1c(%ebp)
+     c39:	e8 bd 2c 00 00       	call   38fb <close>
+     c3e:	83 c4 10             	add    $0x10,%esp
+    for(;;)
+     c41:	eb fe                	jmp    c41 <preempt+0x91>
+     c43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c47:	90                   	nop
+  close(pfds[1]);
+     c48:	83 ec 0c             	sub    $0xc,%esp
+     c4b:	ff 75 e4             	push   -0x1c(%ebp)
+     c4e:	e8 a8 2c 00 00       	call   38fb <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c53:	83 c4 0c             	add    $0xc,%esp
+     c56:	68 00 20 00 00       	push   $0x2000
+     c5b:	68 80 85 00 00       	push   $0x8580
+     c60:	ff 75 e0             	push   -0x20(%ebp)
+     c63:	e8 83 2c 00 00       	call   38eb <read>
+     c68:	83 c4 10             	add    $0x10,%esp
+     c6b:	83 f8 01             	cmp    $0x1,%eax
+     c6e:	75 67                	jne    cd7 <preempt+0x127>
+  close(pfds[0]);
+     c70:	83 ec 0c             	sub    $0xc,%esp
+     c73:	ff 75 e0             	push   -0x20(%ebp)
+     c76:	e8 80 2c 00 00       	call   38fb <close>
+  printf(1, "kill... ");
+     c7b:	58                   	pop    %eax
+     c7c:	5a                   	pop    %edx
+     c7d:	68 1d 41 00 00       	push   $0x411d
+     c82:	6a 01                	push   $0x1
+     c84:	e8 a7 2d 00 00       	call   3a30 <printf>
+  kill(pid1);
+     c89:	89 1c 24             	mov    %ebx,(%esp)
+     c8c:	e8 72 2c 00 00       	call   3903 <kill>
+  kill(pid2);
+     c91:	89 34 24             	mov    %esi,(%esp)
+     c94:	e8 6a 2c 00 00       	call   3903 <kill>
+  kill(pid3);
+     c99:	89 3c 24             	mov    %edi,(%esp)
+     c9c:	e8 62 2c 00 00       	call   3903 <kill>
+  printf(1, "wait... ");
+     ca1:	59                   	pop    %ecx
+     ca2:	5b                   	pop    %ebx
+     ca3:	68 26 41 00 00       	push   $0x4126
+     ca8:	6a 01                	push   $0x1
+     caa:	e8 81 2d 00 00       	call   3a30 <printf>
+  wait();
+     caf:	e8 27 2c 00 00       	call   38db <wait>
+  wait();
+     cb4:	e8 22 2c 00 00       	call   38db <wait>
+  wait();
+     cb9:	e8 1d 2c 00 00       	call   38db <wait>
+  printf(1, "preempt ok\n");
+     cbe:	5e                   	pop    %esi
+     cbf:	5f                   	pop    %edi
+     cc0:	68 2f 41 00 00       	push   $0x412f
+     cc5:	6a 01                	push   $0x1
+     cc7:	e8 64 2d 00 00       	call   3a30 <printf>
+     ccc:	83 c4 10             	add    $0x10,%esp
+}
+     ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cd2:	5b                   	pop    %ebx
+     cd3:	5e                   	pop    %esi
+     cd4:	5f                   	pop    %edi
+     cd5:	5d                   	pop    %ebp
+     cd6:	c3                   	ret    
+    printf(1, "preempt read error");
+     cd7:	83 ec 08             	sub    $0x8,%esp
+     cda:	68 0a 41 00 00       	push   $0x410a
+     cdf:	6a 01                	push   $0x1
+     ce1:	e8 4a 2d 00 00       	call   3a30 <printf>
+     ce6:	83 c4 10             	add    $0x10,%esp
+     ce9:	eb e4                	jmp    ccf <preempt+0x11f>
+      printf(1, "preempt write error");
+     ceb:	83 ec 08             	sub    $0x8,%esp
+     cee:	68 f6 40 00 00       	push   $0x40f6
+     cf3:	6a 01                	push   $0x1
+     cf5:	e8 36 2d 00 00       	call   3a30 <printf>
+     cfa:	83 c4 10             	add    $0x10,%esp
+     cfd:	e9 31 ff ff ff       	jmp    c33 <preempt+0x83>
+     d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000d10 <exitwait>:
+{
+     d10:	55                   	push   %ebp
+     d11:	89 e5                	mov    %esp,%ebp
+     d13:	56                   	push   %esi
+     d14:	be 64 00 00 00       	mov    $0x64,%esi
+     d19:	53                   	push   %ebx
+     d1a:	eb 14                	jmp    d30 <exitwait+0x20>
+     d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid){
+     d20:	74 68                	je     d8a <exitwait+0x7a>
+      if(wait() != pid){
+     d22:	e8 b4 2b 00 00       	call   38db <wait>
+     d27:	39 d8                	cmp    %ebx,%eax
+     d29:	75 2d                	jne    d58 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d2b:	83 ee 01             	sub    $0x1,%esi
+     d2e:	74 41                	je     d71 <exitwait+0x61>
+    pid = fork();
+     d30:	e8 96 2b 00 00       	call   38cb <fork>
+     d35:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d37:	85 c0                	test   %eax,%eax
+     d39:	79 e5                	jns    d20 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d3b:	83 ec 08             	sub    $0x8,%esp
+     d3e:	68 99 4c 00 00       	push   $0x4c99
+     d43:	6a 01                	push   $0x1
+     d45:	e8 e6 2c 00 00       	call   3a30 <printf>
+      return;
+     d4a:	83 c4 10             	add    $0x10,%esp
+}
+     d4d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d50:	5b                   	pop    %ebx
+     d51:	5e                   	pop    %esi
+     d52:	5d                   	pop    %ebp
+     d53:	c3                   	ret    
+     d54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     d58:	83 ec 08             	sub    $0x8,%esp
+     d5b:	68 3b 41 00 00       	push   $0x413b
+     d60:	6a 01                	push   $0x1
+     d62:	e8 c9 2c 00 00       	call   3a30 <printf>
+        return;
+     d67:	83 c4 10             	add    $0x10,%esp
+}
+     d6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d6d:	5b                   	pop    %ebx
+     d6e:	5e                   	pop    %esi
+     d6f:	5d                   	pop    %ebp
+     d70:	c3                   	ret    
+  printf(1, "exitwait ok\n");
+     d71:	83 ec 08             	sub    $0x8,%esp
+     d74:	68 4b 41 00 00       	push   $0x414b
+     d79:	6a 01                	push   $0x1
+     d7b:	e8 b0 2c 00 00       	call   3a30 <printf>
+     d80:	83 c4 10             	add    $0x10,%esp
+}
+     d83:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d86:	5b                   	pop    %ebx
+     d87:	5e                   	pop    %esi
+     d88:	5d                   	pop    %ebp
+     d89:	c3                   	ret    
+      exit();
+     d8a:	e8 44 2b 00 00       	call   38d3 <exit>
+     d8f:	90                   	nop
+
+00000d90 <mem>:
+{
+     d90:	55                   	push   %ebp
+     d91:	89 e5                	mov    %esp,%ebp
+     d93:	56                   	push   %esi
+     d94:	31 f6                	xor    %esi,%esi
+     d96:	53                   	push   %ebx
+  printf(1, "mem test\n");
+     d97:	83 ec 08             	sub    $0x8,%esp
+     d9a:	68 58 41 00 00       	push   $0x4158
+     d9f:	6a 01                	push   $0x1
+     da1:	e8 8a 2c 00 00       	call   3a30 <printf>
+  ppid = getpid();
+     da6:	e8 a8 2b 00 00       	call   3953 <getpid>
+     dab:	89 c3                	mov    %eax,%ebx
+  if((pid = fork()) == 0){
+     dad:	e8 19 2b 00 00       	call   38cb <fork>
+     db2:	83 c4 10             	add    $0x10,%esp
+     db5:	85 c0                	test   %eax,%eax
+     db7:	74 0b                	je     dc4 <mem+0x34>
+     db9:	e9 8a 00 00 00       	jmp    e48 <mem+0xb8>
+     dbe:	66 90                	xchg   %ax,%ax
+      *(char**)m2 = m1;
+     dc0:	89 30                	mov    %esi,(%eax)
+     dc2:	89 c6                	mov    %eax,%esi
+    while((m2 = malloc(10001)) != 0){
+     dc4:	83 ec 0c             	sub    $0xc,%esp
+     dc7:	68 11 27 00 00       	push   $0x2711
+     dcc:	e8 8f 2e 00 00       	call   3c60 <malloc>
+     dd1:	83 c4 10             	add    $0x10,%esp
+     dd4:	85 c0                	test   %eax,%eax
+     dd6:	75 e8                	jne    dc0 <mem+0x30>
+    while(m1){
+     dd8:	85 f6                	test   %esi,%esi
+     dda:	74 18                	je     df4 <mem+0x64>
+     ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     de0:	89 f0                	mov    %esi,%eax
+      free(m1);
+     de2:	83 ec 0c             	sub    $0xc,%esp
+      m2 = *(char**)m1;
+     de5:	8b 36                	mov    (%esi),%esi
+      free(m1);
+     de7:	50                   	push   %eax
+     de8:	e8 e3 2d 00 00       	call   3bd0 <free>
+    while(m1){
+     ded:	83 c4 10             	add    $0x10,%esp
+     df0:	85 f6                	test   %esi,%esi
+     df2:	75 ec                	jne    de0 <mem+0x50>
+    m1 = malloc(1024*20);
+     df4:	83 ec 0c             	sub    $0xc,%esp
+     df7:	68 00 50 00 00       	push   $0x5000
+     dfc:	e8 5f 2e 00 00       	call   3c60 <malloc>
+    if(m1 == 0){
+     e01:	83 c4 10             	add    $0x10,%esp
+     e04:	85 c0                	test   %eax,%eax
+     e06:	74 20                	je     e28 <mem+0x98>
+    free(m1);
+     e08:	83 ec 0c             	sub    $0xc,%esp
+     e0b:	50                   	push   %eax
+     e0c:	e8 bf 2d 00 00       	call   3bd0 <free>
+    printf(1, "mem ok\n");
+     e11:	58                   	pop    %eax
+     e12:	5a                   	pop    %edx
+     e13:	68 7c 41 00 00       	push   $0x417c
+     e18:	6a 01                	push   $0x1
+     e1a:	e8 11 2c 00 00       	call   3a30 <printf>
+    exit();
+     e1f:	e8 af 2a 00 00       	call   38d3 <exit>
+     e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e28:	83 ec 08             	sub    $0x8,%esp
+     e2b:	68 62 41 00 00       	push   $0x4162
+     e30:	6a 01                	push   $0x1
+     e32:	e8 f9 2b 00 00       	call   3a30 <printf>
+      kill(ppid);
+     e37:	89 1c 24             	mov    %ebx,(%esp)
+     e3a:	e8 c4 2a 00 00       	call   3903 <kill>
+      exit();
+     e3f:	e8 8f 2a 00 00       	call   38d3 <exit>
+     e44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     e48:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     e4b:	5b                   	pop    %ebx
+     e4c:	5e                   	pop    %esi
+     e4d:	5d                   	pop    %ebp
+    wait();
+     e4e:	e9 88 2a 00 00       	jmp    38db <wait>
+     e53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000e60 <sharedfd>:
+{
+     e60:	55                   	push   %ebp
+     e61:	89 e5                	mov    %esp,%ebp
+     e63:	57                   	push   %edi
+     e64:	56                   	push   %esi
+     e65:	53                   	push   %ebx
+     e66:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     e69:	68 84 41 00 00       	push   $0x4184
+     e6e:	6a 01                	push   $0x1
+     e70:	e8 bb 2b 00 00       	call   3a30 <printf>
+  unlink("sharedfd");
+     e75:	c7 04 24 93 41 00 00 	movl   $0x4193,(%esp)
+     e7c:	e8 a2 2a 00 00       	call   3923 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e81:	5b                   	pop    %ebx
+     e82:	5e                   	pop    %esi
+     e83:	68 02 02 00 00       	push   $0x202
+     e88:	68 93 41 00 00       	push   $0x4193
+     e8d:	e8 81 2a 00 00       	call   3913 <open>
+  if(fd < 0){
+     e92:	83 c4 10             	add    $0x10,%esp
+     e95:	85 c0                	test   %eax,%eax
+     e97:	0f 88 2a 01 00 00    	js     fc7 <sharedfd+0x167>
+     e9d:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e9f:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ea2:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     ea7:	e8 1f 2a 00 00       	call   38cb <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     eac:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     eaf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     eb2:	19 c0                	sbb    %eax,%eax
+     eb4:	83 ec 04             	sub    $0x4,%esp
+     eb7:	83 e0 f3             	and    $0xfffffff3,%eax
+     eba:	6a 0a                	push   $0xa
+     ebc:	83 c0 70             	add    $0x70,%eax
+     ebf:	50                   	push   %eax
+     ec0:	56                   	push   %esi
+     ec1:	e8 7a 28 00 00       	call   3740 <memset>
+     ec6:	83 c4 10             	add    $0x10,%esp
+     ec9:	eb 0a                	jmp    ed5 <sharedfd+0x75>
+     ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ecf:	90                   	nop
+  for(i = 0; i < 1000; i++){
+     ed0:	83 eb 01             	sub    $0x1,%ebx
+     ed3:	74 26                	je     efb <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     ed5:	83 ec 04             	sub    $0x4,%esp
+     ed8:	6a 0a                	push   $0xa
+     eda:	56                   	push   %esi
+     edb:	57                   	push   %edi
+     edc:	e8 12 2a 00 00       	call   38f3 <write>
+     ee1:	83 c4 10             	add    $0x10,%esp
+     ee4:	83 f8 0a             	cmp    $0xa,%eax
+     ee7:	74 e7                	je     ed0 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     ee9:	83 ec 08             	sub    $0x8,%esp
+     eec:	68 84 4e 00 00       	push   $0x4e84
+     ef1:	6a 01                	push   $0x1
+     ef3:	e8 38 2b 00 00       	call   3a30 <printf>
+      break;
+     ef8:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     efb:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     efe:	85 c9                	test   %ecx,%ecx
+     f00:	0f 84 f5 00 00 00    	je     ffb <sharedfd+0x19b>
+    wait();
+     f06:	e8 d0 29 00 00       	call   38db <wait>
+  close(fd);
+     f0b:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     f0e:	31 db                	xor    %ebx,%ebx
+  close(fd);
+     f10:	57                   	push   %edi
+     f11:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f14:	e8 e2 29 00 00       	call   38fb <close>
+  fd = open("sharedfd", 0);
+     f19:	58                   	pop    %eax
+     f1a:	5a                   	pop    %edx
+     f1b:	6a 00                	push   $0x0
+     f1d:	68 93 41 00 00       	push   $0x4193
+     f22:	e8 ec 29 00 00       	call   3913 <open>
+  if(fd < 0){
+     f27:	83 c4 10             	add    $0x10,%esp
+  nc = np = 0;
+     f2a:	31 d2                	xor    %edx,%edx
+  fd = open("sharedfd", 0);
+     f2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f2f:	85 c0                	test   %eax,%eax
+     f31:	0f 88 aa 00 00 00    	js     fe1 <sharedfd+0x181>
+     f37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f3e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f40:	83 ec 04             	sub    $0x4,%esp
+     f43:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f46:	6a 0a                	push   $0xa
+     f48:	56                   	push   %esi
+     f49:	ff 75 d0             	push   -0x30(%ebp)
+     f4c:	e8 9a 29 00 00       	call   38eb <read>
+     f51:	83 c4 10             	add    $0x10,%esp
+     f54:	85 c0                	test   %eax,%eax
+     f56:	7e 28                	jle    f80 <sharedfd+0x120>
+     f58:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f5b:	89 f0                	mov    %esi,%eax
+     f5d:	eb 13                	jmp    f72 <sharedfd+0x112>
+     f5f:	90                   	nop
+        np++;
+     f60:	80 f9 70             	cmp    $0x70,%cl
+     f63:	0f 94 c1             	sete   %cl
+     f66:	0f b6 c9             	movzbl %cl,%ecx
+     f69:	01 cb                	add    %ecx,%ebx
+    for(i = 0; i < sizeof(buf); i++){
+     f6b:	83 c0 01             	add    $0x1,%eax
+     f6e:	39 f8                	cmp    %edi,%eax
+     f70:	74 ce                	je     f40 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     f72:	0f b6 08             	movzbl (%eax),%ecx
+     f75:	80 f9 63             	cmp    $0x63,%cl
+     f78:	75 e6                	jne    f60 <sharedfd+0x100>
+        nc++;
+     f7a:	83 c2 01             	add    $0x1,%edx
+      if(buf[i] == 'p')
+     f7d:	eb ec                	jmp    f6b <sharedfd+0x10b>
+     f7f:	90                   	nop
+  close(fd);
+     f80:	83 ec 0c             	sub    $0xc,%esp
+     f83:	ff 75 d0             	push   -0x30(%ebp)
+     f86:	e8 70 29 00 00       	call   38fb <close>
+  unlink("sharedfd");
+     f8b:	c7 04 24 93 41 00 00 	movl   $0x4193,(%esp)
+     f92:	e8 8c 29 00 00       	call   3923 <unlink>
+  if(nc == 10000 && np == 10000){
+     f97:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f9a:	83 c4 10             	add    $0x10,%esp
+     f9d:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     fa3:	75 5b                	jne    1000 <sharedfd+0x1a0>
+     fa5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     fab:	75 53                	jne    1000 <sharedfd+0x1a0>
+    printf(1, "sharedfd ok\n");
+     fad:	83 ec 08             	sub    $0x8,%esp
+     fb0:	68 9c 41 00 00       	push   $0x419c
+     fb5:	6a 01                	push   $0x1
+     fb7:	e8 74 2a 00 00       	call   3a30 <printf>
+     fbc:	83 c4 10             	add    $0x10,%esp
+}
+     fbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fc2:	5b                   	pop    %ebx
+     fc3:	5e                   	pop    %esi
+     fc4:	5f                   	pop    %edi
+     fc5:	5d                   	pop    %ebp
+     fc6:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+     fc7:	83 ec 08             	sub    $0x8,%esp
+     fca:	68 58 4e 00 00       	push   $0x4e58
+     fcf:	6a 01                	push   $0x1
+     fd1:	e8 5a 2a 00 00       	call   3a30 <printf>
+    return;
+     fd6:	83 c4 10             	add    $0x10,%esp
+}
+     fd9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fdc:	5b                   	pop    %ebx
+     fdd:	5e                   	pop    %esi
+     fde:	5f                   	pop    %edi
+     fdf:	5d                   	pop    %ebp
+     fe0:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     fe1:	83 ec 08             	sub    $0x8,%esp
+     fe4:	68 a4 4e 00 00       	push   $0x4ea4
+     fe9:	6a 01                	push   $0x1
+     feb:	e8 40 2a 00 00       	call   3a30 <printf>
+    return;
+     ff0:	83 c4 10             	add    $0x10,%esp
+}
+     ff3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ff6:	5b                   	pop    %ebx
+     ff7:	5e                   	pop    %esi
+     ff8:	5f                   	pop    %edi
+     ff9:	5d                   	pop    %ebp
+     ffa:	c3                   	ret    
+    exit();
+     ffb:	e8 d3 28 00 00       	call   38d3 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    1000:	53                   	push   %ebx
+    1001:	52                   	push   %edx
+    1002:	68 a9 41 00 00       	push   $0x41a9
+    1007:	6a 01                	push   $0x1
+    1009:	e8 22 2a 00 00       	call   3a30 <printf>
+    exit();
+    100e:	e8 c0 28 00 00       	call   38d3 <exit>
+    1013:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    101a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001020 <fourfiles>:
+{
+    1020:	55                   	push   %ebp
+    1021:	89 e5                	mov    %esp,%ebp
+    1023:	57                   	push   %edi
+    1024:	56                   	push   %esi
+  printf(1, "fourfiles test\n");
+    1025:	be be 41 00 00       	mov    $0x41be,%esi
+{
+    102a:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    102b:	31 db                	xor    %ebx,%ebx
+{
+    102d:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1030:	c7 45 d8 be 41 00 00 	movl   $0x41be,-0x28(%ebp)
+  printf(1, "fourfiles test\n");
+    1037:	68 c4 41 00 00       	push   $0x41c4
+    103c:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    103e:	c7 45 dc 07 43 00 00 	movl   $0x4307,-0x24(%ebp)
+    1045:	c7 45 e0 0b 43 00 00 	movl   $0x430b,-0x20(%ebp)
+    104c:	c7 45 e4 c1 41 00 00 	movl   $0x41c1,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    1053:	e8 d8 29 00 00       	call   3a30 <printf>
+    1058:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    105b:	83 ec 0c             	sub    $0xc,%esp
+    105e:	56                   	push   %esi
+    105f:	e8 bf 28 00 00       	call   3923 <unlink>
+    pid = fork();
+    1064:	e8 62 28 00 00       	call   38cb <fork>
+    if(pid < 0){
+    1069:	83 c4 10             	add    $0x10,%esp
+    106c:	85 c0                	test   %eax,%eax
+    106e:	0f 88 64 01 00 00    	js     11d8 <fourfiles+0x1b8>
+    if(pid == 0){
+    1074:	0f 84 e9 00 00 00    	je     1163 <fourfiles+0x143>
+  for(pi = 0; pi < 4; pi++){
+    107a:	83 c3 01             	add    $0x1,%ebx
+    107d:	83 fb 04             	cmp    $0x4,%ebx
+    1080:	74 06                	je     1088 <fourfiles+0x68>
+    fname = names[pi];
+    1082:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    1086:	eb d3                	jmp    105b <fourfiles+0x3b>
+    wait();
+    1088:	e8 4e 28 00 00       	call   38db <wait>
+  for(i = 0; i < 2; i++){
+    108d:	31 f6                	xor    %esi,%esi
+    wait();
+    108f:	e8 47 28 00 00       	call   38db <wait>
+    1094:	e8 42 28 00 00       	call   38db <wait>
+    1099:	e8 3d 28 00 00       	call   38db <wait>
+    fname = names[i];
+    109e:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
+    fd = open(fname, 0);
+    10a2:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    10a5:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    10a7:	6a 00                	push   $0x0
+    10a9:	50                   	push   %eax
+    fname = names[i];
+    10aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    fd = open(fname, 0);
+    10ad:	e8 61 28 00 00       	call   3913 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b2:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    10b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10bf:	90                   	nop
+    10c0:	83 ec 04             	sub    $0x4,%esp
+    10c3:	68 00 20 00 00       	push   $0x2000
+    10c8:	68 80 85 00 00       	push   $0x8580
+    10cd:	ff 75 d4             	push   -0x2c(%ebp)
+    10d0:	e8 16 28 00 00       	call   38eb <read>
+    10d5:	83 c4 10             	add    $0x10,%esp
+    10d8:	89 c7                	mov    %eax,%edi
+    10da:	85 c0                	test   %eax,%eax
+    10dc:	7e 20                	jle    10fe <fourfiles+0xde>
+      for(j = 0; j < n; j++){
+    10de:	31 c0                	xor    %eax,%eax
+        if(buf[j] != '0'+i){
+    10e0:	83 fe 01             	cmp    $0x1,%esi
+    10e3:	0f be 88 80 85 00 00 	movsbl 0x8580(%eax),%ecx
+    10ea:	19 d2                	sbb    %edx,%edx
+    10ec:	83 c2 31             	add    $0x31,%edx
+    10ef:	39 d1                	cmp    %edx,%ecx
+    10f1:	75 5c                	jne    114f <fourfiles+0x12f>
+      for(j = 0; j < n; j++){
+    10f3:	83 c0 01             	add    $0x1,%eax
+    10f6:	39 c7                	cmp    %eax,%edi
+    10f8:	75 e6                	jne    10e0 <fourfiles+0xc0>
+      total += n;
+    10fa:	01 fb                	add    %edi,%ebx
+    10fc:	eb c2                	jmp    10c0 <fourfiles+0xa0>
+    close(fd);
+    10fe:	83 ec 0c             	sub    $0xc,%esp
+    1101:	ff 75 d4             	push   -0x2c(%ebp)
+    1104:	e8 f2 27 00 00       	call   38fb <close>
+    if(total != 12*500){
+    1109:	83 c4 10             	add    $0x10,%esp
+    110c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1112:	0f 85 d4 00 00 00    	jne    11ec <fourfiles+0x1cc>
+    unlink(fname);
+    1118:	83 ec 0c             	sub    $0xc,%esp
+    111b:	ff 75 d0             	push   -0x30(%ebp)
+    111e:	e8 00 28 00 00       	call   3923 <unlink>
+  for(i = 0; i < 2; i++){
+    1123:	83 c4 10             	add    $0x10,%esp
+    1126:	83 fe 01             	cmp    $0x1,%esi
+    1129:	75 1a                	jne    1145 <fourfiles+0x125>
+  printf(1, "fourfiles ok\n");
+    112b:	83 ec 08             	sub    $0x8,%esp
+    112e:	68 02 42 00 00       	push   $0x4202
+    1133:	6a 01                	push   $0x1
+    1135:	e8 f6 28 00 00       	call   3a30 <printf>
+}
+    113a:	83 c4 10             	add    $0x10,%esp
+    113d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1140:	5b                   	pop    %ebx
+    1141:	5e                   	pop    %esi
+    1142:	5f                   	pop    %edi
+    1143:	5d                   	pop    %ebp
+    1144:	c3                   	ret    
+    1145:	be 01 00 00 00       	mov    $0x1,%esi
+    114a:	e9 4f ff ff ff       	jmp    109e <fourfiles+0x7e>
+          printf(1, "wrong char\n");
+    114f:	83 ec 08             	sub    $0x8,%esp
+    1152:	68 e5 41 00 00       	push   $0x41e5
+    1157:	6a 01                	push   $0x1
+    1159:	e8 d2 28 00 00       	call   3a30 <printf>
+          exit();
+    115e:	e8 70 27 00 00       	call   38d3 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    1163:	83 ec 08             	sub    $0x8,%esp
+    1166:	68 02 02 00 00       	push   $0x202
+    116b:	56                   	push   %esi
+    116c:	e8 a2 27 00 00       	call   3913 <open>
+      if(fd < 0){
+    1171:	83 c4 10             	add    $0x10,%esp
+      fd = open(fname, O_CREATE | O_RDWR);
+    1174:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    1176:	85 c0                	test   %eax,%eax
+    1178:	78 45                	js     11bf <fourfiles+0x19f>
+      memset(buf, '0'+pi, 512);
+    117a:	83 ec 04             	sub    $0x4,%esp
+    117d:	83 c3 30             	add    $0x30,%ebx
+    1180:	68 00 02 00 00       	push   $0x200
+    1185:	53                   	push   %ebx
+    1186:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    118b:	68 80 85 00 00       	push   $0x8580
+    1190:	e8 ab 25 00 00       	call   3740 <memset>
+    1195:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    1198:	83 ec 04             	sub    $0x4,%esp
+    119b:	68 f4 01 00 00       	push   $0x1f4
+    11a0:	68 80 85 00 00       	push   $0x8580
+    11a5:	56                   	push   %esi
+    11a6:	e8 48 27 00 00       	call   38f3 <write>
+    11ab:	83 c4 10             	add    $0x10,%esp
+    11ae:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    11b3:	75 4a                	jne    11ff <fourfiles+0x1df>
+      for(i = 0; i < 12; i++){
+    11b5:	83 eb 01             	sub    $0x1,%ebx
+    11b8:	75 de                	jne    1198 <fourfiles+0x178>
+      exit();
+    11ba:	e8 14 27 00 00       	call   38d3 <exit>
+        printf(1, "create failed\n");
+    11bf:	51                   	push   %ecx
+    11c0:	51                   	push   %ecx
+    11c1:	68 5f 44 00 00       	push   $0x445f
+    11c6:	6a 01                	push   $0x1
+    11c8:	e8 63 28 00 00       	call   3a30 <printf>
+        exit();
+    11cd:	e8 01 27 00 00       	call   38d3 <exit>
+    11d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      printf(1, "fork failed\n");
+    11d8:	83 ec 08             	sub    $0x8,%esp
+    11db:	68 99 4c 00 00       	push   $0x4c99
+    11e0:	6a 01                	push   $0x1
+    11e2:	e8 49 28 00 00       	call   3a30 <printf>
+      exit();
+    11e7:	e8 e7 26 00 00       	call   38d3 <exit>
+      printf(1, "wrong length %d\n", total);
+    11ec:	50                   	push   %eax
+    11ed:	53                   	push   %ebx
+    11ee:	68 f1 41 00 00       	push   $0x41f1
+    11f3:	6a 01                	push   $0x1
+    11f5:	e8 36 28 00 00       	call   3a30 <printf>
+      exit();
+    11fa:	e8 d4 26 00 00       	call   38d3 <exit>
+          printf(1, "write failed %d\n", n);
+    11ff:	52                   	push   %edx
+    1200:	50                   	push   %eax
+    1201:	68 d4 41 00 00       	push   $0x41d4
+    1206:	6a 01                	push   $0x1
+    1208:	e8 23 28 00 00       	call   3a30 <printf>
+          exit();
+    120d:	e8 c1 26 00 00       	call   38d3 <exit>
+    1212:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001220 <createdelete>:
+{
+    1220:	55                   	push   %ebp
+    1221:	89 e5                	mov    %esp,%ebp
+    1223:	57                   	push   %edi
+    1224:	56                   	push   %esi
+    1225:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    1226:	31 db                	xor    %ebx,%ebx
+{
+    1228:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    122b:	68 10 42 00 00       	push   $0x4210
+    1230:	6a 01                	push   $0x1
+    1232:	e8 f9 27 00 00       	call   3a30 <printf>
+    1237:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    123a:	e8 8c 26 00 00       	call   38cb <fork>
+    if(pid < 0){
+    123f:	85 c0                	test   %eax,%eax
+    1241:	0f 88 c3 01 00 00    	js     140a <createdelete+0x1ea>
+    if(pid == 0){
+    1247:	0f 84 13 01 00 00    	je     1360 <createdelete+0x140>
+  for(pi = 0; pi < 4; pi++){
+    124d:	83 c3 01             	add    $0x1,%ebx
+    1250:	83 fb 04             	cmp    $0x4,%ebx
+    1253:	75 e5                	jne    123a <createdelete+0x1a>
+    wait();
+    1255:	e8 81 26 00 00       	call   38db <wait>
+  for(i = 0; i < N; i++){
+    125a:	31 f6                	xor    %esi,%esi
+    125c:	8d 7d c8             	lea    -0x38(%ebp),%edi
+    wait();
+    125f:	e8 77 26 00 00       	call   38db <wait>
+    1264:	e8 72 26 00 00       	call   38db <wait>
+    1269:	e8 6d 26 00 00       	call   38db <wait>
+  name[0] = name[1] = name[2] = 0;
+    126e:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+  for(i = 0; i < N; i++){
+    1272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if((i == 0 || i >= N/2) && fd < 0){
+    1278:	85 f6                	test   %esi,%esi
+    127a:	8d 46 30             	lea    0x30(%esi),%eax
+    127d:	0f 94 c3             	sete   %bl
+    1280:	83 fe 09             	cmp    $0x9,%esi
+    1283:	88 45 c7             	mov    %al,-0x39(%ebp)
+    1286:	0f 9f c0             	setg   %al
+    1289:	09 c3                	or     %eax,%ebx
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    128b:	8d 46 ff             	lea    -0x1(%esi),%eax
+    128e:	89 45 c0             	mov    %eax,-0x40(%ebp)
+      if((i == 0 || i >= N/2) && fd < 0){
+    1291:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+    1294:	bb 70 00 00 00       	mov    $0x70,%ebx
+      fd = open(name, 0);
+    1299:	83 ec 08             	sub    $0x8,%esp
+      name[1] = '0' + i;
+    129c:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      name[0] = 'p' + pi;
+    12a0:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    12a3:	6a 00                	push   $0x0
+    12a5:	57                   	push   %edi
+      name[1] = '0' + i;
+    12a6:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    12a9:	e8 65 26 00 00       	call   3913 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    12ae:	83 c4 10             	add    $0x10,%esp
+    12b1:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    12b5:	0f 84 85 00 00 00    	je     1340 <createdelete+0x120>
+    12bb:	85 c0                	test   %eax,%eax
+    12bd:	0f 88 32 01 00 00    	js     13f5 <createdelete+0x1d5>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    12c3:	83 7d c0 08          	cmpl   $0x8,-0x40(%ebp)
+    12c7:	76 7b                	jbe    1344 <createdelete+0x124>
+        close(fd);
+    12c9:	83 ec 0c             	sub    $0xc,%esp
+    12cc:	50                   	push   %eax
+    12cd:	e8 29 26 00 00       	call   38fb <close>
+    12d2:	83 c4 10             	add    $0x10,%esp
+    for(pi = 0; pi < 4; pi++){
+    12d5:	83 c3 01             	add    $0x1,%ebx
+    12d8:	80 fb 74             	cmp    $0x74,%bl
+    12db:	75 bc                	jne    1299 <createdelete+0x79>
+  for(i = 0; i < N; i++){
+    12dd:	83 c6 01             	add    $0x1,%esi
+    12e0:	83 fe 14             	cmp    $0x14,%esi
+    12e3:	75 93                	jne    1278 <createdelete+0x58>
+    12e5:	be 70 00 00 00       	mov    $0x70,%esi
+    12ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    for(pi = 0; pi < 4; pi++){
+    12f0:	8d 46 c0             	lea    -0x40(%esi),%eax
+      name[0] = 'p' + i;
+    12f3:	bb 04 00 00 00       	mov    $0x4,%ebx
+    12f8:	88 45 c7             	mov    %al,-0x39(%ebp)
+      unlink(name);
+    12fb:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    12fe:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    1300:	57                   	push   %edi
+      name[0] = 'p' + i;
+    1301:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1304:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    1308:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    130b:	e8 13 26 00 00       	call   3923 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1310:	83 c4 10             	add    $0x10,%esp
+    1313:	83 eb 01             	sub    $0x1,%ebx
+    1316:	75 e3                	jne    12fb <createdelete+0xdb>
+  for(i = 0; i < N; i++){
+    1318:	83 c6 01             	add    $0x1,%esi
+    131b:	89 f0                	mov    %esi,%eax
+    131d:	3c 84                	cmp    $0x84,%al
+    131f:	75 cf                	jne    12f0 <createdelete+0xd0>
+  printf(1, "createdelete ok\n");
+    1321:	83 ec 08             	sub    $0x8,%esp
+    1324:	68 23 42 00 00       	push   $0x4223
+    1329:	6a 01                	push   $0x1
+    132b:	e8 00 27 00 00       	call   3a30 <printf>
+}
+    1330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1333:	5b                   	pop    %ebx
+    1334:	5e                   	pop    %esi
+    1335:	5f                   	pop    %edi
+    1336:	5d                   	pop    %ebp
+    1337:	c3                   	ret    
+    1338:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    133f:	90                   	nop
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1340:	85 c0                	test   %eax,%eax
+    1342:	78 91                	js     12d5 <createdelete+0xb5>
+        printf(1, "oops createdelete %s did exist\n", name);
+    1344:	50                   	push   %eax
+    1345:	57                   	push   %edi
+    1346:	68 f4 4e 00 00       	push   $0x4ef4
+    134b:	6a 01                	push   $0x1
+    134d:	e8 de 26 00 00       	call   3a30 <printf>
+        exit();
+    1352:	e8 7c 25 00 00       	call   38d3 <exit>
+    1357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    135e:	66 90                	xchg   %ax,%ax
+      name[0] = 'p' + pi;
+    1360:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    1363:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1367:	be 01 00 00 00       	mov    $0x1,%esi
+    136c:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    136f:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    1372:	31 db                	xor    %ebx,%ebx
+    1374:	eb 15                	jmp    138b <createdelete+0x16b>
+    1376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    137d:	8d 76 00             	lea    0x0(%esi),%esi
+      for(i = 0; i < N; i++){
+    1380:	83 fe 14             	cmp    $0x14,%esi
+    1383:	74 6b                	je     13f0 <createdelete+0x1d0>
+    1385:	83 c3 01             	add    $0x1,%ebx
+    1388:	83 c6 01             	add    $0x1,%esi
+        fd = open(name, O_CREATE | O_RDWR);
+    138b:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    138e:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    1391:	68 02 02 00 00       	push   $0x202
+    1396:	57                   	push   %edi
+        name[1] = '0' + i;
+    1397:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    139a:	e8 74 25 00 00       	call   3913 <open>
+        if(fd < 0){
+    139f:	83 c4 10             	add    $0x10,%esp
+    13a2:	85 c0                	test   %eax,%eax
+    13a4:	78 78                	js     141e <createdelete+0x1fe>
+        close(fd);
+    13a6:	83 ec 0c             	sub    $0xc,%esp
+    13a9:	50                   	push   %eax
+    13aa:	e8 4c 25 00 00       	call   38fb <close>
+        if(i > 0 && (i % 2 ) == 0){
+    13af:	83 c4 10             	add    $0x10,%esp
+    13b2:	85 db                	test   %ebx,%ebx
+    13b4:	74 cf                	je     1385 <createdelete+0x165>
+    13b6:	f6 c3 01             	test   $0x1,%bl
+    13b9:	75 c5                	jne    1380 <createdelete+0x160>
+          if(unlink(name) < 0){
+    13bb:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    13be:	89 d8                	mov    %ebx,%eax
+          if(unlink(name) < 0){
+    13c0:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    13c1:	d1 f8                	sar    %eax
+    13c3:	83 c0 30             	add    $0x30,%eax
+    13c6:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    13c9:	e8 55 25 00 00       	call   3923 <unlink>
+    13ce:	83 c4 10             	add    $0x10,%esp
+    13d1:	85 c0                	test   %eax,%eax
+    13d3:	79 ab                	jns    1380 <createdelete+0x160>
+            printf(1, "unlink failed\n");
+    13d5:	52                   	push   %edx
+    13d6:	52                   	push   %edx
+    13d7:	68 11 3e 00 00       	push   $0x3e11
+    13dc:	6a 01                	push   $0x1
+    13de:	e8 4d 26 00 00       	call   3a30 <printf>
+            exit();
+    13e3:	e8 eb 24 00 00       	call   38d3 <exit>
+    13e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    13ef:	90                   	nop
+      exit();
+    13f0:	e8 de 24 00 00       	call   38d3 <exit>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    13f5:	83 ec 04             	sub    $0x4,%esp
+    13f8:	57                   	push   %edi
+    13f9:	68 d0 4e 00 00       	push   $0x4ed0
+    13fe:	6a 01                	push   $0x1
+    1400:	e8 2b 26 00 00       	call   3a30 <printf>
+        exit();
+    1405:	e8 c9 24 00 00       	call   38d3 <exit>
+      printf(1, "fork failed\n");
+    140a:	83 ec 08             	sub    $0x8,%esp
+    140d:	68 99 4c 00 00       	push   $0x4c99
+    1412:	6a 01                	push   $0x1
+    1414:	e8 17 26 00 00       	call   3a30 <printf>
+      exit();
+    1419:	e8 b5 24 00 00       	call   38d3 <exit>
+          printf(1, "create failed\n");
+    141e:	83 ec 08             	sub    $0x8,%esp
+    1421:	68 5f 44 00 00       	push   $0x445f
+    1426:	6a 01                	push   $0x1
+    1428:	e8 03 26 00 00       	call   3a30 <printf>
+          exit();
+    142d:	e8 a1 24 00 00       	call   38d3 <exit>
+    1432:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001440 <unlinkread>:
+{
+    1440:	55                   	push   %ebp
+    1441:	89 e5                	mov    %esp,%ebp
+    1443:	56                   	push   %esi
+    1444:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    1445:	83 ec 08             	sub    $0x8,%esp
+    1448:	68 34 42 00 00       	push   $0x4234
+    144d:	6a 01                	push   $0x1
+    144f:	e8 dc 25 00 00       	call   3a30 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1454:	5b                   	pop    %ebx
+    1455:	5e                   	pop    %esi
+    1456:	68 02 02 00 00       	push   $0x202
+    145b:	68 45 42 00 00       	push   $0x4245
+    1460:	e8 ae 24 00 00       	call   3913 <open>
+  if(fd < 0){
+    1465:	83 c4 10             	add    $0x10,%esp
+    1468:	85 c0                	test   %eax,%eax
+    146a:	0f 88 e6 00 00 00    	js     1556 <unlinkread+0x116>
+  write(fd, "hello", 5);
+    1470:	83 ec 04             	sub    $0x4,%esp
+    1473:	89 c3                	mov    %eax,%ebx
+    1475:	6a 05                	push   $0x5
+    1477:	68 6a 42 00 00       	push   $0x426a
+    147c:	50                   	push   %eax
+    147d:	e8 71 24 00 00       	call   38f3 <write>
+  close(fd);
+    1482:	89 1c 24             	mov    %ebx,(%esp)
+    1485:	e8 71 24 00 00       	call   38fb <close>
+  fd = open("unlinkread", O_RDWR);
+    148a:	58                   	pop    %eax
+    148b:	5a                   	pop    %edx
+    148c:	6a 02                	push   $0x2
+    148e:	68 45 42 00 00       	push   $0x4245
+    1493:	e8 7b 24 00 00       	call   3913 <open>
+  if(fd < 0){
+    1498:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_RDWR);
+    149b:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    149d:	85 c0                	test   %eax,%eax
+    149f:	0f 88 10 01 00 00    	js     15b5 <unlinkread+0x175>
+  if(unlink("unlinkread") != 0){
+    14a5:	83 ec 0c             	sub    $0xc,%esp
+    14a8:	68 45 42 00 00       	push   $0x4245
+    14ad:	e8 71 24 00 00       	call   3923 <unlink>
+    14b2:	83 c4 10             	add    $0x10,%esp
+    14b5:	85 c0                	test   %eax,%eax
+    14b7:	0f 85 e5 00 00 00    	jne    15a2 <unlinkread+0x162>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14bd:	83 ec 08             	sub    $0x8,%esp
+    14c0:	68 02 02 00 00       	push   $0x202
+    14c5:	68 45 42 00 00       	push   $0x4245
+    14ca:	e8 44 24 00 00       	call   3913 <open>
+  write(fd1, "yyy", 3);
+    14cf:	83 c4 0c             	add    $0xc,%esp
+    14d2:	6a 03                	push   $0x3
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14d4:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    14d6:	68 a2 42 00 00       	push   $0x42a2
+    14db:	50                   	push   %eax
+    14dc:	e8 12 24 00 00       	call   38f3 <write>
+  close(fd1);
+    14e1:	89 34 24             	mov    %esi,(%esp)
+    14e4:	e8 12 24 00 00       	call   38fb <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    14e9:	83 c4 0c             	add    $0xc,%esp
+    14ec:	68 00 20 00 00       	push   $0x2000
+    14f1:	68 80 85 00 00       	push   $0x8580
+    14f6:	53                   	push   %ebx
+    14f7:	e8 ef 23 00 00       	call   38eb <read>
+    14fc:	83 c4 10             	add    $0x10,%esp
+    14ff:	83 f8 05             	cmp    $0x5,%eax
+    1502:	0f 85 87 00 00 00    	jne    158f <unlinkread+0x14f>
+  if(buf[0] != 'h'){
+    1508:	80 3d 80 85 00 00 68 	cmpb   $0x68,0x8580
+    150f:	75 6b                	jne    157c <unlinkread+0x13c>
+  if(write(fd, buf, 10) != 10){
+    1511:	83 ec 04             	sub    $0x4,%esp
+    1514:	6a 0a                	push   $0xa
+    1516:	68 80 85 00 00       	push   $0x8580
+    151b:	53                   	push   %ebx
+    151c:	e8 d2 23 00 00       	call   38f3 <write>
+    1521:	83 c4 10             	add    $0x10,%esp
+    1524:	83 f8 0a             	cmp    $0xa,%eax
+    1527:	75 40                	jne    1569 <unlinkread+0x129>
+  close(fd);
+    1529:	83 ec 0c             	sub    $0xc,%esp
+    152c:	53                   	push   %ebx
+    152d:	e8 c9 23 00 00       	call   38fb <close>
+  unlink("unlinkread");
+    1532:	c7 04 24 45 42 00 00 	movl   $0x4245,(%esp)
+    1539:	e8 e5 23 00 00       	call   3923 <unlink>
+  printf(1, "unlinkread ok\n");
+    153e:	58                   	pop    %eax
+    153f:	5a                   	pop    %edx
+    1540:	68 ed 42 00 00       	push   $0x42ed
+    1545:	6a 01                	push   $0x1
+    1547:	e8 e4 24 00 00       	call   3a30 <printf>
+}
+    154c:	83 c4 10             	add    $0x10,%esp
+    154f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1552:	5b                   	pop    %ebx
+    1553:	5e                   	pop    %esi
+    1554:	5d                   	pop    %ebp
+    1555:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    1556:	51                   	push   %ecx
+    1557:	51                   	push   %ecx
+    1558:	68 50 42 00 00       	push   $0x4250
+    155d:	6a 01                	push   $0x1
+    155f:	e8 cc 24 00 00       	call   3a30 <printf>
+    exit();
+    1564:	e8 6a 23 00 00       	call   38d3 <exit>
+    printf(1, "unlinkread write failed\n");
+    1569:	51                   	push   %ecx
+    156a:	51                   	push   %ecx
+    156b:	68 d4 42 00 00       	push   $0x42d4
+    1570:	6a 01                	push   $0x1
+    1572:	e8 b9 24 00 00       	call   3a30 <printf>
+    exit();
+    1577:	e8 57 23 00 00       	call   38d3 <exit>
+    printf(1, "unlinkread wrong data\n");
+    157c:	53                   	push   %ebx
+    157d:	53                   	push   %ebx
+    157e:	68 bd 42 00 00       	push   $0x42bd
+    1583:	6a 01                	push   $0x1
+    1585:	e8 a6 24 00 00       	call   3a30 <printf>
+    exit();
+    158a:	e8 44 23 00 00       	call   38d3 <exit>
+    printf(1, "unlinkread read failed");
+    158f:	56                   	push   %esi
+    1590:	56                   	push   %esi
+    1591:	68 a6 42 00 00       	push   $0x42a6
+    1596:	6a 01                	push   $0x1
+    1598:	e8 93 24 00 00       	call   3a30 <printf>
+    exit();
+    159d:	e8 31 23 00 00       	call   38d3 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    15a2:	50                   	push   %eax
+    15a3:	50                   	push   %eax
+    15a4:	68 88 42 00 00       	push   $0x4288
+    15a9:	6a 01                	push   $0x1
+    15ab:	e8 80 24 00 00       	call   3a30 <printf>
+    exit();
+    15b0:	e8 1e 23 00 00       	call   38d3 <exit>
+    printf(1, "open unlinkread failed\n");
+    15b5:	50                   	push   %eax
+    15b6:	50                   	push   %eax
+    15b7:	68 70 42 00 00       	push   $0x4270
+    15bc:	6a 01                	push   $0x1
+    15be:	e8 6d 24 00 00       	call   3a30 <printf>
+    exit();
+    15c3:	e8 0b 23 00 00       	call   38d3 <exit>
+    15c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    15cf:	90                   	nop
+
+000015d0 <linktest>:
+{
+    15d0:	55                   	push   %ebp
+    15d1:	89 e5                	mov    %esp,%ebp
+    15d3:	53                   	push   %ebx
+    15d4:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    15d7:	68 fc 42 00 00       	push   $0x42fc
+    15dc:	6a 01                	push   $0x1
+    15de:	e8 4d 24 00 00       	call   3a30 <printf>
+  unlink("lf1");
+    15e3:	c7 04 24 06 43 00 00 	movl   $0x4306,(%esp)
+    15ea:	e8 34 23 00 00       	call   3923 <unlink>
+  unlink("lf2");
+    15ef:	c7 04 24 0a 43 00 00 	movl   $0x430a,(%esp)
+    15f6:	e8 28 23 00 00       	call   3923 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    15fb:	58                   	pop    %eax
+    15fc:	5a                   	pop    %edx
+    15fd:	68 02 02 00 00       	push   $0x202
+    1602:	68 06 43 00 00       	push   $0x4306
+    1607:	e8 07 23 00 00       	call   3913 <open>
+  if(fd < 0){
+    160c:	83 c4 10             	add    $0x10,%esp
+    160f:	85 c0                	test   %eax,%eax
+    1611:	0f 88 1e 01 00 00    	js     1735 <linktest+0x165>
+  if(write(fd, "hello", 5) != 5){
+    1617:	83 ec 04             	sub    $0x4,%esp
+    161a:	89 c3                	mov    %eax,%ebx
+    161c:	6a 05                	push   $0x5
+    161e:	68 6a 42 00 00       	push   $0x426a
+    1623:	50                   	push   %eax
+    1624:	e8 ca 22 00 00       	call   38f3 <write>
+    1629:	83 c4 10             	add    $0x10,%esp
+    162c:	83 f8 05             	cmp    $0x5,%eax
+    162f:	0f 85 98 01 00 00    	jne    17cd <linktest+0x1fd>
+  close(fd);
+    1635:	83 ec 0c             	sub    $0xc,%esp
+    1638:	53                   	push   %ebx
+    1639:	e8 bd 22 00 00       	call   38fb <close>
+  if(link("lf1", "lf2") < 0){
+    163e:	5b                   	pop    %ebx
+    163f:	58                   	pop    %eax
+    1640:	68 0a 43 00 00       	push   $0x430a
+    1645:	68 06 43 00 00       	push   $0x4306
+    164a:	e8 e4 22 00 00       	call   3933 <link>
+    164f:	83 c4 10             	add    $0x10,%esp
+    1652:	85 c0                	test   %eax,%eax
+    1654:	0f 88 60 01 00 00    	js     17ba <linktest+0x1ea>
+  unlink("lf1");
+    165a:	83 ec 0c             	sub    $0xc,%esp
+    165d:	68 06 43 00 00       	push   $0x4306
+    1662:	e8 bc 22 00 00       	call   3923 <unlink>
+  if(open("lf1", 0) >= 0){
+    1667:	58                   	pop    %eax
+    1668:	5a                   	pop    %edx
+    1669:	6a 00                	push   $0x0
+    166b:	68 06 43 00 00       	push   $0x4306
+    1670:	e8 9e 22 00 00       	call   3913 <open>
+    1675:	83 c4 10             	add    $0x10,%esp
+    1678:	85 c0                	test   %eax,%eax
+    167a:	0f 89 27 01 00 00    	jns    17a7 <linktest+0x1d7>
+  fd = open("lf2", 0);
+    1680:	83 ec 08             	sub    $0x8,%esp
+    1683:	6a 00                	push   $0x0
+    1685:	68 0a 43 00 00       	push   $0x430a
+    168a:	e8 84 22 00 00       	call   3913 <open>
+  if(fd < 0){
+    168f:	83 c4 10             	add    $0x10,%esp
+  fd = open("lf2", 0);
+    1692:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1694:	85 c0                	test   %eax,%eax
+    1696:	0f 88 f8 00 00 00    	js     1794 <linktest+0x1c4>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    169c:	83 ec 04             	sub    $0x4,%esp
+    169f:	68 00 20 00 00       	push   $0x2000
+    16a4:	68 80 85 00 00       	push   $0x8580
+    16a9:	50                   	push   %eax
+    16aa:	e8 3c 22 00 00       	call   38eb <read>
+    16af:	83 c4 10             	add    $0x10,%esp
+    16b2:	83 f8 05             	cmp    $0x5,%eax
+    16b5:	0f 85 c6 00 00 00    	jne    1781 <linktest+0x1b1>
+  close(fd);
+    16bb:	83 ec 0c             	sub    $0xc,%esp
+    16be:	53                   	push   %ebx
+    16bf:	e8 37 22 00 00       	call   38fb <close>
+  if(link("lf2", "lf2") >= 0){
+    16c4:	58                   	pop    %eax
+    16c5:	5a                   	pop    %edx
+    16c6:	68 0a 43 00 00       	push   $0x430a
+    16cb:	68 0a 43 00 00       	push   $0x430a
+    16d0:	e8 5e 22 00 00       	call   3933 <link>
+    16d5:	83 c4 10             	add    $0x10,%esp
+    16d8:	85 c0                	test   %eax,%eax
+    16da:	0f 89 8e 00 00 00    	jns    176e <linktest+0x19e>
+  unlink("lf2");
+    16e0:	83 ec 0c             	sub    $0xc,%esp
+    16e3:	68 0a 43 00 00       	push   $0x430a
+    16e8:	e8 36 22 00 00       	call   3923 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    16ed:	59                   	pop    %ecx
+    16ee:	5b                   	pop    %ebx
+    16ef:	68 06 43 00 00       	push   $0x4306
+    16f4:	68 0a 43 00 00       	push   $0x430a
+    16f9:	e8 35 22 00 00       	call   3933 <link>
+    16fe:	83 c4 10             	add    $0x10,%esp
+    1701:	85 c0                	test   %eax,%eax
+    1703:	79 56                	jns    175b <linktest+0x18b>
+  if(link(".", "lf1") >= 0){
+    1705:	83 ec 08             	sub    $0x8,%esp
+    1708:	68 06 43 00 00       	push   $0x4306
+    170d:	68 ce 45 00 00       	push   $0x45ce
+    1712:	e8 1c 22 00 00       	call   3933 <link>
+    1717:	83 c4 10             	add    $0x10,%esp
+    171a:	85 c0                	test   %eax,%eax
+    171c:	79 2a                	jns    1748 <linktest+0x178>
+  printf(1, "linktest ok\n");
+    171e:	83 ec 08             	sub    $0x8,%esp
+    1721:	68 a4 43 00 00       	push   $0x43a4
+    1726:	6a 01                	push   $0x1
+    1728:	e8 03 23 00 00       	call   3a30 <printf>
+}
+    172d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1730:	83 c4 10             	add    $0x10,%esp
+    1733:	c9                   	leave  
+    1734:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1735:	50                   	push   %eax
+    1736:	50                   	push   %eax
+    1737:	68 0e 43 00 00       	push   $0x430e
+    173c:	6a 01                	push   $0x1
+    173e:	e8 ed 22 00 00       	call   3a30 <printf>
+    exit();
+    1743:	e8 8b 21 00 00       	call   38d3 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    1748:	50                   	push   %eax
+    1749:	50                   	push   %eax
+    174a:	68 88 43 00 00       	push   $0x4388
+    174f:	6a 01                	push   $0x1
+    1751:	e8 da 22 00 00       	call   3a30 <printf>
+    exit();
+    1756:	e8 78 21 00 00       	call   38d3 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    175b:	52                   	push   %edx
+    175c:	52                   	push   %edx
+    175d:	68 3c 4f 00 00       	push   $0x4f3c
+    1762:	6a 01                	push   $0x1
+    1764:	e8 c7 22 00 00       	call   3a30 <printf>
+    exit();
+    1769:	e8 65 21 00 00       	call   38d3 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    176e:	50                   	push   %eax
+    176f:	50                   	push   %eax
+    1770:	68 6a 43 00 00       	push   $0x436a
+    1775:	6a 01                	push   $0x1
+    1777:	e8 b4 22 00 00       	call   3a30 <printf>
+    exit();
+    177c:	e8 52 21 00 00       	call   38d3 <exit>
+    printf(1, "read lf2 failed\n");
+    1781:	51                   	push   %ecx
+    1782:	51                   	push   %ecx
+    1783:	68 59 43 00 00       	push   $0x4359
+    1788:	6a 01                	push   $0x1
+    178a:	e8 a1 22 00 00       	call   3a30 <printf>
+    exit();
+    178f:	e8 3f 21 00 00       	call   38d3 <exit>
+    printf(1, "open lf2 failed\n");
+    1794:	53                   	push   %ebx
+    1795:	53                   	push   %ebx
+    1796:	68 48 43 00 00       	push   $0x4348
+    179b:	6a 01                	push   $0x1
+    179d:	e8 8e 22 00 00       	call   3a30 <printf>
+    exit();
+    17a2:	e8 2c 21 00 00       	call   38d3 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    17a7:	50                   	push   %eax
+    17a8:	50                   	push   %eax
+    17a9:	68 14 4f 00 00       	push   $0x4f14
+    17ae:	6a 01                	push   $0x1
+    17b0:	e8 7b 22 00 00       	call   3a30 <printf>
+    exit();
+    17b5:	e8 19 21 00 00       	call   38d3 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    17ba:	51                   	push   %ecx
+    17bb:	51                   	push   %ecx
+    17bc:	68 33 43 00 00       	push   $0x4333
+    17c1:	6a 01                	push   $0x1
+    17c3:	e8 68 22 00 00       	call   3a30 <printf>
+    exit();
+    17c8:	e8 06 21 00 00       	call   38d3 <exit>
+    printf(1, "write lf1 failed\n");
+    17cd:	50                   	push   %eax
+    17ce:	50                   	push   %eax
+    17cf:	68 21 43 00 00       	push   $0x4321
+    17d4:	6a 01                	push   $0x1
+    17d6:	e8 55 22 00 00       	call   3a30 <printf>
+    exit();
+    17db:	e8 f3 20 00 00       	call   38d3 <exit>
+
+000017e0 <concreate>:
+{
+    17e0:	55                   	push   %ebp
+    17e1:	89 e5                	mov    %esp,%ebp
+    17e3:	57                   	push   %edi
+    17e4:	56                   	push   %esi
+  for(i = 0; i < 40; i++){
+    17e5:	31 f6                	xor    %esi,%esi
+{
+    17e7:	53                   	push   %ebx
+    17e8:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    17eb:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    17ee:	68 b1 43 00 00       	push   $0x43b1
+    17f3:	6a 01                	push   $0x1
+    17f5:	e8 36 22 00 00       	call   3a30 <printf>
+  file[0] = 'C';
+    17fa:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    17fe:	83 c4 10             	add    $0x10,%esp
+    1801:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+  for(i = 0; i < 40; i++){
+    1805:	eb 4c                	jmp    1853 <concreate+0x73>
+    1807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    180e:	66 90                	xchg   %ax,%ax
+    1810:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
+    if(pid && (i % 3) == 1){
+    1816:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
+    181b:	0f 83 af 00 00 00    	jae    18d0 <concreate+0xf0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1821:	83 ec 08             	sub    $0x8,%esp
+    1824:	68 02 02 00 00       	push   $0x202
+    1829:	53                   	push   %ebx
+    182a:	e8 e4 20 00 00       	call   3913 <open>
+      if(fd < 0){
+    182f:	83 c4 10             	add    $0x10,%esp
+    1832:	85 c0                	test   %eax,%eax
+    1834:	78 5f                	js     1895 <concreate+0xb5>
+      close(fd);
+    1836:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    1839:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    183c:	50                   	push   %eax
+    183d:	e8 b9 20 00 00       	call   38fb <close>
+    1842:	83 c4 10             	add    $0x10,%esp
+      wait();
+    1845:	e8 91 20 00 00       	call   38db <wait>
+  for(i = 0; i < 40; i++){
+    184a:	83 fe 28             	cmp    $0x28,%esi
+    184d:	0f 84 9f 00 00 00    	je     18f2 <concreate+0x112>
+    unlink(file);
+    1853:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    1856:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    1859:	53                   	push   %ebx
+    file[1] = '0' + i;
+    185a:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    185d:	e8 c1 20 00 00       	call   3923 <unlink>
+    pid = fork();
+    1862:	e8 64 20 00 00       	call   38cb <fork>
+    if(pid && (i % 3) == 1){
+    1867:	83 c4 10             	add    $0x10,%esp
+    186a:	85 c0                	test   %eax,%eax
+    186c:	75 a2                	jne    1810 <concreate+0x30>
+      link("C0", file);
+    186e:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
+    } else if(pid == 0 && (i % 5) == 1){
+    1874:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
+    187a:	73 34                	jae    18b0 <concreate+0xd0>
+      fd = open(file, O_CREATE | O_RDWR);
+    187c:	83 ec 08             	sub    $0x8,%esp
+    187f:	68 02 02 00 00       	push   $0x202
+    1884:	53                   	push   %ebx
+    1885:	e8 89 20 00 00       	call   3913 <open>
+      if(fd < 0){
+    188a:	83 c4 10             	add    $0x10,%esp
+    188d:	85 c0                	test   %eax,%eax
+    188f:	0f 89 39 02 00 00    	jns    1ace <concreate+0x2ee>
+        printf(1, "concreate create %s failed\n", file);
+    1895:	83 ec 04             	sub    $0x4,%esp
+    1898:	53                   	push   %ebx
+    1899:	68 c4 43 00 00       	push   $0x43c4
+    189e:	6a 01                	push   $0x1
+    18a0:	e8 8b 21 00 00       	call   3a30 <printf>
+        exit();
+    18a5:	e8 29 20 00 00       	call   38d3 <exit>
+    18aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("C0", file);
+    18b0:	83 ec 08             	sub    $0x8,%esp
+    18b3:	53                   	push   %ebx
+    18b4:	68 c1 43 00 00       	push   $0x43c1
+    18b9:	e8 75 20 00 00       	call   3933 <link>
+    18be:	83 c4 10             	add    $0x10,%esp
+      exit();
+    18c1:	e8 0d 20 00 00       	call   38d3 <exit>
+    18c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    18cd:	8d 76 00             	lea    0x0(%esi),%esi
+      link("C0", file);
+    18d0:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    18d3:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    18d6:	53                   	push   %ebx
+    18d7:	68 c1 43 00 00       	push   $0x43c1
+    18dc:	e8 52 20 00 00       	call   3933 <link>
+    18e1:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18e4:	e8 f2 1f 00 00       	call   38db <wait>
+  for(i = 0; i < 40; i++){
+    18e9:	83 fe 28             	cmp    $0x28,%esi
+    18ec:	0f 85 61 ff ff ff    	jne    1853 <concreate+0x73>
+  memset(fa, 0, sizeof(fa));
+    18f2:	83 ec 04             	sub    $0x4,%esp
+    18f5:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    18f8:	6a 28                	push   $0x28
+    18fa:	6a 00                	push   $0x0
+    18fc:	50                   	push   %eax
+    18fd:	e8 3e 1e 00 00       	call   3740 <memset>
+  fd = open(".", 0);
+    1902:	5e                   	pop    %esi
+    1903:	5f                   	pop    %edi
+    1904:	6a 00                	push   $0x0
+    1906:	68 ce 45 00 00       	push   $0x45ce
+    190b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    190e:	e8 00 20 00 00       	call   3913 <open>
+  n = 0;
+    1913:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    191a:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    191d:	89 c6                	mov    %eax,%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    191f:	90                   	nop
+    1920:	83 ec 04             	sub    $0x4,%esp
+    1923:	6a 10                	push   $0x10
+    1925:	57                   	push   %edi
+    1926:	56                   	push   %esi
+    1927:	e8 bf 1f 00 00       	call   38eb <read>
+    192c:	83 c4 10             	add    $0x10,%esp
+    192f:	85 c0                	test   %eax,%eax
+    1931:	7e 3d                	jle    1970 <concreate+0x190>
+    if(de.inum == 0)
+    1933:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1938:	74 e6                	je     1920 <concreate+0x140>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    193a:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    193e:	75 e0                	jne    1920 <concreate+0x140>
+    1940:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    1944:	75 da                	jne    1920 <concreate+0x140>
+      i = de.name[1] - '0';
+    1946:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    194a:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    194d:	83 f8 27             	cmp    $0x27,%eax
+    1950:	0f 87 60 01 00 00    	ja     1ab6 <concreate+0x2d6>
+      if(fa[i]){
+    1956:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    195b:	0f 85 3d 01 00 00    	jne    1a9e <concreate+0x2be>
+      n++;
+    1961:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+      fa[i] = 1;
+    1965:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    196a:	eb b4                	jmp    1920 <concreate+0x140>
+    196c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    1970:	83 ec 0c             	sub    $0xc,%esp
+    1973:	56                   	push   %esi
+    1974:	e8 82 1f 00 00       	call   38fb <close>
+  if(n != 40){
+    1979:	83 c4 10             	add    $0x10,%esp
+    197c:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1980:	0f 85 05 01 00 00    	jne    1a8b <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    1986:	31 f6                	xor    %esi,%esi
+    1988:	eb 4c                	jmp    19d6 <concreate+0x1f6>
+    198a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1990:	85 ff                	test   %edi,%edi
+    1992:	74 05                	je     1999 <concreate+0x1b9>
+    1994:	83 f8 01             	cmp    $0x1,%eax
+    1997:	74 6c                	je     1a05 <concreate+0x225>
+      unlink(file);
+    1999:	83 ec 0c             	sub    $0xc,%esp
+    199c:	53                   	push   %ebx
+    199d:	e8 81 1f 00 00       	call   3923 <unlink>
+      unlink(file);
+    19a2:	89 1c 24             	mov    %ebx,(%esp)
+    19a5:	e8 79 1f 00 00       	call   3923 <unlink>
+      unlink(file);
+    19aa:	89 1c 24             	mov    %ebx,(%esp)
+    19ad:	e8 71 1f 00 00       	call   3923 <unlink>
+      unlink(file);
+    19b2:	89 1c 24             	mov    %ebx,(%esp)
+    19b5:	e8 69 1f 00 00       	call   3923 <unlink>
+    19ba:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    19bd:	85 ff                	test   %edi,%edi
+    19bf:	0f 84 fc fe ff ff    	je     18c1 <concreate+0xe1>
+      wait();
+    19c5:	e8 11 1f 00 00       	call   38db <wait>
+  for(i = 0; i < 40; i++){
+    19ca:	83 c6 01             	add    $0x1,%esi
+    19cd:	83 fe 28             	cmp    $0x28,%esi
+    19d0:	0f 84 8a 00 00 00    	je     1a60 <concreate+0x280>
+    file[1] = '0' + i;
+    19d6:	8d 46 30             	lea    0x30(%esi),%eax
+    19d9:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    19dc:	e8 ea 1e 00 00       	call   38cb <fork>
+    19e1:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    19e3:	85 c0                	test   %eax,%eax
+    19e5:	0f 88 8c 00 00 00    	js     1a77 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    19eb:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    19f0:	f7 e6                	mul    %esi
+    19f2:	89 d0                	mov    %edx,%eax
+    19f4:	83 e2 fe             	and    $0xfffffffe,%edx
+    19f7:	d1 e8                	shr    %eax
+    19f9:	01 c2                	add    %eax,%edx
+    19fb:	89 f0                	mov    %esi,%eax
+    19fd:	29 d0                	sub    %edx,%eax
+    19ff:	89 c1                	mov    %eax,%ecx
+    1a01:	09 f9                	or     %edi,%ecx
+    1a03:	75 8b                	jne    1990 <concreate+0x1b0>
+      close(open(file, 0));
+    1a05:	83 ec 08             	sub    $0x8,%esp
+    1a08:	6a 00                	push   $0x0
+    1a0a:	53                   	push   %ebx
+    1a0b:	e8 03 1f 00 00       	call   3913 <open>
+    1a10:	89 04 24             	mov    %eax,(%esp)
+    1a13:	e8 e3 1e 00 00       	call   38fb <close>
+      close(open(file, 0));
+    1a18:	58                   	pop    %eax
+    1a19:	5a                   	pop    %edx
+    1a1a:	6a 00                	push   $0x0
+    1a1c:	53                   	push   %ebx
+    1a1d:	e8 f1 1e 00 00       	call   3913 <open>
+    1a22:	89 04 24             	mov    %eax,(%esp)
+    1a25:	e8 d1 1e 00 00       	call   38fb <close>
+      close(open(file, 0));
+    1a2a:	59                   	pop    %ecx
+    1a2b:	58                   	pop    %eax
+    1a2c:	6a 00                	push   $0x0
+    1a2e:	53                   	push   %ebx
+    1a2f:	e8 df 1e 00 00       	call   3913 <open>
+    1a34:	89 04 24             	mov    %eax,(%esp)
+    1a37:	e8 bf 1e 00 00       	call   38fb <close>
+      close(open(file, 0));
+    1a3c:	58                   	pop    %eax
+    1a3d:	5a                   	pop    %edx
+    1a3e:	6a 00                	push   $0x0
+    1a40:	53                   	push   %ebx
+    1a41:	e8 cd 1e 00 00       	call   3913 <open>
+    1a46:	89 04 24             	mov    %eax,(%esp)
+    1a49:	e8 ad 1e 00 00       	call   38fb <close>
+    1a4e:	83 c4 10             	add    $0x10,%esp
+    1a51:	e9 67 ff ff ff       	jmp    19bd <concreate+0x1dd>
+    1a56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1a5d:	8d 76 00             	lea    0x0(%esi),%esi
+  printf(1, "concreate ok\n");
+    1a60:	83 ec 08             	sub    $0x8,%esp
+    1a63:	68 16 44 00 00       	push   $0x4416
+    1a68:	6a 01                	push   $0x1
+    1a6a:	e8 c1 1f 00 00       	call   3a30 <printf>
+}
+    1a6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1a72:	5b                   	pop    %ebx
+    1a73:	5e                   	pop    %esi
+    1a74:	5f                   	pop    %edi
+    1a75:	5d                   	pop    %ebp
+    1a76:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1a77:	83 ec 08             	sub    $0x8,%esp
+    1a7a:	68 99 4c 00 00       	push   $0x4c99
+    1a7f:	6a 01                	push   $0x1
+    1a81:	e8 aa 1f 00 00       	call   3a30 <printf>
+      exit();
+    1a86:	e8 48 1e 00 00       	call   38d3 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1a8b:	51                   	push   %ecx
+    1a8c:	51                   	push   %ecx
+    1a8d:	68 60 4f 00 00       	push   $0x4f60
+    1a92:	6a 01                	push   $0x1
+    1a94:	e8 97 1f 00 00       	call   3a30 <printf>
+    exit();
+    1a99:	e8 35 1e 00 00       	call   38d3 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1a9e:	83 ec 04             	sub    $0x4,%esp
+    1aa1:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1aa4:	50                   	push   %eax
+    1aa5:	68 f9 43 00 00       	push   $0x43f9
+    1aaa:	6a 01                	push   $0x1
+    1aac:	e8 7f 1f 00 00       	call   3a30 <printf>
+        exit();
+    1ab1:	e8 1d 1e 00 00       	call   38d3 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1ab6:	83 ec 04             	sub    $0x4,%esp
+    1ab9:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1abc:	50                   	push   %eax
+    1abd:	68 e0 43 00 00       	push   $0x43e0
+    1ac2:	6a 01                	push   $0x1
+    1ac4:	e8 67 1f 00 00       	call   3a30 <printf>
+        exit();
+    1ac9:	e8 05 1e 00 00       	call   38d3 <exit>
+      close(fd);
+    1ace:	83 ec 0c             	sub    $0xc,%esp
+    1ad1:	50                   	push   %eax
+    1ad2:	e8 24 1e 00 00       	call   38fb <close>
+    1ad7:	83 c4 10             	add    $0x10,%esp
+    1ada:	e9 e2 fd ff ff       	jmp    18c1 <concreate+0xe1>
+    1adf:	90                   	nop
+
+00001ae0 <linkunlink>:
+{
+    1ae0:	55                   	push   %ebp
+    1ae1:	89 e5                	mov    %esp,%ebp
+    1ae3:	57                   	push   %edi
+    1ae4:	56                   	push   %esi
+    1ae5:	53                   	push   %ebx
+    1ae6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1ae9:	68 24 44 00 00       	push   $0x4424
+    1aee:	6a 01                	push   $0x1
+    1af0:	e8 3b 1f 00 00       	call   3a30 <printf>
+  unlink("x");
+    1af5:	c7 04 24 b1 46 00 00 	movl   $0x46b1,(%esp)
+    1afc:	e8 22 1e 00 00       	call   3923 <unlink>
+  pid = fork();
+    1b01:	e8 c5 1d 00 00       	call   38cb <fork>
+  if(pid < 0){
+    1b06:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1b09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1b0c:	85 c0                	test   %eax,%eax
+    1b0e:	0f 88 b6 00 00 00    	js     1bca <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b14:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b18:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b1d:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b22:	19 ff                	sbb    %edi,%edi
+    1b24:	83 e7 60             	and    $0x60,%edi
+    1b27:	83 c7 01             	add    $0x1,%edi
+    1b2a:	eb 1e                	jmp    1b4a <linkunlink+0x6a>
+    1b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if((x % 3) == 1){
+    1b30:	83 f8 01             	cmp    $0x1,%eax
+    1b33:	74 7b                	je     1bb0 <linkunlink+0xd0>
+      unlink("x");
+    1b35:	83 ec 0c             	sub    $0xc,%esp
+    1b38:	68 b1 46 00 00       	push   $0x46b1
+    1b3d:	e8 e1 1d 00 00       	call   3923 <unlink>
+    1b42:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b45:	83 eb 01             	sub    $0x1,%ebx
+    1b48:	74 41                	je     1b8b <linkunlink+0xab>
+    x = x * 1103515245 + 12345;
+    1b4a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1b50:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1b56:	89 f8                	mov    %edi,%eax
+    1b58:	f7 e6                	mul    %esi
+    1b5a:	89 d0                	mov    %edx,%eax
+    1b5c:	83 e2 fe             	and    $0xfffffffe,%edx
+    1b5f:	d1 e8                	shr    %eax
+    1b61:	01 c2                	add    %eax,%edx
+    1b63:	89 f8                	mov    %edi,%eax
+    1b65:	29 d0                	sub    %edx,%eax
+    1b67:	75 c7                	jne    1b30 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1b69:	83 ec 08             	sub    $0x8,%esp
+    1b6c:	68 02 02 00 00       	push   $0x202
+    1b71:	68 b1 46 00 00       	push   $0x46b1
+    1b76:	e8 98 1d 00 00       	call   3913 <open>
+    1b7b:	89 04 24             	mov    %eax,(%esp)
+    1b7e:	e8 78 1d 00 00       	call   38fb <close>
+    1b83:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b86:	83 eb 01             	sub    $0x1,%ebx
+    1b89:	75 bf                	jne    1b4a <linkunlink+0x6a>
+  if(pid)
+    1b8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1b8e:	85 c0                	test   %eax,%eax
+    1b90:	74 4b                	je     1bdd <linkunlink+0xfd>
+    wait();
+    1b92:	e8 44 1d 00 00       	call   38db <wait>
+  printf(1, "linkunlink ok\n");
+    1b97:	83 ec 08             	sub    $0x8,%esp
+    1b9a:	68 39 44 00 00       	push   $0x4439
+    1b9f:	6a 01                	push   $0x1
+    1ba1:	e8 8a 1e 00 00       	call   3a30 <printf>
+}
+    1ba6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1ba9:	5b                   	pop    %ebx
+    1baa:	5e                   	pop    %esi
+    1bab:	5f                   	pop    %edi
+    1bac:	5d                   	pop    %ebp
+    1bad:	c3                   	ret    
+    1bae:	66 90                	xchg   %ax,%ax
+      link("cat", "x");
+    1bb0:	83 ec 08             	sub    $0x8,%esp
+    1bb3:	68 b1 46 00 00       	push   $0x46b1
+    1bb8:	68 35 44 00 00       	push   $0x4435
+    1bbd:	e8 71 1d 00 00       	call   3933 <link>
+    1bc2:	83 c4 10             	add    $0x10,%esp
+    1bc5:	e9 7b ff ff ff       	jmp    1b45 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1bca:	52                   	push   %edx
+    1bcb:	52                   	push   %edx
+    1bcc:	68 99 4c 00 00       	push   $0x4c99
+    1bd1:	6a 01                	push   $0x1
+    1bd3:	e8 58 1e 00 00       	call   3a30 <printf>
+    exit();
+    1bd8:	e8 f6 1c 00 00       	call   38d3 <exit>
+    exit();
+    1bdd:	e8 f1 1c 00 00       	call   38d3 <exit>
+    1be2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001bf0 <bigdir>:
+{
+    1bf0:	55                   	push   %ebp
+    1bf1:	89 e5                	mov    %esp,%ebp
+    1bf3:	57                   	push   %edi
+    1bf4:	56                   	push   %esi
+    1bf5:	53                   	push   %ebx
+    1bf6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1bf9:	68 48 44 00 00       	push   $0x4448
+    1bfe:	6a 01                	push   $0x1
+    1c00:	e8 2b 1e 00 00       	call   3a30 <printf>
+  unlink("bd");
+    1c05:	c7 04 24 55 44 00 00 	movl   $0x4455,(%esp)
+    1c0c:	e8 12 1d 00 00       	call   3923 <unlink>
+  fd = open("bd", O_CREATE);
+    1c11:	5a                   	pop    %edx
+    1c12:	59                   	pop    %ecx
+    1c13:	68 00 02 00 00       	push   $0x200
+    1c18:	68 55 44 00 00       	push   $0x4455
+    1c1d:	e8 f1 1c 00 00       	call   3913 <open>
+  if(fd < 0){
+    1c22:	83 c4 10             	add    $0x10,%esp
+    1c25:	85 c0                	test   %eax,%eax
+    1c27:	0f 88 de 00 00 00    	js     1d0b <bigdir+0x11b>
+  close(fd);
+    1c2d:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1c30:	31 f6                	xor    %esi,%esi
+    1c32:	8d 7d de             	lea    -0x22(%ebp),%edi
+  close(fd);
+    1c35:	50                   	push   %eax
+    1c36:	e8 c0 1c 00 00       	call   38fb <close>
+    1c3b:	83 c4 10             	add    $0x10,%esp
+    1c3e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + (i / 64);
+    1c40:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1c42:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1c45:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c49:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1c4c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1c4d:	83 c0 30             	add    $0x30,%eax
+    if(link("bd", name) != 0){
+    1c50:	68 55 44 00 00       	push   $0x4455
+    name[1] = '0' + (i / 64);
+    1c55:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c58:	89 f0                	mov    %esi,%eax
+    1c5a:	83 e0 3f             	and    $0x3f,%eax
+    name[3] = '\0';
+    1c5d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[2] = '0' + (i % 64);
+    1c61:	83 c0 30             	add    $0x30,%eax
+    1c64:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1c67:	e8 c7 1c 00 00       	call   3933 <link>
+    1c6c:	83 c4 10             	add    $0x10,%esp
+    1c6f:	89 c3                	mov    %eax,%ebx
+    1c71:	85 c0                	test   %eax,%eax
+    1c73:	75 6e                	jne    1ce3 <bigdir+0xf3>
+  for(i = 0; i < 500; i++){
+    1c75:	83 c6 01             	add    $0x1,%esi
+    1c78:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1c7e:	75 c0                	jne    1c40 <bigdir+0x50>
+  unlink("bd");
+    1c80:	83 ec 0c             	sub    $0xc,%esp
+    1c83:	68 55 44 00 00       	push   $0x4455
+    1c88:	e8 96 1c 00 00       	call   3923 <unlink>
+    1c8d:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + (i / 64);
+    1c90:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1c92:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1c95:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c99:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1c9c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1c9d:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1ca0:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1ca4:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1ca7:	89 d8                	mov    %ebx,%eax
+    1ca9:	83 e0 3f             	and    $0x3f,%eax
+    1cac:	83 c0 30             	add    $0x30,%eax
+    1caf:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1cb2:	e8 6c 1c 00 00       	call   3923 <unlink>
+    1cb7:	83 c4 10             	add    $0x10,%esp
+    1cba:	85 c0                	test   %eax,%eax
+    1cbc:	75 39                	jne    1cf7 <bigdir+0x107>
+  for(i = 0; i < 500; i++){
+    1cbe:	83 c3 01             	add    $0x1,%ebx
+    1cc1:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1cc7:	75 c7                	jne    1c90 <bigdir+0xa0>
+  printf(1, "bigdir ok\n");
+    1cc9:	83 ec 08             	sub    $0x8,%esp
+    1ccc:	68 97 44 00 00       	push   $0x4497
+    1cd1:	6a 01                	push   $0x1
+    1cd3:	e8 58 1d 00 00       	call   3a30 <printf>
+    1cd8:	83 c4 10             	add    $0x10,%esp
+}
+    1cdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1cde:	5b                   	pop    %ebx
+    1cdf:	5e                   	pop    %esi
+    1ce0:	5f                   	pop    %edi
+    1ce1:	5d                   	pop    %ebp
+    1ce2:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1ce3:	83 ec 08             	sub    $0x8,%esp
+    1ce6:	68 6e 44 00 00       	push   $0x446e
+    1ceb:	6a 01                	push   $0x1
+    1ced:	e8 3e 1d 00 00       	call   3a30 <printf>
+      exit();
+    1cf2:	e8 dc 1b 00 00       	call   38d3 <exit>
+      printf(1, "bigdir unlink failed");
+    1cf7:	83 ec 08             	sub    $0x8,%esp
+    1cfa:	68 82 44 00 00       	push   $0x4482
+    1cff:	6a 01                	push   $0x1
+    1d01:	e8 2a 1d 00 00       	call   3a30 <printf>
+      exit();
+    1d06:	e8 c8 1b 00 00       	call   38d3 <exit>
+    printf(1, "bigdir create failed\n");
+    1d0b:	50                   	push   %eax
+    1d0c:	50                   	push   %eax
+    1d0d:	68 58 44 00 00       	push   $0x4458
+    1d12:	6a 01                	push   $0x1
+    1d14:	e8 17 1d 00 00       	call   3a30 <printf>
+    exit();
+    1d19:	e8 b5 1b 00 00       	call   38d3 <exit>
+    1d1e:	66 90                	xchg   %ax,%ax
+
+00001d20 <subdir>:
+{
+    1d20:	55                   	push   %ebp
+    1d21:	89 e5                	mov    %esp,%ebp
+    1d23:	53                   	push   %ebx
+    1d24:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1d27:	68 a2 44 00 00       	push   $0x44a2
+    1d2c:	6a 01                	push   $0x1
+    1d2e:	e8 fd 1c 00 00       	call   3a30 <printf>
+  unlink("ff");
+    1d33:	c7 04 24 2b 45 00 00 	movl   $0x452b,(%esp)
+    1d3a:	e8 e4 1b 00 00       	call   3923 <unlink>
+  if(mkdir("dd") != 0){
+    1d3f:	c7 04 24 c8 45 00 00 	movl   $0x45c8,(%esp)
+    1d46:	e8 f0 1b 00 00       	call   393b <mkdir>
+    1d4b:	83 c4 10             	add    $0x10,%esp
+    1d4e:	85 c0                	test   %eax,%eax
+    1d50:	0f 85 b3 05 00 00    	jne    2309 <subdir+0x5e9>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d56:	83 ec 08             	sub    $0x8,%esp
+    1d59:	68 02 02 00 00       	push   $0x202
+    1d5e:	68 01 45 00 00       	push   $0x4501
+    1d63:	e8 ab 1b 00 00       	call   3913 <open>
+  if(fd < 0){
+    1d68:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d6b:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1d6d:	85 c0                	test   %eax,%eax
+    1d6f:	0f 88 81 05 00 00    	js     22f6 <subdir+0x5d6>
+  write(fd, "ff", 2);
+    1d75:	83 ec 04             	sub    $0x4,%esp
+    1d78:	6a 02                	push   $0x2
+    1d7a:	68 2b 45 00 00       	push   $0x452b
+    1d7f:	50                   	push   %eax
+    1d80:	e8 6e 1b 00 00       	call   38f3 <write>
+  close(fd);
+    1d85:	89 1c 24             	mov    %ebx,(%esp)
+    1d88:	e8 6e 1b 00 00       	call   38fb <close>
+  if(unlink("dd") >= 0){
+    1d8d:	c7 04 24 c8 45 00 00 	movl   $0x45c8,(%esp)
+    1d94:	e8 8a 1b 00 00       	call   3923 <unlink>
+    1d99:	83 c4 10             	add    $0x10,%esp
+    1d9c:	85 c0                	test   %eax,%eax
+    1d9e:	0f 89 3f 05 00 00    	jns    22e3 <subdir+0x5c3>
+  if(mkdir("/dd/dd") != 0){
+    1da4:	83 ec 0c             	sub    $0xc,%esp
+    1da7:	68 dc 44 00 00       	push   $0x44dc
+    1dac:	e8 8a 1b 00 00       	call   393b <mkdir>
+    1db1:	83 c4 10             	add    $0x10,%esp
+    1db4:	85 c0                	test   %eax,%eax
+    1db6:	0f 85 14 05 00 00    	jne    22d0 <subdir+0x5b0>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dbc:	83 ec 08             	sub    $0x8,%esp
+    1dbf:	68 02 02 00 00       	push   $0x202
+    1dc4:	68 fe 44 00 00       	push   $0x44fe
+    1dc9:	e8 45 1b 00 00       	call   3913 <open>
+  if(fd < 0){
+    1dce:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dd1:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1dd3:	85 c0                	test   %eax,%eax
+    1dd5:	0f 88 24 04 00 00    	js     21ff <subdir+0x4df>
+  write(fd, "FF", 2);
+    1ddb:	83 ec 04             	sub    $0x4,%esp
+    1dde:	6a 02                	push   $0x2
+    1de0:	68 1f 45 00 00       	push   $0x451f
+    1de5:	50                   	push   %eax
+    1de6:	e8 08 1b 00 00       	call   38f3 <write>
+  close(fd);
+    1deb:	89 1c 24             	mov    %ebx,(%esp)
+    1dee:	e8 08 1b 00 00       	call   38fb <close>
+  fd = open("dd/dd/../ff", 0);
+    1df3:	58                   	pop    %eax
+    1df4:	5a                   	pop    %edx
+    1df5:	6a 00                	push   $0x0
+    1df7:	68 22 45 00 00       	push   $0x4522
+    1dfc:	e8 12 1b 00 00       	call   3913 <open>
+  if(fd < 0){
+    1e01:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/../ff", 0);
+    1e04:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e06:	85 c0                	test   %eax,%eax
+    1e08:	0f 88 de 03 00 00    	js     21ec <subdir+0x4cc>
+  cc = read(fd, buf, sizeof(buf));
+    1e0e:	83 ec 04             	sub    $0x4,%esp
+    1e11:	68 00 20 00 00       	push   $0x2000
+    1e16:	68 80 85 00 00       	push   $0x8580
+    1e1b:	50                   	push   %eax
+    1e1c:	e8 ca 1a 00 00       	call   38eb <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1e21:	83 c4 10             	add    $0x10,%esp
+    1e24:	83 f8 02             	cmp    $0x2,%eax
+    1e27:	0f 85 3a 03 00 00    	jne    2167 <subdir+0x447>
+    1e2d:	80 3d 80 85 00 00 66 	cmpb   $0x66,0x8580
+    1e34:	0f 85 2d 03 00 00    	jne    2167 <subdir+0x447>
+  close(fd);
+    1e3a:	83 ec 0c             	sub    $0xc,%esp
+    1e3d:	53                   	push   %ebx
+    1e3e:	e8 b8 1a 00 00       	call   38fb <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1e43:	59                   	pop    %ecx
+    1e44:	5b                   	pop    %ebx
+    1e45:	68 62 45 00 00       	push   $0x4562
+    1e4a:	68 fe 44 00 00       	push   $0x44fe
+    1e4f:	e8 df 1a 00 00       	call   3933 <link>
+    1e54:	83 c4 10             	add    $0x10,%esp
+    1e57:	85 c0                	test   %eax,%eax
+    1e59:	0f 85 c6 03 00 00    	jne    2225 <subdir+0x505>
+  if(unlink("dd/dd/ff") != 0){
+    1e5f:	83 ec 0c             	sub    $0xc,%esp
+    1e62:	68 fe 44 00 00       	push   $0x44fe
+    1e67:	e8 b7 1a 00 00       	call   3923 <unlink>
+    1e6c:	83 c4 10             	add    $0x10,%esp
+    1e6f:	85 c0                	test   %eax,%eax
+    1e71:	0f 85 16 03 00 00    	jne    218d <subdir+0x46d>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1e77:	83 ec 08             	sub    $0x8,%esp
+    1e7a:	6a 00                	push   $0x0
+    1e7c:	68 fe 44 00 00       	push   $0x44fe
+    1e81:	e8 8d 1a 00 00       	call   3913 <open>
+    1e86:	83 c4 10             	add    $0x10,%esp
+    1e89:	85 c0                	test   %eax,%eax
+    1e8b:	0f 89 2c 04 00 00    	jns    22bd <subdir+0x59d>
+  if(chdir("dd") != 0){
+    1e91:	83 ec 0c             	sub    $0xc,%esp
+    1e94:	68 c8 45 00 00       	push   $0x45c8
+    1e99:	e8 a5 1a 00 00       	call   3943 <chdir>
+    1e9e:	83 c4 10             	add    $0x10,%esp
+    1ea1:	85 c0                	test   %eax,%eax
+    1ea3:	0f 85 01 04 00 00    	jne    22aa <subdir+0x58a>
+  if(chdir("dd/../../dd") != 0){
+    1ea9:	83 ec 0c             	sub    $0xc,%esp
+    1eac:	68 96 45 00 00       	push   $0x4596
+    1eb1:	e8 8d 1a 00 00       	call   3943 <chdir>
+    1eb6:	83 c4 10             	add    $0x10,%esp
+    1eb9:	85 c0                	test   %eax,%eax
+    1ebb:	0f 85 b9 02 00 00    	jne    217a <subdir+0x45a>
+  if(chdir("dd/../../../dd") != 0){
+    1ec1:	83 ec 0c             	sub    $0xc,%esp
+    1ec4:	68 bc 45 00 00       	push   $0x45bc
+    1ec9:	e8 75 1a 00 00       	call   3943 <chdir>
+    1ece:	83 c4 10             	add    $0x10,%esp
+    1ed1:	85 c0                	test   %eax,%eax
+    1ed3:	0f 85 a1 02 00 00    	jne    217a <subdir+0x45a>
+  if(chdir("./..") != 0){
+    1ed9:	83 ec 0c             	sub    $0xc,%esp
+    1edc:	68 cb 45 00 00       	push   $0x45cb
+    1ee1:	e8 5d 1a 00 00       	call   3943 <chdir>
+    1ee6:	83 c4 10             	add    $0x10,%esp
+    1ee9:	85 c0                	test   %eax,%eax
+    1eeb:	0f 85 21 03 00 00    	jne    2212 <subdir+0x4f2>
+  fd = open("dd/dd/ffff", 0);
+    1ef1:	83 ec 08             	sub    $0x8,%esp
+    1ef4:	6a 00                	push   $0x0
+    1ef6:	68 62 45 00 00       	push   $0x4562
+    1efb:	e8 13 1a 00 00       	call   3913 <open>
+  if(fd < 0){
+    1f00:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ffff", 0);
+    1f03:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1f05:	85 c0                	test   %eax,%eax
+    1f07:	0f 88 e0 04 00 00    	js     23ed <subdir+0x6cd>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1f0d:	83 ec 04             	sub    $0x4,%esp
+    1f10:	68 00 20 00 00       	push   $0x2000
+    1f15:	68 80 85 00 00       	push   $0x8580
+    1f1a:	50                   	push   %eax
+    1f1b:	e8 cb 19 00 00       	call   38eb <read>
+    1f20:	83 c4 10             	add    $0x10,%esp
+    1f23:	83 f8 02             	cmp    $0x2,%eax
+    1f26:	0f 85 ae 04 00 00    	jne    23da <subdir+0x6ba>
+  close(fd);
+    1f2c:	83 ec 0c             	sub    $0xc,%esp
+    1f2f:	53                   	push   %ebx
+    1f30:	e8 c6 19 00 00       	call   38fb <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1f35:	58                   	pop    %eax
+    1f36:	5a                   	pop    %edx
+    1f37:	6a 00                	push   $0x0
+    1f39:	68 fe 44 00 00       	push   $0x44fe
+    1f3e:	e8 d0 19 00 00       	call   3913 <open>
+    1f43:	83 c4 10             	add    $0x10,%esp
+    1f46:	85 c0                	test   %eax,%eax
+    1f48:	0f 89 65 02 00 00    	jns    21b3 <subdir+0x493>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1f4e:	83 ec 08             	sub    $0x8,%esp
+    1f51:	68 02 02 00 00       	push   $0x202
+    1f56:	68 16 46 00 00       	push   $0x4616
+    1f5b:	e8 b3 19 00 00       	call   3913 <open>
+    1f60:	83 c4 10             	add    $0x10,%esp
+    1f63:	85 c0                	test   %eax,%eax
+    1f65:	0f 89 35 02 00 00    	jns    21a0 <subdir+0x480>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1f6b:	83 ec 08             	sub    $0x8,%esp
+    1f6e:	68 02 02 00 00       	push   $0x202
+    1f73:	68 3b 46 00 00       	push   $0x463b
+    1f78:	e8 96 19 00 00       	call   3913 <open>
+    1f7d:	83 c4 10             	add    $0x10,%esp
+    1f80:	85 c0                	test   %eax,%eax
+    1f82:	0f 89 0f 03 00 00    	jns    2297 <subdir+0x577>
+  if(open("dd", O_CREATE) >= 0){
+    1f88:	83 ec 08             	sub    $0x8,%esp
+    1f8b:	68 00 02 00 00       	push   $0x200
+    1f90:	68 c8 45 00 00       	push   $0x45c8
+    1f95:	e8 79 19 00 00       	call   3913 <open>
+    1f9a:	83 c4 10             	add    $0x10,%esp
+    1f9d:	85 c0                	test   %eax,%eax
+    1f9f:	0f 89 df 02 00 00    	jns    2284 <subdir+0x564>
+  if(open("dd", O_RDWR) >= 0){
+    1fa5:	83 ec 08             	sub    $0x8,%esp
+    1fa8:	6a 02                	push   $0x2
+    1faa:	68 c8 45 00 00       	push   $0x45c8
+    1faf:	e8 5f 19 00 00       	call   3913 <open>
+    1fb4:	83 c4 10             	add    $0x10,%esp
+    1fb7:	85 c0                	test   %eax,%eax
+    1fb9:	0f 89 b2 02 00 00    	jns    2271 <subdir+0x551>
+  if(open("dd", O_WRONLY) >= 0){
+    1fbf:	83 ec 08             	sub    $0x8,%esp
+    1fc2:	6a 01                	push   $0x1
+    1fc4:	68 c8 45 00 00       	push   $0x45c8
+    1fc9:	e8 45 19 00 00       	call   3913 <open>
+    1fce:	83 c4 10             	add    $0x10,%esp
+    1fd1:	85 c0                	test   %eax,%eax
+    1fd3:	0f 89 85 02 00 00    	jns    225e <subdir+0x53e>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    1fd9:	83 ec 08             	sub    $0x8,%esp
+    1fdc:	68 aa 46 00 00       	push   $0x46aa
+    1fe1:	68 16 46 00 00       	push   $0x4616
+    1fe6:	e8 48 19 00 00       	call   3933 <link>
+    1feb:	83 c4 10             	add    $0x10,%esp
+    1fee:	85 c0                	test   %eax,%eax
+    1ff0:	0f 84 55 02 00 00    	je     224b <subdir+0x52b>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    1ff6:	83 ec 08             	sub    $0x8,%esp
+    1ff9:	68 aa 46 00 00       	push   $0x46aa
+    1ffe:	68 3b 46 00 00       	push   $0x463b
+    2003:	e8 2b 19 00 00       	call   3933 <link>
+    2008:	83 c4 10             	add    $0x10,%esp
+    200b:	85 c0                	test   %eax,%eax
+    200d:	0f 84 25 02 00 00    	je     2238 <subdir+0x518>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2013:	83 ec 08             	sub    $0x8,%esp
+    2016:	68 62 45 00 00       	push   $0x4562
+    201b:	68 01 45 00 00       	push   $0x4501
+    2020:	e8 0e 19 00 00       	call   3933 <link>
+    2025:	83 c4 10             	add    $0x10,%esp
+    2028:	85 c0                	test   %eax,%eax
+    202a:	0f 84 a9 01 00 00    	je     21d9 <subdir+0x4b9>
+  if(mkdir("dd/ff/ff") == 0){
+    2030:	83 ec 0c             	sub    $0xc,%esp
+    2033:	68 16 46 00 00       	push   $0x4616
+    2038:	e8 fe 18 00 00       	call   393b <mkdir>
+    203d:	83 c4 10             	add    $0x10,%esp
+    2040:	85 c0                	test   %eax,%eax
+    2042:	0f 84 7e 01 00 00    	je     21c6 <subdir+0x4a6>
+  if(mkdir("dd/xx/ff") == 0){
+    2048:	83 ec 0c             	sub    $0xc,%esp
+    204b:	68 3b 46 00 00       	push   $0x463b
+    2050:	e8 e6 18 00 00       	call   393b <mkdir>
+    2055:	83 c4 10             	add    $0x10,%esp
+    2058:	85 c0                	test   %eax,%eax
+    205a:	0f 84 67 03 00 00    	je     23c7 <subdir+0x6a7>
+  if(mkdir("dd/dd/ffff") == 0){
+    2060:	83 ec 0c             	sub    $0xc,%esp
+    2063:	68 62 45 00 00       	push   $0x4562
+    2068:	e8 ce 18 00 00       	call   393b <mkdir>
+    206d:	83 c4 10             	add    $0x10,%esp
+    2070:	85 c0                	test   %eax,%eax
+    2072:	0f 84 3c 03 00 00    	je     23b4 <subdir+0x694>
+  if(unlink("dd/xx/ff") == 0){
+    2078:	83 ec 0c             	sub    $0xc,%esp
+    207b:	68 3b 46 00 00       	push   $0x463b
+    2080:	e8 9e 18 00 00       	call   3923 <unlink>
+    2085:	83 c4 10             	add    $0x10,%esp
+    2088:	85 c0                	test   %eax,%eax
+    208a:	0f 84 11 03 00 00    	je     23a1 <subdir+0x681>
+  if(unlink("dd/ff/ff") == 0){
+    2090:	83 ec 0c             	sub    $0xc,%esp
+    2093:	68 16 46 00 00       	push   $0x4616
+    2098:	e8 86 18 00 00       	call   3923 <unlink>
+    209d:	83 c4 10             	add    $0x10,%esp
+    20a0:	85 c0                	test   %eax,%eax
+    20a2:	0f 84 e6 02 00 00    	je     238e <subdir+0x66e>
+  if(chdir("dd/ff") == 0){
+    20a8:	83 ec 0c             	sub    $0xc,%esp
+    20ab:	68 01 45 00 00       	push   $0x4501
+    20b0:	e8 8e 18 00 00       	call   3943 <chdir>
+    20b5:	83 c4 10             	add    $0x10,%esp
+    20b8:	85 c0                	test   %eax,%eax
+    20ba:	0f 84 bb 02 00 00    	je     237b <subdir+0x65b>
+  if(chdir("dd/xx") == 0){
+    20c0:	83 ec 0c             	sub    $0xc,%esp
+    20c3:	68 ad 46 00 00       	push   $0x46ad
+    20c8:	e8 76 18 00 00       	call   3943 <chdir>
+    20cd:	83 c4 10             	add    $0x10,%esp
+    20d0:	85 c0                	test   %eax,%eax
+    20d2:	0f 84 90 02 00 00    	je     2368 <subdir+0x648>
+  if(unlink("dd/dd/ffff") != 0){
+    20d8:	83 ec 0c             	sub    $0xc,%esp
+    20db:	68 62 45 00 00       	push   $0x4562
+    20e0:	e8 3e 18 00 00       	call   3923 <unlink>
+    20e5:	83 c4 10             	add    $0x10,%esp
+    20e8:	85 c0                	test   %eax,%eax
+    20ea:	0f 85 9d 00 00 00    	jne    218d <subdir+0x46d>
+  if(unlink("dd/ff") != 0){
+    20f0:	83 ec 0c             	sub    $0xc,%esp
+    20f3:	68 01 45 00 00       	push   $0x4501
+    20f8:	e8 26 18 00 00       	call   3923 <unlink>
+    20fd:	83 c4 10             	add    $0x10,%esp
+    2100:	85 c0                	test   %eax,%eax
+    2102:	0f 85 4d 02 00 00    	jne    2355 <subdir+0x635>
+  if(unlink("dd") == 0){
+    2108:	83 ec 0c             	sub    $0xc,%esp
+    210b:	68 c8 45 00 00       	push   $0x45c8
+    2110:	e8 0e 18 00 00       	call   3923 <unlink>
+    2115:	83 c4 10             	add    $0x10,%esp
+    2118:	85 c0                	test   %eax,%eax
+    211a:	0f 84 22 02 00 00    	je     2342 <subdir+0x622>
+  if(unlink("dd/dd") < 0){
+    2120:	83 ec 0c             	sub    $0xc,%esp
+    2123:	68 dd 44 00 00       	push   $0x44dd
+    2128:	e8 f6 17 00 00       	call   3923 <unlink>
+    212d:	83 c4 10             	add    $0x10,%esp
+    2130:	85 c0                	test   %eax,%eax
+    2132:	0f 88 f7 01 00 00    	js     232f <subdir+0x60f>
+  if(unlink("dd") < 0){
+    2138:	83 ec 0c             	sub    $0xc,%esp
+    213b:	68 c8 45 00 00       	push   $0x45c8
+    2140:	e8 de 17 00 00       	call   3923 <unlink>
+    2145:	83 c4 10             	add    $0x10,%esp
+    2148:	85 c0                	test   %eax,%eax
+    214a:	0f 88 cc 01 00 00    	js     231c <subdir+0x5fc>
+  printf(1, "subdir ok\n");
+    2150:	83 ec 08             	sub    $0x8,%esp
+    2153:	68 aa 47 00 00       	push   $0x47aa
+    2158:	6a 01                	push   $0x1
+    215a:	e8 d1 18 00 00       	call   3a30 <printf>
+}
+    215f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2162:	83 c4 10             	add    $0x10,%esp
+    2165:	c9                   	leave  
+    2166:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    2167:	50                   	push   %eax
+    2168:	50                   	push   %eax
+    2169:	68 47 45 00 00       	push   $0x4547
+    216e:	6a 01                	push   $0x1
+    2170:	e8 bb 18 00 00       	call   3a30 <printf>
+    exit();
+    2175:	e8 59 17 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    217a:	50                   	push   %eax
+    217b:	50                   	push   %eax
+    217c:	68 a2 45 00 00       	push   $0x45a2
+    2181:	6a 01                	push   $0x1
+    2183:	e8 a8 18 00 00       	call   3a30 <printf>
+    exit();
+    2188:	e8 46 17 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    218d:	50                   	push   %eax
+    218e:	50                   	push   %eax
+    218f:	68 6d 45 00 00       	push   $0x456d
+    2194:	6a 01                	push   $0x1
+    2196:	e8 95 18 00 00       	call   3a30 <printf>
+    exit();
+    219b:	e8 33 17 00 00       	call   38d3 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    21a0:	51                   	push   %ecx
+    21a1:	51                   	push   %ecx
+    21a2:	68 1f 46 00 00       	push   $0x461f
+    21a7:	6a 01                	push   $0x1
+    21a9:	e8 82 18 00 00       	call   3a30 <printf>
+    exit();
+    21ae:	e8 20 17 00 00       	call   38d3 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    21b3:	53                   	push   %ebx
+    21b4:	53                   	push   %ebx
+    21b5:	68 04 50 00 00       	push   $0x5004
+    21ba:	6a 01                	push   $0x1
+    21bc:	e8 6f 18 00 00       	call   3a30 <printf>
+    exit();
+    21c1:	e8 0d 17 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    21c6:	51                   	push   %ecx
+    21c7:	51                   	push   %ecx
+    21c8:	68 b3 46 00 00       	push   $0x46b3
+    21cd:	6a 01                	push   $0x1
+    21cf:	e8 5c 18 00 00       	call   3a30 <printf>
+    exit();
+    21d4:	e8 fa 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    21d9:	53                   	push   %ebx
+    21da:	53                   	push   %ebx
+    21db:	68 74 50 00 00       	push   $0x5074
+    21e0:	6a 01                	push   $0x1
+    21e2:	e8 49 18 00 00       	call   3a30 <printf>
+    exit();
+    21e7:	e8 e7 16 00 00       	call   38d3 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    21ec:	50                   	push   %eax
+    21ed:	50                   	push   %eax
+    21ee:	68 2e 45 00 00       	push   $0x452e
+    21f3:	6a 01                	push   $0x1
+    21f5:	e8 36 18 00 00       	call   3a30 <printf>
+    exit();
+    21fa:	e8 d4 16 00 00       	call   38d3 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    21ff:	51                   	push   %ecx
+    2200:	51                   	push   %ecx
+    2201:	68 07 45 00 00       	push   $0x4507
+    2206:	6a 01                	push   $0x1
+    2208:	e8 23 18 00 00       	call   3a30 <printf>
+    exit();
+    220d:	e8 c1 16 00 00       	call   38d3 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2212:	50                   	push   %eax
+    2213:	50                   	push   %eax
+    2214:	68 d0 45 00 00       	push   $0x45d0
+    2219:	6a 01                	push   $0x1
+    221b:	e8 10 18 00 00       	call   3a30 <printf>
+    exit();
+    2220:	e8 ae 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    2225:	52                   	push   %edx
+    2226:	52                   	push   %edx
+    2227:	68 bc 4f 00 00       	push   $0x4fbc
+    222c:	6a 01                	push   $0x1
+    222e:	e8 fd 17 00 00       	call   3a30 <printf>
+    exit();
+    2233:	e8 9b 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2238:	50                   	push   %eax
+    2239:	50                   	push   %eax
+    223a:	68 50 50 00 00       	push   $0x5050
+    223f:	6a 01                	push   $0x1
+    2241:	e8 ea 17 00 00       	call   3a30 <printf>
+    exit();
+    2246:	e8 88 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    224b:	50                   	push   %eax
+    224c:	50                   	push   %eax
+    224d:	68 2c 50 00 00       	push   $0x502c
+    2252:	6a 01                	push   $0x1
+    2254:	e8 d7 17 00 00       	call   3a30 <printf>
+    exit();
+    2259:	e8 75 16 00 00       	call   38d3 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    225e:	50                   	push   %eax
+    225f:	50                   	push   %eax
+    2260:	68 8f 46 00 00       	push   $0x468f
+    2265:	6a 01                	push   $0x1
+    2267:	e8 c4 17 00 00       	call   3a30 <printf>
+    exit();
+    226c:	e8 62 16 00 00       	call   38d3 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    2271:	50                   	push   %eax
+    2272:	50                   	push   %eax
+    2273:	68 76 46 00 00       	push   $0x4676
+    2278:	6a 01                	push   $0x1
+    227a:	e8 b1 17 00 00       	call   3a30 <printf>
+    exit();
+    227f:	e8 4f 16 00 00       	call   38d3 <exit>
+    printf(1, "create dd succeeded!\n");
+    2284:	50                   	push   %eax
+    2285:	50                   	push   %eax
+    2286:	68 60 46 00 00       	push   $0x4660
+    228b:	6a 01                	push   $0x1
+    228d:	e8 9e 17 00 00       	call   3a30 <printf>
+    exit();
+    2292:	e8 3c 16 00 00       	call   38d3 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2297:	52                   	push   %edx
+    2298:	52                   	push   %edx
+    2299:	68 44 46 00 00       	push   $0x4644
+    229e:	6a 01                	push   $0x1
+    22a0:	e8 8b 17 00 00       	call   3a30 <printf>
+    exit();
+    22a5:	e8 29 16 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd failed\n");
+    22aa:	50                   	push   %eax
+    22ab:	50                   	push   %eax
+    22ac:	68 85 45 00 00       	push   $0x4585
+    22b1:	6a 01                	push   $0x1
+    22b3:	e8 78 17 00 00       	call   3a30 <printf>
+    exit();
+    22b8:	e8 16 16 00 00       	call   38d3 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    22bd:	50                   	push   %eax
+    22be:	50                   	push   %eax
+    22bf:	68 e0 4f 00 00       	push   $0x4fe0
+    22c4:	6a 01                	push   $0x1
+    22c6:	e8 65 17 00 00       	call   3a30 <printf>
+    exit();
+    22cb:	e8 03 16 00 00       	call   38d3 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    22d0:	53                   	push   %ebx
+    22d1:	53                   	push   %ebx
+    22d2:	68 e3 44 00 00       	push   $0x44e3
+    22d7:	6a 01                	push   $0x1
+    22d9:	e8 52 17 00 00       	call   3a30 <printf>
+    exit();
+    22de:	e8 f0 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    22e3:	50                   	push   %eax
+    22e4:	50                   	push   %eax
+    22e5:	68 94 4f 00 00       	push   $0x4f94
+    22ea:	6a 01                	push   $0x1
+    22ec:	e8 3f 17 00 00       	call   3a30 <printf>
+    exit();
+    22f1:	e8 dd 15 00 00       	call   38d3 <exit>
+    printf(1, "create dd/ff failed\n");
+    22f6:	50                   	push   %eax
+    22f7:	50                   	push   %eax
+    22f8:	68 c7 44 00 00       	push   $0x44c7
+    22fd:	6a 01                	push   $0x1
+    22ff:	e8 2c 17 00 00       	call   3a30 <printf>
+    exit();
+    2304:	e8 ca 15 00 00       	call   38d3 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    2309:	50                   	push   %eax
+    230a:	50                   	push   %eax
+    230b:	68 af 44 00 00       	push   $0x44af
+    2310:	6a 01                	push   $0x1
+    2312:	e8 19 17 00 00       	call   3a30 <printf>
+    exit();
+    2317:	e8 b7 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd failed\n");
+    231c:	50                   	push   %eax
+    231d:	50                   	push   %eax
+    231e:	68 98 47 00 00       	push   $0x4798
+    2323:	6a 01                	push   $0x1
+    2325:	e8 06 17 00 00       	call   3a30 <printf>
+    exit();
+    232a:	e8 a4 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    232f:	52                   	push   %edx
+    2330:	52                   	push   %edx
+    2331:	68 83 47 00 00       	push   $0x4783
+    2336:	6a 01                	push   $0x1
+    2338:	e8 f3 16 00 00       	call   3a30 <printf>
+    exit();
+    233d:	e8 91 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2342:	51                   	push   %ecx
+    2343:	51                   	push   %ecx
+    2344:	68 98 50 00 00       	push   $0x5098
+    2349:	6a 01                	push   $0x1
+    234b:	e8 e0 16 00 00       	call   3a30 <printf>
+    exit();
+    2350:	e8 7e 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    2355:	53                   	push   %ebx
+    2356:	53                   	push   %ebx
+    2357:	68 6e 47 00 00       	push   $0x476e
+    235c:	6a 01                	push   $0x1
+    235e:	e8 cd 16 00 00       	call   3a30 <printf>
+    exit();
+    2363:	e8 6b 15 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    2368:	50                   	push   %eax
+    2369:	50                   	push   %eax
+    236a:	68 56 47 00 00       	push   $0x4756
+    236f:	6a 01                	push   $0x1
+    2371:	e8 ba 16 00 00       	call   3a30 <printf>
+    exit();
+    2376:	e8 58 15 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    237b:	50                   	push   %eax
+    237c:	50                   	push   %eax
+    237d:	68 3e 47 00 00       	push   $0x473e
+    2382:	6a 01                	push   $0x1
+    2384:	e8 a7 16 00 00       	call   3a30 <printf>
+    exit();
+    2389:	e8 45 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    238e:	50                   	push   %eax
+    238f:	50                   	push   %eax
+    2390:	68 22 47 00 00       	push   $0x4722
+    2395:	6a 01                	push   $0x1
+    2397:	e8 94 16 00 00       	call   3a30 <printf>
+    exit();
+    239c:	e8 32 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    23a1:	50                   	push   %eax
+    23a2:	50                   	push   %eax
+    23a3:	68 06 47 00 00       	push   $0x4706
+    23a8:	6a 01                	push   $0x1
+    23aa:	e8 81 16 00 00       	call   3a30 <printf>
+    exit();
+    23af:	e8 1f 15 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    23b4:	50                   	push   %eax
+    23b5:	50                   	push   %eax
+    23b6:	68 e9 46 00 00       	push   $0x46e9
+    23bb:	6a 01                	push   $0x1
+    23bd:	e8 6e 16 00 00       	call   3a30 <printf>
+    exit();
+    23c2:	e8 0c 15 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    23c7:	52                   	push   %edx
+    23c8:	52                   	push   %edx
+    23c9:	68 ce 46 00 00       	push   $0x46ce
+    23ce:	6a 01                	push   $0x1
+    23d0:	e8 5b 16 00 00       	call   3a30 <printf>
+    exit();
+    23d5:	e8 f9 14 00 00       	call   38d3 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    23da:	51                   	push   %ecx
+    23db:	51                   	push   %ecx
+    23dc:	68 fb 45 00 00       	push   $0x45fb
+    23e1:	6a 01                	push   $0x1
+    23e3:	e8 48 16 00 00       	call   3a30 <printf>
+    exit();
+    23e8:	e8 e6 14 00 00       	call   38d3 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    23ed:	53                   	push   %ebx
+    23ee:	53                   	push   %ebx
+    23ef:	68 e3 45 00 00       	push   $0x45e3
+    23f4:	6a 01                	push   $0x1
+    23f6:	e8 35 16 00 00       	call   3a30 <printf>
+    exit();
+    23fb:	e8 d3 14 00 00       	call   38d3 <exit>
+
+00002400 <bigwrite>:
+{
+    2400:	55                   	push   %ebp
+    2401:	89 e5                	mov    %esp,%ebp
+    2403:	56                   	push   %esi
+    2404:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    2405:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    240a:	83 ec 08             	sub    $0x8,%esp
+    240d:	68 b5 47 00 00       	push   $0x47b5
+    2412:	6a 01                	push   $0x1
+    2414:	e8 17 16 00 00       	call   3a30 <printf>
+  unlink("bigwrite");
+    2419:	c7 04 24 c4 47 00 00 	movl   $0x47c4,(%esp)
+    2420:	e8 fe 14 00 00       	call   3923 <unlink>
+    2425:	83 c4 10             	add    $0x10,%esp
+    2428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    242f:	90                   	nop
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2430:	83 ec 08             	sub    $0x8,%esp
+    2433:	68 02 02 00 00       	push   $0x202
+    2438:	68 c4 47 00 00       	push   $0x47c4
+    243d:	e8 d1 14 00 00       	call   3913 <open>
+    if(fd < 0){
+    2442:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2445:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    2447:	85 c0                	test   %eax,%eax
+    2449:	78 7e                	js     24c9 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    244b:	83 ec 04             	sub    $0x4,%esp
+    244e:	53                   	push   %ebx
+    244f:	68 80 85 00 00       	push   $0x8580
+    2454:	50                   	push   %eax
+    2455:	e8 99 14 00 00       	call   38f3 <write>
+      if(cc != sz){
+    245a:	83 c4 10             	add    $0x10,%esp
+    245d:	39 d8                	cmp    %ebx,%eax
+    245f:	75 55                	jne    24b6 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    2461:	83 ec 04             	sub    $0x4,%esp
+    2464:	53                   	push   %ebx
+    2465:	68 80 85 00 00       	push   $0x8580
+    246a:	56                   	push   %esi
+    246b:	e8 83 14 00 00       	call   38f3 <write>
+      if(cc != sz){
+    2470:	83 c4 10             	add    $0x10,%esp
+    2473:	39 d8                	cmp    %ebx,%eax
+    2475:	75 3f                	jne    24b6 <bigwrite+0xb6>
+    close(fd);
+    2477:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    247a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2480:	56                   	push   %esi
+    2481:	e8 75 14 00 00       	call   38fb <close>
+    unlink("bigwrite");
+    2486:	c7 04 24 c4 47 00 00 	movl   $0x47c4,(%esp)
+    248d:	e8 91 14 00 00       	call   3923 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2492:	83 c4 10             	add    $0x10,%esp
+    2495:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    249b:	75 93                	jne    2430 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    249d:	83 ec 08             	sub    $0x8,%esp
+    24a0:	68 f7 47 00 00       	push   $0x47f7
+    24a5:	6a 01                	push   $0x1
+    24a7:	e8 84 15 00 00       	call   3a30 <printf>
+}
+    24ac:	83 c4 10             	add    $0x10,%esp
+    24af:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    24b2:	5b                   	pop    %ebx
+    24b3:	5e                   	pop    %esi
+    24b4:	5d                   	pop    %ebp
+    24b5:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    24b6:	50                   	push   %eax
+    24b7:	53                   	push   %ebx
+    24b8:	68 e5 47 00 00       	push   $0x47e5
+    24bd:	6a 01                	push   $0x1
+    24bf:	e8 6c 15 00 00       	call   3a30 <printf>
+        exit();
+    24c4:	e8 0a 14 00 00       	call   38d3 <exit>
+      printf(1, "cannot create bigwrite\n");
+    24c9:	83 ec 08             	sub    $0x8,%esp
+    24cc:	68 cd 47 00 00       	push   $0x47cd
+    24d1:	6a 01                	push   $0x1
+    24d3:	e8 58 15 00 00       	call   3a30 <printf>
+      exit();
+    24d8:	e8 f6 13 00 00       	call   38d3 <exit>
+    24dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000024e0 <bigfile>:
+{
+    24e0:	55                   	push   %ebp
+    24e1:	89 e5                	mov    %esp,%ebp
+    24e3:	57                   	push   %edi
+    24e4:	56                   	push   %esi
+    24e5:	53                   	push   %ebx
+    24e6:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    24e9:	68 04 48 00 00       	push   $0x4804
+    24ee:	6a 01                	push   $0x1
+    24f0:	e8 3b 15 00 00       	call   3a30 <printf>
+  unlink("bigfile");
+    24f5:	c7 04 24 20 48 00 00 	movl   $0x4820,(%esp)
+    24fc:	e8 22 14 00 00       	call   3923 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    2501:	58                   	pop    %eax
+    2502:	5a                   	pop    %edx
+    2503:	68 02 02 00 00       	push   $0x202
+    2508:	68 20 48 00 00       	push   $0x4820
+    250d:	e8 01 14 00 00       	call   3913 <open>
+  if(fd < 0){
+    2512:	83 c4 10             	add    $0x10,%esp
+    2515:	85 c0                	test   %eax,%eax
+    2517:	0f 88 5e 01 00 00    	js     267b <bigfile+0x19b>
+    251d:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    251f:	31 db                	xor    %ebx,%ebx
+    2521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    memset(buf, i, 600);
+    2528:	83 ec 04             	sub    $0x4,%esp
+    252b:	68 58 02 00 00       	push   $0x258
+    2530:	53                   	push   %ebx
+    2531:	68 80 85 00 00       	push   $0x8580
+    2536:	e8 05 12 00 00       	call   3740 <memset>
+    if(write(fd, buf, 600) != 600){
+    253b:	83 c4 0c             	add    $0xc,%esp
+    253e:	68 58 02 00 00       	push   $0x258
+    2543:	68 80 85 00 00       	push   $0x8580
+    2548:	56                   	push   %esi
+    2549:	e8 a5 13 00 00       	call   38f3 <write>
+    254e:	83 c4 10             	add    $0x10,%esp
+    2551:	3d 58 02 00 00       	cmp    $0x258,%eax
+    2556:	0f 85 f8 00 00 00    	jne    2654 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    255c:	83 c3 01             	add    $0x1,%ebx
+    255f:	83 fb 14             	cmp    $0x14,%ebx
+    2562:	75 c4                	jne    2528 <bigfile+0x48>
+  close(fd);
+    2564:	83 ec 0c             	sub    $0xc,%esp
+    2567:	56                   	push   %esi
+    2568:	e8 8e 13 00 00       	call   38fb <close>
+  fd = open("bigfile", 0);
+    256d:	5e                   	pop    %esi
+    256e:	5f                   	pop    %edi
+    256f:	6a 00                	push   $0x0
+    2571:	68 20 48 00 00       	push   $0x4820
+    2576:	e8 98 13 00 00       	call   3913 <open>
+  if(fd < 0){
+    257b:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", 0);
+    257e:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2580:	85 c0                	test   %eax,%eax
+    2582:	0f 88 e0 00 00 00    	js     2668 <bigfile+0x188>
+  total = 0;
+    2588:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    258a:	31 ff                	xor    %edi,%edi
+    258c:	eb 30                	jmp    25be <bigfile+0xde>
+    258e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2590:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2595:	0f 85 91 00 00 00    	jne    262c <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    259b:	89 fa                	mov    %edi,%edx
+    259d:	0f be 05 80 85 00 00 	movsbl 0x8580,%eax
+    25a4:	d1 fa                	sar    %edx
+    25a6:	39 d0                	cmp    %edx,%eax
+    25a8:	75 6e                	jne    2618 <bigfile+0x138>
+    25aa:	0f be 15 ab 86 00 00 	movsbl 0x86ab,%edx
+    25b1:	39 d0                	cmp    %edx,%eax
+    25b3:	75 63                	jne    2618 <bigfile+0x138>
+    total += cc;
+    25b5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    25bb:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    25be:	83 ec 04             	sub    $0x4,%esp
+    25c1:	68 2c 01 00 00       	push   $0x12c
+    25c6:	68 80 85 00 00       	push   $0x8580
+    25cb:	56                   	push   %esi
+    25cc:	e8 1a 13 00 00       	call   38eb <read>
+    if(cc < 0){
+    25d1:	83 c4 10             	add    $0x10,%esp
+    25d4:	85 c0                	test   %eax,%eax
+    25d6:	78 68                	js     2640 <bigfile+0x160>
+    if(cc == 0)
+    25d8:	75 b6                	jne    2590 <bigfile+0xb0>
+  close(fd);
+    25da:	83 ec 0c             	sub    $0xc,%esp
+    25dd:	56                   	push   %esi
+    25de:	e8 18 13 00 00       	call   38fb <close>
+  if(total != 20*600){
+    25e3:	83 c4 10             	add    $0x10,%esp
+    25e6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    25ec:	0f 85 9c 00 00 00    	jne    268e <bigfile+0x1ae>
+  unlink("bigfile");
+    25f2:	83 ec 0c             	sub    $0xc,%esp
+    25f5:	68 20 48 00 00       	push   $0x4820
+    25fa:	e8 24 13 00 00       	call   3923 <unlink>
+  printf(1, "bigfile test ok\n");
+    25ff:	58                   	pop    %eax
+    2600:	5a                   	pop    %edx
+    2601:	68 af 48 00 00       	push   $0x48af
+    2606:	6a 01                	push   $0x1
+    2608:	e8 23 14 00 00       	call   3a30 <printf>
+}
+    260d:	83 c4 10             	add    $0x10,%esp
+    2610:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2613:	5b                   	pop    %ebx
+    2614:	5e                   	pop    %esi
+    2615:	5f                   	pop    %edi
+    2616:	5d                   	pop    %ebp
+    2617:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    2618:	83 ec 08             	sub    $0x8,%esp
+    261b:	68 7c 48 00 00       	push   $0x487c
+    2620:	6a 01                	push   $0x1
+    2622:	e8 09 14 00 00       	call   3a30 <printf>
+      exit();
+    2627:	e8 a7 12 00 00       	call   38d3 <exit>
+      printf(1, "short read bigfile\n");
+    262c:	83 ec 08             	sub    $0x8,%esp
+    262f:	68 68 48 00 00       	push   $0x4868
+    2634:	6a 01                	push   $0x1
+    2636:	e8 f5 13 00 00       	call   3a30 <printf>
+      exit();
+    263b:	e8 93 12 00 00       	call   38d3 <exit>
+      printf(1, "read bigfile failed\n");
+    2640:	83 ec 08             	sub    $0x8,%esp
+    2643:	68 53 48 00 00       	push   $0x4853
+    2648:	6a 01                	push   $0x1
+    264a:	e8 e1 13 00 00       	call   3a30 <printf>
+      exit();
+    264f:	e8 7f 12 00 00       	call   38d3 <exit>
+      printf(1, "write bigfile failed\n");
+    2654:	83 ec 08             	sub    $0x8,%esp
+    2657:	68 28 48 00 00       	push   $0x4828
+    265c:	6a 01                	push   $0x1
+    265e:	e8 cd 13 00 00       	call   3a30 <printf>
+      exit();
+    2663:	e8 6b 12 00 00       	call   38d3 <exit>
+    printf(1, "cannot open bigfile\n");
+    2668:	53                   	push   %ebx
+    2669:	53                   	push   %ebx
+    266a:	68 3e 48 00 00       	push   $0x483e
+    266f:	6a 01                	push   $0x1
+    2671:	e8 ba 13 00 00       	call   3a30 <printf>
+    exit();
+    2676:	e8 58 12 00 00       	call   38d3 <exit>
+    printf(1, "cannot create bigfile");
+    267b:	50                   	push   %eax
+    267c:	50                   	push   %eax
+    267d:	68 12 48 00 00       	push   $0x4812
+    2682:	6a 01                	push   $0x1
+    2684:	e8 a7 13 00 00       	call   3a30 <printf>
+    exit();
+    2689:	e8 45 12 00 00       	call   38d3 <exit>
+    printf(1, "read bigfile wrong total\n");
+    268e:	51                   	push   %ecx
+    268f:	51                   	push   %ecx
+    2690:	68 95 48 00 00       	push   $0x4895
+    2695:	6a 01                	push   $0x1
+    2697:	e8 94 13 00 00       	call   3a30 <printf>
+    exit();
+    269c:	e8 32 12 00 00       	call   38d3 <exit>
+    26a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    26a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    26af:	90                   	nop
+
+000026b0 <fourteen>:
+{
+    26b0:	55                   	push   %ebp
+    26b1:	89 e5                	mov    %esp,%ebp
+    26b3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    26b6:	68 c0 48 00 00       	push   $0x48c0
+    26bb:	6a 01                	push   $0x1
+    26bd:	e8 6e 13 00 00       	call   3a30 <printf>
+  if(mkdir("12345678901234") != 0){
+    26c2:	c7 04 24 fb 48 00 00 	movl   $0x48fb,(%esp)
+    26c9:	e8 6d 12 00 00       	call   393b <mkdir>
+    26ce:	83 c4 10             	add    $0x10,%esp
+    26d1:	85 c0                	test   %eax,%eax
+    26d3:	0f 85 97 00 00 00    	jne    2770 <fourteen+0xc0>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26d9:	83 ec 0c             	sub    $0xc,%esp
+    26dc:	68 b8 50 00 00       	push   $0x50b8
+    26e1:	e8 55 12 00 00       	call   393b <mkdir>
+    26e6:	83 c4 10             	add    $0x10,%esp
+    26e9:	85 c0                	test   %eax,%eax
+    26eb:	0f 85 de 00 00 00    	jne    27cf <fourteen+0x11f>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26f1:	83 ec 08             	sub    $0x8,%esp
+    26f4:	68 00 02 00 00       	push   $0x200
+    26f9:	68 08 51 00 00       	push   $0x5108
+    26fe:	e8 10 12 00 00       	call   3913 <open>
+  if(fd < 0){
+    2703:	83 c4 10             	add    $0x10,%esp
+    2706:	85 c0                	test   %eax,%eax
+    2708:	0f 88 ae 00 00 00    	js     27bc <fourteen+0x10c>
+  close(fd);
+    270e:	83 ec 0c             	sub    $0xc,%esp
+    2711:	50                   	push   %eax
+    2712:	e8 e4 11 00 00       	call   38fb <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2717:	58                   	pop    %eax
+    2718:	5a                   	pop    %edx
+    2719:	6a 00                	push   $0x0
+    271b:	68 78 51 00 00       	push   $0x5178
+    2720:	e8 ee 11 00 00       	call   3913 <open>
+  if(fd < 0){
+    2725:	83 c4 10             	add    $0x10,%esp
+    2728:	85 c0                	test   %eax,%eax
+    272a:	78 7d                	js     27a9 <fourteen+0xf9>
+  close(fd);
+    272c:	83 ec 0c             	sub    $0xc,%esp
+    272f:	50                   	push   %eax
+    2730:	e8 c6 11 00 00       	call   38fb <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2735:	c7 04 24 ec 48 00 00 	movl   $0x48ec,(%esp)
+    273c:	e8 fa 11 00 00       	call   393b <mkdir>
+    2741:	83 c4 10             	add    $0x10,%esp
+    2744:	85 c0                	test   %eax,%eax
+    2746:	74 4e                	je     2796 <fourteen+0xe6>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2748:	83 ec 0c             	sub    $0xc,%esp
+    274b:	68 14 52 00 00       	push   $0x5214
+    2750:	e8 e6 11 00 00       	call   393b <mkdir>
+    2755:	83 c4 10             	add    $0x10,%esp
+    2758:	85 c0                	test   %eax,%eax
+    275a:	74 27                	je     2783 <fourteen+0xd3>
+  printf(1, "fourteen ok\n");
+    275c:	83 ec 08             	sub    $0x8,%esp
+    275f:	68 0a 49 00 00       	push   $0x490a
+    2764:	6a 01                	push   $0x1
+    2766:	e8 c5 12 00 00       	call   3a30 <printf>
+}
+    276b:	83 c4 10             	add    $0x10,%esp
+    276e:	c9                   	leave  
+    276f:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2770:	50                   	push   %eax
+    2771:	50                   	push   %eax
+    2772:	68 cf 48 00 00       	push   $0x48cf
+    2777:	6a 01                	push   $0x1
+    2779:	e8 b2 12 00 00       	call   3a30 <printf>
+    exit();
+    277e:	e8 50 11 00 00       	call   38d3 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2783:	50                   	push   %eax
+    2784:	50                   	push   %eax
+    2785:	68 34 52 00 00       	push   $0x5234
+    278a:	6a 01                	push   $0x1
+    278c:	e8 9f 12 00 00       	call   3a30 <printf>
+    exit();
+    2791:	e8 3d 11 00 00       	call   38d3 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2796:	52                   	push   %edx
+    2797:	52                   	push   %edx
+    2798:	68 e4 51 00 00       	push   $0x51e4
+    279d:	6a 01                	push   $0x1
+    279f:	e8 8c 12 00 00       	call   3a30 <printf>
+    exit();
+    27a4:	e8 2a 11 00 00       	call   38d3 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    27a9:	51                   	push   %ecx
+    27aa:	51                   	push   %ecx
+    27ab:	68 a8 51 00 00       	push   $0x51a8
+    27b0:	6a 01                	push   $0x1
+    27b2:	e8 79 12 00 00       	call   3a30 <printf>
+    exit();
+    27b7:	e8 17 11 00 00       	call   38d3 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    27bc:	51                   	push   %ecx
+    27bd:	51                   	push   %ecx
+    27be:	68 38 51 00 00       	push   $0x5138
+    27c3:	6a 01                	push   $0x1
+    27c5:	e8 66 12 00 00       	call   3a30 <printf>
+    exit();
+    27ca:	e8 04 11 00 00       	call   38d3 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    27cf:	50                   	push   %eax
+    27d0:	50                   	push   %eax
+    27d1:	68 d8 50 00 00       	push   $0x50d8
+    27d6:	6a 01                	push   $0x1
+    27d8:	e8 53 12 00 00       	call   3a30 <printf>
+    exit();
+    27dd:	e8 f1 10 00 00       	call   38d3 <exit>
+    27e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    27e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000027f0 <rmdot>:
+{
+    27f0:	55                   	push   %ebp
+    27f1:	89 e5                	mov    %esp,%ebp
+    27f3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    27f6:	68 17 49 00 00       	push   $0x4917
+    27fb:	6a 01                	push   $0x1
+    27fd:	e8 2e 12 00 00       	call   3a30 <printf>
+  if(mkdir("dots") != 0){
+    2802:	c7 04 24 23 49 00 00 	movl   $0x4923,(%esp)
+    2809:	e8 2d 11 00 00       	call   393b <mkdir>
+    280e:	83 c4 10             	add    $0x10,%esp
+    2811:	85 c0                	test   %eax,%eax
+    2813:	0f 85 b0 00 00 00    	jne    28c9 <rmdot+0xd9>
+  if(chdir("dots") != 0){
+    2819:	83 ec 0c             	sub    $0xc,%esp
+    281c:	68 23 49 00 00       	push   $0x4923
+    2821:	e8 1d 11 00 00       	call   3943 <chdir>
+    2826:	83 c4 10             	add    $0x10,%esp
+    2829:	85 c0                	test   %eax,%eax
+    282b:	0f 85 1d 01 00 00    	jne    294e <rmdot+0x15e>
+  if(unlink(".") == 0){
+    2831:	83 ec 0c             	sub    $0xc,%esp
+    2834:	68 ce 45 00 00       	push   $0x45ce
+    2839:	e8 e5 10 00 00       	call   3923 <unlink>
+    283e:	83 c4 10             	add    $0x10,%esp
+    2841:	85 c0                	test   %eax,%eax
+    2843:	0f 84 f2 00 00 00    	je     293b <rmdot+0x14b>
+  if(unlink("..") == 0){
+    2849:	83 ec 0c             	sub    $0xc,%esp
+    284c:	68 cd 45 00 00       	push   $0x45cd
+    2851:	e8 cd 10 00 00       	call   3923 <unlink>
+    2856:	83 c4 10             	add    $0x10,%esp
+    2859:	85 c0                	test   %eax,%eax
+    285b:	0f 84 c7 00 00 00    	je     2928 <rmdot+0x138>
+  if(chdir("/") != 0){
+    2861:	83 ec 0c             	sub    $0xc,%esp
+    2864:	68 a1 3d 00 00       	push   $0x3da1
+    2869:	e8 d5 10 00 00       	call   3943 <chdir>
+    286e:	83 c4 10             	add    $0x10,%esp
+    2871:	85 c0                	test   %eax,%eax
+    2873:	0f 85 9c 00 00 00    	jne    2915 <rmdot+0x125>
+  if(unlink("dots/.") == 0){
+    2879:	83 ec 0c             	sub    $0xc,%esp
+    287c:	68 6b 49 00 00       	push   $0x496b
+    2881:	e8 9d 10 00 00       	call   3923 <unlink>
+    2886:	83 c4 10             	add    $0x10,%esp
+    2889:	85 c0                	test   %eax,%eax
+    288b:	74 75                	je     2902 <rmdot+0x112>
+  if(unlink("dots/..") == 0){
+    288d:	83 ec 0c             	sub    $0xc,%esp
+    2890:	68 89 49 00 00       	push   $0x4989
+    2895:	e8 89 10 00 00       	call   3923 <unlink>
+    289a:	83 c4 10             	add    $0x10,%esp
+    289d:	85 c0                	test   %eax,%eax
+    289f:	74 4e                	je     28ef <rmdot+0xff>
+  if(unlink("dots") != 0){
+    28a1:	83 ec 0c             	sub    $0xc,%esp
+    28a4:	68 23 49 00 00       	push   $0x4923
+    28a9:	e8 75 10 00 00       	call   3923 <unlink>
+    28ae:	83 c4 10             	add    $0x10,%esp
+    28b1:	85 c0                	test   %eax,%eax
+    28b3:	75 27                	jne    28dc <rmdot+0xec>
+  printf(1, "rmdot ok\n");
+    28b5:	83 ec 08             	sub    $0x8,%esp
+    28b8:	68 be 49 00 00       	push   $0x49be
+    28bd:	6a 01                	push   $0x1
+    28bf:	e8 6c 11 00 00       	call   3a30 <printf>
+}
+    28c4:	83 c4 10             	add    $0x10,%esp
+    28c7:	c9                   	leave  
+    28c8:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    28c9:	50                   	push   %eax
+    28ca:	50                   	push   %eax
+    28cb:	68 28 49 00 00       	push   $0x4928
+    28d0:	6a 01                	push   $0x1
+    28d2:	e8 59 11 00 00       	call   3a30 <printf>
+    exit();
+    28d7:	e8 f7 0f 00 00       	call   38d3 <exit>
+    printf(1, "unlink dots failed!\n");
+    28dc:	50                   	push   %eax
+    28dd:	50                   	push   %eax
+    28de:	68 a9 49 00 00       	push   $0x49a9
+    28e3:	6a 01                	push   $0x1
+    28e5:	e8 46 11 00 00       	call   3a30 <printf>
+    exit();
+    28ea:	e8 e4 0f 00 00       	call   38d3 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    28ef:	52                   	push   %edx
+    28f0:	52                   	push   %edx
+    28f1:	68 91 49 00 00       	push   $0x4991
+    28f6:	6a 01                	push   $0x1
+    28f8:	e8 33 11 00 00       	call   3a30 <printf>
+    exit();
+    28fd:	e8 d1 0f 00 00       	call   38d3 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    2902:	51                   	push   %ecx
+    2903:	51                   	push   %ecx
+    2904:	68 72 49 00 00       	push   $0x4972
+    2909:	6a 01                	push   $0x1
+    290b:	e8 20 11 00 00       	call   3a30 <printf>
+    exit();
+    2910:	e8 be 0f 00 00       	call   38d3 <exit>
+    printf(1, "chdir / failed\n");
+    2915:	50                   	push   %eax
+    2916:	50                   	push   %eax
+    2917:	68 a3 3d 00 00       	push   $0x3da3
+    291c:	6a 01                	push   $0x1
+    291e:	e8 0d 11 00 00       	call   3a30 <printf>
+    exit();
+    2923:	e8 ab 0f 00 00       	call   38d3 <exit>
+    printf(1, "rm .. worked!\n");
+    2928:	50                   	push   %eax
+    2929:	50                   	push   %eax
+    292a:	68 5c 49 00 00       	push   $0x495c
+    292f:	6a 01                	push   $0x1
+    2931:	e8 fa 10 00 00       	call   3a30 <printf>
+    exit();
+    2936:	e8 98 0f 00 00       	call   38d3 <exit>
+    printf(1, "rm . worked!\n");
+    293b:	50                   	push   %eax
+    293c:	50                   	push   %eax
+    293d:	68 4e 49 00 00       	push   $0x494e
+    2942:	6a 01                	push   $0x1
+    2944:	e8 e7 10 00 00       	call   3a30 <printf>
+    exit();
+    2949:	e8 85 0f 00 00       	call   38d3 <exit>
+    printf(1, "chdir dots failed\n");
+    294e:	50                   	push   %eax
+    294f:	50                   	push   %eax
+    2950:	68 3b 49 00 00       	push   $0x493b
+    2955:	6a 01                	push   $0x1
+    2957:	e8 d4 10 00 00       	call   3a30 <printf>
+    exit();
+    295c:	e8 72 0f 00 00       	call   38d3 <exit>
+    2961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    296f:	90                   	nop
+
+00002970 <dirfile>:
+{
+    2970:	55                   	push   %ebp
+    2971:	89 e5                	mov    %esp,%ebp
+    2973:	53                   	push   %ebx
+    2974:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2977:	68 c8 49 00 00       	push   $0x49c8
+    297c:	6a 01                	push   $0x1
+    297e:	e8 ad 10 00 00       	call   3a30 <printf>
+  fd = open("dirfile", O_CREATE);
+    2983:	5b                   	pop    %ebx
+    2984:	58                   	pop    %eax
+    2985:	68 00 02 00 00       	push   $0x200
+    298a:	68 d5 49 00 00       	push   $0x49d5
+    298f:	e8 7f 0f 00 00       	call   3913 <open>
+  if(fd < 0){
+    2994:	83 c4 10             	add    $0x10,%esp
+    2997:	85 c0                	test   %eax,%eax
+    2999:	0f 88 43 01 00 00    	js     2ae2 <dirfile+0x172>
+  close(fd);
+    299f:	83 ec 0c             	sub    $0xc,%esp
+    29a2:	50                   	push   %eax
+    29a3:	e8 53 0f 00 00       	call   38fb <close>
+  if(chdir("dirfile") == 0){
+    29a8:	c7 04 24 d5 49 00 00 	movl   $0x49d5,(%esp)
+    29af:	e8 8f 0f 00 00       	call   3943 <chdir>
+    29b4:	83 c4 10             	add    $0x10,%esp
+    29b7:	85 c0                	test   %eax,%eax
+    29b9:	0f 84 10 01 00 00    	je     2acf <dirfile+0x15f>
+  fd = open("dirfile/xx", 0);
+    29bf:	83 ec 08             	sub    $0x8,%esp
+    29c2:	6a 00                	push   $0x0
+    29c4:	68 0e 4a 00 00       	push   $0x4a0e
+    29c9:	e8 45 0f 00 00       	call   3913 <open>
+  if(fd >= 0){
+    29ce:	83 c4 10             	add    $0x10,%esp
+    29d1:	85 c0                	test   %eax,%eax
+    29d3:	0f 89 e3 00 00 00    	jns    2abc <dirfile+0x14c>
+  fd = open("dirfile/xx", O_CREATE);
+    29d9:	83 ec 08             	sub    $0x8,%esp
+    29dc:	68 00 02 00 00       	push   $0x200
+    29e1:	68 0e 4a 00 00       	push   $0x4a0e
+    29e6:	e8 28 0f 00 00       	call   3913 <open>
+  if(fd >= 0){
+    29eb:	83 c4 10             	add    $0x10,%esp
+    29ee:	85 c0                	test   %eax,%eax
+    29f0:	0f 89 c6 00 00 00    	jns    2abc <dirfile+0x14c>
+  if(mkdir("dirfile/xx") == 0){
+    29f6:	83 ec 0c             	sub    $0xc,%esp
+    29f9:	68 0e 4a 00 00       	push   $0x4a0e
+    29fe:	e8 38 0f 00 00       	call   393b <mkdir>
+    2a03:	83 c4 10             	add    $0x10,%esp
+    2a06:	85 c0                	test   %eax,%eax
+    2a08:	0f 84 46 01 00 00    	je     2b54 <dirfile+0x1e4>
+  if(unlink("dirfile/xx") == 0){
+    2a0e:	83 ec 0c             	sub    $0xc,%esp
+    2a11:	68 0e 4a 00 00       	push   $0x4a0e
+    2a16:	e8 08 0f 00 00       	call   3923 <unlink>
+    2a1b:	83 c4 10             	add    $0x10,%esp
+    2a1e:	85 c0                	test   %eax,%eax
+    2a20:	0f 84 1b 01 00 00    	je     2b41 <dirfile+0x1d1>
+  if(link("README", "dirfile/xx") == 0){
+    2a26:	83 ec 08             	sub    $0x8,%esp
+    2a29:	68 0e 4a 00 00       	push   $0x4a0e
+    2a2e:	68 72 4a 00 00       	push   $0x4a72
+    2a33:	e8 fb 0e 00 00       	call   3933 <link>
+    2a38:	83 c4 10             	add    $0x10,%esp
+    2a3b:	85 c0                	test   %eax,%eax
+    2a3d:	0f 84 eb 00 00 00    	je     2b2e <dirfile+0x1be>
+  if(unlink("dirfile") != 0){
+    2a43:	83 ec 0c             	sub    $0xc,%esp
+    2a46:	68 d5 49 00 00       	push   $0x49d5
+    2a4b:	e8 d3 0e 00 00       	call   3923 <unlink>
+    2a50:	83 c4 10             	add    $0x10,%esp
+    2a53:	85 c0                	test   %eax,%eax
+    2a55:	0f 85 c0 00 00 00    	jne    2b1b <dirfile+0x1ab>
+  fd = open(".", O_RDWR);
+    2a5b:	83 ec 08             	sub    $0x8,%esp
+    2a5e:	6a 02                	push   $0x2
+    2a60:	68 ce 45 00 00       	push   $0x45ce
+    2a65:	e8 a9 0e 00 00       	call   3913 <open>
+  if(fd >= 0){
+    2a6a:	83 c4 10             	add    $0x10,%esp
+    2a6d:	85 c0                	test   %eax,%eax
+    2a6f:	0f 89 93 00 00 00    	jns    2b08 <dirfile+0x198>
+  fd = open(".", 0);
+    2a75:	83 ec 08             	sub    $0x8,%esp
+    2a78:	6a 00                	push   $0x0
+    2a7a:	68 ce 45 00 00       	push   $0x45ce
+    2a7f:	e8 8f 0e 00 00       	call   3913 <open>
+  if(write(fd, "x", 1) > 0){
+    2a84:	83 c4 0c             	add    $0xc,%esp
+    2a87:	6a 01                	push   $0x1
+  fd = open(".", 0);
+    2a89:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2a8b:	68 b1 46 00 00       	push   $0x46b1
+    2a90:	50                   	push   %eax
+    2a91:	e8 5d 0e 00 00       	call   38f3 <write>
+    2a96:	83 c4 10             	add    $0x10,%esp
+    2a99:	85 c0                	test   %eax,%eax
+    2a9b:	7f 58                	jg     2af5 <dirfile+0x185>
+  close(fd);
+    2a9d:	83 ec 0c             	sub    $0xc,%esp
+    2aa0:	53                   	push   %ebx
+    2aa1:	e8 55 0e 00 00       	call   38fb <close>
+  printf(1, "dir vs file OK\n");
+    2aa6:	58                   	pop    %eax
+    2aa7:	5a                   	pop    %edx
+    2aa8:	68 a5 4a 00 00       	push   $0x4aa5
+    2aad:	6a 01                	push   $0x1
+    2aaf:	e8 7c 0f 00 00       	call   3a30 <printf>
+}
+    2ab4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2ab7:	83 c4 10             	add    $0x10,%esp
+    2aba:	c9                   	leave  
+    2abb:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2abc:	50                   	push   %eax
+    2abd:	50                   	push   %eax
+    2abe:	68 19 4a 00 00       	push   $0x4a19
+    2ac3:	6a 01                	push   $0x1
+    2ac5:	e8 66 0f 00 00       	call   3a30 <printf>
+    exit();
+    2aca:	e8 04 0e 00 00       	call   38d3 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2acf:	52                   	push   %edx
+    2ad0:	52                   	push   %edx
+    2ad1:	68 f4 49 00 00       	push   $0x49f4
+    2ad6:	6a 01                	push   $0x1
+    2ad8:	e8 53 0f 00 00       	call   3a30 <printf>
+    exit();
+    2add:	e8 f1 0d 00 00       	call   38d3 <exit>
+    printf(1, "create dirfile failed\n");
+    2ae2:	51                   	push   %ecx
+    2ae3:	51                   	push   %ecx
+    2ae4:	68 dd 49 00 00       	push   $0x49dd
+    2ae9:	6a 01                	push   $0x1
+    2aeb:	e8 40 0f 00 00       	call   3a30 <printf>
+    exit();
+    2af0:	e8 de 0d 00 00       	call   38d3 <exit>
+    printf(1, "write . succeeded!\n");
+    2af5:	51                   	push   %ecx
+    2af6:	51                   	push   %ecx
+    2af7:	68 91 4a 00 00       	push   $0x4a91
+    2afc:	6a 01                	push   $0x1
+    2afe:	e8 2d 0f 00 00       	call   3a30 <printf>
+    exit();
+    2b03:	e8 cb 0d 00 00       	call   38d3 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2b08:	53                   	push   %ebx
+    2b09:	53                   	push   %ebx
+    2b0a:	68 88 52 00 00       	push   $0x5288
+    2b0f:	6a 01                	push   $0x1
+    2b11:	e8 1a 0f 00 00       	call   3a30 <printf>
+    exit();
+    2b16:	e8 b8 0d 00 00       	call   38d3 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2b1b:	50                   	push   %eax
+    2b1c:	50                   	push   %eax
+    2b1d:	68 79 4a 00 00       	push   $0x4a79
+    2b22:	6a 01                	push   $0x1
+    2b24:	e8 07 0f 00 00       	call   3a30 <printf>
+    exit();
+    2b29:	e8 a5 0d 00 00       	call   38d3 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2b2e:	50                   	push   %eax
+    2b2f:	50                   	push   %eax
+    2b30:	68 68 52 00 00       	push   $0x5268
+    2b35:	6a 01                	push   $0x1
+    2b37:	e8 f4 0e 00 00       	call   3a30 <printf>
+    exit();
+    2b3c:	e8 92 0d 00 00       	call   38d3 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2b41:	50                   	push   %eax
+    2b42:	50                   	push   %eax
+    2b43:	68 54 4a 00 00       	push   $0x4a54
+    2b48:	6a 01                	push   $0x1
+    2b4a:	e8 e1 0e 00 00       	call   3a30 <printf>
+    exit();
+    2b4f:	e8 7f 0d 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2b54:	50                   	push   %eax
+    2b55:	50                   	push   %eax
+    2b56:	68 37 4a 00 00       	push   $0x4a37
+    2b5b:	6a 01                	push   $0x1
+    2b5d:	e8 ce 0e 00 00       	call   3a30 <printf>
+    exit();
+    2b62:	e8 6c 0d 00 00       	call   38d3 <exit>
+    2b67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2b6e:	66 90                	xchg   %ax,%ax
+
+00002b70 <iref>:
+{
+    2b70:	55                   	push   %ebp
+    2b71:	89 e5                	mov    %esp,%ebp
+    2b73:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2b74:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2b79:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2b7c:	68 b5 4a 00 00       	push   $0x4ab5
+    2b81:	6a 01                	push   $0x1
+    2b83:	e8 a8 0e 00 00       	call   3a30 <printf>
+    2b88:	83 c4 10             	add    $0x10,%esp
+    2b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2b8f:	90                   	nop
+    if(mkdir("irefd") != 0){
+    2b90:	83 ec 0c             	sub    $0xc,%esp
+    2b93:	68 c6 4a 00 00       	push   $0x4ac6
+    2b98:	e8 9e 0d 00 00       	call   393b <mkdir>
+    2b9d:	83 c4 10             	add    $0x10,%esp
+    2ba0:	85 c0                	test   %eax,%eax
+    2ba2:	0f 85 bb 00 00 00    	jne    2c63 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2ba8:	83 ec 0c             	sub    $0xc,%esp
+    2bab:	68 c6 4a 00 00       	push   $0x4ac6
+    2bb0:	e8 8e 0d 00 00       	call   3943 <chdir>
+    2bb5:	83 c4 10             	add    $0x10,%esp
+    2bb8:	85 c0                	test   %eax,%eax
+    2bba:	0f 85 b7 00 00 00    	jne    2c77 <iref+0x107>
+    mkdir("");
+    2bc0:	83 ec 0c             	sub    $0xc,%esp
+    2bc3:	68 7b 41 00 00       	push   $0x417b
+    2bc8:	e8 6e 0d 00 00       	call   393b <mkdir>
+    link("README", "");
+    2bcd:	59                   	pop    %ecx
+    2bce:	58                   	pop    %eax
+    2bcf:	68 7b 41 00 00       	push   $0x417b
+    2bd4:	68 72 4a 00 00       	push   $0x4a72
+    2bd9:	e8 55 0d 00 00       	call   3933 <link>
+    fd = open("", O_CREATE);
+    2bde:	58                   	pop    %eax
+    2bdf:	5a                   	pop    %edx
+    2be0:	68 00 02 00 00       	push   $0x200
+    2be5:	68 7b 41 00 00       	push   $0x417b
+    2bea:	e8 24 0d 00 00       	call   3913 <open>
+    if(fd >= 0)
+    2bef:	83 c4 10             	add    $0x10,%esp
+    2bf2:	85 c0                	test   %eax,%eax
+    2bf4:	78 0c                	js     2c02 <iref+0x92>
+      close(fd);
+    2bf6:	83 ec 0c             	sub    $0xc,%esp
+    2bf9:	50                   	push   %eax
+    2bfa:	e8 fc 0c 00 00       	call   38fb <close>
+    2bff:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2c02:	83 ec 08             	sub    $0x8,%esp
+    2c05:	68 00 02 00 00       	push   $0x200
+    2c0a:	68 b0 46 00 00       	push   $0x46b0
+    2c0f:	e8 ff 0c 00 00       	call   3913 <open>
+    if(fd >= 0)
+    2c14:	83 c4 10             	add    $0x10,%esp
+    2c17:	85 c0                	test   %eax,%eax
+    2c19:	78 0c                	js     2c27 <iref+0xb7>
+      close(fd);
+    2c1b:	83 ec 0c             	sub    $0xc,%esp
+    2c1e:	50                   	push   %eax
+    2c1f:	e8 d7 0c 00 00       	call   38fb <close>
+    2c24:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2c27:	83 ec 0c             	sub    $0xc,%esp
+    2c2a:	68 b0 46 00 00       	push   $0x46b0
+    2c2f:	e8 ef 0c 00 00       	call   3923 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2c34:	83 c4 10             	add    $0x10,%esp
+    2c37:	83 eb 01             	sub    $0x1,%ebx
+    2c3a:	0f 85 50 ff ff ff    	jne    2b90 <iref+0x20>
+  chdir("/");
+    2c40:	83 ec 0c             	sub    $0xc,%esp
+    2c43:	68 a1 3d 00 00       	push   $0x3da1
+    2c48:	e8 f6 0c 00 00       	call   3943 <chdir>
+  printf(1, "empty file name OK\n");
+    2c4d:	58                   	pop    %eax
+    2c4e:	5a                   	pop    %edx
+    2c4f:	68 f4 4a 00 00       	push   $0x4af4
+    2c54:	6a 01                	push   $0x1
+    2c56:	e8 d5 0d 00 00       	call   3a30 <printf>
+}
+    2c5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2c5e:	83 c4 10             	add    $0x10,%esp
+    2c61:	c9                   	leave  
+    2c62:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2c63:	83 ec 08             	sub    $0x8,%esp
+    2c66:	68 cc 4a 00 00       	push   $0x4acc
+    2c6b:	6a 01                	push   $0x1
+    2c6d:	e8 be 0d 00 00       	call   3a30 <printf>
+      exit();
+    2c72:	e8 5c 0c 00 00       	call   38d3 <exit>
+      printf(1, "chdir irefd failed\n");
+    2c77:	83 ec 08             	sub    $0x8,%esp
+    2c7a:	68 e0 4a 00 00       	push   $0x4ae0
+    2c7f:	6a 01                	push   $0x1
+    2c81:	e8 aa 0d 00 00       	call   3a30 <printf>
+      exit();
+    2c86:	e8 48 0c 00 00       	call   38d3 <exit>
+    2c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2c8f:	90                   	nop
+
+00002c90 <forktest>:
+{
+    2c90:	55                   	push   %ebp
+    2c91:	89 e5                	mov    %esp,%ebp
+    2c93:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2c94:	31 db                	xor    %ebx,%ebx
+{
+    2c96:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2c99:	68 08 4b 00 00       	push   $0x4b08
+    2c9e:	6a 01                	push   $0x1
+    2ca0:	e8 8b 0d 00 00       	call   3a30 <printf>
+    2ca5:	83 c4 10             	add    $0x10,%esp
+    2ca8:	eb 13                	jmp    2cbd <forktest+0x2d>
+    2caa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(pid == 0)
+    2cb0:	74 4a                	je     2cfc <forktest+0x6c>
+  for(n=0; n<1000; n++){
+    2cb2:	83 c3 01             	add    $0x1,%ebx
+    2cb5:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2cbb:	74 6b                	je     2d28 <forktest+0x98>
+    pid = fork();
+    2cbd:	e8 09 0c 00 00       	call   38cb <fork>
+    if(pid < 0)
+    2cc2:	85 c0                	test   %eax,%eax
+    2cc4:	79 ea                	jns    2cb0 <forktest+0x20>
+  for(; n > 0; n--){
+    2cc6:	85 db                	test   %ebx,%ebx
+    2cc8:	74 14                	je     2cde <forktest+0x4e>
+    2cca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2cd0:	e8 06 0c 00 00       	call   38db <wait>
+    2cd5:	85 c0                	test   %eax,%eax
+    2cd7:	78 28                	js     2d01 <forktest+0x71>
+  for(; n > 0; n--){
+    2cd9:	83 eb 01             	sub    $0x1,%ebx
+    2cdc:	75 f2                	jne    2cd0 <forktest+0x40>
+  if(wait() != -1){
+    2cde:	e8 f8 0b 00 00       	call   38db <wait>
+    2ce3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ce6:	75 2d                	jne    2d15 <forktest+0x85>
+  printf(1, "fork test OK\n");
+    2ce8:	83 ec 08             	sub    $0x8,%esp
+    2ceb:	68 3a 4b 00 00       	push   $0x4b3a
+    2cf0:	6a 01                	push   $0x1
+    2cf2:	e8 39 0d 00 00       	call   3a30 <printf>
+}
+    2cf7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cfa:	c9                   	leave  
+    2cfb:	c3                   	ret    
+      exit();
+    2cfc:	e8 d2 0b 00 00       	call   38d3 <exit>
+      printf(1, "wait stopped early\n");
+    2d01:	83 ec 08             	sub    $0x8,%esp
+    2d04:	68 13 4b 00 00       	push   $0x4b13
+    2d09:	6a 01                	push   $0x1
+    2d0b:	e8 20 0d 00 00       	call   3a30 <printf>
+      exit();
+    2d10:	e8 be 0b 00 00       	call   38d3 <exit>
+    printf(1, "wait got too many\n");
+    2d15:	52                   	push   %edx
+    2d16:	52                   	push   %edx
+    2d17:	68 27 4b 00 00       	push   $0x4b27
+    2d1c:	6a 01                	push   $0x1
+    2d1e:	e8 0d 0d 00 00       	call   3a30 <printf>
+    exit();
+    2d23:	e8 ab 0b 00 00       	call   38d3 <exit>
+    printf(1, "fork claimed to work 1000 times!\n");
+    2d28:	50                   	push   %eax
+    2d29:	50                   	push   %eax
+    2d2a:	68 a8 52 00 00       	push   $0x52a8
+    2d2f:	6a 01                	push   $0x1
+    2d31:	e8 fa 0c 00 00       	call   3a30 <printf>
+    exit();
+    2d36:	e8 98 0b 00 00       	call   38d3 <exit>
+    2d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2d3f:	90                   	nop
+
+00002d40 <sbrktest>:
+{
+    2d40:	55                   	push   %ebp
+    2d41:	89 e5                	mov    %esp,%ebp
+    2d43:	57                   	push   %edi
+    2d44:	56                   	push   %esi
+  for(i = 0; i < 5000; i++){
+    2d45:	31 f6                	xor    %esi,%esi
+{
+    2d47:	53                   	push   %ebx
+    2d48:	83 ec 64             	sub    $0x64,%esp
+  printf(stdout, "sbrk test\n");
+    2d4b:	68 48 4b 00 00       	push   $0x4b48
+    2d50:	ff 35 48 5e 00 00    	push   0x5e48
+    2d56:	e8 d5 0c 00 00       	call   3a30 <printf>
+  oldbrk = sbrk(0);
+    2d5b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2d62:	e8 f4 0b 00 00       	call   395b <sbrk>
+  a = sbrk(0);
+    2d67:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2d6e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+  a = sbrk(0);
+    2d71:	e8 e5 0b 00 00       	call   395b <sbrk>
+    2d76:	83 c4 10             	add    $0x10,%esp
+    2d79:	89 c3                	mov    %eax,%ebx
+  for(i = 0; i < 5000; i++){
+    2d7b:	eb 05                	jmp    2d82 <sbrktest+0x42>
+    2d7d:	8d 76 00             	lea    0x0(%esi),%esi
+    a = b + 1;
+    2d80:	89 c3                	mov    %eax,%ebx
+    b = sbrk(1);
+    2d82:	83 ec 0c             	sub    $0xc,%esp
+    2d85:	6a 01                	push   $0x1
+    2d87:	e8 cf 0b 00 00       	call   395b <sbrk>
+    if(b != a){
+    2d8c:	83 c4 10             	add    $0x10,%esp
+    2d8f:	39 d8                	cmp    %ebx,%eax
+    2d91:	0f 85 9c 02 00 00    	jne    3033 <sbrktest+0x2f3>
+  for(i = 0; i < 5000; i++){
+    2d97:	83 c6 01             	add    $0x1,%esi
+    *b = 1;
+    2d9a:	c6 03 01             	movb   $0x1,(%ebx)
+    a = b + 1;
+    2d9d:	8d 43 01             	lea    0x1(%ebx),%eax
+  for(i = 0; i < 5000; i++){
+    2da0:	81 fe 88 13 00 00    	cmp    $0x1388,%esi
+    2da6:	75 d8                	jne    2d80 <sbrktest+0x40>
+  pid = fork();
+    2da8:	e8 1e 0b 00 00       	call   38cb <fork>
+    2dad:	89 c6                	mov    %eax,%esi
+  if(pid < 0){
+    2daf:	85 c0                	test   %eax,%eax
+    2db1:	0f 88 02 03 00 00    	js     30b9 <sbrktest+0x379>
+  c = sbrk(1);
+    2db7:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2dba:	83 c3 02             	add    $0x2,%ebx
+  c = sbrk(1);
+    2dbd:	6a 01                	push   $0x1
+    2dbf:	e8 97 0b 00 00       	call   395b <sbrk>
+  c = sbrk(1);
+    2dc4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2dcb:	e8 8b 0b 00 00       	call   395b <sbrk>
+  if(c != a + 1){
+    2dd0:	83 c4 10             	add    $0x10,%esp
+    2dd3:	39 c3                	cmp    %eax,%ebx
+    2dd5:	0f 85 3b 03 00 00    	jne    3116 <sbrktest+0x3d6>
+  if(pid == 0)
+    2ddb:	85 f6                	test   %esi,%esi
+    2ddd:	0f 84 2e 03 00 00    	je     3111 <sbrktest+0x3d1>
+  wait();
+    2de3:	e8 f3 0a 00 00       	call   38db <wait>
+  a = sbrk(0);
+    2de8:	83 ec 0c             	sub    $0xc,%esp
+    2deb:	6a 00                	push   $0x0
+    2ded:	e8 69 0b 00 00       	call   395b <sbrk>
+    2df2:	89 c3                	mov    %eax,%ebx
+  amt = (BIG) - (uint)a;
+    2df4:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2df9:	29 d8                	sub    %ebx,%eax
+  p = sbrk(amt);
+    2dfb:	89 04 24             	mov    %eax,(%esp)
+    2dfe:	e8 58 0b 00 00       	call   395b <sbrk>
+  if (p != a) {
+    2e03:	83 c4 10             	add    $0x10,%esp
+    2e06:	39 c3                	cmp    %eax,%ebx
+    2e08:	0f 85 94 02 00 00    	jne    30a2 <sbrktest+0x362>
+  a = sbrk(0);
+    2e0e:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2e11:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2e18:	6a 00                	push   $0x0
+    2e1a:	e8 3c 0b 00 00       	call   395b <sbrk>
+  c = sbrk(-4096);
+    2e1f:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2e26:	89 c3                	mov    %eax,%ebx
+  c = sbrk(-4096);
+    2e28:	e8 2e 0b 00 00       	call   395b <sbrk>
+  if(c == (char*)0xffffffff){
+    2e2d:	83 c4 10             	add    $0x10,%esp
+    2e30:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2e33:	0f 84 22 03 00 00    	je     315b <sbrktest+0x41b>
+  c = sbrk(0);
+    2e39:	83 ec 0c             	sub    $0xc,%esp
+    2e3c:	6a 00                	push   $0x0
+    2e3e:	e8 18 0b 00 00       	call   395b <sbrk>
+  if(c != a - 4096){
+    2e43:	8d 93 00 f0 ff ff    	lea    -0x1000(%ebx),%edx
+    2e49:	83 c4 10             	add    $0x10,%esp
+    2e4c:	39 d0                	cmp    %edx,%eax
+    2e4e:	0f 85 f0 02 00 00    	jne    3144 <sbrktest+0x404>
+  a = sbrk(0);
+    2e54:	83 ec 0c             	sub    $0xc,%esp
+    2e57:	6a 00                	push   $0x0
+    2e59:	e8 fd 0a 00 00       	call   395b <sbrk>
+  c = sbrk(4096);
+    2e5e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  a = sbrk(0);
+    2e65:	89 c3                	mov    %eax,%ebx
+  c = sbrk(4096);
+    2e67:	e8 ef 0a 00 00       	call   395b <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2e6c:	83 c4 10             	add    $0x10,%esp
+  c = sbrk(4096);
+    2e6f:	89 c6                	mov    %eax,%esi
+  if(c != a || sbrk(0) != a + 4096){
+    2e71:	39 c3                	cmp    %eax,%ebx
+    2e73:	0f 85 b4 02 00 00    	jne    312d <sbrktest+0x3ed>
+    2e79:	83 ec 0c             	sub    $0xc,%esp
+    2e7c:	6a 00                	push   $0x0
+    2e7e:	e8 d8 0a 00 00       	call   395b <sbrk>
+    2e83:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
+    2e89:	83 c4 10             	add    $0x10,%esp
+    2e8c:	39 c2                	cmp    %eax,%edx
+    2e8e:	0f 85 99 02 00 00    	jne    312d <sbrktest+0x3ed>
+  if(*lastaddr == 99){
+    2e94:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2e9b:	0f 84 2f 02 00 00    	je     30d0 <sbrktest+0x390>
+  a = sbrk(0);
+    2ea1:	83 ec 0c             	sub    $0xc,%esp
+    2ea4:	6a 00                	push   $0x0
+    2ea6:	e8 b0 0a 00 00       	call   395b <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2eab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2eb2:	89 c3                	mov    %eax,%ebx
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2eb4:	e8 a2 0a 00 00       	call   395b <sbrk>
+    2eb9:	89 c2                	mov    %eax,%edx
+    2ebb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+    2ebe:	29 d0                	sub    %edx,%eax
+    2ec0:	89 04 24             	mov    %eax,(%esp)
+    2ec3:	e8 93 0a 00 00       	call   395b <sbrk>
+  if(c != a){
+    2ec8:	83 c4 10             	add    $0x10,%esp
+    2ecb:	39 c3                	cmp    %eax,%ebx
+    2ecd:	0f 85 b8 01 00 00    	jne    308b <sbrktest+0x34b>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ed3:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    2ed8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2edf:	90                   	nop
+    ppid = getpid();
+    2ee0:	e8 6e 0a 00 00       	call   3953 <getpid>
+    2ee5:	89 c6                	mov    %eax,%esi
+    pid = fork();
+    2ee7:	e8 df 09 00 00       	call   38cb <fork>
+    if(pid < 0){
+    2eec:	85 c0                	test   %eax,%eax
+    2eee:	0f 88 5d 01 00 00    	js     3051 <sbrktest+0x311>
+    if(pid == 0){
+    2ef4:	0f 84 6f 01 00 00    	je     3069 <sbrktest+0x329>
+    wait();
+    2efa:	e8 dc 09 00 00       	call   38db <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2eff:	81 c3 50 c3 00 00    	add    $0xc350,%ebx
+    2f05:	81 fb 80 84 1e 80    	cmp    $0x801e8480,%ebx
+    2f0b:	75 d3                	jne    2ee0 <sbrktest+0x1a0>
+  if(pipe(fds) != 0){
+    2f0d:	83 ec 0c             	sub    $0xc,%esp
+    2f10:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2f13:	50                   	push   %eax
+    2f14:	e8 ca 09 00 00       	call   38e3 <pipe>
+    2f19:	83 c4 10             	add    $0x10,%esp
+    2f1c:	85 c0                	test   %eax,%eax
+    2f1e:	0f 85 da 01 00 00    	jne    30fe <sbrktest+0x3be>
+    2f24:	8d 5d c0             	lea    -0x40(%ebp),%ebx
+    2f27:	8d 75 e8             	lea    -0x18(%ebp),%esi
+    2f2a:	89 df                	mov    %ebx,%edi
+    2f2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if((pids[i] = fork()) == 0){
+    2f30:	e8 96 09 00 00       	call   38cb <fork>
+    2f35:	89 07                	mov    %eax,(%edi)
+    2f37:	85 c0                	test   %eax,%eax
+    2f39:	0f 84 91 00 00 00    	je     2fd0 <sbrktest+0x290>
+    if(pids[i] != -1)
+    2f3f:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f42:	74 14                	je     2f58 <sbrktest+0x218>
+      read(fds[0], &scratch, 1);
+    2f44:	83 ec 04             	sub    $0x4,%esp
+    2f47:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2f4a:	6a 01                	push   $0x1
+    2f4c:	50                   	push   %eax
+    2f4d:	ff 75 b8             	push   -0x48(%ebp)
+    2f50:	e8 96 09 00 00       	call   38eb <read>
+    2f55:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f58:	83 c7 04             	add    $0x4,%edi
+    2f5b:	39 f7                	cmp    %esi,%edi
+    2f5d:	75 d1                	jne    2f30 <sbrktest+0x1f0>
+  c = sbrk(4096);
+    2f5f:	83 ec 0c             	sub    $0xc,%esp
+    2f62:	68 00 10 00 00       	push   $0x1000
+    2f67:	e8 ef 09 00 00       	call   395b <sbrk>
+    2f6c:	83 c4 10             	add    $0x10,%esp
+    2f6f:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(pids[i] == -1)
+    2f78:	8b 03                	mov    (%ebx),%eax
+    2f7a:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f7d:	74 11                	je     2f90 <sbrktest+0x250>
+    kill(pids[i]);
+    2f7f:	83 ec 0c             	sub    $0xc,%esp
+    2f82:	50                   	push   %eax
+    2f83:	e8 7b 09 00 00       	call   3903 <kill>
+    wait();
+    2f88:	e8 4e 09 00 00       	call   38db <wait>
+    2f8d:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f90:	83 c3 04             	add    $0x4,%ebx
+    2f93:	39 de                	cmp    %ebx,%esi
+    2f95:	75 e1                	jne    2f78 <sbrktest+0x238>
+  if(c == (char*)0xffffffff){
+    2f97:	83 ff ff             	cmp    $0xffffffff,%edi
+    2f9a:	0f 84 47 01 00 00    	je     30e7 <sbrktest+0x3a7>
+  if(sbrk(0) > oldbrk)
+    2fa0:	83 ec 0c             	sub    $0xc,%esp
+    2fa3:	6a 00                	push   $0x0
+    2fa5:	e8 b1 09 00 00       	call   395b <sbrk>
+    2faa:	83 c4 10             	add    $0x10,%esp
+    2fad:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
+    2fb0:	72 60                	jb     3012 <sbrktest+0x2d2>
+  printf(stdout, "sbrk test OK\n");
+    2fb2:	83 ec 08             	sub    $0x8,%esp
+    2fb5:	68 f0 4b 00 00       	push   $0x4bf0
+    2fba:	ff 35 48 5e 00 00    	push   0x5e48
+    2fc0:	e8 6b 0a 00 00       	call   3a30 <printf>
+}
+    2fc5:	83 c4 10             	add    $0x10,%esp
+    2fc8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2fcb:	5b                   	pop    %ebx
+    2fcc:	5e                   	pop    %esi
+    2fcd:	5f                   	pop    %edi
+    2fce:	5d                   	pop    %ebp
+    2fcf:	c3                   	ret    
+      sbrk(BIG - (uint)sbrk(0));
+    2fd0:	83 ec 0c             	sub    $0xc,%esp
+    2fd3:	6a 00                	push   $0x0
+    2fd5:	e8 81 09 00 00       	call   395b <sbrk>
+    2fda:	89 c2                	mov    %eax,%edx
+    2fdc:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2fe1:	29 d0                	sub    %edx,%eax
+    2fe3:	89 04 24             	mov    %eax,(%esp)
+    2fe6:	e8 70 09 00 00       	call   395b <sbrk>
+      write(fds[1], "x", 1);
+    2feb:	83 c4 0c             	add    $0xc,%esp
+    2fee:	6a 01                	push   $0x1
+    2ff0:	68 b1 46 00 00       	push   $0x46b1
+    2ff5:	ff 75 bc             	push   -0x44(%ebp)
+    2ff8:	e8 f6 08 00 00       	call   38f3 <write>
+    2ffd:	83 c4 10             	add    $0x10,%esp
+      for(;;) sleep(1000);
+    3000:	83 ec 0c             	sub    $0xc,%esp
+    3003:	68 e8 03 00 00       	push   $0x3e8
+    3008:	e8 56 09 00 00       	call   3963 <sleep>
+    300d:	83 c4 10             	add    $0x10,%esp
+    3010:	eb ee                	jmp    3000 <sbrktest+0x2c0>
+    sbrk(-(sbrk(0) - oldbrk));
+    3012:	83 ec 0c             	sub    $0xc,%esp
+    3015:	6a 00                	push   $0x0
+    3017:	e8 3f 09 00 00       	call   395b <sbrk>
+    301c:	89 c2                	mov    %eax,%edx
+    301e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+    3021:	29 d0                	sub    %edx,%eax
+    3023:	89 04 24             	mov    %eax,(%esp)
+    3026:	e8 30 09 00 00       	call   395b <sbrk>
+    302b:	83 c4 10             	add    $0x10,%esp
+    302e:	e9 7f ff ff ff       	jmp    2fb2 <sbrktest+0x272>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    3033:	83 ec 0c             	sub    $0xc,%esp
+    3036:	50                   	push   %eax
+    3037:	53                   	push   %ebx
+    3038:	56                   	push   %esi
+    3039:	68 53 4b 00 00       	push   $0x4b53
+    303e:	ff 35 48 5e 00 00    	push   0x5e48
+    3044:	e8 e7 09 00 00       	call   3a30 <printf>
+      exit();
+    3049:	83 c4 20             	add    $0x20,%esp
+    304c:	e8 82 08 00 00       	call   38d3 <exit>
+      printf(stdout, "fork failed\n");
+    3051:	83 ec 08             	sub    $0x8,%esp
+    3054:	68 99 4c 00 00       	push   $0x4c99
+    3059:	ff 35 48 5e 00 00    	push   0x5e48
+    305f:	e8 cc 09 00 00       	call   3a30 <printf>
+      exit();
+    3064:	e8 6a 08 00 00       	call   38d3 <exit>
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    3069:	0f be 03             	movsbl (%ebx),%eax
+    306c:	50                   	push   %eax
+    306d:	53                   	push   %ebx
+    306e:	68 bc 4b 00 00       	push   $0x4bbc
+    3073:	ff 35 48 5e 00 00    	push   0x5e48
+    3079:	e8 b2 09 00 00       	call   3a30 <printf>
+      kill(ppid);
+    307e:	89 34 24             	mov    %esi,(%esp)
+    3081:	e8 7d 08 00 00       	call   3903 <kill>
+      exit();
+    3086:	e8 48 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    308b:	50                   	push   %eax
+    308c:	53                   	push   %ebx
+    308d:	68 9c 53 00 00       	push   $0x539c
+    3092:	ff 35 48 5e 00 00    	push   0x5e48
+    3098:	e8 93 09 00 00       	call   3a30 <printf>
+    exit();
+    309d:	e8 31 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    30a2:	56                   	push   %esi
+    30a3:	56                   	push   %esi
+    30a4:	68 cc 52 00 00       	push   $0x52cc
+    30a9:	ff 35 48 5e 00 00    	push   0x5e48
+    30af:	e8 7c 09 00 00       	call   3a30 <printf>
+    exit();
+    30b4:	e8 1a 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    30b9:	50                   	push   %eax
+    30ba:	50                   	push   %eax
+    30bb:	68 6e 4b 00 00       	push   $0x4b6e
+    30c0:	ff 35 48 5e 00 00    	push   0x5e48
+    30c6:	e8 65 09 00 00       	call   3a30 <printf>
+    exit();
+    30cb:	e8 03 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    30d0:	51                   	push   %ecx
+    30d1:	51                   	push   %ecx
+    30d2:	68 6c 53 00 00       	push   $0x536c
+    30d7:	ff 35 48 5e 00 00    	push   0x5e48
+    30dd:	e8 4e 09 00 00       	call   3a30 <printf>
+    exit();
+    30e2:	e8 ec 07 00 00       	call   38d3 <exit>
+    printf(stdout, "failed sbrk leaked memory\n");
+    30e7:	50                   	push   %eax
+    30e8:	50                   	push   %eax
+    30e9:	68 d5 4b 00 00       	push   $0x4bd5
+    30ee:	ff 35 48 5e 00 00    	push   0x5e48
+    30f4:	e8 37 09 00 00       	call   3a30 <printf>
+    exit();
+    30f9:	e8 d5 07 00 00       	call   38d3 <exit>
+    printf(1, "pipe() failed\n");
+    30fe:	52                   	push   %edx
+    30ff:	52                   	push   %edx
+    3100:	68 91 40 00 00       	push   $0x4091
+    3105:	6a 01                	push   $0x1
+    3107:	e8 24 09 00 00       	call   3a30 <printf>
+    exit();
+    310c:	e8 c2 07 00 00       	call   38d3 <exit>
+    exit();
+    3111:	e8 bd 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    3116:	57                   	push   %edi
+    3117:	57                   	push   %edi
+    3118:	68 85 4b 00 00       	push   $0x4b85
+    311d:	ff 35 48 5e 00 00    	push   0x5e48
+    3123:	e8 08 09 00 00       	call   3a30 <printf>
+    exit();
+    3128:	e8 a6 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    312d:	56                   	push   %esi
+    312e:	53                   	push   %ebx
+    312f:	68 44 53 00 00       	push   $0x5344
+    3134:	ff 35 48 5e 00 00    	push   0x5e48
+    313a:	e8 f1 08 00 00       	call   3a30 <printf>
+    exit();
+    313f:	e8 8f 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    3144:	50                   	push   %eax
+    3145:	53                   	push   %ebx
+    3146:	68 0c 53 00 00       	push   $0x530c
+    314b:	ff 35 48 5e 00 00    	push   0x5e48
+    3151:	e8 da 08 00 00       	call   3a30 <printf>
+    exit();
+    3156:	e8 78 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    315b:	53                   	push   %ebx
+    315c:	53                   	push   %ebx
+    315d:	68 a1 4b 00 00       	push   $0x4ba1
+    3162:	ff 35 48 5e 00 00    	push   0x5e48
+    3168:	e8 c3 08 00 00       	call   3a30 <printf>
+    exit();
+    316d:	e8 61 07 00 00       	call   38d3 <exit>
+    3172:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003180 <validateint>:
+}
+    3180:	c3                   	ret    
+    3181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3188:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    318f:	90                   	nop
+
+00003190 <validatetest>:
+{
+    3190:	55                   	push   %ebp
+    3191:	89 e5                	mov    %esp,%ebp
+    3193:	56                   	push   %esi
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3194:	31 f6                	xor    %esi,%esi
+{
+    3196:	53                   	push   %ebx
+  printf(stdout, "validate test\n");
+    3197:	83 ec 08             	sub    $0x8,%esp
+    319a:	68 fe 4b 00 00       	push   $0x4bfe
+    319f:	ff 35 48 5e 00 00    	push   0x5e48
+    31a5:	e8 86 08 00 00       	call   3a30 <printf>
+    31aa:	83 c4 10             	add    $0x10,%esp
+    31ad:	8d 76 00             	lea    0x0(%esi),%esi
+    if((pid = fork()) == 0){
+    31b0:	e8 16 07 00 00       	call   38cb <fork>
+    31b5:	89 c3                	mov    %eax,%ebx
+    31b7:	85 c0                	test   %eax,%eax
+    31b9:	74 63                	je     321e <validatetest+0x8e>
+    sleep(0);
+    31bb:	83 ec 0c             	sub    $0xc,%esp
+    31be:	6a 00                	push   $0x0
+    31c0:	e8 9e 07 00 00       	call   3963 <sleep>
+    sleep(0);
+    31c5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    31cc:	e8 92 07 00 00       	call   3963 <sleep>
+    kill(pid);
+    31d1:	89 1c 24             	mov    %ebx,(%esp)
+    31d4:	e8 2a 07 00 00       	call   3903 <kill>
+    wait();
+    31d9:	e8 fd 06 00 00       	call   38db <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    31de:	58                   	pop    %eax
+    31df:	5a                   	pop    %edx
+    31e0:	56                   	push   %esi
+    31e1:	68 0d 4c 00 00       	push   $0x4c0d
+    31e6:	e8 48 07 00 00       	call   3933 <link>
+    31eb:	83 c4 10             	add    $0x10,%esp
+    31ee:	83 f8 ff             	cmp    $0xffffffff,%eax
+    31f1:	75 30                	jne    3223 <validatetest+0x93>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    31f3:	81 c6 00 10 00 00    	add    $0x1000,%esi
+    31f9:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
+    31ff:	75 af                	jne    31b0 <validatetest+0x20>
+  printf(stdout, "validate ok\n");
+    3201:	83 ec 08             	sub    $0x8,%esp
+    3204:	68 31 4c 00 00       	push   $0x4c31
+    3209:	ff 35 48 5e 00 00    	push   0x5e48
+    320f:	e8 1c 08 00 00       	call   3a30 <printf>
+}
+    3214:	83 c4 10             	add    $0x10,%esp
+    3217:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    321a:	5b                   	pop    %ebx
+    321b:	5e                   	pop    %esi
+    321c:	5d                   	pop    %ebp
+    321d:	c3                   	ret    
+      exit();
+    321e:	e8 b0 06 00 00       	call   38d3 <exit>
+      printf(stdout, "link should not succeed\n");
+    3223:	83 ec 08             	sub    $0x8,%esp
+    3226:	68 18 4c 00 00       	push   $0x4c18
+    322b:	ff 35 48 5e 00 00    	push   0x5e48
+    3231:	e8 fa 07 00 00       	call   3a30 <printf>
+      exit();
+    3236:	e8 98 06 00 00       	call   38d3 <exit>
+    323b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    323f:	90                   	nop
+
+00003240 <bsstest>:
+{
+    3240:	55                   	push   %ebp
+    3241:	89 e5                	mov    %esp,%ebp
+    3243:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    3246:	68 3e 4c 00 00       	push   $0x4c3e
+    324b:	ff 35 48 5e 00 00    	push   0x5e48
+    3251:	e8 da 07 00 00       	call   3a30 <printf>
+    3256:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(uninit); i++){
+    3259:	31 c0                	xor    %eax,%eax
+    325b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    325f:	90                   	nop
+    if(uninit[i] != '\0'){
+    3260:	80 b8 60 5e 00 00 00 	cmpb   $0x0,0x5e60(%eax)
+    3267:	75 22                	jne    328b <bsstest+0x4b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3269:	83 c0 01             	add    $0x1,%eax
+    326c:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    3271:	75 ed                	jne    3260 <bsstest+0x20>
+  printf(stdout, "bss test ok\n");
+    3273:	83 ec 08             	sub    $0x8,%esp
+    3276:	68 59 4c 00 00       	push   $0x4c59
+    327b:	ff 35 48 5e 00 00    	push   0x5e48
+    3281:	e8 aa 07 00 00       	call   3a30 <printf>
+}
+    3286:	83 c4 10             	add    $0x10,%esp
+    3289:	c9                   	leave  
+    328a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    328b:	83 ec 08             	sub    $0x8,%esp
+    328e:	68 48 4c 00 00       	push   $0x4c48
+    3293:	ff 35 48 5e 00 00    	push   0x5e48
+    3299:	e8 92 07 00 00       	call   3a30 <printf>
+      exit();
+    329e:	e8 30 06 00 00       	call   38d3 <exit>
+    32a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    32aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000032b0 <bigargtest>:
+{
+    32b0:	55                   	push   %ebp
+    32b1:	89 e5                	mov    %esp,%ebp
+    32b3:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    32b6:	68 66 4c 00 00       	push   $0x4c66
+    32bb:	e8 63 06 00 00       	call   3923 <unlink>
+  pid = fork();
+    32c0:	e8 06 06 00 00       	call   38cb <fork>
+  if(pid == 0){
+    32c5:	83 c4 10             	add    $0x10,%esp
+    32c8:	85 c0                	test   %eax,%eax
+    32ca:	74 44                	je     3310 <bigargtest+0x60>
+  } else if(pid < 0){
+    32cc:	0f 88 c5 00 00 00    	js     3397 <bigargtest+0xe7>
+  wait();
+    32d2:	e8 04 06 00 00       	call   38db <wait>
+  fd = open("bigarg-ok", 0);
+    32d7:	83 ec 08             	sub    $0x8,%esp
+    32da:	6a 00                	push   $0x0
+    32dc:	68 66 4c 00 00       	push   $0x4c66
+    32e1:	e8 2d 06 00 00       	call   3913 <open>
+  if(fd < 0){
+    32e6:	83 c4 10             	add    $0x10,%esp
+    32e9:	85 c0                	test   %eax,%eax
+    32eb:	0f 88 8f 00 00 00    	js     3380 <bigargtest+0xd0>
+  close(fd);
+    32f1:	83 ec 0c             	sub    $0xc,%esp
+    32f4:	50                   	push   %eax
+    32f5:	e8 01 06 00 00       	call   38fb <close>
+  unlink("bigarg-ok");
+    32fa:	c7 04 24 66 4c 00 00 	movl   $0x4c66,(%esp)
+    3301:	e8 1d 06 00 00       	call   3923 <unlink>
+}
+    3306:	83 c4 10             	add    $0x10,%esp
+    3309:	c9                   	leave  
+    330a:	c3                   	ret    
+    330b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    330f:	90                   	nop
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    3310:	c7 04 85 80 a5 00 00 	movl   $0x53c0,0xa580(,%eax,4)
+    3317:	c0 53 00 00 
+    for(i = 0; i < MAXARG-1; i++)
+    331b:	83 c0 01             	add    $0x1,%eax
+    331e:	83 f8 1f             	cmp    $0x1f,%eax
+    3321:	75 ed                	jne    3310 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    3323:	51                   	push   %ecx
+    3324:	51                   	push   %ecx
+    3325:	68 70 4c 00 00       	push   $0x4c70
+    332a:	ff 35 48 5e 00 00    	push   0x5e48
+    args[MAXARG-1] = 0;
+    3330:	c7 05 fc a5 00 00 00 	movl   $0x0,0xa5fc
+    3337:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    333a:	e8 f1 06 00 00       	call   3a30 <printf>
+    exec("echo", args);
+    333f:	58                   	pop    %eax
+    3340:	5a                   	pop    %edx
+    3341:	68 80 a5 00 00       	push   $0xa580
+    3346:	68 3d 3e 00 00       	push   $0x3e3d
+    334b:	e8 bb 05 00 00       	call   390b <exec>
+    printf(stdout, "bigarg test ok\n");
+    3350:	59                   	pop    %ecx
+    3351:	58                   	pop    %eax
+    3352:	68 7d 4c 00 00       	push   $0x4c7d
+    3357:	ff 35 48 5e 00 00    	push   0x5e48
+    335d:	e8 ce 06 00 00       	call   3a30 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    3362:	58                   	pop    %eax
+    3363:	5a                   	pop    %edx
+    3364:	68 00 02 00 00       	push   $0x200
+    3369:	68 66 4c 00 00       	push   $0x4c66
+    336e:	e8 a0 05 00 00       	call   3913 <open>
+    close(fd);
+    3373:	89 04 24             	mov    %eax,(%esp)
+    3376:	e8 80 05 00 00       	call   38fb <close>
+    exit();
+    337b:	e8 53 05 00 00       	call   38d3 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    3380:	50                   	push   %eax
+    3381:	50                   	push   %eax
+    3382:	68 a6 4c 00 00       	push   $0x4ca6
+    3387:	ff 35 48 5e 00 00    	push   0x5e48
+    338d:	e8 9e 06 00 00       	call   3a30 <printf>
+    exit();
+    3392:	e8 3c 05 00 00       	call   38d3 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3397:	52                   	push   %edx
+    3398:	52                   	push   %edx
+    3399:	68 8d 4c 00 00       	push   $0x4c8d
+    339e:	ff 35 48 5e 00 00    	push   0x5e48
+    33a4:	e8 87 06 00 00       	call   3a30 <printf>
+    exit();
+    33a9:	e8 25 05 00 00       	call   38d3 <exit>
+    33ae:	66 90                	xchg   %ax,%ax
+
+000033b0 <fsfull>:
+{
+    33b0:	55                   	push   %ebp
+    33b1:	89 e5                	mov    %esp,%ebp
+    33b3:	57                   	push   %edi
+    33b4:	56                   	push   %esi
+  for(nfiles = 0; ; nfiles++){
+    33b5:	31 f6                	xor    %esi,%esi
+{
+    33b7:	53                   	push   %ebx
+    33b8:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    33bb:	68 bb 4c 00 00       	push   $0x4cbb
+    33c0:	6a 01                	push   $0x1
+    33c2:	e8 69 06 00 00       	call   3a30 <printf>
+    33c7:	83 c4 10             	add    $0x10,%esp
+    33ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    33d0:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33d5:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    33da:	83 ec 04             	sub    $0x4,%esp
+    name[0] = 'f';
+    33dd:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33e1:	f7 e6                	mul    %esi
+    name[5] = '\0';
+    33e3:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33e7:	c1 ea 06             	shr    $0x6,%edx
+    33ea:	8d 42 30             	lea    0x30(%edx),%eax
+    33ed:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33f0:	69 c2 e8 03 00 00    	imul   $0x3e8,%edx,%eax
+    33f6:	89 f2                	mov    %esi,%edx
+    33f8:	29 c2                	sub    %eax,%edx
+    33fa:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    33ff:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3401:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3406:	c1 ea 05             	shr    $0x5,%edx
+    3409:	83 c2 30             	add    $0x30,%edx
+    340c:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    340f:	f7 e6                	mul    %esi
+    3411:	c1 ea 05             	shr    $0x5,%edx
+    3414:	6b c2 64             	imul   $0x64,%edx,%eax
+    3417:	89 f2                	mov    %esi,%edx
+    3419:	29 c2                	sub    %eax,%edx
+    341b:	89 d0                	mov    %edx,%eax
+    341d:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    341f:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3421:	c1 ea 03             	shr    $0x3,%edx
+    3424:	83 c2 30             	add    $0x30,%edx
+    3427:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    342a:	f7 e1                	mul    %ecx
+    342c:	89 f0                	mov    %esi,%eax
+    342e:	c1 ea 03             	shr    $0x3,%edx
+    3431:	8d 14 92             	lea    (%edx,%edx,4),%edx
+    3434:	01 d2                	add    %edx,%edx
+    3436:	29 d0                	sub    %edx,%eax
+    3438:	83 c0 30             	add    $0x30,%eax
+    343b:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    343e:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3441:	50                   	push   %eax
+    3442:	68 c8 4c 00 00       	push   $0x4cc8
+    3447:	6a 01                	push   $0x1
+    3449:	e8 e2 05 00 00       	call   3a30 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    344e:	58                   	pop    %eax
+    344f:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3452:	5a                   	pop    %edx
+    3453:	68 02 02 00 00       	push   $0x202
+    3458:	50                   	push   %eax
+    3459:	e8 b5 04 00 00       	call   3913 <open>
+    if(fd < 0){
+    345e:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    3461:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    3463:	85 c0                	test   %eax,%eax
+    3465:	78 4f                	js     34b6 <fsfull+0x106>
+    int total = 0;
+    3467:	31 db                	xor    %ebx,%ebx
+    3469:	eb 07                	jmp    3472 <fsfull+0xc2>
+    346b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    346f:	90                   	nop
+      total += cc;
+    3470:	01 c3                	add    %eax,%ebx
+      int cc = write(fd, buf, 512);
+    3472:	83 ec 04             	sub    $0x4,%esp
+    3475:	68 00 02 00 00       	push   $0x200
+    347a:	68 80 85 00 00       	push   $0x8580
+    347f:	57                   	push   %edi
+    3480:	e8 6e 04 00 00       	call   38f3 <write>
+      if(cc < 512)
+    3485:	83 c4 10             	add    $0x10,%esp
+    3488:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    348d:	7f e1                	jg     3470 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    348f:	83 ec 04             	sub    $0x4,%esp
+    3492:	53                   	push   %ebx
+    3493:	68 e4 4c 00 00       	push   $0x4ce4
+    3498:	6a 01                	push   $0x1
+    349a:	e8 91 05 00 00       	call   3a30 <printf>
+    close(fd);
+    349f:	89 3c 24             	mov    %edi,(%esp)
+    34a2:	e8 54 04 00 00       	call   38fb <close>
+    if(total == 0)
+    34a7:	83 c4 10             	add    $0x10,%esp
+    34aa:	85 db                	test   %ebx,%ebx
+    34ac:	74 1e                	je     34cc <fsfull+0x11c>
+  for(nfiles = 0; ; nfiles++){
+    34ae:	83 c6 01             	add    $0x1,%esi
+    34b1:	e9 1a ff ff ff       	jmp    33d0 <fsfull+0x20>
+      printf(1, "open %s failed\n", name);
+    34b6:	83 ec 04             	sub    $0x4,%esp
+    34b9:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34bc:	50                   	push   %eax
+    34bd:	68 d4 4c 00 00       	push   $0x4cd4
+    34c2:	6a 01                	push   $0x1
+    34c4:	e8 67 05 00 00       	call   3a30 <printf>
+      break;
+    34c9:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    34cc:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34d1:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
+    34d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    34dd:	8d 76 00             	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    34e0:	89 f0                	mov    %esi,%eax
+    unlink(name);
+    34e2:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'f';
+    34e5:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34e9:	f7 e7                	mul    %edi
+    name[5] = '\0';
+    34eb:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34ef:	c1 ea 06             	shr    $0x6,%edx
+    34f2:	8d 42 30             	lea    0x30(%edx),%eax
+    34f5:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34f8:	69 c2 e8 03 00 00    	imul   $0x3e8,%edx,%eax
+    34fe:	89 f2                	mov    %esi,%edx
+    3500:	29 c2                	sub    %eax,%edx
+    3502:	89 d0                	mov    %edx,%eax
+    3504:	f7 e3                	mul    %ebx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3506:	89 f0                	mov    %esi,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3508:	c1 ea 05             	shr    $0x5,%edx
+    350b:	83 c2 30             	add    $0x30,%edx
+    350e:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3511:	f7 e3                	mul    %ebx
+    3513:	c1 ea 05             	shr    $0x5,%edx
+    3516:	6b ca 64             	imul   $0x64,%edx,%ecx
+    3519:	89 f2                	mov    %esi,%edx
+    351b:	29 ca                	sub    %ecx,%edx
+    351d:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    3522:	89 d0                	mov    %edx,%eax
+    3524:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    3526:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3528:	c1 ea 03             	shr    $0x3,%edx
+    352b:	83 c2 30             	add    $0x30,%edx
+    352e:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    3531:	f7 e1                	mul    %ecx
+    3533:	89 f0                	mov    %esi,%eax
+    nfiles--;
+    3535:	83 ee 01             	sub    $0x1,%esi
+    name[4] = '0' + (nfiles % 10);
+    3538:	c1 ea 03             	shr    $0x3,%edx
+    353b:	8d 14 92             	lea    (%edx,%edx,4),%edx
+    353e:	01 d2                	add    %edx,%edx
+    3540:	29 d0                	sub    %edx,%eax
+    3542:	83 c0 30             	add    $0x30,%eax
+    3545:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    3548:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    354b:	50                   	push   %eax
+    354c:	e8 d2 03 00 00       	call   3923 <unlink>
+  while(nfiles >= 0){
+    3551:	83 c4 10             	add    $0x10,%esp
+    3554:	83 fe ff             	cmp    $0xffffffff,%esi
+    3557:	75 87                	jne    34e0 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    3559:	83 ec 08             	sub    $0x8,%esp
+    355c:	68 f4 4c 00 00       	push   $0x4cf4
+    3561:	6a 01                	push   $0x1
+    3563:	e8 c8 04 00 00       	call   3a30 <printf>
+}
+    3568:	83 c4 10             	add    $0x10,%esp
+    356b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    356e:	5b                   	pop    %ebx
+    356f:	5e                   	pop    %esi
+    3570:	5f                   	pop    %edi
+    3571:	5d                   	pop    %ebp
+    3572:	c3                   	ret    
+    3573:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    357a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003580 <uio>:
+{
+    3580:	55                   	push   %ebp
+    3581:	89 e5                	mov    %esp,%ebp
+    3583:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    3586:	68 0a 4d 00 00       	push   $0x4d0a
+    358b:	6a 01                	push   $0x1
+    358d:	e8 9e 04 00 00       	call   3a30 <printf>
+  pid = fork();
+    3592:	e8 34 03 00 00       	call   38cb <fork>
+  if(pid == 0){
+    3597:	83 c4 10             	add    $0x10,%esp
+    359a:	85 c0                	test   %eax,%eax
+    359c:	74 1b                	je     35b9 <uio+0x39>
+  } else if(pid < 0){
+    359e:	78 3d                	js     35dd <uio+0x5d>
+  wait();
+    35a0:	e8 36 03 00 00       	call   38db <wait>
+  printf(1, "uio test done\n");
+    35a5:	83 ec 08             	sub    $0x8,%esp
+    35a8:	68 14 4d 00 00       	push   $0x4d14
+    35ad:	6a 01                	push   $0x1
+    35af:	e8 7c 04 00 00       	call   3a30 <printf>
+}
+    35b4:	83 c4 10             	add    $0x10,%esp
+    35b7:	c9                   	leave  
+    35b8:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    35b9:	b8 09 00 00 00       	mov    $0x9,%eax
+    35be:	ba 70 00 00 00       	mov    $0x70,%edx
+    35c3:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    35c4:	ba 71 00 00 00       	mov    $0x71,%edx
+    35c9:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    35ca:	52                   	push   %edx
+    35cb:	52                   	push   %edx
+    35cc:	68 a0 54 00 00       	push   $0x54a0
+    35d1:	6a 01                	push   $0x1
+    35d3:	e8 58 04 00 00       	call   3a30 <printf>
+    exit();
+    35d8:	e8 f6 02 00 00       	call   38d3 <exit>
+    printf (1, "fork failed\n");
+    35dd:	50                   	push   %eax
+    35de:	50                   	push   %eax
+    35df:	68 99 4c 00 00       	push   $0x4c99
+    35e4:	6a 01                	push   $0x1
+    35e6:	e8 45 04 00 00       	call   3a30 <printf>
+    exit();
+    35eb:	e8 e3 02 00 00       	call   38d3 <exit>
+
+000035f0 <argptest>:
+{
+    35f0:	55                   	push   %ebp
+    35f1:	89 e5                	mov    %esp,%ebp
+    35f3:	53                   	push   %ebx
+    35f4:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    35f7:	6a 00                	push   $0x0
+    35f9:	68 23 4d 00 00       	push   $0x4d23
+    35fe:	e8 10 03 00 00       	call   3913 <open>
+  if (fd < 0) {
+    3603:	83 c4 10             	add    $0x10,%esp
+    3606:	85 c0                	test   %eax,%eax
+    3608:	78 39                	js     3643 <argptest+0x53>
+  read(fd, sbrk(0) - 1, -1);
+    360a:	83 ec 0c             	sub    $0xc,%esp
+    360d:	89 c3                	mov    %eax,%ebx
+    360f:	6a 00                	push   $0x0
+    3611:	e8 45 03 00 00       	call   395b <sbrk>
+    3616:	83 c4 0c             	add    $0xc,%esp
+    3619:	83 e8 01             	sub    $0x1,%eax
+    361c:	6a ff                	push   $0xffffffff
+    361e:	50                   	push   %eax
+    361f:	53                   	push   %ebx
+    3620:	e8 c6 02 00 00       	call   38eb <read>
+  close(fd);
+    3625:	89 1c 24             	mov    %ebx,(%esp)
+    3628:	e8 ce 02 00 00       	call   38fb <close>
+  printf(1, "arg test passed\n");
+    362d:	58                   	pop    %eax
+    362e:	5a                   	pop    %edx
+    362f:	68 35 4d 00 00       	push   $0x4d35
+    3634:	6a 01                	push   $0x1
+    3636:	e8 f5 03 00 00       	call   3a30 <printf>
+}
+    363b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    363e:	83 c4 10             	add    $0x10,%esp
+    3641:	c9                   	leave  
+    3642:	c3                   	ret    
+    printf(2, "open failed\n");
+    3643:	51                   	push   %ecx
+    3644:	51                   	push   %ecx
+    3645:	68 28 4d 00 00       	push   $0x4d28
+    364a:	6a 02                	push   $0x2
+    364c:	e8 df 03 00 00       	call   3a30 <printf>
+    exit();
+    3651:	e8 7d 02 00 00       	call   38d3 <exit>
+    3656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    365d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00003660 <rand>:
+  randstate = randstate * 1664525 + 1013904223;
+    3660:	69 05 44 5e 00 00 0d 	imul   $0x19660d,0x5e44,%eax
+    3667:	66 19 00 
+    366a:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    366f:	a3 44 5e 00 00       	mov    %eax,0x5e44
+}
+    3674:	c3                   	ret    
+    3675:	66 90                	xchg   %ax,%ax
+    3677:	66 90                	xchg   %ax,%ax
+    3679:	66 90                	xchg   %ax,%ax
+    367b:	66 90                	xchg   %ax,%ax
+    367d:	66 90                	xchg   %ax,%ax
+    367f:	90                   	nop
+
+00003680 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3680:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    3681:	31 c0                	xor    %eax,%eax
+{
+    3683:	89 e5                	mov    %esp,%ebp
+    3685:	53                   	push   %ebx
+    3686:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    3689:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+    368c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+    3690:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+    3694:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+    3697:	83 c0 01             	add    $0x1,%eax
+    369a:	84 d2                	test   %dl,%dl
+    369c:	75 f2                	jne    3690 <strcpy+0x10>
+    ;
+  return os;
+}
+    369e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36a1:	89 c8                	mov    %ecx,%eax
+    36a3:	c9                   	leave  
+    36a4:	c3                   	ret    
+    36a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000036b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    36b0:	55                   	push   %ebp
+    36b1:	89 e5                	mov    %esp,%ebp
+    36b3:	53                   	push   %ebx
+    36b4:	8b 55 08             	mov    0x8(%ebp),%edx
+    36b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+    36ba:	0f b6 02             	movzbl (%edx),%eax
+    36bd:	84 c0                	test   %al,%al
+    36bf:	75 17                	jne    36d8 <strcmp+0x28>
+    36c1:	eb 3a                	jmp    36fd <strcmp+0x4d>
+    36c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    36c7:	90                   	nop
+    36c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+    36cc:	83 c2 01             	add    $0x1,%edx
+    36cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+    36d2:	84 c0                	test   %al,%al
+    36d4:	74 1a                	je     36f0 <strcmp+0x40>
+    p++, q++;
+    36d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+    36d8:	0f b6 19             	movzbl (%ecx),%ebx
+    36db:	38 c3                	cmp    %al,%bl
+    36dd:	74 e9                	je     36c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+    36df:	29 d8                	sub    %ebx,%eax
+}
+    36e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36e4:	c9                   	leave  
+    36e5:	c3                   	ret    
+    36e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+    36f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+    36f4:	31 c0                	xor    %eax,%eax
+    36f6:	29 d8                	sub    %ebx,%eax
+}
+    36f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36fb:	c9                   	leave  
+    36fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+    36fd:	0f b6 19             	movzbl (%ecx),%ebx
+    3700:	31 c0                	xor    %eax,%eax
+    3702:	eb db                	jmp    36df <strcmp+0x2f>
+    3704:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    370b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    370f:	90                   	nop
+
+00003710 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    3710:	55                   	push   %ebp
+    3711:	89 e5                	mov    %esp,%ebp
+    3713:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    3716:	80 3a 00             	cmpb   $0x0,(%edx)
+    3719:	74 15                	je     3730 <strlen+0x20>
+    371b:	31 c0                	xor    %eax,%eax
+    371d:	8d 76 00             	lea    0x0(%esi),%esi
+    3720:	83 c0 01             	add    $0x1,%eax
+    3723:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+    3727:	89 c1                	mov    %eax,%ecx
+    3729:	75 f5                	jne    3720 <strlen+0x10>
+    ;
+  return n;
+}
+    372b:	89 c8                	mov    %ecx,%eax
+    372d:	5d                   	pop    %ebp
+    372e:	c3                   	ret    
+    372f:	90                   	nop
+  for(n = 0; s[n]; n++)
+    3730:	31 c9                	xor    %ecx,%ecx
+}
+    3732:	5d                   	pop    %ebp
+    3733:	89 c8                	mov    %ecx,%eax
+    3735:	c3                   	ret    
+    3736:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    373d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00003740 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    3740:	55                   	push   %ebp
+    3741:	89 e5                	mov    %esp,%ebp
+    3743:	57                   	push   %edi
+    3744:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    3747:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    374a:	8b 45 0c             	mov    0xc(%ebp),%eax
+    374d:	89 d7                	mov    %edx,%edi
+    374f:	fc                   	cld    
+    3750:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    3752:	8b 7d fc             	mov    -0x4(%ebp),%edi
+    3755:	89 d0                	mov    %edx,%eax
+    3757:	c9                   	leave  
+    3758:	c3                   	ret    
+    3759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003760 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3760:	55                   	push   %ebp
+    3761:	89 e5                	mov    %esp,%ebp
+    3763:	8b 45 08             	mov    0x8(%ebp),%eax
+    3766:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+    376a:	0f b6 10             	movzbl (%eax),%edx
+    376d:	84 d2                	test   %dl,%dl
+    376f:	75 12                	jne    3783 <strchr+0x23>
+    3771:	eb 1d                	jmp    3790 <strchr+0x30>
+    3773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3777:	90                   	nop
+    3778:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+    377c:	83 c0 01             	add    $0x1,%eax
+    377f:	84 d2                	test   %dl,%dl
+    3781:	74 0d                	je     3790 <strchr+0x30>
+    if(*s == c)
+    3783:	38 d1                	cmp    %dl,%cl
+    3785:	75 f1                	jne    3778 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+    3787:	5d                   	pop    %ebp
+    3788:	c3                   	ret    
+    3789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+    3790:	31 c0                	xor    %eax,%eax
+}
+    3792:	5d                   	pop    %ebp
+    3793:	c3                   	ret    
+    3794:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    379b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    379f:	90                   	nop
+
+000037a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    37a0:	55                   	push   %ebp
+    37a1:	89 e5                	mov    %esp,%ebp
+    37a3:	57                   	push   %edi
+    37a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    37a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+    37a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+    37a9:	31 db                	xor    %ebx,%ebx
+{
+    37ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+    37ae:	eb 27                	jmp    37d7 <gets+0x37>
+    cc = read(0, &c, 1);
+    37b0:	83 ec 04             	sub    $0x4,%esp
+    37b3:	6a 01                	push   $0x1
+    37b5:	57                   	push   %edi
+    37b6:	6a 00                	push   $0x0
+    37b8:	e8 2e 01 00 00       	call   38eb <read>
+    if(cc < 1)
+    37bd:	83 c4 10             	add    $0x10,%esp
+    37c0:	85 c0                	test   %eax,%eax
+    37c2:	7e 1d                	jle    37e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+    37c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    37c8:	8b 55 08             	mov    0x8(%ebp),%edx
+    37cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+    37cf:	3c 0a                	cmp    $0xa,%al
+    37d1:	74 1d                	je     37f0 <gets+0x50>
+    37d3:	3c 0d                	cmp    $0xd,%al
+    37d5:	74 19                	je     37f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+    37d7:	89 de                	mov    %ebx,%esi
+    37d9:	83 c3 01             	add    $0x1,%ebx
+    37dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    37df:	7c cf                	jl     37b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+    37e1:	8b 45 08             	mov    0x8(%ebp),%eax
+    37e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+    37e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37eb:	5b                   	pop    %ebx
+    37ec:	5e                   	pop    %esi
+    37ed:	5f                   	pop    %edi
+    37ee:	5d                   	pop    %ebp
+    37ef:	c3                   	ret    
+  buf[i] = '\0';
+    37f0:	8b 45 08             	mov    0x8(%ebp),%eax
+    37f3:	89 de                	mov    %ebx,%esi
+    37f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+    37f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37fc:	5b                   	pop    %ebx
+    37fd:	5e                   	pop    %esi
+    37fe:	5f                   	pop    %edi
+    37ff:	5d                   	pop    %ebp
+    3800:	c3                   	ret    
+    3801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3808:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    380f:	90                   	nop
+
+00003810 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    3810:	55                   	push   %ebp
+    3811:	89 e5                	mov    %esp,%ebp
+    3813:	56                   	push   %esi
+    3814:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    3815:	83 ec 08             	sub    $0x8,%esp
+    3818:	6a 00                	push   $0x0
+    381a:	ff 75 08             	push   0x8(%ebp)
+    381d:	e8 f1 00 00 00       	call   3913 <open>
+  if(fd < 0)
+    3822:	83 c4 10             	add    $0x10,%esp
+    3825:	85 c0                	test   %eax,%eax
+    3827:	78 27                	js     3850 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+    3829:	83 ec 08             	sub    $0x8,%esp
+    382c:	ff 75 0c             	push   0xc(%ebp)
+    382f:	89 c3                	mov    %eax,%ebx
+    3831:	50                   	push   %eax
+    3832:	e8 f4 00 00 00       	call   392b <fstat>
+  close(fd);
+    3837:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    383a:	89 c6                	mov    %eax,%esi
+  close(fd);
+    383c:	e8 ba 00 00 00       	call   38fb <close>
+  return r;
+    3841:	83 c4 10             	add    $0x10,%esp
+}
+    3844:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3847:	89 f0                	mov    %esi,%eax
+    3849:	5b                   	pop    %ebx
+    384a:	5e                   	pop    %esi
+    384b:	5d                   	pop    %ebp
+    384c:	c3                   	ret    
+    384d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+    3850:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    3855:	eb ed                	jmp    3844 <stat+0x34>
+    3857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    385e:	66 90                	xchg   %ax,%ax
+
+00003860 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3860:	55                   	push   %ebp
+    3861:	89 e5                	mov    %esp,%ebp
+    3863:	53                   	push   %ebx
+    3864:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3867:	0f be 02             	movsbl (%edx),%eax
+    386a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+    386d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+    3870:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+    3875:	77 1e                	ja     3895 <atoi+0x35>
+    3877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    387e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+    3880:	83 c2 01             	add    $0x1,%edx
+    3883:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+    3886:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+    388a:	0f be 02             	movsbl (%edx),%eax
+    388d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+    3890:	80 fb 09             	cmp    $0x9,%bl
+    3893:	76 eb                	jbe    3880 <atoi+0x20>
+  return n;
+}
+    3895:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    3898:	89 c8                	mov    %ecx,%eax
+    389a:	c9                   	leave  
+    389b:	c3                   	ret    
+    389c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000038a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    38a0:	55                   	push   %ebp
+    38a1:	89 e5                	mov    %esp,%ebp
+    38a3:	57                   	push   %edi
+    38a4:	8b 45 10             	mov    0x10(%ebp),%eax
+    38a7:	8b 55 08             	mov    0x8(%ebp),%edx
+    38aa:	56                   	push   %esi
+    38ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    38ae:	85 c0                	test   %eax,%eax
+    38b0:	7e 13                	jle    38c5 <memmove+0x25>
+    38b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+    38b4:	89 d7                	mov    %edx,%edi
+    38b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    38bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+    38c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+    38c1:	39 f8                	cmp    %edi,%eax
+    38c3:	75 fb                	jne    38c0 <memmove+0x20>
+  return vdst;
+}
+    38c5:	5e                   	pop    %esi
+    38c6:	89 d0                	mov    %edx,%eax
+    38c8:	5f                   	pop    %edi
+    38c9:	5d                   	pop    %ebp
+    38ca:	c3                   	ret    
+
+000038cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    38cb:	b8 01 00 00 00       	mov    $0x1,%eax
+    38d0:	cd 40                	int    $0x40
+    38d2:	c3                   	ret    
+
+000038d3 <exit>:
+SYSCALL(exit)
+    38d3:	b8 02 00 00 00       	mov    $0x2,%eax
+    38d8:	cd 40                	int    $0x40
+    38da:	c3                   	ret    
+
+000038db <wait>:
+SYSCALL(wait)
+    38db:	b8 03 00 00 00       	mov    $0x3,%eax
+    38e0:	cd 40                	int    $0x40
+    38e2:	c3                   	ret    
+
+000038e3 <pipe>:
+SYSCALL(pipe)
+    38e3:	b8 04 00 00 00       	mov    $0x4,%eax
+    38e8:	cd 40                	int    $0x40
+    38ea:	c3                   	ret    
+
+000038eb <read>:
+SYSCALL(read)
+    38eb:	b8 05 00 00 00       	mov    $0x5,%eax
+    38f0:	cd 40                	int    $0x40
+    38f2:	c3                   	ret    
+
+000038f3 <write>:
+SYSCALL(write)
+    38f3:	b8 10 00 00 00       	mov    $0x10,%eax
+    38f8:	cd 40                	int    $0x40
+    38fa:	c3                   	ret    
+
+000038fb <close>:
+SYSCALL(close)
+    38fb:	b8 15 00 00 00       	mov    $0x15,%eax
+    3900:	cd 40                	int    $0x40
+    3902:	c3                   	ret    
+
+00003903 <kill>:
+SYSCALL(kill)
+    3903:	b8 06 00 00 00       	mov    $0x6,%eax
+    3908:	cd 40                	int    $0x40
+    390a:	c3                   	ret    
+
+0000390b <exec>:
+SYSCALL(exec)
+    390b:	b8 07 00 00 00       	mov    $0x7,%eax
+    3910:	cd 40                	int    $0x40
+    3912:	c3                   	ret    
+
+00003913 <open>:
+SYSCALL(open)
+    3913:	b8 0f 00 00 00       	mov    $0xf,%eax
+    3918:	cd 40                	int    $0x40
+    391a:	c3                   	ret    
+
+0000391b <mknod>:
+SYSCALL(mknod)
+    391b:	b8 11 00 00 00       	mov    $0x11,%eax
+    3920:	cd 40                	int    $0x40
+    3922:	c3                   	ret    
+
+00003923 <unlink>:
+SYSCALL(unlink)
+    3923:	b8 12 00 00 00       	mov    $0x12,%eax
+    3928:	cd 40                	int    $0x40
+    392a:	c3                   	ret    
+
+0000392b <fstat>:
+SYSCALL(fstat)
+    392b:	b8 08 00 00 00       	mov    $0x8,%eax
+    3930:	cd 40                	int    $0x40
+    3932:	c3                   	ret    
+
+00003933 <link>:
+SYSCALL(link)
+    3933:	b8 13 00 00 00       	mov    $0x13,%eax
+    3938:	cd 40                	int    $0x40
+    393a:	c3                   	ret    
+
+0000393b <mkdir>:
+SYSCALL(mkdir)
+    393b:	b8 14 00 00 00       	mov    $0x14,%eax
+    3940:	cd 40                	int    $0x40
+    3942:	c3                   	ret    
+
+00003943 <chdir>:
+SYSCALL(chdir)
+    3943:	b8 09 00 00 00       	mov    $0x9,%eax
+    3948:	cd 40                	int    $0x40
+    394a:	c3                   	ret    
+
+0000394b <dup>:
+SYSCALL(dup)
+    394b:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3950:	cd 40                	int    $0x40
+    3952:	c3                   	ret    
+
+00003953 <getpid>:
+SYSCALL(getpid)
+    3953:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3958:	cd 40                	int    $0x40
+    395a:	c3                   	ret    
+
+0000395b <sbrk>:
+SYSCALL(sbrk)
+    395b:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3960:	cd 40                	int    $0x40
+    3962:	c3                   	ret    
+
+00003963 <sleep>:
+SYSCALL(sleep)
+    3963:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3968:	cd 40                	int    $0x40
+    396a:	c3                   	ret    
+
+0000396b <uptime>:
+SYSCALL(uptime)
+    396b:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3970:	cd 40                	int    $0x40
+    3972:	c3                   	ret    
+    3973:	66 90                	xchg   %ax,%ax
+    3975:	66 90                	xchg   %ax,%ax
+    3977:	66 90                	xchg   %ax,%ax
+    3979:	66 90                	xchg   %ax,%ax
+    397b:	66 90                	xchg   %ax,%ax
+    397d:	66 90                	xchg   %ax,%ax
+    397f:	90                   	nop
+
+00003980 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3980:	55                   	push   %ebp
+    3981:	89 e5                	mov    %esp,%ebp
+    3983:	57                   	push   %edi
+    3984:	56                   	push   %esi
+    3985:	53                   	push   %ebx
+    3986:	83 ec 3c             	sub    $0x3c,%esp
+    3989:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+    398c:	89 d1                	mov    %edx,%ecx
+{
+    398e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+    3991:	85 d2                	test   %edx,%edx
+    3993:	0f 89 7f 00 00 00    	jns    3a18 <printint+0x98>
+    3999:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    399d:	74 79                	je     3a18 <printint+0x98>
+    neg = 1;
+    399f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+    39a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    39a8:	31 db                	xor    %ebx,%ebx
+    39aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    39ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    39b0:	89 c8                	mov    %ecx,%eax
+    39b2:	31 d2                	xor    %edx,%edx
+    39b4:	89 cf                	mov    %ecx,%edi
+    39b6:	f7 75 c4             	divl   -0x3c(%ebp)
+    39b9:	0f b6 92 50 55 00 00 	movzbl 0x5550(%edx),%edx
+    39c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    39c3:	89 d8                	mov    %ebx,%eax
+    39c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+    39c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+    39cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+    39ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    39d1:	76 dd                	jbe    39b0 <printint+0x30>
+  if(neg)
+    39d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    39d6:	85 c9                	test   %ecx,%ecx
+    39d8:	74 0c                	je     39e6 <printint+0x66>
+    buf[i++] = '-';
+    39da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+    39df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+    39e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+    39e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    39e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    39ed:	eb 07                	jmp    39f6 <printint+0x76>
+    39ef:	90                   	nop
+    putc(fd, buf[i]);
+    39f0:	0f b6 13             	movzbl (%ebx),%edx
+    39f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+    39f6:	83 ec 04             	sub    $0x4,%esp
+    39f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    39fc:	6a 01                	push   $0x1
+    39fe:	56                   	push   %esi
+    39ff:	57                   	push   %edi
+    3a00:	e8 ee fe ff ff       	call   38f3 <write>
+  while(--i >= 0)
+    3a05:	83 c4 10             	add    $0x10,%esp
+    3a08:	39 de                	cmp    %ebx,%esi
+    3a0a:	75 e4                	jne    39f0 <printint+0x70>
+}
+    3a0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3a0f:	5b                   	pop    %ebx
+    3a10:	5e                   	pop    %esi
+    3a11:	5f                   	pop    %edi
+    3a12:	5d                   	pop    %ebp
+    3a13:	c3                   	ret    
+    3a14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3a18:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3a1f:	eb 87                	jmp    39a8 <printint+0x28>
+    3a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a2f:	90                   	nop
+
+00003a30 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a30:	55                   	push   %ebp
+    3a31:	89 e5                	mov    %esp,%ebp
+    3a33:	57                   	push   %edi
+    3a34:	56                   	push   %esi
+    3a35:	53                   	push   %ebx
+    3a36:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+    3a3c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+    3a3f:	0f b6 13             	movzbl (%ebx),%edx
+    3a42:	84 d2                	test   %dl,%dl
+    3a44:	74 6a                	je     3ab0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+    3a46:	8d 45 10             	lea    0x10(%ebp),%eax
+    3a49:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+    3a4c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    3a4f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+    3a51:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3a54:	eb 36                	jmp    3a8c <printf+0x5c>
+    3a56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a5d:	8d 76 00             	lea    0x0(%esi),%esi
+    3a60:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    3a63:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+    3a68:	83 f8 25             	cmp    $0x25,%eax
+    3a6b:	74 15                	je     3a82 <printf+0x52>
+  write(fd, &c, 1);
+    3a6d:	83 ec 04             	sub    $0x4,%esp
+    3a70:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    3a73:	6a 01                	push   $0x1
+    3a75:	57                   	push   %edi
+    3a76:	56                   	push   %esi
+    3a77:	e8 77 fe ff ff       	call   38f3 <write>
+    3a7c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+    3a7f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3a82:	0f b6 13             	movzbl (%ebx),%edx
+    3a85:	83 c3 01             	add    $0x1,%ebx
+    3a88:	84 d2                	test   %dl,%dl
+    3a8a:	74 24                	je     3ab0 <printf+0x80>
+    c = fmt[i] & 0xff;
+    3a8c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+    3a8f:	85 c9                	test   %ecx,%ecx
+    3a91:	74 cd                	je     3a60 <printf+0x30>
+      }
+    } else if(state == '%'){
+    3a93:	83 f9 25             	cmp    $0x25,%ecx
+    3a96:	75 ea                	jne    3a82 <printf+0x52>
+      if(c == 'd'){
+    3a98:	83 f8 25             	cmp    $0x25,%eax
+    3a9b:	0f 84 07 01 00 00    	je     3ba8 <printf+0x178>
+    3aa1:	83 e8 63             	sub    $0x63,%eax
+    3aa4:	83 f8 15             	cmp    $0x15,%eax
+    3aa7:	77 17                	ja     3ac0 <printf+0x90>
+    3aa9:	ff 24 85 f8 54 00 00 	jmp    *0x54f8(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+    3ab0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3ab3:	5b                   	pop    %ebx
+    3ab4:	5e                   	pop    %esi
+    3ab5:	5f                   	pop    %edi
+    3ab6:	5d                   	pop    %ebp
+    3ab7:	c3                   	ret    
+    3ab8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3abf:	90                   	nop
+  write(fd, &c, 1);
+    3ac0:	83 ec 04             	sub    $0x4,%esp
+    3ac3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+    3ac6:	6a 01                	push   $0x1
+    3ac8:	57                   	push   %edi
+    3ac9:	56                   	push   %esi
+    3aca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3ace:	e8 20 fe ff ff       	call   38f3 <write>
+        putc(fd, c);
+    3ad3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+    3ad7:	83 c4 0c             	add    $0xc,%esp
+    3ada:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    3add:	6a 01                	push   $0x1
+    3adf:	57                   	push   %edi
+    3ae0:	56                   	push   %esi
+    3ae1:	e8 0d fe ff ff       	call   38f3 <write>
+        putc(fd, c);
+    3ae6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3ae9:	31 c9                	xor    %ecx,%ecx
+    3aeb:	eb 95                	jmp    3a82 <printf+0x52>
+    3aed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+    3af0:	83 ec 0c             	sub    $0xc,%esp
+    3af3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3af8:	6a 00                	push   $0x0
+    3afa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3afd:	8b 10                	mov    (%eax),%edx
+    3aff:	89 f0                	mov    %esi,%eax
+    3b01:	e8 7a fe ff ff       	call   3980 <printint>
+        ap++;
+    3b06:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    3b0a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b0d:	31 c9                	xor    %ecx,%ecx
+    3b0f:	e9 6e ff ff ff       	jmp    3a82 <printf+0x52>
+    3b14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+    3b18:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3b1b:	8b 10                	mov    (%eax),%edx
+        ap++;
+    3b1d:	83 c0 04             	add    $0x4,%eax
+    3b20:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    3b23:	85 d2                	test   %edx,%edx
+    3b25:	0f 84 8d 00 00 00    	je     3bb8 <printf+0x188>
+        while(*s != 0){
+    3b2b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+    3b2e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+    3b30:	84 c0                	test   %al,%al
+    3b32:	0f 84 4a ff ff ff    	je     3a82 <printf+0x52>
+    3b38:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    3b3b:	89 d3                	mov    %edx,%ebx
+    3b3d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+    3b40:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3b43:	83 c3 01             	add    $0x1,%ebx
+    3b46:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3b49:	6a 01                	push   $0x1
+    3b4b:	57                   	push   %edi
+    3b4c:	56                   	push   %esi
+    3b4d:	e8 a1 fd ff ff       	call   38f3 <write>
+        while(*s != 0){
+    3b52:	0f b6 03             	movzbl (%ebx),%eax
+    3b55:	83 c4 10             	add    $0x10,%esp
+    3b58:	84 c0                	test   %al,%al
+    3b5a:	75 e4                	jne    3b40 <printf+0x110>
+      state = 0;
+    3b5c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+    3b5f:	31 c9                	xor    %ecx,%ecx
+    3b61:	e9 1c ff ff ff       	jmp    3a82 <printf+0x52>
+    3b66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b6d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+    3b70:	83 ec 0c             	sub    $0xc,%esp
+    3b73:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3b78:	6a 01                	push   $0x1
+    3b7a:	e9 7b ff ff ff       	jmp    3afa <printf+0xca>
+    3b7f:	90                   	nop
+        putc(fd, *ap);
+    3b80:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+    3b83:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3b86:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+    3b88:	6a 01                	push   $0x1
+    3b8a:	57                   	push   %edi
+    3b8b:	56                   	push   %esi
+        putc(fd, *ap);
+    3b8c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3b8f:	e8 5f fd ff ff       	call   38f3 <write>
+        ap++;
+    3b94:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    3b98:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b9b:	31 c9                	xor    %ecx,%ecx
+    3b9d:	e9 e0 fe ff ff       	jmp    3a82 <printf+0x52>
+    3ba2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+    3ba8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3bab:	83 ec 04             	sub    $0x4,%esp
+    3bae:	e9 2a ff ff ff       	jmp    3add <printf+0xad>
+    3bb3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3bb7:	90                   	nop
+          s = "(null)";
+    3bb8:	ba ee 54 00 00       	mov    $0x54ee,%edx
+        while(*s != 0){
+    3bbd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    3bc0:	b8 28 00 00 00       	mov    $0x28,%eax
+    3bc5:	89 d3                	mov    %edx,%ebx
+    3bc7:	e9 74 ff ff ff       	jmp    3b40 <printf+0x110>
+    3bcc:	66 90                	xchg   %ax,%ax
+    3bce:	66 90                	xchg   %ax,%ax
+
+00003bd0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3bd0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3bd1:	a1 00 a6 00 00       	mov    0xa600,%eax
+{
+    3bd6:	89 e5                	mov    %esp,%ebp
+    3bd8:	57                   	push   %edi
+    3bd9:	56                   	push   %esi
+    3bda:	53                   	push   %ebx
+    3bdb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    3bde:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3be1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3be8:	89 c2                	mov    %eax,%edx
+    3bea:	8b 00                	mov    (%eax),%eax
+    3bec:	39 ca                	cmp    %ecx,%edx
+    3bee:	73 30                	jae    3c20 <free+0x50>
+    3bf0:	39 c1                	cmp    %eax,%ecx
+    3bf2:	72 04                	jb     3bf8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3bf4:	39 c2                	cmp    %eax,%edx
+    3bf6:	72 f0                	jb     3be8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3bf8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3bfb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3bfe:	39 f8                	cmp    %edi,%eax
+    3c00:	74 30                	je     3c32 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c02:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    3c05:	8b 42 04             	mov    0x4(%edx),%eax
+    3c08:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    3c0b:	39 f1                	cmp    %esi,%ecx
+    3c0d:	74 3a                	je     3c49 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+    3c0f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+    3c11:	5b                   	pop    %ebx
+  freep = p;
+    3c12:	89 15 00 a6 00 00    	mov    %edx,0xa600
+}
+    3c18:	5e                   	pop    %esi
+    3c19:	5f                   	pop    %edi
+    3c1a:	5d                   	pop    %ebp
+    3c1b:	c3                   	ret    
+    3c1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c20:	39 c2                	cmp    %eax,%edx
+    3c22:	72 c4                	jb     3be8 <free+0x18>
+    3c24:	39 c1                	cmp    %eax,%ecx
+    3c26:	73 c0                	jae    3be8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+    3c28:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3c2b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3c2e:	39 f8                	cmp    %edi,%eax
+    3c30:	75 d0                	jne    3c02 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+    3c32:	03 70 04             	add    0x4(%eax),%esi
+    3c35:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c38:	8b 02                	mov    (%edx),%eax
+    3c3a:	8b 00                	mov    (%eax),%eax
+    3c3c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c3f:	8b 42 04             	mov    0x4(%edx),%eax
+    3c42:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    3c45:	39 f1                	cmp    %esi,%ecx
+    3c47:	75 c6                	jne    3c0f <free+0x3f>
+    p->s.size += bp->s.size;
+    3c49:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+    3c4c:	89 15 00 a6 00 00    	mov    %edx,0xa600
+    p->s.size += bp->s.size;
+    3c52:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+    3c55:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+    3c58:	89 0a                	mov    %ecx,(%edx)
+}
+    3c5a:	5b                   	pop    %ebx
+    3c5b:	5e                   	pop    %esi
+    3c5c:	5f                   	pop    %edi
+    3c5d:	5d                   	pop    %ebp
+    3c5e:	c3                   	ret    
+    3c5f:	90                   	nop
+
+00003c60 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3c60:	55                   	push   %ebp
+    3c61:	89 e5                	mov    %esp,%ebp
+    3c63:	57                   	push   %edi
+    3c64:	56                   	push   %esi
+    3c65:	53                   	push   %ebx
+    3c66:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c69:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3c6c:	8b 3d 00 a6 00 00    	mov    0xa600,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c72:	8d 70 07             	lea    0x7(%eax),%esi
+    3c75:	c1 ee 03             	shr    $0x3,%esi
+    3c78:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    3c7b:	85 ff                	test   %edi,%edi
+    3c7d:	0f 84 9d 00 00 00    	je     3d20 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3c83:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+    3c85:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3c88:	39 f1                	cmp    %esi,%ecx
+    3c8a:	73 6a                	jae    3cf6 <malloc+0x96>
+    3c8c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3c91:	39 de                	cmp    %ebx,%esi
+    3c93:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3c96:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    3c9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    3ca0:	eb 17                	jmp    3cb9 <malloc+0x59>
+    3ca2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3ca8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    3caa:	8b 48 04             	mov    0x4(%eax),%ecx
+    3cad:	39 f1                	cmp    %esi,%ecx
+    3caf:	73 4f                	jae    3d00 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3cb1:	8b 3d 00 a6 00 00    	mov    0xa600,%edi
+    3cb7:	89 c2                	mov    %eax,%edx
+    3cb9:	39 d7                	cmp    %edx,%edi
+    3cbb:	75 eb                	jne    3ca8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    3cbd:	83 ec 0c             	sub    $0xc,%esp
+    3cc0:	ff 75 e4             	push   -0x1c(%ebp)
+    3cc3:	e8 93 fc ff ff       	call   395b <sbrk>
+  if(p == (char*)-1)
+    3cc8:	83 c4 10             	add    $0x10,%esp
+    3ccb:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3cce:	74 1c                	je     3cec <malloc+0x8c>
+  hp->s.size = nu;
+    3cd0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3cd3:	83 ec 0c             	sub    $0xc,%esp
+    3cd6:	83 c0 08             	add    $0x8,%eax
+    3cd9:	50                   	push   %eax
+    3cda:	e8 f1 fe ff ff       	call   3bd0 <free>
+  return freep;
+    3cdf:	8b 15 00 a6 00 00    	mov    0xa600,%edx
+      if((p = morecore(nunits)) == 0)
+    3ce5:	83 c4 10             	add    $0x10,%esp
+    3ce8:	85 d2                	test   %edx,%edx
+    3cea:	75 bc                	jne    3ca8 <malloc+0x48>
+        return 0;
+  }
+}
+    3cec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3cef:	31 c0                	xor    %eax,%eax
+}
+    3cf1:	5b                   	pop    %ebx
+    3cf2:	5e                   	pop    %esi
+    3cf3:	5f                   	pop    %edi
+    3cf4:	5d                   	pop    %ebp
+    3cf5:	c3                   	ret    
+    if(p->s.size >= nunits){
+    3cf6:	89 d0                	mov    %edx,%eax
+    3cf8:	89 fa                	mov    %edi,%edx
+    3cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    3d00:	39 ce                	cmp    %ecx,%esi
+    3d02:	74 4c                	je     3d50 <malloc+0xf0>
+        p->s.size -= nunits;
+    3d04:	29 f1                	sub    %esi,%ecx
+    3d06:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    3d09:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    3d0c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+    3d0f:	89 15 00 a6 00 00    	mov    %edx,0xa600
+}
+    3d15:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3d18:	83 c0 08             	add    $0x8,%eax
+}
+    3d1b:	5b                   	pop    %ebx
+    3d1c:	5e                   	pop    %esi
+    3d1d:	5f                   	pop    %edi
+    3d1e:	5d                   	pop    %ebp
+    3d1f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+    3d20:	c7 05 00 a6 00 00 04 	movl   $0xa604,0xa600
+    3d27:	a6 00 00 
+    base.s.size = 0;
+    3d2a:	bf 04 a6 00 00       	mov    $0xa604,%edi
+    base.s.ptr = freep = prevp = &base;
+    3d2f:	c7 05 04 a6 00 00 04 	movl   $0xa604,0xa604
+    3d36:	a6 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3d39:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+    3d3b:	c7 05 08 a6 00 00 00 	movl   $0x0,0xa608
+    3d42:	00 00 00 
+    if(p->s.size >= nunits){
+    3d45:	e9 42 ff ff ff       	jmp    3c8c <malloc+0x2c>
+    3d4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    3d50:	8b 08                	mov    (%eax),%ecx
+    3d52:	89 0a                	mov    %ecx,(%edx)
+    3d54:	eb b9                	jmp    3d0f <malloc+0xaf>
diff -ruN xv6-public/usertests.d xv6-publica/usertests.d
--- xv6-public/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/usertests.d	2024-10-15 10:58:38.587888491 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and xv6-publica/usertests.o differ
diff -ruN xv6-public/usertests.sym xv6-publica/usertests.sym
--- xv6-public/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/usertests.sym	2024-10-15 10:58:38.647888492 +0530
@@ -0,0 +1,90 @@
+00000000 usertests.c
+0000a580 args.0
+00000000 ulib.c
+00000000 printf.c
+00003980 printint
+00005550 digits.0
+00000000 umalloc.c
+0000a600 freep
+0000a604 base
+00003680 strcpy
+00000d10 exitwait
+00003a30 printf
+00005e48 stdout
+000032b0 bigargtest
+000038a0 memmove
+00000300 openiputtest
+0000391b mknod
+000037a0 gets
+00003953 getpid
+00000a20 pipe1
+00002b70 iref
+00003c60 malloc
+00003963 sleep
+00000200 exitiputtest
+000033b0 fsfull
+00001bf0 bigdir
+00002c90 forktest
+00000670 writetest1
+00002400 bigwrite
+00000e60 sharedfd
+00005e44 randstate
+000038e3 pipe
+00005e60 uninit
+00002970 dirfile
+000038f3 write
+00003240 bsstest
+00005e4c echoargv
+0000392b fstat
+00003903 kill
+00003190 validatetest
+000027f0 rmdot
+00003943 chdir
+000009d0 exectest
+0000390b exec
+000038db wait
+00003660 rand
+000038eb read
+00000bb0 preempt
+00003923 unlink
+000035f0 argptest
+00000d90 mem
+000038cb fork
+0000395b sbrk
+0000396b uptime
+00005e60 __bss_start
+00003740 memset
+00000840 createtest
+00000000 main
+00001220 createdelete
+000036b0 strcmp
+00000490 writetest
+0000394b dup
+00002d40 sbrktest
+00000400 opentest
+00001d20 subdir
+00003580 uio
+000015d0 linktest
+00008580 buf
+000008f0 dirtest
+00000120 iputtest
+00003810 stat
+000024e0 bigfile
+00005e60 _edata
+0000a60c _end
+00001440 unlinkread
+00003933 link
+000038d3 exit
+00003860 atoi
+00001ae0 linkunlink
+00008570 name
+00003710 strlen
+00003913 open
+00003760 strchr
+000017e0 concreate
+000026b0 fourteen
+00003180 validateint
+00001020 fourfiles
+0000393b mkdir
+000038fb close
+00003bd0 free
Binary files xv6-public/usys.o and xv6-publica/usys.o differ
diff -ruN xv6-public/vectors.S xv6-publica/vectors.S
--- xv6-public/vectors.S	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/vectors.S	2024-10-15 10:58:40.767888554 +0530
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
Binary files xv6-public/vectors.o and xv6-publica/vectors.o differ
diff -ruN xv6-public/vm.c xv6-publica/vm.c
--- xv6-public/vm.c	2024-10-15 22:20:29.432270318 +0530
+++ xv6-publica/vm.c	2024-10-15 10:55:30.657890527 +0530
@@ -57,7 +57,7 @@
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -390,5 +390,4 @@
 //PAGEBREAK!
 // Blank page.
 //PAGEBREAK!
-// Blank page.
-
+// Blank page.
\ No newline at end of file
diff -ruN xv6-public/vm.d xv6-publica/vm.d
--- xv6-public/vm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/vm.d	2024-10-15 10:58:40.927888559 +0530
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files xv6-public/vm.o and xv6-publica/vm.o differ
diff -ruN xv6-public/wc.asm xv6-publica/wc.asm
--- xv6-public/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/wc.asm	2024-10-15 10:58:38.717888494 +0530
@@ -0,0 +1,1287 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	be 01 00 00 00       	mov    $0x1,%esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  21:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  24:	83 f8 01             	cmp    $0x1,%eax
+  27:	7e 56                	jle    7f <main+0x7f>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	push   (%ebx)
+  37:	e8 d7 03 00 00       	call   413 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	push   (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+  4d:	83 c3 04             	add    $0x4,%ebx
+    wc(fd, argv[i]);
+  50:	50                   	push   %eax
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 9d 03 00 00       	call   3fb <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 68 03 00 00       	call   3d3 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	push   (%ebx)
+  6e:	68 7b 08 00 00       	push   $0x87b
+  73:	6a 01                	push   $0x1
+  75:	e8 b6 04 00 00       	call   530 <printf>
+      exit();
+  7a:	e8 54 03 00 00       	call   3d3 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 6d 08 00 00       	push   $0x86d
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 41 03 00 00       	call   3d3 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	57                   	push   %edi
+  a4:	56                   	push   %esi
+  a5:	53                   	push   %ebx
+  l = w = c = 0;
+  a6:	31 db                	xor    %ebx,%ebx
+{
+  a8:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c0:	83 ec 04             	sub    $0x4,%esp
+  c3:	68 00 02 00 00       	push   $0x200
+  c8:	68 e0 0b 00 00       	push   $0xbe0
+  cd:	ff 75 08             	push   0x8(%ebp)
+  d0:	e8 16 03 00 00       	call   3eb <read>
+  d5:	83 c4 10             	add    $0x10,%esp
+  d8:	89 c6                	mov    %eax,%esi
+  da:	85 c0                	test   %eax,%eax
+  dc:	7e 62                	jle    140 <wc+0xa0>
+    for(i=0; i<n; i++){
+  de:	31 ff                	xor    %edi,%edi
+  e0:	eb 14                	jmp    f6 <wc+0x56>
+  e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        inword = 0;
+  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  ef:	83 c7 01             	add    $0x1,%edi
+  f2:	39 fe                	cmp    %edi,%esi
+  f4:	74 42                	je     138 <wc+0x98>
+      if(buf[i] == '\n')
+  f6:	0f be 87 e0 0b 00 00 	movsbl 0xbe0(%edi),%eax
+        l++;
+  fd:	31 c9                	xor    %ecx,%ecx
+  ff:	3c 0a                	cmp    $0xa,%al
+ 101:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 104:	83 ec 08             	sub    $0x8,%esp
+ 107:	50                   	push   %eax
+        l++;
+ 108:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10a:	68 58 08 00 00       	push   $0x858
+ 10f:	e8 4c 01 00 00       	call   260 <strchr>
+ 114:	83 c4 10             	add    $0x10,%esp
+ 117:	85 c0                	test   %eax,%eax
+ 119:	75 cd                	jne    e8 <wc+0x48>
+      else if(!inword){
+ 11b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 11e:	85 d2                	test   %edx,%edx
+ 120:	75 cd                	jne    ef <wc+0x4f>
+    for(i=0; i<n; i++){
+ 122:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 125:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+        inword = 1;
+ 129:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 130:	39 fe                	cmp    %edi,%esi
+ 132:	75 c2                	jne    f6 <wc+0x56>
+ 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      c++;
+ 138:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 13b:	eb 83                	jmp    c0 <wc+0x20>
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 140:	75 24                	jne    166 <wc+0xc6>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 142:	83 ec 08             	sub    $0x8,%esp
+ 145:	ff 75 0c             	push   0xc(%ebp)
+ 148:	ff 75 dc             	push   -0x24(%ebp)
+ 14b:	ff 75 e0             	push   -0x20(%ebp)
+ 14e:	53                   	push   %ebx
+ 14f:	68 6e 08 00 00       	push   $0x86e
+ 154:	6a 01                	push   $0x1
+ 156:	e8 d5 03 00 00       	call   530 <printf>
+}
+ 15b:	83 c4 20             	add    $0x20,%esp
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 166:	50                   	push   %eax
+ 167:	50                   	push   %eax
+ 168:	68 5e 08 00 00       	push   $0x85e
+ 16d:	6a 01                	push   $0x1
+ 16f:	e8 bc 03 00 00       	call   530 <printf>
+    exit();
+ 174:	e8 5a 02 00 00       	call   3d3 <exit>
+ 179:	66 90                	xchg   %ax,%ax
+ 17b:	66 90                	xchg   %ax,%ax
+ 17d:	66 90                	xchg   %ax,%ax
+ 17f:	90                   	nop
+
+00000180 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 180:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 181:	31 c0                	xor    %eax,%eax
+{
+ 183:	89 e5                	mov    %esp,%ebp
+ 185:	53                   	push   %ebx
+ 186:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 189:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 190:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 194:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 197:	83 c0 01             	add    $0x1,%eax
+ 19a:	84 d2                	test   %dl,%dl
+ 19c:	75 f2                	jne    190 <strcpy+0x10>
+    ;
+  return os;
+}
+ 19e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1a1:	89 c8                	mov    %ecx,%eax
+ 1a3:	c9                   	leave  
+ 1a4:	c3                   	ret    
+ 1a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	53                   	push   %ebx
+ 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1ba:	0f b6 02             	movzbl (%edx),%eax
+ 1bd:	84 c0                	test   %al,%al
+ 1bf:	75 17                	jne    1d8 <strcmp+0x28>
+ 1c1:	eb 3a                	jmp    1fd <strcmp+0x4d>
+ 1c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1c7:	90                   	nop
+ 1c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 1cc:	83 c2 01             	add    $0x1,%edx
+ 1cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 1d2:	84 c0                	test   %al,%al
+ 1d4:	74 1a                	je     1f0 <strcmp+0x40>
+    p++, q++;
+ 1d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 1d8:	0f b6 19             	movzbl (%ecx),%ebx
+ 1db:	38 c3                	cmp    %al,%bl
+ 1dd:	74 e9                	je     1c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 1df:	29 d8                	sub    %ebx,%eax
+}
+ 1e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1e4:	c9                   	leave  
+ 1e5:	c3                   	ret    
+ 1e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 1f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1f4:	31 c0                	xor    %eax,%eax
+ 1f6:	29 d8                	sub    %ebx,%eax
+}
+ 1f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1fb:	c9                   	leave  
+ 1fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 1fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 200:	31 c0                	xor    %eax,%eax
+ 202:	eb db                	jmp    1df <strcmp+0x2f>
+ 204:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 216:	80 3a 00             	cmpb   $0x0,(%edx)
+ 219:	74 15                	je     230 <strlen+0x20>
+ 21b:	31 c0                	xor    %eax,%eax
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+ 220:	83 c0 01             	add    $0x1,%eax
+ 223:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 227:	89 c1                	mov    %eax,%ecx
+ 229:	75 f5                	jne    220 <strlen+0x10>
+    ;
+  return n;
+}
+ 22b:	89 c8                	mov    %ecx,%eax
+ 22d:	5d                   	pop    %ebp
+ 22e:	c3                   	ret    
+ 22f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 230:	31 c9                	xor    %ecx,%ecx
+}
+ 232:	5d                   	pop    %ebp
+ 233:	89 c8                	mov    %ecx,%eax
+ 235:	c3                   	ret    
+ 236:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000240 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	57                   	push   %edi
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 247:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 24a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 24d:	89 d7                	mov    %edx,%edi
+ 24f:	fc                   	cld    
+ 250:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 252:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 255:	89 d0                	mov    %edx,%eax
+ 257:	c9                   	leave  
+ 258:	c3                   	ret    
+ 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000260 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	8b 45 08             	mov    0x8(%ebp),%eax
+ 266:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 26a:	0f b6 10             	movzbl (%eax),%edx
+ 26d:	84 d2                	test   %dl,%dl
+ 26f:	75 12                	jne    283 <strchr+0x23>
+ 271:	eb 1d                	jmp    290 <strchr+0x30>
+ 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 277:	90                   	nop
+ 278:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 27c:	83 c0 01             	add    $0x1,%eax
+ 27f:	84 d2                	test   %dl,%dl
+ 281:	74 0d                	je     290 <strchr+0x30>
+    if(*s == c)
+ 283:	38 d1                	cmp    %dl,%cl
+ 285:	75 f1                	jne    278 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 287:	5d                   	pop    %ebp
+ 288:	c3                   	ret    
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 290:	31 c0                	xor    %eax,%eax
+}
+ 292:	5d                   	pop    %ebp
+ 293:	c3                   	ret    
+ 294:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+
+000002a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 2a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 2a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 2a9:	31 db                	xor    %ebx,%ebx
+{
+ 2ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 2ae:	eb 27                	jmp    2d7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 2b0:	83 ec 04             	sub    $0x4,%esp
+ 2b3:	6a 01                	push   $0x1
+ 2b5:	57                   	push   %edi
+ 2b6:	6a 00                	push   $0x0
+ 2b8:	e8 2e 01 00 00       	call   3eb <read>
+    if(cc < 1)
+ 2bd:	83 c4 10             	add    $0x10,%esp
+ 2c0:	85 c0                	test   %eax,%eax
+ 2c2:	7e 1d                	jle    2e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 2c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2c8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 2cf:	3c 0a                	cmp    $0xa,%al
+ 2d1:	74 1d                	je     2f0 <gets+0x50>
+ 2d3:	3c 0d                	cmp    $0xd,%al
+ 2d5:	74 19                	je     2f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 2d7:	89 de                	mov    %ebx,%esi
+ 2d9:	83 c3 01             	add    $0x1,%ebx
+ 2dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2df:	7c cf                	jl     2b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 2e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2eb:	5b                   	pop    %ebx
+ 2ec:	5e                   	pop    %esi
+ 2ed:	5f                   	pop    %edi
+ 2ee:	5d                   	pop    %ebp
+ 2ef:	c3                   	ret    
+  buf[i] = '\0';
+ 2f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2f3:	89 de                	mov    %ebx,%esi
+ 2f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 2f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2fc:	5b                   	pop    %ebx
+ 2fd:	5e                   	pop    %esi
+ 2fe:	5f                   	pop    %edi
+ 2ff:	5d                   	pop    %ebp
+ 300:	c3                   	ret    
+ 301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30f:	90                   	nop
+
+00000310 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 315:	83 ec 08             	sub    $0x8,%esp
+ 318:	6a 00                	push   $0x0
+ 31a:	ff 75 08             	push   0x8(%ebp)
+ 31d:	e8 f1 00 00 00       	call   413 <open>
+  if(fd < 0)
+ 322:	83 c4 10             	add    $0x10,%esp
+ 325:	85 c0                	test   %eax,%eax
+ 327:	78 27                	js     350 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 329:	83 ec 08             	sub    $0x8,%esp
+ 32c:	ff 75 0c             	push   0xc(%ebp)
+ 32f:	89 c3                	mov    %eax,%ebx
+ 331:	50                   	push   %eax
+ 332:	e8 f4 00 00 00       	call   42b <fstat>
+  close(fd);
+ 337:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 33a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 33c:	e8 ba 00 00 00       	call   3fb <close>
+  return r;
+ 341:	83 c4 10             	add    $0x10,%esp
+}
+ 344:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 347:	89 f0                	mov    %esi,%eax
+ 349:	5b                   	pop    %ebx
+ 34a:	5e                   	pop    %esi
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 350:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 355:	eb ed                	jmp    344 <stat+0x34>
+ 357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 367:	0f be 02             	movsbl (%edx),%eax
+ 36a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 36d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 370:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 375:	77 1e                	ja     395 <atoi+0x35>
+ 377:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 380:	83 c2 01             	add    $0x1,%edx
+ 383:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 386:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 38a:	0f be 02             	movsbl (%edx),%eax
+ 38d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 390:	80 fb 09             	cmp    $0x9,%bl
+ 393:	76 eb                	jbe    380 <atoi+0x20>
+  return n;
+}
+ 395:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 398:	89 c8                	mov    %ecx,%eax
+ 39a:	c9                   	leave  
+ 39b:	c3                   	ret    
+ 39c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3a7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3aa:	56                   	push   %esi
+ 3ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3ae:	85 c0                	test   %eax,%eax
+ 3b0:	7e 13                	jle    3c5 <memmove+0x25>
+ 3b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3b4:	89 d7                	mov    %edx,%edi
+ 3b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3c1:	39 f8                	cmp    %edi,%eax
+ 3c3:	75 fb                	jne    3c0 <memmove+0x20>
+  return vdst;
+}
+ 3c5:	5e                   	pop    %esi
+ 3c6:	89 d0                	mov    %edx,%eax
+ 3c8:	5f                   	pop    %edi
+ 3c9:	5d                   	pop    %ebp
+ 3ca:	c3                   	ret    
+
+000003cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <exit>:
+SYSCALL(exit)
+ 3d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <wait>:
+SYSCALL(wait)
+ 3db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <pipe>:
+SYSCALL(pipe)
+ 3e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <read>:
+SYSCALL(read)
+ 3eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <write>:
+SYSCALL(write)
+ 3f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <close>:
+SYSCALL(close)
+ 3fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <kill>:
+SYSCALL(kill)
+ 403:	b8 06 00 00 00       	mov    $0x6,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <exec>:
+SYSCALL(exec)
+ 40b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <open>:
+SYSCALL(open)
+ 413:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <mknod>:
+SYSCALL(mknod)
+ 41b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <unlink>:
+SYSCALL(unlink)
+ 423:	b8 12 00 00 00       	mov    $0x12,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <fstat>:
+SYSCALL(fstat)
+ 42b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <link>:
+SYSCALL(link)
+ 433:	b8 13 00 00 00       	mov    $0x13,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <mkdir>:
+SYSCALL(mkdir)
+ 43b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <chdir>:
+SYSCALL(chdir)
+ 443:	b8 09 00 00 00       	mov    $0x9,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <dup>:
+SYSCALL(dup)
+ 44b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getpid>:
+SYSCALL(getpid)
+ 453:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <sbrk>:
+SYSCALL(sbrk)
+ 45b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <sleep>:
+SYSCALL(sleep)
+ 463:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <uptime>:
+SYSCALL(uptime)
+ 46b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+ 473:	66 90                	xchg   %ax,%ax
+ 475:	66 90                	xchg   %ax,%ax
+ 477:	66 90                	xchg   %ax,%ax
+ 479:	66 90                	xchg   %ax,%ax
+ 47b:	66 90                	xchg   %ax,%ax
+ 47d:	66 90                	xchg   %ax,%ax
+ 47f:	90                   	nop
+
+00000480 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 3c             	sub    $0x3c,%esp
+ 489:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 48c:	89 d1                	mov    %edx,%ecx
+{
+ 48e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 491:	85 d2                	test   %edx,%edx
+ 493:	0f 89 7f 00 00 00    	jns    518 <printint+0x98>
+ 499:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 49d:	74 79                	je     518 <printint+0x98>
+    neg = 1;
+ 49f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 4a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4a8:	31 db                	xor    %ebx,%ebx
+ 4aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4b0:	89 c8                	mov    %ecx,%eax
+ 4b2:	31 d2                	xor    %edx,%edx
+ 4b4:	89 cf                	mov    %ecx,%edi
+ 4b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4b9:	0f b6 92 f0 08 00 00 	movzbl 0x8f0(%edx),%edx
+ 4c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4c3:	89 d8                	mov    %ebx,%eax
+ 4c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4d1:	76 dd                	jbe    4b0 <printint+0x30>
+  if(neg)
+ 4d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4d6:	85 c9                	test   %ecx,%ecx
+ 4d8:	74 0c                	je     4e6 <printint+0x66>
+    buf[i++] = '-';
+ 4da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4ed:	eb 07                	jmp    4f6 <printint+0x76>
+ 4ef:	90                   	nop
+    putc(fd, buf[i]);
+ 4f0:	0f b6 13             	movzbl (%ebx),%edx
+ 4f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4f6:	83 ec 04             	sub    $0x4,%esp
+ 4f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4fc:	6a 01                	push   $0x1
+ 4fe:	56                   	push   %esi
+ 4ff:	57                   	push   %edi
+ 500:	e8 ee fe ff ff       	call   3f3 <write>
+  while(--i >= 0)
+ 505:	83 c4 10             	add    $0x10,%esp
+ 508:	39 de                	cmp    %ebx,%esi
+ 50a:	75 e4                	jne    4f0 <printint+0x70>
+}
+ 50c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50f:	5b                   	pop    %ebx
+ 510:	5e                   	pop    %esi
+ 511:	5f                   	pop    %edi
+ 512:	5d                   	pop    %ebp
+ 513:	c3                   	ret    
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 518:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 51f:	eb 87                	jmp    4a8 <printint+0x28>
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52f:	90                   	nop
+
+00000530 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 530:	55                   	push   %ebp
+ 531:	89 e5                	mov    %esp,%ebp
+ 533:	57                   	push   %edi
+ 534:	56                   	push   %esi
+ 535:	53                   	push   %ebx
+ 536:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 539:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 53c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 53f:	0f b6 13             	movzbl (%ebx),%edx
+ 542:	84 d2                	test   %dl,%dl
+ 544:	74 6a                	je     5b0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 546:	8d 45 10             	lea    0x10(%ebp),%eax
+ 549:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 54c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 54f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	eb 36                	jmp    58c <printf+0x5c>
+ 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+ 560:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 563:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 568:	83 f8 25             	cmp    $0x25,%eax
+ 56b:	74 15                	je     582 <printf+0x52>
+  write(fd, &c, 1);
+ 56d:	83 ec 04             	sub    $0x4,%esp
+ 570:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 573:	6a 01                	push   $0x1
+ 575:	57                   	push   %edi
+ 576:	56                   	push   %esi
+ 577:	e8 77 fe ff ff       	call   3f3 <write>
+ 57c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 57f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 582:	0f b6 13             	movzbl (%ebx),%edx
+ 585:	83 c3 01             	add    $0x1,%ebx
+ 588:	84 d2                	test   %dl,%dl
+ 58a:	74 24                	je     5b0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 58c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 58f:	85 c9                	test   %ecx,%ecx
+ 591:	74 cd                	je     560 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 593:	83 f9 25             	cmp    $0x25,%ecx
+ 596:	75 ea                	jne    582 <printf+0x52>
+      if(c == 'd'){
+ 598:	83 f8 25             	cmp    $0x25,%eax
+ 59b:	0f 84 07 01 00 00    	je     6a8 <printf+0x178>
+ 5a1:	83 e8 63             	sub    $0x63,%eax
+ 5a4:	83 f8 15             	cmp    $0x15,%eax
+ 5a7:	77 17                	ja     5c0 <printf+0x90>
+ 5a9:	ff 24 85 98 08 00 00 	jmp    *0x898(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5b3:	5b                   	pop    %ebx
+ 5b4:	5e                   	pop    %esi
+ 5b5:	5f                   	pop    %edi
+ 5b6:	5d                   	pop    %ebp
+ 5b7:	c3                   	ret    
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+ 5c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5c6:	6a 01                	push   $0x1
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ce:	e8 20 fe ff ff       	call   3f3 <write>
+        putc(fd, c);
+ 5d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 5d7:	83 c4 0c             	add    $0xc,%esp
+ 5da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5dd:	6a 01                	push   $0x1
+ 5df:	57                   	push   %edi
+ 5e0:	56                   	push   %esi
+ 5e1:	e8 0d fe ff ff       	call   3f3 <write>
+        putc(fd, c);
+ 5e6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5e9:	31 c9                	xor    %ecx,%ecx
+ 5eb:	eb 95                	jmp    582 <printf+0x52>
+ 5ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5f8:	6a 00                	push   $0x0
+ 5fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5fd:	8b 10                	mov    (%eax),%edx
+ 5ff:	89 f0                	mov    %esi,%eax
+ 601:	e8 7a fe ff ff       	call   480 <printint>
+        ap++;
+ 606:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 60a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60d:	31 c9                	xor    %ecx,%ecx
+ 60f:	e9 6e ff ff ff       	jmp    582 <printf+0x52>
+ 614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 618:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 61b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 61d:	83 c0 04             	add    $0x4,%eax
+ 620:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 623:	85 d2                	test   %edx,%edx
+ 625:	0f 84 8d 00 00 00    	je     6b8 <printf+0x188>
+        while(*s != 0){
+ 62b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 62e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 630:	84 c0                	test   %al,%al
+ 632:	0f 84 4a ff ff ff    	je     582 <printf+0x52>
+ 638:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 63b:	89 d3                	mov    %edx,%ebx
+ 63d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 640:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 643:	83 c3 01             	add    $0x1,%ebx
+ 646:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 649:	6a 01                	push   $0x1
+ 64b:	57                   	push   %edi
+ 64c:	56                   	push   %esi
+ 64d:	e8 a1 fd ff ff       	call   3f3 <write>
+        while(*s != 0){
+ 652:	0f b6 03             	movzbl (%ebx),%eax
+ 655:	83 c4 10             	add    $0x10,%esp
+ 658:	84 c0                	test   %al,%al
+ 65a:	75 e4                	jne    640 <printf+0x110>
+      state = 0;
+ 65c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 65f:	31 c9                	xor    %ecx,%ecx
+ 661:	e9 1c ff ff ff       	jmp    582 <printf+0x52>
+ 666:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 670:	83 ec 0c             	sub    $0xc,%esp
+ 673:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 678:	6a 01                	push   $0x1
+ 67a:	e9 7b ff ff ff       	jmp    5fa <printf+0xca>
+ 67f:	90                   	nop
+        putc(fd, *ap);
+ 680:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 683:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 686:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 688:	6a 01                	push   $0x1
+ 68a:	57                   	push   %edi
+ 68b:	56                   	push   %esi
+        putc(fd, *ap);
+ 68c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 68f:	e8 5f fd ff ff       	call   3f3 <write>
+        ap++;
+ 694:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 698:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 69b:	31 c9                	xor    %ecx,%ecx
+ 69d:	e9 e0 fe ff ff       	jmp    582 <printf+0x52>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 6a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6ab:	83 ec 04             	sub    $0x4,%esp
+ 6ae:	e9 2a ff ff ff       	jmp    5dd <printf+0xad>
+ 6b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6b7:	90                   	nop
+          s = "(null)";
+ 6b8:	ba 8f 08 00 00       	mov    $0x88f,%edx
+        while(*s != 0){
+ 6bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6c5:	89 d3                	mov    %edx,%ebx
+ 6c7:	e9 74 ff ff ff       	jmp    640 <printf+0x110>
+ 6cc:	66 90                	xchg   %ax,%ax
+ 6ce:	66 90                	xchg   %ax,%ax
+
+000006d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d1:	a1 e0 0d 00 00       	mov    0xde0,%eax
+{
+ 6d6:	89 e5                	mov    %esp,%ebp
+ 6d8:	57                   	push   %edi
+ 6d9:	56                   	push   %esi
+ 6da:	53                   	push   %ebx
+ 6db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6e8:	89 c2                	mov    %eax,%edx
+ 6ea:	8b 00                	mov    (%eax),%eax
+ 6ec:	39 ca                	cmp    %ecx,%edx
+ 6ee:	73 30                	jae    720 <free+0x50>
+ 6f0:	39 c1                	cmp    %eax,%ecx
+ 6f2:	72 04                	jb     6f8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f4:	39 c2                	cmp    %eax,%edx
+ 6f6:	72 f0                	jb     6e8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6fe:	39 f8                	cmp    %edi,%eax
+ 700:	74 30                	je     732 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 702:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 705:	8b 42 04             	mov    0x4(%edx),%eax
+ 708:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 70b:	39 f1                	cmp    %esi,%ecx
+ 70d:	74 3a                	je     749 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 70f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 711:	5b                   	pop    %ebx
+  freep = p;
+ 712:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+}
+ 718:	5e                   	pop    %esi
+ 719:	5f                   	pop    %edi
+ 71a:	5d                   	pop    %ebp
+ 71b:	c3                   	ret    
+ 71c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 720:	39 c2                	cmp    %eax,%edx
+ 722:	72 c4                	jb     6e8 <free+0x18>
+ 724:	39 c1                	cmp    %eax,%ecx
+ 726:	73 c0                	jae    6e8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 728:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 72b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 72e:	39 f8                	cmp    %edi,%eax
+ 730:	75 d0                	jne    702 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 732:	03 70 04             	add    0x4(%eax),%esi
+ 735:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 738:	8b 02                	mov    (%edx),%eax
+ 73a:	8b 00                	mov    (%eax),%eax
+ 73c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 73f:	8b 42 04             	mov    0x4(%edx),%eax
+ 742:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 745:	39 f1                	cmp    %esi,%ecx
+ 747:	75 c6                	jne    70f <free+0x3f>
+    p->s.size += bp->s.size;
+ 749:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 74c:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+    p->s.size += bp->s.size;
+ 752:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 755:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 758:	89 0a                	mov    %ecx,(%edx)
+}
+ 75a:	5b                   	pop    %ebx
+ 75b:	5e                   	pop    %esi
+ 75c:	5f                   	pop    %edi
+ 75d:	5d                   	pop    %ebp
+ 75e:	c3                   	ret    
+ 75f:	90                   	nop
+
+00000760 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 760:	55                   	push   %ebp
+ 761:	89 e5                	mov    %esp,%ebp
+ 763:	57                   	push   %edi
+ 764:	56                   	push   %esi
+ 765:	53                   	push   %ebx
+ 766:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 769:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 76c:	8b 3d e0 0d 00 00    	mov    0xde0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 772:	8d 70 07             	lea    0x7(%eax),%esi
+ 775:	c1 ee 03             	shr    $0x3,%esi
+ 778:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 77b:	85 ff                	test   %edi,%edi
+ 77d:	0f 84 9d 00 00 00    	je     820 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 783:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 785:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 788:	39 f1                	cmp    %esi,%ecx
+ 78a:	73 6a                	jae    7f6 <malloc+0x96>
+ 78c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 791:	39 de                	cmp    %ebx,%esi
+ 793:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 796:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 79d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7a0:	eb 17                	jmp    7b9 <malloc+0x59>
+ 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ad:	39 f1                	cmp    %esi,%ecx
+ 7af:	73 4f                	jae    800 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b1:	8b 3d e0 0d 00 00    	mov    0xde0,%edi
+ 7b7:	89 c2                	mov    %eax,%edx
+ 7b9:	39 d7                	cmp    %edx,%edi
+ 7bb:	75 eb                	jne    7a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7bd:	83 ec 0c             	sub    $0xc,%esp
+ 7c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7c3:	e8 93 fc ff ff       	call   45b <sbrk>
+  if(p == (char*)-1)
+ 7c8:	83 c4 10             	add    $0x10,%esp
+ 7cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ce:	74 1c                	je     7ec <malloc+0x8c>
+  hp->s.size = nu;
+ 7d0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7d3:	83 ec 0c             	sub    $0xc,%esp
+ 7d6:	83 c0 08             	add    $0x8,%eax
+ 7d9:	50                   	push   %eax
+ 7da:	e8 f1 fe ff ff       	call   6d0 <free>
+  return freep;
+ 7df:	8b 15 e0 0d 00 00    	mov    0xde0,%edx
+      if((p = morecore(nunits)) == 0)
+ 7e5:	83 c4 10             	add    $0x10,%esp
+ 7e8:	85 d2                	test   %edx,%edx
+ 7ea:	75 bc                	jne    7a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7ef:	31 c0                	xor    %eax,%eax
+}
+ 7f1:	5b                   	pop    %ebx
+ 7f2:	5e                   	pop    %esi
+ 7f3:	5f                   	pop    %edi
+ 7f4:	5d                   	pop    %ebp
+ 7f5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7f6:	89 d0                	mov    %edx,%eax
+ 7f8:	89 fa                	mov    %edi,%edx
+ 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 800:	39 ce                	cmp    %ecx,%esi
+ 802:	74 4c                	je     850 <malloc+0xf0>
+        p->s.size -= nunits;
+ 804:	29 f1                	sub    %esi,%ecx
+ 806:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 809:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 80c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 80f:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+}
+ 815:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 818:	83 c0 08             	add    $0x8,%eax
+}
+ 81b:	5b                   	pop    %ebx
+ 81c:	5e                   	pop    %esi
+ 81d:	5f                   	pop    %edi
+ 81e:	5d                   	pop    %ebp
+ 81f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 820:	c7 05 e0 0d 00 00 e4 	movl   $0xde4,0xde0
+ 827:	0d 00 00 
+    base.s.size = 0;
+ 82a:	bf e4 0d 00 00       	mov    $0xde4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 82f:	c7 05 e4 0d 00 00 e4 	movl   $0xde4,0xde4
+ 836:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 839:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 83b:	c7 05 e8 0d 00 00 00 	movl   $0x0,0xde8
+ 842:	00 00 00 
+    if(p->s.size >= nunits){
+ 845:	e9 42 ff ff ff       	jmp    78c <malloc+0x2c>
+ 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 850:	8b 08                	mov    (%eax),%ecx
+ 852:	89 0a                	mov    %ecx,(%edx)
+ 854:	eb b9                	jmp    80f <malloc+0xaf>
diff -ruN xv6-public/wc.d xv6-publica/wc.d
--- xv6-public/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/wc.d	2024-10-15 10:58:38.687888493 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/wc.o and xv6-publica/wc.o differ
diff -ruN xv6-public/wc.sym xv6-publica/wc.sym
--- xv6-public/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/wc.sym	2024-10-15 10:58:38.727888495 +0530
@@ -0,0 +1,47 @@
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+00000480 printint
+000008f0 digits.0
+00000000 umalloc.c
+00000de0 freep
+00000de4 base
+00000180 strcpy
+00000530 printf
+000003a0 memmove
+0000041b mknod
+000002a0 gets
+00000453 getpid
+00000760 malloc
+00000463 sleep
+000003e3 pipe
+000003f3 write
+0000042b fstat
+00000403 kill
+00000443 chdir
+0000040b exec
+000003db wait
+000003eb read
+00000423 unlink
+000000a0 wc
+000003cb fork
+0000045b sbrk
+0000046b uptime
+00000bd8 __bss_start
+00000240 memset
+00000000 main
+000001b0 strcmp
+0000044b dup
+00000be0 buf
+00000310 stat
+00000bd8 _edata
+00000dec _end
+00000433 link
+000003d3 exit
+00000360 atoi
+00000210 strlen
+00000413 open
+00000260 strchr
+0000043b mkdir
+000003fb close
+000006d0 free
Binary files xv6-public/xv6.img and xv6-publica/xv6.img differ
diff -ruN xv6-public/zombie.asm xv6-publica/zombie.asm
--- xv6-public/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/zombie.asm	2024-10-15 10:58:38.777888496 +0530
@@ -0,0 +1,1124 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  11:	e8 65 02 00 00       	call   27b <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
+    sleep(5);  // Let child exit before parent.
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 ef 02 00 00       	call   313 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
+  exit();
+  27:	e8 57 02 00 00       	call   283 <exit>
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  31:	31 c0                	xor    %eax,%eax
+{
+  33:	89 e5                	mov    %esp,%ebp
+  35:	53                   	push   %ebx
+  36:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  51:	89 c8                	mov    %ecx,%eax
+  53:	c9                   	leave  
+  54:	c3                   	ret    
+  55:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	84 c0                	test   %al,%al
+  6f:	75 17                	jne    88 <strcmp+0x28>
+  71:	eb 3a                	jmp    ad <strcmp+0x4d>
+  73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  77:	90                   	nop
+  78:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  7c:	83 c2 01             	add    $0x1,%edx
+  7f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  82:	84 c0                	test   %al,%al
+  84:	74 1a                	je     a0 <strcmp+0x40>
+    p++, q++;
+  86:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  88:	0f b6 19             	movzbl (%ecx),%ebx
+  8b:	38 c3                	cmp    %al,%bl
+  8d:	74 e9                	je     78 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  8f:	29 d8                	sub    %ebx,%eax
+}
+  91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  94:	c9                   	leave  
+  95:	c3                   	ret    
+  96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  a4:	31 c0                	xor    %eax,%eax
+  a6:	29 d8                	sub    %ebx,%eax
+}
+  a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  ab:	c9                   	leave  
+  ac:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	31 c0                	xor    %eax,%eax
+  b2:	eb db                	jmp    8f <strcmp+0x2f>
+  b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  bf:	90                   	nop
+
+000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	80 3a 00             	cmpb   $0x0,(%edx)
+  c9:	74 15                	je     e0 <strlen+0x20>
+  cb:	31 c0                	xor    %eax,%eax
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  d0:	83 c0 01             	add    $0x1,%eax
+  d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  d7:	89 c1                	mov    %eax,%ecx
+  d9:	75 f5                	jne    d0 <strlen+0x10>
+    ;
+  return n;
+}
+  db:	89 c8                	mov    %ecx,%eax
+  dd:	5d                   	pop    %ebp
+  de:	c3                   	ret    
+  df:	90                   	nop
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	57                   	push   %edi
+  f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+  fd:	89 d7                	mov    %edx,%edi
+  ff:	fc                   	cld    
+ 100:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 102:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 105:	89 d0                	mov    %edx,%eax
+ 107:	c9                   	leave  
+ 108:	c3                   	ret    
+ 109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 45 08             	mov    0x8(%ebp),%eax
+ 116:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11a:	0f b6 10             	movzbl (%eax),%edx
+ 11d:	84 d2                	test   %dl,%dl
+ 11f:	75 12                	jne    133 <strchr+0x23>
+ 121:	eb 1d                	jmp    140 <strchr+0x30>
+ 123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 127:	90                   	nop
+ 128:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 12c:	83 c0 01             	add    $0x1,%eax
+ 12f:	84 d2                	test   %dl,%dl
+ 131:	74 0d                	je     140 <strchr+0x30>
+    if(*s == c)
+ 133:	38 d1                	cmp    %dl,%cl
+ 135:	75 f1                	jne    128 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 137:	5d                   	pop    %ebp
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 140:	31 c0                	xor    %eax,%eax
+}
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+ 144:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	57                   	push   %edi
+ 154:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 155:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 158:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 159:	31 db                	xor    %ebx,%ebx
+{
+ 15b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 15e:	eb 27                	jmp    187 <gets+0x37>
+    cc = read(0, &c, 1);
+ 160:	83 ec 04             	sub    $0x4,%esp
+ 163:	6a 01                	push   $0x1
+ 165:	57                   	push   %edi
+ 166:	6a 00                	push   $0x0
+ 168:	e8 2e 01 00 00       	call   29b <read>
+    if(cc < 1)
+ 16d:	83 c4 10             	add    $0x10,%esp
+ 170:	85 c0                	test   %eax,%eax
+ 172:	7e 1d                	jle    191 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 174:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 178:	8b 55 08             	mov    0x8(%ebp),%edx
+ 17b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 17f:	3c 0a                	cmp    $0xa,%al
+ 181:	74 1d                	je     1a0 <gets+0x50>
+ 183:	3c 0d                	cmp    $0xd,%al
+ 185:	74 19                	je     1a0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 187:	89 de                	mov    %ebx,%esi
+ 189:	83 c3 01             	add    $0x1,%ebx
+ 18c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 18f:	7c cf                	jl     160 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 191:	8b 45 08             	mov    0x8(%ebp),%eax
+ 194:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 198:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 19b:	5b                   	pop    %ebx
+ 19c:	5e                   	pop    %esi
+ 19d:	5f                   	pop    %edi
+ 19e:	5d                   	pop    %ebp
+ 19f:	c3                   	ret    
+  buf[i] = '\0';
+ 1a0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a3:	89 de                	mov    %ebx,%esi
+ 1a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ac:	5b                   	pop    %ebx
+ 1ad:	5e                   	pop    %esi
+ 1ae:	5f                   	pop    %edi
+ 1af:	5d                   	pop    %ebp
+ 1b0:	c3                   	ret    
+ 1b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	push   0x8(%ebp)
+ 1cd:	e8 f1 00 00 00       	call   2c3 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	push   0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f4 00 00 00       	call   2db <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 ba 00 00 00       	call   2ab <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 02             	movsbl (%edx),%eax
+ 21a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 21d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 220:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 225:	77 1e                	ja     245 <atoi+0x35>
+ 227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 230:	83 c2 01             	add    $0x1,%edx
+ 233:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 236:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 02             	movsbl (%edx),%eax
+ 23d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 248:	89 c8                	mov    %ecx,%eax
+ 24a:	c9                   	leave  
+ 24b:	c3                   	ret    
+ 24c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	8b 45 10             	mov    0x10(%ebp),%eax
+ 257:	8b 55 08             	mov    0x8(%ebp),%edx
+ 25a:	56                   	push   %esi
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 c0                	test   %eax,%eax
+ 260:	7e 13                	jle    275 <memmove+0x25>
+ 262:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 264:	89 d7                	mov    %edx,%edi
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 270:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 271:	39 f8                	cmp    %edi,%eax
+ 273:	75 fb                	jne    270 <memmove+0x20>
+  return vdst;
+}
+ 275:	5e                   	pop    %esi
+ 276:	89 d0                	mov    %edx,%eax
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+
+0000027b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 280:	cd 40                	int    $0x40
+ 282:	c3                   	ret    
+
+00000283 <exit>:
+SYSCALL(exit)
+ 283:	b8 02 00 00 00       	mov    $0x2,%eax
+ 288:	cd 40                	int    $0x40
+ 28a:	c3                   	ret    
+
+0000028b <wait>:
+SYSCALL(wait)
+ 28b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <pipe>:
+SYSCALL(pipe)
+ 293:	b8 04 00 00 00       	mov    $0x4,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <read>:
+SYSCALL(read)
+ 29b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <write>:
+SYSCALL(write)
+ 2a3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <close>:
+SYSCALL(close)
+ 2ab:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <kill>:
+SYSCALL(kill)
+ 2b3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <exec>:
+SYSCALL(exec)
+ 2bb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <open>:
+SYSCALL(open)
+ 2c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <mknod>:
+SYSCALL(mknod)
+ 2cb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <unlink>:
+SYSCALL(unlink)
+ 2d3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <fstat>:
+SYSCALL(fstat)
+ 2db:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <link>:
+SYSCALL(link)
+ 2e3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <mkdir>:
+SYSCALL(mkdir)
+ 2eb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <chdir>:
+SYSCALL(chdir)
+ 2f3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <dup>:
+SYSCALL(dup)
+ 2fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <getpid>:
+SYSCALL(getpid)
+ 303:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <sbrk>:
+SYSCALL(sbrk)
+ 30b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <sleep>:
+SYSCALL(sleep)
+ 313:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <uptime>:
+SYSCALL(uptime)
+ 31b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+ 323:	66 90                	xchg   %ax,%ax
+ 325:	66 90                	xchg   %ax,%ax
+ 327:	66 90                	xchg   %ax,%ax
+ 329:	66 90                	xchg   %ax,%ax
+ 32b:	66 90                	xchg   %ax,%ax
+ 32d:	66 90                	xchg   %ax,%ax
+ 32f:	90                   	nop
+
+00000330 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	56                   	push   %esi
+ 335:	53                   	push   %ebx
+ 336:	83 ec 3c             	sub    $0x3c,%esp
+ 339:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 33c:	89 d1                	mov    %edx,%ecx
+{
+ 33e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 341:	85 d2                	test   %edx,%edx
+ 343:	0f 89 7f 00 00 00    	jns    3c8 <printint+0x98>
+ 349:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 34d:	74 79                	je     3c8 <printint+0x98>
+    neg = 1;
+ 34f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 356:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 358:	31 db                	xor    %ebx,%ebx
+ 35a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 35d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 360:	89 c8                	mov    %ecx,%eax
+ 362:	31 d2                	xor    %edx,%edx
+ 364:	89 cf                	mov    %ecx,%edi
+ 366:	f7 75 c4             	divl   -0x3c(%ebp)
+ 369:	0f b6 92 68 07 00 00 	movzbl 0x768(%edx),%edx
+ 370:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 373:	89 d8                	mov    %ebx,%eax
+ 375:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 378:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 37b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 37e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 381:	76 dd                	jbe    360 <printint+0x30>
+  if(neg)
+ 383:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 386:	85 c9                	test   %ecx,%ecx
+ 388:	74 0c                	je     396 <printint+0x66>
+    buf[i++] = '-';
+ 38a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 38f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 391:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 396:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 399:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 39d:	eb 07                	jmp    3a6 <printint+0x76>
+ 39f:	90                   	nop
+    putc(fd, buf[i]);
+ 3a0:	0f b6 13             	movzbl (%ebx),%edx
+ 3a3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3a6:	83 ec 04             	sub    $0x4,%esp
+ 3a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ac:	6a 01                	push   $0x1
+ 3ae:	56                   	push   %esi
+ 3af:	57                   	push   %edi
+ 3b0:	e8 ee fe ff ff       	call   2a3 <write>
+  while(--i >= 0)
+ 3b5:	83 c4 10             	add    $0x10,%esp
+ 3b8:	39 de                	cmp    %ebx,%esi
+ 3ba:	75 e4                	jne    3a0 <printint+0x70>
+}
+ 3bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3bf:	5b                   	pop    %ebx
+ 3c0:	5e                   	pop    %esi
+ 3c1:	5f                   	pop    %edi
+ 3c2:	5d                   	pop    %ebp
+ 3c3:	c3                   	ret    
+ 3c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3cf:	eb 87                	jmp    358 <printint+0x28>
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3df:	90                   	nop
+
+000003e0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	56                   	push   %esi
+ 3e5:	53                   	push   %ebx
+ 3e6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3e9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 3ec:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 3ef:	0f b6 13             	movzbl (%ebx),%edx
+ 3f2:	84 d2                	test   %dl,%dl
+ 3f4:	74 6a                	je     460 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 3f6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 3f9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 3fc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 3ff:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 401:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 404:	eb 36                	jmp    43c <printf+0x5c>
+ 406:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40d:	8d 76 00             	lea    0x0(%esi),%esi
+ 410:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 413:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 418:	83 f8 25             	cmp    $0x25,%eax
+ 41b:	74 15                	je     432 <printf+0x52>
+  write(fd, &c, 1);
+ 41d:	83 ec 04             	sub    $0x4,%esp
+ 420:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 423:	6a 01                	push   $0x1
+ 425:	57                   	push   %edi
+ 426:	56                   	push   %esi
+ 427:	e8 77 fe ff ff       	call   2a3 <write>
+ 42c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 42f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 432:	0f b6 13             	movzbl (%ebx),%edx
+ 435:	83 c3 01             	add    $0x1,%ebx
+ 438:	84 d2                	test   %dl,%dl
+ 43a:	74 24                	je     460 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 43c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 43f:	85 c9                	test   %ecx,%ecx
+ 441:	74 cd                	je     410 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 443:	83 f9 25             	cmp    $0x25,%ecx
+ 446:	75 ea                	jne    432 <printf+0x52>
+      if(c == 'd'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	0f 84 07 01 00 00    	je     558 <printf+0x178>
+ 451:	83 e8 63             	sub    $0x63,%eax
+ 454:	83 f8 15             	cmp    $0x15,%eax
+ 457:	77 17                	ja     470 <printf+0x90>
+ 459:	ff 24 85 10 07 00 00 	jmp    *0x710(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 460:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 463:	5b                   	pop    %ebx
+ 464:	5e                   	pop    %esi
+ 465:	5f                   	pop    %edi
+ 466:	5d                   	pop    %ebp
+ 467:	c3                   	ret    
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+  write(fd, &c, 1);
+ 470:	83 ec 04             	sub    $0x4,%esp
+ 473:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 476:	6a 01                	push   $0x1
+ 478:	57                   	push   %edi
+ 479:	56                   	push   %esi
+ 47a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 47e:	e8 20 fe ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 483:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 487:	83 c4 0c             	add    $0xc,%esp
+ 48a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 48d:	6a 01                	push   $0x1
+ 48f:	57                   	push   %edi
+ 490:	56                   	push   %esi
+ 491:	e8 0d fe ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 496:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 499:	31 c9                	xor    %ecx,%ecx
+ 49b:	eb 95                	jmp    432 <printf+0x52>
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4a0:	83 ec 0c             	sub    $0xc,%esp
+ 4a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4a8:	6a 00                	push   $0x0
+ 4aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4ad:	8b 10                	mov    (%eax),%edx
+ 4af:	89 f0                	mov    %esi,%eax
+ 4b1:	e8 7a fe ff ff       	call   330 <printint>
+        ap++;
+ 4b6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4ba:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4bd:	31 c9                	xor    %ecx,%ecx
+ 4bf:	e9 6e ff ff ff       	jmp    432 <printf+0x52>
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 4c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4cb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 4cd:	83 c0 04             	add    $0x4,%eax
+ 4d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 4d3:	85 d2                	test   %edx,%edx
+ 4d5:	0f 84 8d 00 00 00    	je     568 <printf+0x188>
+        while(*s != 0){
+ 4db:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 4de:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 4e0:	84 c0                	test   %al,%al
+ 4e2:	0f 84 4a ff ff ff    	je     432 <printf+0x52>
+ 4e8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 4eb:	89 d3                	mov    %edx,%ebx
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 4f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 4f3:	83 c3 01             	add    $0x1,%ebx
+ 4f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4f9:	6a 01                	push   $0x1
+ 4fb:	57                   	push   %edi
+ 4fc:	56                   	push   %esi
+ 4fd:	e8 a1 fd ff ff       	call   2a3 <write>
+        while(*s != 0){
+ 502:	0f b6 03             	movzbl (%ebx),%eax
+ 505:	83 c4 10             	add    $0x10,%esp
+ 508:	84 c0                	test   %al,%al
+ 50a:	75 e4                	jne    4f0 <printf+0x110>
+      state = 0;
+ 50c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 50f:	31 c9                	xor    %ecx,%ecx
+ 511:	e9 1c ff ff ff       	jmp    432 <printf+0x52>
+ 516:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 528:	6a 01                	push   $0x1
+ 52a:	e9 7b ff ff ff       	jmp    4aa <printf+0xca>
+ 52f:	90                   	nop
+        putc(fd, *ap);
+ 530:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 533:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 536:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 538:	6a 01                	push   $0x1
+ 53a:	57                   	push   %edi
+ 53b:	56                   	push   %esi
+        putc(fd, *ap);
+ 53c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 53f:	e8 5f fd ff ff       	call   2a3 <write>
+        ap++;
+ 544:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 548:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54b:	31 c9                	xor    %ecx,%ecx
+ 54d:	e9 e0 fe ff ff       	jmp    432 <printf+0x52>
+ 552:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 558:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 55b:	83 ec 04             	sub    $0x4,%esp
+ 55e:	e9 2a ff ff ff       	jmp    48d <printf+0xad>
+ 563:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 567:	90                   	nop
+          s = "(null)";
+ 568:	ba 08 07 00 00       	mov    $0x708,%edx
+        while(*s != 0){
+ 56d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 570:	b8 28 00 00 00       	mov    $0x28,%eax
+ 575:	89 d3                	mov    %edx,%ebx
+ 577:	e9 74 ff ff ff       	jmp    4f0 <printf+0x110>
+ 57c:	66 90                	xchg   %ax,%ax
+ 57e:	66 90                	xchg   %ax,%ax
+
+00000580 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 580:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 581:	a1 10 0a 00 00       	mov    0xa10,%eax
+{
+ 586:	89 e5                	mov    %esp,%ebp
+ 588:	57                   	push   %edi
+ 589:	56                   	push   %esi
+ 58a:	53                   	push   %ebx
+ 58b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 58e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 598:	89 c2                	mov    %eax,%edx
+ 59a:	8b 00                	mov    (%eax),%eax
+ 59c:	39 ca                	cmp    %ecx,%edx
+ 59e:	73 30                	jae    5d0 <free+0x50>
+ 5a0:	39 c1                	cmp    %eax,%ecx
+ 5a2:	72 04                	jb     5a8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5a4:	39 c2                	cmp    %eax,%edx
+ 5a6:	72 f0                	jb     598 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5ae:	39 f8                	cmp    %edi,%eax
+ 5b0:	74 30                	je     5e2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5b2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5b5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5b8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5bb:	39 f1                	cmp    %esi,%ecx
+ 5bd:	74 3a                	je     5f9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 5bf:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 5c1:	5b                   	pop    %ebx
+  freep = p;
+ 5c2:	89 15 10 0a 00 00    	mov    %edx,0xa10
+}
+ 5c8:	5e                   	pop    %esi
+ 5c9:	5f                   	pop    %edi
+ 5ca:	5d                   	pop    %ebp
+ 5cb:	c3                   	ret    
+ 5cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d0:	39 c2                	cmp    %eax,%edx
+ 5d2:	72 c4                	jb     598 <free+0x18>
+ 5d4:	39 c1                	cmp    %eax,%ecx
+ 5d6:	73 c0                	jae    598 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 5d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5de:	39 f8                	cmp    %edi,%eax
+ 5e0:	75 d0                	jne    5b2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 5e2:	03 70 04             	add    0x4(%eax),%esi
+ 5e5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5e8:	8b 02                	mov    (%edx),%eax
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5ef:	8b 42 04             	mov    0x4(%edx),%eax
+ 5f2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5f5:	39 f1                	cmp    %esi,%ecx
+ 5f7:	75 c6                	jne    5bf <free+0x3f>
+    p->s.size += bp->s.size;
+ 5f9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 5fc:	89 15 10 0a 00 00    	mov    %edx,0xa10
+    p->s.size += bp->s.size;
+ 602:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 605:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 608:	89 0a                	mov    %ecx,(%edx)
+}
+ 60a:	5b                   	pop    %ebx
+ 60b:	5e                   	pop    %esi
+ 60c:	5f                   	pop    %edi
+ 60d:	5d                   	pop    %ebp
+ 60e:	c3                   	ret    
+ 60f:	90                   	nop
+
+00000610 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 610:	55                   	push   %ebp
+ 611:	89 e5                	mov    %esp,%ebp
+ 613:	57                   	push   %edi
+ 614:	56                   	push   %esi
+ 615:	53                   	push   %ebx
+ 616:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 619:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 61c:	8b 3d 10 0a 00 00    	mov    0xa10,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 622:	8d 70 07             	lea    0x7(%eax),%esi
+ 625:	c1 ee 03             	shr    $0x3,%esi
+ 628:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 62b:	85 ff                	test   %edi,%edi
+ 62d:	0f 84 9d 00 00 00    	je     6d0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 633:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 635:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 638:	39 f1                	cmp    %esi,%ecx
+ 63a:	73 6a                	jae    6a6 <malloc+0x96>
+ 63c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 641:	39 de                	cmp    %ebx,%esi
+ 643:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 646:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 64d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 650:	eb 17                	jmp    669 <malloc+0x59>
+ 652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 658:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 65a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 65d:	39 f1                	cmp    %esi,%ecx
+ 65f:	73 4f                	jae    6b0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 661:	8b 3d 10 0a 00 00    	mov    0xa10,%edi
+ 667:	89 c2                	mov    %eax,%edx
+ 669:	39 d7                	cmp    %edx,%edi
+ 66b:	75 eb                	jne    658 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 66d:	83 ec 0c             	sub    $0xc,%esp
+ 670:	ff 75 e4             	push   -0x1c(%ebp)
+ 673:	e8 93 fc ff ff       	call   30b <sbrk>
+  if(p == (char*)-1)
+ 678:	83 c4 10             	add    $0x10,%esp
+ 67b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 67e:	74 1c                	je     69c <malloc+0x8c>
+  hp->s.size = nu;
+ 680:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 683:	83 ec 0c             	sub    $0xc,%esp
+ 686:	83 c0 08             	add    $0x8,%eax
+ 689:	50                   	push   %eax
+ 68a:	e8 f1 fe ff ff       	call   580 <free>
+  return freep;
+ 68f:	8b 15 10 0a 00 00    	mov    0xa10,%edx
+      if((p = morecore(nunits)) == 0)
+ 695:	83 c4 10             	add    $0x10,%esp
+ 698:	85 d2                	test   %edx,%edx
+ 69a:	75 bc                	jne    658 <malloc+0x48>
+        return 0;
+  }
+}
+ 69c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 69f:	31 c0                	xor    %eax,%eax
+}
+ 6a1:	5b                   	pop    %ebx
+ 6a2:	5e                   	pop    %esi
+ 6a3:	5f                   	pop    %edi
+ 6a4:	5d                   	pop    %ebp
+ 6a5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6a6:	89 d0                	mov    %edx,%eax
+ 6a8:	89 fa                	mov    %edi,%edx
+ 6aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6b0:	39 ce                	cmp    %ecx,%esi
+ 6b2:	74 4c                	je     700 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6b4:	29 f1                	sub    %esi,%ecx
+ 6b6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6bc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 6bf:	89 15 10 0a 00 00    	mov    %edx,0xa10
+}
+ 6c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 6c8:	83 c0 08             	add    $0x8,%eax
+}
+ 6cb:	5b                   	pop    %ebx
+ 6cc:	5e                   	pop    %esi
+ 6cd:	5f                   	pop    %edi
+ 6ce:	5d                   	pop    %ebp
+ 6cf:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 6d0:	c7 05 10 0a 00 00 14 	movl   $0xa14,0xa10
+ 6d7:	0a 00 00 
+    base.s.size = 0;
+ 6da:	bf 14 0a 00 00       	mov    $0xa14,%edi
+    base.s.ptr = freep = prevp = &base;
+ 6df:	c7 05 14 0a 00 00 14 	movl   $0xa14,0xa14
+ 6e6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 6eb:	c7 05 18 0a 00 00 00 	movl   $0x0,0xa18
+ 6f2:	00 00 00 
+    if(p->s.size >= nunits){
+ 6f5:	e9 42 ff ff ff       	jmp    63c <malloc+0x2c>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 700:	8b 08                	mov    (%eax),%ecx
+ 702:	89 0a                	mov    %ecx,(%edx)
+ 704:	eb b9                	jmp    6bf <malloc+0xaf>
diff -ruN xv6-public/zombie.d xv6-publica/zombie.d
--- xv6-public/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/zombie.d	2024-10-15 10:58:38.757888495 +0530
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/zombie.o and xv6-publica/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-publica/zombie.sym
--- xv6-public/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-publica/zombie.sym	2024-10-15 10:58:38.777888496 +0530
@@ -0,0 +1,45 @@
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000330 printint
+00000768 digits.0
+00000000 umalloc.c
+00000a10 freep
+00000a14 base
+00000030 strcpy
+000003e0 printf
+00000250 memmove
+000002cb mknod
+00000150 gets
+00000303 getpid
+00000610 malloc
+00000313 sleep
+00000293 pipe
+000002a3 write
+000002db fstat
+000002b3 kill
+000002f3 chdir
+000002bb exec
+0000028b wait
+0000029b read
+000002d3 unlink
+0000027b fork
+0000030b sbrk
+0000031b uptime
+00000a10 __bss_start
+000000f0 memset
+00000000 main
+00000060 strcmp
+000002fb dup
+000001c0 stat
+00000a10 _edata
+00000a1c _end
+000002e3 link
+00000283 exit
+00000210 atoi
+000000c0 strlen
+000002c3 open
+00000110 strchr
+000002eb mkdir
+000002ab close
+00000580 free
