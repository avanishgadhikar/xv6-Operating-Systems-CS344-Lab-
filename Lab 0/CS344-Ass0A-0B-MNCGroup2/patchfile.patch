Only in xv6_original: .cvsignore:Zone.Identifier
Only in xv6_original: .dir-locals.el:Zone.Identifier
Only in xv6_original: .gdbinit
Only in xv6_original: .gdbinit.tmpl:Zone.Identifier
Only in xv6_original: .gdbinit:Zone.Identifier
Only in xv6_original/.git: HEAD:Zone.Identifier
Only in xv6_original/.git: config:Zone.Identifier
Only in xv6_original/.git: description:Zone.Identifier
Only in xv6_original/.git/hooks: applypatch-msg.sample:Zone.Identifier
Only in xv6_original/.git/hooks: commit-msg.sample:Zone.Identifier
Only in xv6_original/.git/hooks: fsmonitor-watchman.sample:Zone.Identifier
Only in xv6_original/.git/hooks: post-update.sample:Zone.Identifier
Only in xv6_original/.git/hooks: pre-applypatch.sample:Zone.Identifier
Only in xv6_original/.git/hooks: pre-commit.sample:Zone.Identifier
Only in xv6_original/.git/hooks: pre-merge-commit.sample:Zone.Identifier
Only in xv6_original/.git/hooks: pre-push.sample:Zone.Identifier
Only in xv6_original/.git/hooks: pre-rebase.sample:Zone.Identifier
Only in xv6_original/.git/hooks: pre-receive.sample:Zone.Identifier
Only in xv6_original/.git/hooks: prepare-commit-msg.sample:Zone.Identifier
Only in xv6_original/.git/hooks: push-to-checkout.sample:Zone.Identifier
Only in xv6_original/.git/hooks: update.sample:Zone.Identifier
Only in xv6_original/.git: index:Zone.Identifier
Only in xv6_original/.git/info: exclude:Zone.Identifier
Only in xv6_original/.git/logs: HEAD:Zone.Identifier
Only in xv6_original/.git/logs/refs/heads: master:Zone.Identifier
Only in xv6_original/.git/logs/refs/remotes/origin: HEAD:Zone.Identifier
Only in xv6_original/.git/objects/pack: pack-200262f8294a516ef02bb0621eefda3d4a66a65d.idx:Zone.Identifier
Only in xv6_original/.git/objects/pack: pack-200262f8294a516ef02bb0621eefda3d4a66a65d.pack:Zone.Identifier
Only in xv6_original/.git: packed-refs:Zone.Identifier
Only in xv6_original/.git/refs/heads: master:Zone.Identifier
Only in xv6_original/.git/refs/remotes/origin: HEAD:Zone.Identifier
Only in xv6_original: .gitignore:Zone.Identifier
Only in xv6_original: BUGS:Zone.Identifier
Only in xv6_original: LICENSE:Zone.Identifier
diff -ur xv6-public/Makefile xv6_original/Makefile
--- xv6-public/Makefile	2024-08-13 22:42:00.417555296 +0530
+++ xv6_original/Makefile	2024-08-13 20:08:39.780737700 +0530
@@ -181,7 +181,6 @@
 	_usertests\
 	_wc\
 	_zombie\
-	_drawtest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -251,7 +250,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c drawtest.c\
+	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
Only in xv6_original: Makefile:Zone.Identifier
Only in xv6_original: Notes:Zone.Identifier
Only in xv6_original: README:Zone.Identifier
Only in xv6_original: TRICKS:Zone.Identifier
Binary files xv6-public/_cat and xv6_original/_cat differ
Only in xv6_original: _cat:Zone.Identifier
Only in xv6-public: _drawtest
Binary files xv6-public/_echo and xv6_original/_echo differ
Only in xv6_original: _echo:Zone.Identifier
Binary files xv6-public/_forktest and xv6_original/_forktest differ
Only in xv6_original: _forktest:Zone.Identifier
Binary files xv6-public/_grep and xv6_original/_grep differ
Only in xv6_original: _grep:Zone.Identifier
Binary files xv6-public/_init and xv6_original/_init differ
Only in xv6_original: _init:Zone.Identifier
Binary files xv6-public/_kill and xv6_original/_kill differ
Only in xv6_original: _kill:Zone.Identifier
Binary files xv6-public/_ln and xv6_original/_ln differ
Only in xv6_original: _ln:Zone.Identifier
Binary files xv6-public/_ls and xv6_original/_ls differ
Only in xv6_original: _ls:Zone.Identifier
Binary files xv6-public/_mkdir and xv6_original/_mkdir differ
Only in xv6_original: _mkdir:Zone.Identifier
Binary files xv6-public/_rm and xv6_original/_rm differ
Only in xv6_original: _rm:Zone.Identifier
Binary files xv6-public/_sh and xv6_original/_sh differ
Only in xv6_original: _sh:Zone.Identifier
Binary files xv6-public/_stressfs and xv6_original/_stressfs differ
Only in xv6_original: _stressfs:Zone.Identifier
Binary files xv6-public/_usertests and xv6_original/_usertests differ
Only in xv6_original: _usertests:Zone.Identifier
Binary files xv6-public/_wc and xv6_original/_wc differ
Only in xv6_original: _wc:Zone.Identifier
Binary files xv6-public/_zombie and xv6_original/_zombie differ
Only in xv6_original: _zombie:Zone.Identifier
Only in xv6_original: asm.h:Zone.Identifier
Only in xv6_original: bio.c:Zone.Identifier
Only in xv6_original: bio.d:Zone.Identifier
Only in xv6_original: bio.o:Zone.Identifier
Only in xv6_original: bootasm.S:Zone.Identifier
Only in xv6_original: bootasm.d:Zone.Identifier
Only in xv6_original: bootasm.o:Zone.Identifier
Only in xv6_original: bootblock.asm:Zone.Identifier
Only in xv6_original: bootblock.o:Zone.Identifier
Only in xv6_original: bootblock:Zone.Identifier
Only in xv6_original: bootblockother.o:Zone.Identifier
Only in xv6_original: bootmain.c:Zone.Identifier
Only in xv6_original: bootmain.d:Zone.Identifier
Only in xv6_original: bootmain.o:Zone.Identifier
Only in xv6_original: buf.h:Zone.Identifier
diff -ur xv6-public/cat.asm xv6_original/cat.asm
--- xv6-public/cat.asm	2024-08-13 23:00:02.617437979 +0530
+++ xv6_original/cat.asm	2024-08-13 20:08:57.320736700 +0530
@@ -668,11 +668,10 @@
  3fb:	b8 0e 00 00 00       	mov    $0xe,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
-
-00000403 <draw>:
- 403:	b8 16 00 00 00       	mov    $0x16,%eax
- 408:	cd 40                	int    $0x40
- 40a:	c3                   	ret    
+ 403:	66 90                	xchg   %ax,%ax
+ 405:	66 90                	xchg   %ax,%ax
+ 407:	66 90                	xchg   %ax,%ax
+ 409:	66 90                	xchg   %ax,%ax
  40b:	66 90                	xchg   %ax,%ax
  40d:	66 90                	xchg   %ax,%ax
  40f:	90                   	nop
Only in xv6_original: cat.asm:Zone.Identifier
Only in xv6_original: cat.c:Zone.Identifier
Only in xv6_original: cat.d:Zone.Identifier
Binary files xv6-public/cat.o and xv6_original/cat.o differ
Only in xv6_original: cat.o:Zone.Identifier
diff -ur xv6-public/cat.sym xv6_original/cat.sym
--- xv6-public/cat.sym	2024-08-13 23:00:02.627437980 +0530
+++ xv6_original/cat.sym	2024-08-13 20:08:57.320736700 +0530
@@ -39,7 +39,6 @@
 000003c3 link
 00000363 exit
 000002f0 atoi
-00000403 draw
 000001a0 strlen
 000003a3 open
 000001f0 strchr
Only in xv6_original: cat.sym:Zone.Identifier
Only in xv6_original: console.c:Zone.Identifier
Only in xv6_original: console.d:Zone.Identifier
Only in xv6_original: console.o:Zone.Identifier
Only in xv6_original: cuth:Zone.Identifier
Only in xv6_original: date.h:Zone.Identifier
Only in xv6_original: defs.h:Zone.Identifier
Only in xv6_original: dot-bochsrc:Zone.Identifier
Only in xv6-public: drawtest.asm
Only in xv6-public: drawtest.c
Only in xv6-public: drawtest.d
Only in xv6-public: drawtest.o
Only in xv6-public: drawtest.sym
diff -ur xv6-public/echo.asm xv6_original/echo.asm
--- xv6-public/echo.asm	2024-08-13 23:00:02.687437974 +0530
+++ xv6_original/echo.asm	2024-08-13 20:08:57.350736700 +0530
@@ -581,11 +581,10 @@
  35b:	b8 0e 00 00 00       	mov    $0xe,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
-
-00000363 <draw>:
- 363:	b8 16 00 00 00       	mov    $0x16,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
+ 363:	66 90                	xchg   %ax,%ax
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
  36b:	66 90                	xchg   %ax,%ax
  36d:	66 90                	xchg   %ax,%ax
  36f:	90                   	nop
Only in xv6_original: echo.asm:Zone.Identifier
Only in xv6_original: echo.c:Zone.Identifier
Only in xv6_original: echo.d:Zone.Identifier
Binary files xv6-public/echo.o and xv6_original/echo.o differ
Only in xv6_original: echo.o:Zone.Identifier
diff -ur xv6-public/echo.sym xv6_original/echo.sym
--- xv6-public/echo.sym	2024-08-13 23:00:02.697437973 +0530
+++ xv6_original/echo.sym	2024-08-13 20:08:57.360736700 +0530
@@ -37,7 +37,6 @@
 00000323 link
 000002c3 exit
 00000250 atoi
-00000363 draw
 00000100 strlen
 00000303 open
 00000150 strchr
Only in xv6_original: echo.sym:Zone.Identifier
Only in xv6_original: elf.h:Zone.Identifier
Only in xv6_original: entry.S:Zone.Identifier
Only in xv6_original: entry.o:Zone.Identifier
Only in xv6_original: entryother.S:Zone.Identifier
Only in xv6_original: entryother.asm:Zone.Identifier
Only in xv6_original: entryother.d:Zone.Identifier
Only in xv6_original: entryother.o:Zone.Identifier
Only in xv6_original: entryother:Zone.Identifier
Only in xv6_original: exec.c:Zone.Identifier
Only in xv6_original: exec.d:Zone.Identifier
Only in xv6_original: exec.o:Zone.Identifier
Only in xv6_original: fcntl.h:Zone.Identifier
Only in xv6_original: file.c:Zone.Identifier
Only in xv6_original: file.d:Zone.Identifier
Only in xv6_original: file.h:Zone.Identifier
Only in xv6_original: file.o:Zone.Identifier
diff -ur xv6-public/forktest.asm xv6_original/forktest.asm
--- xv6-public/forktest.asm	2024-08-13 23:00:02.767437967 +0530
+++ xv6_original/forktest.asm	2024-08-13 20:08:57.390736700 +0530
@@ -52,11 +52,11 @@
 {
   46:	83 ec 10             	sub    $0x10,%esp
   write(fd, s, strlen(s));
-  49:	68 1c 04 00 00       	push   $0x41c
+  49:	68 14 04 00 00       	push   $0x414
   4e:	e8 5d 01 00 00       	call   1b0 <strlen>
   53:	83 c4 0c             	add    $0xc,%esp
   56:	50                   	push   %eax
-  57:	68 1c 04 00 00       	push   $0x41c
+  57:	68 14 04 00 00       	push   $0x414
   5c:	6a 01                	push   $0x1
   5e:	e8 30 03 00 00       	call   393 <write>
   63:	83 c4 10             	add    $0x10,%esp
@@ -91,11 +91,11 @@
   a6:	75 49                	jne    f1 <forktest+0xb1>
   write(fd, s, strlen(s));
   a8:	83 ec 0c             	sub    $0xc,%esp
-  ab:	68 4e 04 00 00       	push   $0x44e
+  ab:	68 46 04 00 00       	push   $0x446
   b0:	e8 fb 00 00 00       	call   1b0 <strlen>
   b5:	83 c4 0c             	add    $0xc,%esp
   b8:	50                   	push   %eax
-  b9:	68 4e 04 00 00       	push   $0x44e
+  b9:	68 46 04 00 00       	push   $0x446
   be:	6a 01                	push   $0x1
   c0:	e8 ce 02 00 00       	call   393 <write>
 }
@@ -106,11 +106,11 @@
   ca:	e8 a4 02 00 00       	call   373 <exit>
   write(fd, s, strlen(s));
   cf:	83 ec 0c             	sub    $0xc,%esp
-  d2:	68 27 04 00 00       	push   $0x427
+  d2:	68 1f 04 00 00       	push   $0x41f
   d7:	e8 d4 00 00 00       	call   1b0 <strlen>
   dc:	83 c4 0c             	add    $0xc,%esp
   df:	50                   	push   %eax
-  e0:	68 27 04 00 00       	push   $0x427
+  e0:	68 1f 04 00 00       	push   $0x41f
   e5:	6a 01                	push   $0x1
   e7:	e8 a7 02 00 00       	call   393 <write>
       exit();
@@ -118,7 +118,7 @@
     printf(1, "wait got too many\n");
   f1:	52                   	push   %edx
   f2:	52                   	push   %edx
-  f3:	68 3b 04 00 00       	push   $0x43b
+  f3:	68 33 04 00 00       	push   $0x433
   f8:	6a 01                	push   $0x1
   fa:	e8 11 ff ff ff       	call   10 <printf>
     exit();
@@ -126,7 +126,7 @@
     printf(1, "fork claimed to work N times!\n", N);
  104:	50                   	push   %eax
  105:	68 e8 03 00 00       	push   $0x3e8
- 10a:	68 5c 04 00 00       	push   $0x45c
+ 10a:	68 54 04 00 00       	push   $0x454
  10f:	6a 01                	push   $0x1
  111:	e8 fa fe ff ff       	call   10 <printf>
     exit();
@@ -659,8 +659,3 @@
  40b:	b8 0e 00 00 00       	mov    $0xe,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
-
-00000413 <draw>:
- 413:	b8 16 00 00 00       	mov    $0x16,%eax
- 418:	cd 40                	int    $0x40
- 41a:	c3                   	ret    
Only in xv6_original: forktest.asm:Zone.Identifier
Only in xv6_original: forktest.c:Zone.Identifier
Only in xv6_original: forktest.d:Zone.Identifier
Binary files xv6-public/forktest.o and xv6_original/forktest.o differ
Only in xv6_original: forktest.o:Zone.Identifier
Only in xv6_original: fs.c:Zone.Identifier
Only in xv6_original: fs.d:Zone.Identifier
Only in xv6_original: fs.h:Zone.Identifier
Binary files xv6-public/fs.img and xv6_original/fs.img differ
Only in xv6_original: fs.img:Zone.Identifier
Only in xv6_original: fs.o:Zone.Identifier
Only in xv6_original: gdbutil:Zone.Identifier
diff -ur xv6-public/grep.asm xv6_original/grep.asm
--- xv6-public/grep.asm	2024-08-13 23:00:02.887437955 +0530
+++ xv6_original/grep.asm	2024-08-13 20:08:57.460736700 +0530
@@ -991,11 +991,10 @@
  65b:	b8 0e 00 00 00       	mov    $0xe,%eax
  660:	cd 40                	int    $0x40
  662:	c3                   	ret    
-
-00000663 <draw>:
- 663:	b8 16 00 00 00       	mov    $0x16,%eax
- 668:	cd 40                	int    $0x40
- 66a:	c3                   	ret    
+ 663:	66 90                	xchg   %ax,%ax
+ 665:	66 90                	xchg   %ax,%ax
+ 667:	66 90                	xchg   %ax,%ax
+ 669:	66 90                	xchg   %ax,%ax
  66b:	66 90                	xchg   %ax,%ax
  66d:	66 90                	xchg   %ax,%ax
  66f:	90                   	nop
Only in xv6_original: grep.asm:Zone.Identifier
Only in xv6_original: grep.c:Zone.Identifier
Only in xv6_original: grep.d:Zone.Identifier
Binary files xv6-public/grep.o and xv6_original/grep.o differ
Only in xv6_original: grep.o:Zone.Identifier
diff -ur xv6-public/grep.sym xv6_original/grep.sym
--- xv6-public/grep.sym	2024-08-13 23:00:02.887437955 +0530
+++ xv6_original/grep.sym	2024-08-13 20:08:57.460736700 +0530
@@ -42,7 +42,6 @@
 00000623 link
 000005c3 exit
 00000550 atoi
-00000663 draw
 00000400 strlen
 00000603 open
 00000450 strchr
Only in xv6_original: grep.sym:Zone.Identifier
Only in xv6_original: ide.c:Zone.Identifier
Only in xv6_original: ide.d:Zone.Identifier
Only in xv6_original: ide.o:Zone.Identifier
diff -ur xv6-public/init.asm xv6_original/init.asm
--- xv6-public/init.asm	2024-08-13 23:00:02.957437947 +0530
+++ xv6_original/init.asm	2024-08-13 20:08:57.490736700 +0530
@@ -643,11 +643,10 @@
  3db:	b8 0e 00 00 00       	mov    $0xe,%eax
  3e0:	cd 40                	int    $0x40
  3e2:	c3                   	ret    
-
-000003e3 <draw>:
- 3e3:	b8 16 00 00 00       	mov    $0x16,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret    
+ 3e3:	66 90                	xchg   %ax,%ax
+ 3e5:	66 90                	xchg   %ax,%ax
+ 3e7:	66 90                	xchg   %ax,%ax
+ 3e9:	66 90                	xchg   %ax,%ax
  3eb:	66 90                	xchg   %ax,%ax
  3ed:	66 90                	xchg   %ax,%ax
  3ef:	90                   	nop
Only in xv6_original: init.asm:Zone.Identifier
Only in xv6_original: init.c:Zone.Identifier
Only in xv6_original: init.d:Zone.Identifier
Binary files xv6-public/init.o and xv6_original/init.o differ
Only in xv6_original: init.o:Zone.Identifier
diff -ur xv6-public/init.sym xv6_original/init.sym
--- xv6-public/init.sym	2024-08-13 23:00:02.957437947 +0530
+++ xv6_original/init.sym	2024-08-13 20:08:57.500736700 +0530
@@ -38,7 +38,6 @@
 000003a3 link
 00000343 exit
 000002d0 atoi
-000003e3 draw
 00000180 strlen
 00000383 open
 000001d0 strchr
Only in xv6_original: init.sym:Zone.Identifier
Only in xv6_original: initcode.S:Zone.Identifier
Only in xv6_original: initcode.asm:Zone.Identifier
Only in xv6_original: initcode.d:Zone.Identifier
Only in xv6_original: initcode.o:Zone.Identifier
Only in xv6_original: initcode.out:Zone.Identifier
Only in xv6_original: initcode:Zone.Identifier
Only in xv6_original: ioapic.c:Zone.Identifier
Only in xv6_original: ioapic.d:Zone.Identifier
Only in xv6_original: ioapic.o:Zone.Identifier
Only in xv6_original: kalloc.c:Zone.Identifier
Only in xv6_original: kalloc.d:Zone.Identifier
Only in xv6_original: kalloc.o:Zone.Identifier
Only in xv6_original: kbd.c:Zone.Identifier
Only in xv6_original: kbd.d:Zone.Identifier
Only in xv6_original: kbd.h:Zone.Identifier
Only in xv6_original: kbd.o:Zone.Identifier
Binary files xv6-public/kernel and xv6_original/kernel differ
diff -ur xv6-public/kernel.asm xv6_original/kernel.asm
--- xv6-public/kernel.asm	2024-08-13 22:59:54.177438894 +0530
+++ xv6_original/kernel.asm	2024-08-13 20:08:50.860736400 +0530
@@ -24,7 +24,7 @@
 80100012:	0f 22 e0             	mov    %eax,%cr4
   # Set page directory
   movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
+80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
   movl    %eax, %cr3
 8010001a:	0f 22 d8             	mov    %eax,%cr3
   # Turn on paging.
@@ -37,7 +37,7 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc d0 64 11 80       	mov    $0x801164d0,%esp
+80100028:	bc d0 54 11 80       	mov    $0x801154d0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
@@ -70,22 +70,22 @@
   bcache.head.prev = &bcache.head;
   bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100044:	bb 54 b5 10 80       	mov    $0x8010b554,%ebx
+80100044:	bb 54 a5 10 80       	mov    $0x8010a554,%ebx
 {
 80100049:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-8010004c:	68 20 72 10 80       	push   $0x80107220
-80100051:	68 20 b5 10 80       	push   $0x8010b520
+8010004c:	68 a0 71 10 80       	push   $0x801071a0
+80100051:	68 20 a5 10 80       	push   $0x8010a520
 80100056:	e8 75 43 00 00       	call   801043d0 <initlock>
   bcache.head.next = &bcache.head;
 8010005b:	83 c4 10             	add    $0x10,%esp
-8010005e:	b8 1c fc 10 80       	mov    $0x8010fc1c,%eax
+8010005e:	b8 1c ec 10 80       	mov    $0x8010ec1c,%eax
   bcache.head.prev = &bcache.head;
-80100063:	c7 05 6c fc 10 80 1c 	movl   $0x8010fc1c,0x8010fc6c
-8010006a:	fc 10 80 
+80100063:	c7 05 6c ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec6c
+8010006a:	ec 10 80 
   bcache.head.next = &bcache.head;
-8010006d:	c7 05 70 fc 10 80 1c 	movl   $0x8010fc1c,0x8010fc70
-80100074:	fc 10 80 
+8010006d:	c7 05 70 ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec70
+80100074:	ec 10 80 
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 80100077:	eb 09                	jmp    80100082 <binit+0x42>
 80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -97,13 +97,13 @@
 80100085:	83 ec 08             	sub    $0x8,%esp
 80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
     b->prev = &bcache.head;
-8010008b:	c7 43 50 1c fc 10 80 	movl   $0x8010fc1c,0x50(%ebx)
+8010008b:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 27 72 10 80       	push   $0x80107227
+80100092:	68 a7 71 10 80       	push   $0x801071a7
 80100097:	50                   	push   %eax
 80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
     bcache.head.next->prev = b;
-8010009d:	a1 70 fc 10 80       	mov    0x8010fc70,%eax
+8010009d:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
 801000a8:	83 c4 10             	add    $0x10,%esp
@@ -111,9 +111,9 @@
 801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
 801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 70 fc 10 80    	mov    %ebx,0x8010fc70
+801000b0:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb c0 f9 10 80    	cmp    $0x8010f9c0,%ebx
+801000b6:	81 fb c0 e9 10 80    	cmp    $0x8010e9c0,%ebx
 801000bc:	75 c2                	jne    80100080 <binit+0x40>
   }
 }
@@ -139,17 +139,17 @@
 801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
 801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
   acquire(&bcache.lock);
-801000df:	68 20 b5 10 80       	push   $0x8010b520
+801000df:	68 20 a5 10 80       	push   $0x8010a520
 801000e4:	e8 b7 44 00 00       	call   801045a0 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000e9:	8b 1d 70 fc 10 80    	mov    0x8010fc70,%ebx
+801000e9:	8b 1d 70 ec 10 80    	mov    0x8010ec70,%ebx
 801000ef:	83 c4 10             	add    $0x10,%esp
-801000f2:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
+801000f2:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
 801000f8:	75 11                	jne    8010010b <bread+0x3b>
 801000fa:	eb 24                	jmp    80100120 <bread+0x50>
 801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
+80100103:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
 80100109:	74 15                	je     80100120 <bread+0x50>
     if(b->dev == dev && b->blockno == blockno){
 8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
@@ -163,12 +163,12 @@
 8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010011f:	90                   	nop
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 6c fc 10 80    	mov    0x8010fc6c,%ebx
-80100126:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
+80100120:	8b 1d 6c ec 10 80    	mov    0x8010ec6c,%ebx
+80100126:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
 8010012c:	75 0d                	jne    8010013b <bread+0x6b>
 8010012e:	eb 6e                	jmp    8010019e <bread+0xce>
 80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
+80100133:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
 80100139:	74 63                	je     8010019e <bread+0xce>
     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
 8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -186,7 +186,7 @@
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 20 b5 10 80       	push   $0x8010b520
+8010015d:	68 20 a5 10 80       	push   $0x8010a520
 80100162:	e8 d9 43 00 00       	call   80104540 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
@@ -227,7 +227,7 @@
 8010019d:	c3                   	ret    
   panic("bget: no buffers");
 8010019e:	83 ec 0c             	sub    $0xc,%esp
-801001a1:	68 2e 72 10 80       	push   $0x8010722e
+801001a1:	68 ae 71 10 80       	push   $0x801071ae
 801001a6:	e8 d5 01 00 00       	call   80100380 <panic>
 801001ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801001af:	90                   	nop
@@ -262,7 +262,7 @@
 801001d4:	e9 07 21 00 00       	jmp    801022e0 <iderw>
     panic("bwrite");
 801001d9:	83 ec 0c             	sub    $0xc,%esp
-801001dc:	68 3f 72 10 80       	push   $0x8010723f
+801001dc:	68 bf 71 10 80       	push   $0x801071bf
 801001e1:	e8 9a 01 00 00       	call   80100380 <panic>
 801001e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801001ed:	8d 76 00             	lea    0x0(%esi),%esi
@@ -295,7 +295,7 @@
 8010020f:	e8 2c 41 00 00       	call   80104340 <releasesleep>
 
   acquire(&bcache.lock);
-80100214:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+80100214:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
 8010021b:	e8 80 43 00 00       	call   801045a0 <acquire>
   b->refcnt--;
 80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -317,20 +317,20 @@
 8010023c:	8b 53 54             	mov    0x54(%ebx),%edx
 8010023f:	89 50 54             	mov    %edx,0x54(%eax)
     b->next = bcache.head.next;
-80100242:	a1 70 fc 10 80       	mov    0x8010fc70,%eax
+80100242:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
     b->prev = &bcache.head;
-80100247:	c7 43 50 1c fc 10 80 	movl   $0x8010fc1c,0x50(%ebx)
+80100247:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
     b->next = bcache.head.next;
 8010024e:	89 43 54             	mov    %eax,0x54(%ebx)
     bcache.head.next->prev = b;
-80100251:	a1 70 fc 10 80       	mov    0x8010fc70,%eax
+80100251:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
 80100256:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
-80100259:	89 1d 70 fc 10 80    	mov    %ebx,0x8010fc70
+80100259:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
   }
   
   release(&bcache.lock);
-8010025f:	c7 45 08 20 b5 10 80 	movl   $0x8010b520,0x8(%ebp)
+8010025f:	c7 45 08 20 a5 10 80 	movl   $0x8010a520,0x8(%ebp)
 }
 80100266:	8d 65 f8             	lea    -0x8(%ebp),%esp
 80100269:	5b                   	pop    %ebx
@@ -340,7 +340,7 @@
 8010026c:	e9 cf 42 00 00       	jmp    80104540 <release>
     panic("brelse");
 80100271:	83 ec 0c             	sub    $0xc,%esp
-80100274:	68 46 72 10 80       	push   $0x80107246
+80100274:	68 c6 71 10 80       	push   $0x801071c6
 80100279:	e8 02 01 00 00       	call   80100380 <panic>
 8010027e:	66 90                	xchg   %ax,%ax
 
@@ -369,15 +369,15 @@
   iunlock(ip);
 80100294:	e8 c7 15 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
-80100299:	c7 04 24 20 ff 10 80 	movl   $0x8010ff20,(%esp)
+80100299:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
 801002a0:	e8 fb 42 00 00       	call   801045a0 <acquire>
   while(n > 0){
 801002a5:	83 c4 10             	add    $0x10,%esp
 801002a8:	85 db                	test   %ebx,%ebx
 801002aa:	0f 8e 94 00 00 00    	jle    80100344 <consoleread+0xc4>
     while(input.r == input.w){
-801002b0:	a1 00 ff 10 80       	mov    0x8010ff00,%eax
-801002b5:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
+801002b0:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
+801002b5:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
 801002bb:	74 25                	je     801002e2 <consoleread+0x62>
 801002bd:	eb 59                	jmp    80100318 <consoleread+0x98>
 801002bf:	90                   	nop
@@ -388,13 +388,13 @@
       }
       sleep(&input.r, &cons.lock);
 801002c0:	83 ec 08             	sub    $0x8,%esp
-801002c3:	68 20 ff 10 80       	push   $0x8010ff20
-801002c8:	68 00 ff 10 80       	push   $0x8010ff00
+801002c3:	68 20 ef 10 80       	push   $0x8010ef20
+801002c8:	68 00 ef 10 80       	push   $0x8010ef00
 801002cd:	e8 6e 3d 00 00       	call   80104040 <sleep>
     while(input.r == input.w){
-801002d2:	a1 00 ff 10 80       	mov    0x8010ff00,%eax
+801002d2:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
 801002d7:	83 c4 10             	add    $0x10,%esp
-801002da:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
+801002da:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
 801002e0:	75 36                	jne    80100318 <consoleread+0x98>
       if(myproc()->killed){
 801002e2:	e8 89 36 00 00       	call   80103970 <myproc>
@@ -403,7 +403,7 @@
 801002ec:	74 d2                	je     801002c0 <consoleread+0x40>
         release(&cons.lock);
 801002ee:	83 ec 0c             	sub    $0xc,%esp
-801002f1:	68 20 ff 10 80       	push   $0x8010ff20
+801002f1:	68 20 ef 10 80       	push   $0x8010ef20
 801002f6:	e8 45 42 00 00       	call   80104540 <release>
         ilock(ip);
 801002fb:	5a                   	pop    %edx
@@ -429,10 +429,10 @@
 80100314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = input.buf[input.r++ % INPUT_BUF];
 80100318:	8d 50 01             	lea    0x1(%eax),%edx
-8010031b:	89 15 00 ff 10 80    	mov    %edx,0x8010ff00
+8010031b:	89 15 00 ef 10 80    	mov    %edx,0x8010ef00
 80100321:	89 c2                	mov    %eax,%edx
 80100323:	83 e2 7f             	and    $0x7f,%edx
-80100326:	0f be 8a 80 fe 10 80 	movsbl -0x7fef0180(%edx),%ecx
+80100326:	0f be 8a 80 ee 10 80 	movsbl -0x7fef1180(%edx),%ecx
     if(c == C('D')){  // EOF
 8010032d:	80 f9 04             	cmp    $0x4,%cl
 80100330:	74 37                	je     80100369 <consoleread+0xe9>
@@ -447,7 +447,7 @@
 8010033e:	0f 85 64 ff ff ff    	jne    801002a8 <consoleread+0x28>
   release(&cons.lock);
 80100344:	83 ec 0c             	sub    $0xc,%esp
-80100347:	68 20 ff 10 80       	push   $0x8010ff20
+80100347:	68 20 ef 10 80       	push   $0x8010ef20
 8010034c:	e8 ef 41 00 00       	call   80104540 <release>
   ilock(ip);
 80100351:	58                   	pop    %eax
@@ -470,7 +470,7 @@
 80100369:	39 fb                	cmp    %edi,%ebx
 8010036b:	73 d7                	jae    80100344 <consoleread+0xc4>
         input.r--;
-8010036d:	a3 00 ff 10 80       	mov    %eax,0x8010ff00
+8010036d:	a3 00 ef 10 80       	mov    %eax,0x8010ef00
 80100372:	eb d0                	jmp    80100344 <consoleread+0xc4>
 80100374:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010037b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -491,7 +491,7 @@
   asm volatile("cli");
 80100388:	fa                   	cli    
   cons.locking = 0;
-80100389:	c7 05 54 ff 10 80 00 	movl   $0x0,0x8010ff54
+80100389:	c7 05 54 ef 10 80 00 	movl   $0x0,0x8010ef54
 80100390:	00 00 00 
   getcallerpcs(&s, pcs);
 80100393:	8d 5d d0             	lea    -0x30(%ebp),%ebx
@@ -500,14 +500,14 @@
 80100399:	e8 52 25 00 00       	call   801028f0 <lapicid>
 8010039e:	83 ec 08             	sub    $0x8,%esp
 801003a1:	50                   	push   %eax
-801003a2:	68 4d 72 10 80       	push   $0x8010724d
+801003a2:	68 cd 71 10 80       	push   $0x801071cd
 801003a7:	e8 f4 02 00 00       	call   801006a0 <cprintf>
   cprintf(s);
 801003ac:	58                   	pop    %eax
 801003ad:	ff 75 08             	push   0x8(%ebp)
 801003b0:	e8 eb 02 00 00       	call   801006a0 <cprintf>
   cprintf("\n");
-801003b5:	c7 04 24 77 80 10 80 	movl   $0x80108077,(%esp)
+801003b5:	c7 04 24 f7 7a 10 80 	movl   $0x80107af7,(%esp)
 801003bc:	e8 df 02 00 00       	call   801006a0 <cprintf>
   getcallerpcs(&s, pcs);
 801003c1:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -524,14 +524,14 @@
   for(i=0; i<10; i++)
 801003d5:	83 c3 04             	add    $0x4,%ebx
     cprintf(" %p", pcs[i]);
-801003d8:	68 61 72 10 80       	push   $0x80107261
+801003d8:	68 e1 71 10 80       	push   $0x801071e1
 801003dd:	e8 be 02 00 00       	call   801006a0 <cprintf>
   for(i=0; i<10; i++)
 801003e2:	83 c4 10             	add    $0x10,%esp
 801003e5:	39 f3                	cmp    %esi,%ebx
 801003e7:	75 e7                	jne    801003d0 <panic+0x50>
   panicked = 1; // freeze other CPU
-801003e9:	c7 05 58 ff 10 80 01 	movl   $0x1,0x8010ff58
+801003e9:	c7 05 58 ef 10 80 01 	movl   $0x1,0x8010ef58
 801003f0:	00 00 00 
   for(;;)
 801003f3:	eb fe                	jmp    801003f3 <panic+0x73>
@@ -553,7 +553,7 @@
     uartputc(c);
 80100416:	83 ec 0c             	sub    $0xc,%esp
 80100419:	50                   	push   %eax
-8010041a:	e8 21 59 00 00       	call   80105d40 <uartputc>
+8010041a:	e8 91 58 00 00       	call   80105cb0 <uartputc>
 8010041f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100422:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -649,11 +649,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100500:	83 ec 0c             	sub    $0xc,%esp
 80100503:	6a 08                	push   $0x8
-80100505:	e8 36 58 00 00       	call   80105d40 <uartputc>
+80100505:	e8 a6 57 00 00       	call   80105cb0 <uartputc>
 8010050a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100511:	e8 2a 58 00 00       	call   80105d40 <uartputc>
+80100511:	e8 9a 57 00 00       	call   80105cb0 <uartputc>
 80100516:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010051d:	e8 1e 58 00 00       	call   80105d40 <uartputc>
+8010051d:	e8 8e 57 00 00       	call   80105cb0 <uartputc>
 80100522:	83 c4 10             	add    $0x10,%esp
 80100525:	e9 f8 fe ff ff       	jmp    80100422 <consputc.part.0+0x22>
 8010052a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -685,7 +685,7 @@
 80100571:	e9 20 ff ff ff       	jmp    80100496 <consputc.part.0+0x96>
     panic("pos under/overflow");
 80100576:	83 ec 0c             	sub    $0xc,%esp
-80100579:	68 65 72 10 80       	push   $0x80107265
+80100579:	68 e5 71 10 80       	push   $0x801071e5
 8010057e:	e8 fd fd ff ff       	call   80100380 <panic>
 80100583:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -710,7 +710,7 @@
   iunlock(ip);
 8010059f:	e8 bc 12 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
-801005a4:	c7 04 24 20 ff 10 80 	movl   $0x8010ff20,(%esp)
+801005a4:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
 801005ab:	e8 f0 3f 00 00       	call   801045a0 <acquire>
   for(i = 0; i < n; i++)
 801005b0:	83 c4 10             	add    $0x10,%esp
@@ -719,7 +719,7 @@
 801005b7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 801005ba:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
   if(panicked){
-801005bd:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
+801005bd:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
     consputc(buf[i] & 0xff);
 801005c3:	0f b6 03             	movzbl (%ebx),%eax
   if(panicked){
@@ -737,7 +737,7 @@
 801005da:	75 e1                	jne    801005bd <consolewrite+0x2d>
   release(&cons.lock);
 801005dc:	83 ec 0c             	sub    $0xc,%esp
-801005df:	68 20 ff 10 80       	push   $0x8010ff20
+801005df:	68 20 ef 10 80       	push   $0x8010ef20
 801005e4:	e8 57 3f 00 00       	call   80104540 <release>
   ilock(ip);
 801005e9:	58                   	pop    %eax
@@ -783,7 +783,7 @@
 8010062e:	89 cf                	mov    %ecx,%edi
 80100630:	f7 75 d4             	divl   -0x2c(%ebp)
 80100633:	8d 5b 01             	lea    0x1(%ebx),%ebx
-80100636:	0f b6 92 90 72 10 80 	movzbl -0x7fef8d70(%edx),%edx
+80100636:	0f b6 92 10 72 10 80 	movzbl -0x7fef8df0(%edx),%edx
   }while((x /= base) != 0);
 8010063d:	89 c1                	mov    %eax,%ecx
     buf[i++] = digits[x % base];
@@ -805,7 +805,7 @@
 8010065b:	8d 5c 35 d7          	lea    -0x29(%ebp,%esi,1),%ebx
 8010065f:	0f be c2             	movsbl %dl,%eax
   if(panicked){
-80100662:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
+80100662:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
 80100668:	85 d2                	test   %edx,%edx
 8010066a:	74 04                	je     80100670 <printint+0x70>
 8010066c:	fa                   	cli    
@@ -844,7 +844,7 @@
 801006a5:	53                   	push   %ebx
 801006a6:	83 ec 1c             	sub    $0x1c,%esp
   locking = cons.locking;
-801006a9:	a1 54 ff 10 80       	mov    0x8010ff54,%eax
+801006a9:	a1 54 ef 10 80       	mov    0x8010ef54,%eax
 801006ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(locking)
 801006b1:	85 c0                	test   %eax,%eax
@@ -917,7 +917,7 @@
 80100758:	84 c0                	test   %al,%al
 8010075a:	0f 84 08 01 00 00    	je     80100868 <cprintf+0x1c8>
   if(panicked){
-80100760:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
+80100760:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
 80100766:	85 d2                	test   %edx,%edx
 80100768:	0f 84 b2 00 00 00    	je     80100820 <cprintf+0x180>
 8010076e:	fa                   	cli    
@@ -947,7 +947,7 @@
 801007a3:	eb 81                	jmp    80100726 <cprintf+0x86>
 801007a5:	8d 76 00             	lea    0x0(%esi),%esi
   if(panicked){
-801007a8:	8b 0d 58 ff 10 80    	mov    0x8010ff58,%ecx
+801007a8:	8b 0d 58 ef 10 80    	mov    0x8010ef58,%ecx
 801007ae:	85 c9                	test   %ecx,%ecx
 801007b0:	74 14                	je     801007c6 <cprintf+0x126>
 801007b2:	fa                   	cli    
@@ -955,7 +955,7 @@
 801007b3:	eb fe                	jmp    801007b3 <cprintf+0x113>
 801007b5:	8d 76 00             	lea    0x0(%esi),%esi
   if(panicked){
-801007b8:	a1 58 ff 10 80       	mov    0x8010ff58,%eax
+801007b8:	a1 58 ef 10 80       	mov    0x8010ef58,%eax
 801007bd:	85 c0                	test   %eax,%eax
 801007bf:	75 6c                	jne    8010082d <cprintf+0x18d>
 801007c1:	b8 25 00 00 00       	mov    $0x25,%eax
@@ -969,18 +969,18 @@
 801007df:	90                   	nop
     acquire(&cons.lock);
 801007e0:	83 ec 0c             	sub    $0xc,%esp
-801007e3:	68 20 ff 10 80       	push   $0x8010ff20
+801007e3:	68 20 ef 10 80       	push   $0x8010ef20
 801007e8:	e8 b3 3d 00 00       	call   801045a0 <acquire>
 801007ed:	83 c4 10             	add    $0x10,%esp
 801007f0:	e9 c4 fe ff ff       	jmp    801006b9 <cprintf+0x19>
   if(panicked){
-801007f5:	8b 0d 58 ff 10 80    	mov    0x8010ff58,%ecx
+801007f5:	8b 0d 58 ef 10 80    	mov    0x8010ef58,%ecx
 801007fb:	85 c9                	test   %ecx,%ecx
 801007fd:	75 31                	jne    80100830 <cprintf+0x190>
 801007ff:	b8 25 00 00 00       	mov    $0x25,%eax
 80100804:	89 55 e0             	mov    %edx,-0x20(%ebp)
 80100807:	e8 f4 fb ff ff       	call   80100400 <consputc.part.0>
-8010080c:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
+8010080c:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
 80100812:	85 d2                	test   %edx,%edx
 80100814:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80100817:	74 2e                	je     80100847 <cprintf+0x1a7>
@@ -1000,7 +1000,7 @@
 80100833:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100837:	90                   	nop
         s = "(null)";
-80100838:	bf 78 72 10 80       	mov    $0x80107278,%edi
+80100838:	bf f8 71 10 80       	mov    $0x801071f8,%edi
       for(; *s; s++)
 8010083d:	b8 28 00 00 00       	mov    $0x28,%eax
 80100842:	e9 19 ff ff ff       	jmp    80100760 <cprintf+0xc0>
@@ -1009,7 +1009,7 @@
 8010084e:	e9 c8 fe ff ff       	jmp    8010071b <cprintf+0x7b>
     release(&cons.lock);
 80100853:	83 ec 0c             	sub    $0xc,%esp
-80100856:	68 20 ff 10 80       	push   $0x8010ff20
+80100856:	68 20 ef 10 80       	push   $0x8010ef20
 8010085b:	e8 e0 3c 00 00       	call   80104540 <release>
 80100860:	83 c4 10             	add    $0x10,%esp
 }
@@ -1019,7 +1019,7 @@
 8010086b:	e9 ab fe ff ff       	jmp    8010071b <cprintf+0x7b>
     panic("null fmt");
 80100870:	83 ec 0c             	sub    $0xc,%esp
-80100873:	68 7f 72 10 80       	push   $0x8010727f
+80100873:	68 ff 71 10 80       	push   $0x801071ff
 80100878:	e8 03 fb ff ff       	call   80100380 <panic>
 8010087d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -1036,7 +1036,7 @@
 80100888:	83 ec 18             	sub    $0x18,%esp
 8010088b:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
-8010088e:	68 20 ff 10 80       	push   $0x8010ff20
+8010088e:	68 20 ef 10 80       	push   $0x8010ef20
 80100893:	e8 08 3d 00 00       	call   801045a0 <acquire>
   while((c = getc()) >= 0){
 80100898:	83 c4 10             	add    $0x10,%esp
@@ -1060,23 +1060,23 @@
 801008ca:	83 fb 7f             	cmp    $0x7f,%ebx
 801008cd:	0f 84 ad 00 00 00    	je     80100980 <consoleintr+0x100>
       if(c != 0 && input.e-input.r < INPUT_BUF){
-801008d3:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
+801008d3:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
 801008d8:	89 c2                	mov    %eax,%edx
-801008da:	2b 15 00 ff 10 80    	sub    0x8010ff00,%edx
+801008da:	2b 15 00 ef 10 80    	sub    0x8010ef00,%edx
 801008e0:	83 fa 7f             	cmp    $0x7f,%edx
 801008e3:	77 d2                	ja     801008b7 <consoleintr+0x37>
         input.buf[input.e++ % INPUT_BUF] = c;
 801008e5:	8d 48 01             	lea    0x1(%eax),%ecx
   if(panicked){
-801008e8:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
+801008e8:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
         input.buf[input.e++ % INPUT_BUF] = c;
 801008ee:	83 e0 7f             	and    $0x7f,%eax
-801008f1:	89 0d 08 ff 10 80    	mov    %ecx,0x8010ff08
+801008f1:	89 0d 08 ef 10 80    	mov    %ecx,0x8010ef08
         c = (c == '\r') ? '\n' : c;
 801008f7:	83 fb 0d             	cmp    $0xd,%ebx
 801008fa:	0f 84 13 01 00 00    	je     80100a13 <consoleintr+0x193>
         input.buf[input.e++ % INPUT_BUF] = c;
-80100900:	88 98 80 fe 10 80    	mov    %bl,-0x7fef0180(%eax)
+80100900:	88 98 80 ee 10 80    	mov    %bl,-0x7fef1180(%eax)
   if(panicked){
 80100906:	85 d2                	test   %edx,%edx
 80100908:	0f 85 10 01 00 00    	jne    80100a1e <consoleintr+0x19e>
@@ -1087,27 +1087,27 @@
 80100918:	0f 84 14 01 00 00    	je     80100a32 <consoleintr+0x1b2>
 8010091e:	83 fb 04             	cmp    $0x4,%ebx
 80100921:	0f 84 0b 01 00 00    	je     80100a32 <consoleintr+0x1b2>
-80100927:	a1 00 ff 10 80       	mov    0x8010ff00,%eax
+80100927:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
 8010092c:	83 e8 80             	sub    $0xffffff80,%eax
-8010092f:	39 05 08 ff 10 80    	cmp    %eax,0x8010ff08
+8010092f:	39 05 08 ef 10 80    	cmp    %eax,0x8010ef08
 80100935:	75 80                	jne    801008b7 <consoleintr+0x37>
 80100937:	e9 fb 00 00 00       	jmp    80100a37 <consoleintr+0x1b7>
 8010093c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       while(input.e != input.w &&
-80100940:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
-80100945:	39 05 04 ff 10 80    	cmp    %eax,0x8010ff04
+80100940:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+80100945:	39 05 04 ef 10 80    	cmp    %eax,0x8010ef04
 8010094b:	0f 84 66 ff ff ff    	je     801008b7 <consoleintr+0x37>
             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
 80100951:	83 e8 01             	sub    $0x1,%eax
 80100954:	89 c2                	mov    %eax,%edx
 80100956:	83 e2 7f             	and    $0x7f,%edx
       while(input.e != input.w &&
-80100959:	80 ba 80 fe 10 80 0a 	cmpb   $0xa,-0x7fef0180(%edx)
+80100959:	80 ba 80 ee 10 80 0a 	cmpb   $0xa,-0x7fef1180(%edx)
 80100960:	0f 84 51 ff ff ff    	je     801008b7 <consoleintr+0x37>
   if(panicked){
-80100966:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
+80100966:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
         input.e--;
-8010096c:	a3 08 ff 10 80       	mov    %eax,0x8010ff08
+8010096c:	a3 08 ef 10 80       	mov    %eax,0x8010ef08
   if(panicked){
 80100971:	85 d2                	test   %edx,%edx
 80100973:	74 33                	je     801009a8 <consoleintr+0x128>
@@ -1117,14 +1117,14 @@
 80100978:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010097f:	90                   	nop
       if(input.e != input.w){
-80100980:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
-80100985:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
+80100980:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+80100985:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
 8010098b:	0f 84 26 ff ff ff    	je     801008b7 <consoleintr+0x37>
         input.e--;
 80100991:	83 e8 01             	sub    $0x1,%eax
-80100994:	a3 08 ff 10 80       	mov    %eax,0x8010ff08
+80100994:	a3 08 ef 10 80       	mov    %eax,0x8010ef08
   if(panicked){
-80100999:	a1 58 ff 10 80       	mov    0x8010ff58,%eax
+80100999:	a1 58 ef 10 80       	mov    0x8010ef58,%eax
 8010099e:	85 c0                	test   %eax,%eax
 801009a0:	74 56                	je     801009f8 <consoleintr+0x178>
 801009a2:	fa                   	cli    
@@ -1134,14 +1134,14 @@
 801009a8:	b8 00 01 00 00       	mov    $0x100,%eax
 801009ad:	e8 4e fa ff ff       	call   80100400 <consputc.part.0>
       while(input.e != input.w &&
-801009b2:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
-801009b7:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
+801009b2:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+801009b7:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
 801009bd:	75 92                	jne    80100951 <consoleintr+0xd1>
 801009bf:	e9 f3 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
 801009c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   release(&cons.lock);
 801009c8:	83 ec 0c             	sub    $0xc,%esp
-801009cb:	68 20 ff 10 80       	push   $0x8010ff20
+801009cb:	68 20 ef 10 80       	push   $0x8010ef20
 801009d0:	e8 6b 3b 00 00       	call   80104540 <release>
   if(doprocdump) {
 801009d5:	83 c4 10             	add    $0x10,%esp
@@ -1171,7 +1171,7 @@
     procdump();  // now call procdump() wo. cons.lock held
 80100a0e:	e9 cd 37 00 00       	jmp    801041e0 <procdump>
         input.buf[input.e++ % INPUT_BUF] = c;
-80100a13:	c6 80 80 fe 10 80 0a 	movb   $0xa,-0x7fef0180(%eax)
+80100a13:	c6 80 80 ee 10 80 0a 	movb   $0xa,-0x7fef1180(%eax)
   if(panicked){
 80100a1a:	85 d2                	test   %edx,%edx
 80100a1c:	74 0a                	je     80100a28 <consoleintr+0x1a8>
@@ -1182,13 +1182,13 @@
 80100a28:	b8 0a 00 00 00       	mov    $0xa,%eax
 80100a2d:	e8 ce f9 ff ff       	call   80100400 <consputc.part.0>
           input.w = input.e;
-80100a32:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
+80100a32:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
           wakeup(&input.r);
 80100a37:	83 ec 0c             	sub    $0xc,%esp
           input.w = input.e;
-80100a3a:	a3 04 ff 10 80       	mov    %eax,0x8010ff04
+80100a3a:	a3 04 ef 10 80       	mov    %eax,0x8010ef04
           wakeup(&input.r);
-80100a3f:	68 00 ff 10 80       	push   $0x8010ff00
+80100a3f:	68 00 ef 10 80       	push   $0x8010ef00
 80100a44:	e8 b7 36 00 00       	call   80104100 <wakeup>
 80100a49:	83 c4 10             	add    $0x10,%esp
 80100a4c:	e9 66 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
@@ -1205,8 +1205,8 @@
 80100a61:	89 e5                	mov    %esp,%ebp
 80100a63:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a66:	68 88 72 10 80       	push   $0x80107288
-80100a6b:	68 20 ff 10 80       	push   $0x8010ff20
+80100a66:	68 08 72 10 80       	push   $0x80107208
+80100a6b:	68 20 ef 10 80       	push   $0x8010ef20
 80100a70:	e8 5b 39 00 00       	call   801043d0 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
@@ -1219,13 +1219,13 @@
 80100a77:	6a 00                	push   $0x0
 80100a79:	6a 01                	push   $0x1
   devsw[CONSOLE].write = consolewrite;
-80100a7b:	c7 05 0c 09 11 80 90 	movl   $0x80100590,0x8011090c
+80100a7b:	c7 05 0c f9 10 80 90 	movl   $0x80100590,0x8010f90c
 80100a82:	05 10 80 
   devsw[CONSOLE].read = consoleread;
-80100a85:	c7 05 08 09 11 80 80 	movl   $0x80100280,0x80110908
+80100a85:	c7 05 08 f9 10 80 80 	movl   $0x80100280,0x8010f908
 80100a8c:	02 10 80 
   cons.locking = 1;
-80100a8f:	c7 05 54 ff 10 80 01 	movl   $0x1,0x8010ff54
+80100a8f:	c7 05 54 ef 10 80 01 	movl   $0x1,0x8010ef54
 80100a96:	00 00 00 
   ioapicenable(IRQ_KBD, 0);
 80100a99:	e8 e2 19 00 00       	call   80102480 <ioapicenable>
@@ -1323,7 +1323,7 @@
 80100b2f:	45 4c 46 
 80100b32:	75 d2                	jne    80100b06 <exec+0x56>
   if((pgdir = setupkvm()) == 0)
-80100b34:	e8 97 63 00 00       	call   80106ed0 <setupkvm>
+80100b34:	e8 07 63 00 00       	call   80106e40 <setupkvm>
 80100b39:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b3f:	85 c0                	test   %eax,%eax
 80100b41:	74 c3                	je     80100b06 <exec+0x56>
@@ -1355,7 +1355,7 @@
 80100b96:	50                   	push   %eax
 80100b97:	ff b5 f0 fe ff ff    	push   -0x110(%ebp)
 80100b9d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100ba3:	e8 48 61 00 00       	call   80106cf0 <allocuvm>
+80100ba3:	e8 b8 60 00 00       	call   80106c60 <allocuvm>
 80100ba8:	83 c4 10             	add    $0x10,%esp
 80100bab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100bb1:	85 c0                	test   %eax,%eax
@@ -1371,7 +1371,7 @@
 80100bd1:	53                   	push   %ebx
 80100bd2:	50                   	push   %eax
 80100bd3:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100bd9:	e8 22 60 00 00       	call   80106c00 <loaduvm>
+80100bd9:	e8 92 5f 00 00       	call   80106b70 <loaduvm>
 80100bde:	83 c4 20             	add    $0x20,%esp
 80100be1:	85 c0                	test   %eax,%eax
 80100be3:	78 2d                	js     80100c12 <exec+0x162>
@@ -1394,7 +1394,7 @@
     freevm(pgdir);
 80100c12:	83 ec 0c             	sub    $0xc,%esp
 80100c15:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100c1b:	e8 30 62 00 00       	call   80106e50 <freevm>
+80100c1b:	e8 a0 61 00 00       	call   80106dc0 <freevm>
   if(ip){
 80100c20:	83 c4 10             	add    $0x10,%esp
 80100c23:	e9 de fe ff ff       	jmp    80100b06 <exec+0x56>
@@ -1418,7 +1418,7 @@
 80100c5a:	57                   	push   %edi
 80100c5b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c61:	57                   	push   %edi
-80100c62:	e8 89 60 00 00       	call   80106cf0 <allocuvm>
+80100c62:	e8 f9 5f 00 00       	call   80106c60 <allocuvm>
 80100c67:	83 c4 10             	add    $0x10,%esp
 80100c6a:	89 c6                	mov    %eax,%esi
 80100c6c:	85 c0                	test   %eax,%eax
@@ -1434,7 +1434,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c81:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c83:	e8 e8 62 00 00       	call   80106f70 <clearpteu>
+80100c83:	e8 58 62 00 00       	call   80106ee0 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c88:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c8b:	83 c4 10             	add    $0x10,%esp
@@ -1482,7 +1482,7 @@
 80100cf3:	ff 34 b8             	push   (%eax,%edi,4)
 80100cf6:	53                   	push   %ebx
 80100cf7:	56                   	push   %esi
-80100cf8:	e8 43 64 00 00       	call   80107140 <copyout>
+80100cf8:	e8 b3 63 00 00       	call   801070b0 <copyout>
 80100cfd:	83 c4 20             	add    $0x20,%esp
 80100d00:	85 c0                	test   %eax,%eax
 80100d02:	79 ac                	jns    80100cb0 <exec+0x200>
@@ -1490,7 +1490,7 @@
     freevm(pgdir);
 80100d08:	83 ec 0c             	sub    $0xc,%esp
 80100d0b:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100d11:	e8 3a 61 00 00       	call   80106e50 <freevm>
+80100d11:	e8 aa 60 00 00       	call   80106dc0 <freevm>
 80100d16:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100d19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1521,7 +1521,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d5d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d63:	e8 d8 63 00 00       	call   80107140 <copyout>
+80100d63:	e8 48 63 00 00       	call   801070b0 <copyout>
 80100d68:	83 c4 10             	add    $0x10,%esp
 80100d6b:	85 c0                	test   %eax,%eax
 80100d6d:	78 99                	js     80100d08 <exec+0x258>
@@ -1571,10 +1571,10 @@
 80100dc7:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100dca:	89 0c 24             	mov    %ecx,(%esp)
-80100dcd:	e8 9e 5c 00 00       	call   80106a70 <switchuvm>
+80100dcd:	e8 0e 5c 00 00       	call   801069e0 <switchuvm>
   freevm(oldpgdir);
 80100dd2:	89 3c 24             	mov    %edi,(%esp)
-80100dd5:	e8 76 60 00 00       	call   80106e50 <freevm>
+80100dd5:	e8 e6 5f 00 00       	call   80106dc0 <freevm>
   return 0;
 80100dda:	83 c4 10             	add    $0x10,%esp
 80100ddd:	31 c0                	xor    %eax,%eax
@@ -1583,7 +1583,7 @@
 80100de4:	e8 e7 1f 00 00       	call   80102dd0 <end_op>
     cprintf("exec: fail\n");
 80100de9:	83 ec 0c             	sub    $0xc,%esp
-80100dec:	68 a1 72 10 80       	push   $0x801072a1
+80100dec:	68 21 72 10 80       	push   $0x80107221
 80100df1:	e8 aa f8 ff ff       	call   801006a0 <cprintf>
     return -1;
 80100df6:	83 c4 10             	add    $0x10,%esp
@@ -1606,8 +1606,8 @@
 80100e11:	89 e5                	mov    %esp,%ebp
 80100e13:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100e16:	68 ad 72 10 80       	push   $0x801072ad
-80100e1b:	68 60 ff 10 80       	push   $0x8010ff60
+80100e16:	68 2d 72 10 80       	push   $0x8010722d
+80100e1b:	68 60 ef 10 80       	push   $0x8010ef60
 80100e20:	e8 ab 35 00 00       	call   801043d0 <initlock>
 }
 80100e25:	83 c4 10             	add    $0x10,%esp
@@ -1628,11 +1628,11 @@
 
   acquire(&ftable.lock);
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100e34:	bb 94 ff 10 80       	mov    $0x8010ff94,%ebx
+80100e34:	bb 94 ef 10 80       	mov    $0x8010ef94,%ebx
 {
 80100e39:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
-80100e3c:	68 60 ff 10 80       	push   $0x8010ff60
+80100e3c:	68 60 ef 10 80       	push   $0x8010ef60
 80100e41:	e8 5a 37 00 00       	call   801045a0 <acquire>
 80100e46:	83 c4 10             	add    $0x10,%esp
 80100e49:	eb 10                	jmp    80100e5b <filealloc+0x2b>
@@ -1640,7 +1640,7 @@
 80100e4f:	90                   	nop
   for(f = ftable.file; f < ftable.file + NFILE; f++){
 80100e50:	83 c3 18             	add    $0x18,%ebx
-80100e53:	81 fb f4 08 11 80    	cmp    $0x801108f4,%ebx
+80100e53:	81 fb f4 f8 10 80    	cmp    $0x8010f8f4,%ebx
 80100e59:	74 25                	je     80100e80 <filealloc+0x50>
     if(f->ref == 0){
 80100e5b:	8b 43 04             	mov    0x4(%ebx),%eax
@@ -1652,7 +1652,7 @@
       f->ref = 1;
 80100e65:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-80100e6c:	68 60 ff 10 80       	push   $0x8010ff60
+80100e6c:	68 60 ef 10 80       	push   $0x8010ef60
 80100e71:	e8 ca 36 00 00       	call   80104540 <release>
       return f;
     }
@@ -1672,7 +1672,7 @@
   return 0;
 80100e83:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
-80100e85:	68 60 ff 10 80       	push   $0x8010ff60
+80100e85:	68 60 ef 10 80       	push   $0x8010ef60
 80100e8a:	e8 b1 36 00 00       	call   80104540 <release>
 }
 80100e8f:	89 d8                	mov    %ebx,%eax
@@ -1696,7 +1696,7 @@
 80100ea4:	83 ec 10             	sub    $0x10,%esp
 80100ea7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
-80100eaa:	68 60 ff 10 80       	push   $0x8010ff60
+80100eaa:	68 60 ef 10 80       	push   $0x8010ef60
 80100eaf:	e8 ec 36 00 00       	call   801045a0 <acquire>
   if(f->ref < 1)
 80100eb4:	8b 43 04             	mov    0x4(%ebx),%eax
@@ -1711,7 +1711,7 @@
   f->ref++;
 80100ec4:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
-80100ec7:	68 60 ff 10 80       	push   $0x8010ff60
+80100ec7:	68 60 ef 10 80       	push   $0x8010ef60
 80100ecc:	e8 6f 36 00 00       	call   80104540 <release>
   return f;
 }
@@ -1721,7 +1721,7 @@
 80100ed7:	c3                   	ret    
     panic("filedup");
 80100ed8:	83 ec 0c             	sub    $0xc,%esp
-80100edb:	68 b4 72 10 80       	push   $0x801072b4
+80100edb:	68 34 72 10 80       	push   $0x80107234
 80100ee0:	e8 9b f4 ff ff       	call   80100380 <panic>
 80100ee5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1742,7 +1742,7 @@
   struct file ff;
 
   acquire(&ftable.lock);
-80100efc:	68 60 ff 10 80       	push   $0x8010ff60
+80100efc:	68 60 ef 10 80       	push   $0x8010ef60
 80100f01:	e8 9a 36 00 00       	call   801045a0 <acquire>
   if(f->ref < 1)
 80100f06:	8b 53 04             	mov    0x4(%ebx),%edx
@@ -1772,7 +1772,7 @@
 80100f2e:	88 45 e7             	mov    %al,-0x19(%ebp)
 80100f31:	8b 43 10             	mov    0x10(%ebx),%eax
   release(&ftable.lock);
-80100f34:	68 60 ff 10 80       	push   $0x8010ff60
+80100f34:	68 60 ef 10 80       	push   $0x8010ef60
   ff = *f;
 80100f39:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
@@ -1800,7 +1800,7 @@
 80100f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f5d:	8d 76 00             	lea    0x0(%esi),%esi
     release(&ftable.lock);
-80100f60:	c7 45 08 60 ff 10 80 	movl   $0x8010ff60,0x8(%ebp)
+80100f60:	c7 45 08 60 ef 10 80 	movl   $0x8010ef60,0x8(%ebp)
 }
 80100f67:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80100f6a:	5b                   	pop    %ebx
@@ -1845,7 +1845,7 @@
 80100fb8:	c3                   	ret    
     panic("fileclose");
 80100fb9:	83 ec 0c             	sub    $0xc,%esp
-80100fbc:	68 bc 72 10 80       	push   $0x801072bc
+80100fbc:	68 3c 72 10 80       	push   $0x8010723c
 80100fc1:	e8 ba f3 ff ff       	call   80100380 <panic>
 80100fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100fcd:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1976,7 +1976,7 @@
 8010109d:	eb d7                	jmp    80101076 <fileread+0x56>
   panic("fileread");
 8010109f:	83 ec 0c             	sub    $0xc,%esp
-801010a2:	68 c6 72 10 80       	push   $0x801072c6
+801010a2:	68 46 72 10 80       	push   $0x80107246
 801010a7:	e8 d4 f2 ff ff       	call   80100380 <panic>
 801010ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2095,7 +2095,7 @@
 80101172:	75 1b                	jne    8010118f <filewrite+0xdf>
         panic("short filewrite");
 80101174:	83 ec 0c             	sub    $0xc,%esp
-80101177:	68 cf 72 10 80       	push   $0x801072cf
+80101177:	68 4f 72 10 80       	push   $0x8010724f
 8010117c:	e8 ff f1 ff ff       	call   80100380 <panic>
 80101181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     }
@@ -2126,7 +2126,7 @@
 801011a9:	e9 22 24 00 00       	jmp    801035d0 <pipewrite>
   panic("filewrite");
 801011ae:	83 ec 0c             	sub    $0xc,%esp
-801011b1:	68 d5 72 10 80       	push   $0x801072d5
+801011b1:	68 55 72 10 80       	push   $0x80107255
 801011b6:	e8 c5 f1 ff ff       	call   80100380 <panic>
 801011bb:	66 90                	xchg   %ax,%ax
 801011bd:	66 90                	xchg   %ax,%ax
@@ -2147,7 +2147,7 @@
   bp = bread(dev, BBLOCK(b, sb));
 801011c3:	89 d0                	mov    %edx,%eax
 801011c5:	c1 e8 0c             	shr    $0xc,%eax
-801011c8:	03 05 cc 25 11 80    	add    0x801125cc,%eax
+801011c8:	03 05 cc 15 11 80    	add    0x801115cc,%eax
 {
 801011ce:	89 e5                	mov    %esp,%ebp
 801011d0:	56                   	push   %esi
@@ -2200,7 +2200,7 @@
 80101223:	c3                   	ret    
     panic("freeing free block");
 80101224:	83 ec 0c             	sub    $0xc,%esp
-80101227:	68 df 72 10 80       	push   $0x801072df
+80101227:	68 5f 72 10 80       	push   $0x8010725f
 8010122c:	e8 4f f1 ff ff       	call   80100380 <panic>
 80101231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2215,7 +2215,7 @@
 80101245:	53                   	push   %ebx
 80101246:	83 ec 1c             	sub    $0x1c,%esp
   for(b = 0; b < sb.size; b += BPB){
-80101249:	8b 0d b4 25 11 80    	mov    0x801125b4,%ecx
+80101249:	8b 0d b4 15 11 80    	mov    0x801115b4,%ecx
 {
 8010124f:	89 45 d8             	mov    %eax,-0x28(%ebp)
   for(b = 0; b < sb.size; b += BPB){
@@ -2227,14 +2227,14 @@
 80101264:	83 ec 08             	sub    $0x8,%esp
 80101267:	89 f0                	mov    %esi,%eax
 80101269:	c1 f8 0c             	sar    $0xc,%eax
-8010126c:	03 05 cc 25 11 80    	add    0x801125cc,%eax
+8010126c:	03 05 cc 15 11 80    	add    0x801115cc,%eax
 80101272:	50                   	push   %eax
 80101273:	ff 75 d8             	push   -0x28(%ebp)
 80101276:	e8 55 ee ff ff       	call   801000d0 <bread>
 8010127b:	83 c4 10             	add    $0x10,%esp
 8010127e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101281:	a1 b4 25 11 80       	mov    0x801125b4,%eax
+80101281:	a1 b4 15 11 80       	mov    0x801115b4,%eax
 80101286:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80101289:	31 c0                	xor    %eax,%eax
 8010128b:	eb 2f                	jmp    801012bc <balloc+0x7c>
@@ -2269,11 +2269,11 @@
 801012cc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
 801012d3:	83 c4 10             	add    $0x10,%esp
 801012d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801012d9:	39 05 b4 25 11 80    	cmp    %eax,0x801125b4
+801012d9:	39 05 b4 15 11 80    	cmp    %eax,0x801115b4
 801012df:	77 80                	ja     80101261 <balloc+0x21>
   panic("balloc: out of blocks");
 801012e1:	83 ec 0c             	sub    $0xc,%esp
-801012e4:	68 f2 72 10 80       	push   $0x801072f2
+801012e4:	68 72 72 10 80       	push   $0x80107272
 801012e9:	e8 92 f0 ff ff       	call   80100380 <panic>
 801012ee:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2345,12 +2345,12 @@
 {
 80101359:	53                   	push   %ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010135a:	bb 94 09 11 80       	mov    $0x80110994,%ebx
+8010135a:	bb 94 f9 10 80       	mov    $0x8010f994,%ebx
 {
 8010135f:	83 ec 28             	sub    $0x28,%esp
 80101362:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-80101365:	68 60 09 11 80       	push   $0x80110960
+80101365:	68 60 f9 10 80       	push   $0x8010f960
 8010136a:	e8 31 32 00 00       	call   801045a0 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010136f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
@@ -2364,7 +2364,7 @@
 80101382:	74 6c                	je     801013f0 <iget+0xa0>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 80101384:	81 c3 90 00 00 00    	add    $0x90,%ebx
-8010138a:	81 fb b4 25 11 80    	cmp    $0x801125b4,%ebx
+8010138a:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
 80101390:	73 26                	jae    801013b8 <iget+0x68>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 80101392:	8b 43 08             	mov    0x8(%ebx),%eax
@@ -2382,7 +2382,7 @@
 801013a1:	89 de                	mov    %ebx,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 801013a3:	81 c3 90 00 00 00    	add    $0x90,%ebx
-801013a9:	81 fb b4 25 11 80    	cmp    $0x801125b4,%ebx
+801013a9:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
 801013af:	72 e1                	jb     80101392 <iget+0x42>
 801013b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       empty = ip;
@@ -2408,7 +2408,7 @@
   ip->valid = 0;
 801013cb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
-801013d2:	68 60 09 11 80       	push   $0x80110960
+801013d2:	68 60 f9 10 80       	push   $0x8010f960
 801013d7:	e8 64 31 00 00       	call   80104540 <release>
 
   return ip;
@@ -2432,7 +2432,7 @@
       return ip;
 801013fb:	89 de                	mov    %ebx,%esi
       release(&icache.lock);
-801013fd:	68 60 09 11 80       	push   $0x80110960
+801013fd:	68 60 f9 10 80       	push   $0x8010f960
       ip->ref++;
 80101402:	89 43 08             	mov    %eax,0x8(%ebx)
       release(&icache.lock);
@@ -2449,7 +2449,7 @@
 80101416:	c3                   	ret    
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 80101417:	81 c3 90 00 00 00    	add    $0x90,%ebx
-8010141d:	81 fb b4 25 11 80    	cmp    $0x801125b4,%ebx
+8010141d:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
 80101423:	73 10                	jae    80101435 <iget+0xe5>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 80101425:	8b 43 08             	mov    0x8(%ebx),%eax
@@ -2458,7 +2458,7 @@
 80101430:	e9 68 ff ff ff       	jmp    8010139d <iget+0x4d>
     panic("iget: no inodes");
 80101435:	83 ec 0c             	sub    $0xc,%esp
-80101438:	68 08 73 10 80       	push   $0x80107308
+80101438:	68 88 72 10 80       	push   $0x80107288
 8010143d:	e8 3e ef ff ff       	call   80100380 <panic>
 80101442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2579,7 +2579,7 @@
 80101511:	c3                   	ret    
   panic("bmap: out of range");
 80101512:	83 ec 0c             	sub    $0xc,%esp
-80101515:	68 18 73 10 80       	push   $0x80107318
+80101515:	68 98 72 10 80       	push   $0x80107298
 8010151a:	e8 61 ee ff ff       	call   80100380 <panic>
 8010151f:	90                   	nop
 
@@ -2623,18 +2623,18 @@
 80101560:	55                   	push   %ebp
 80101561:	89 e5                	mov    %esp,%ebp
 80101563:	53                   	push   %ebx
-80101564:	bb a0 09 11 80       	mov    $0x801109a0,%ebx
+80101564:	bb a0 f9 10 80       	mov    $0x8010f9a0,%ebx
 80101569:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-8010156c:	68 2b 73 10 80       	push   $0x8010732b
-80101571:	68 60 09 11 80       	push   $0x80110960
+8010156c:	68 ab 72 10 80       	push   $0x801072ab
+80101571:	68 60 f9 10 80       	push   $0x8010f960
 80101576:	e8 55 2e 00 00       	call   801043d0 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010157b:	83 c4 10             	add    $0x10,%esp
 8010157e:	66 90                	xchg   %ax,%ax
     initsleeplock(&icache.inode[i].lock, "inode");
 80101580:	83 ec 08             	sub    $0x8,%esp
-80101583:	68 32 73 10 80       	push   $0x80107332
+80101583:	68 b2 72 10 80       	push   $0x801072b2
 80101588:	53                   	push   %ebx
   for(i = 0; i < NINODE; i++) {
 80101589:	81 c3 90 00 00 00    	add    $0x90,%ebx
@@ -2642,7 +2642,7 @@
 8010158f:	e8 0c 2d 00 00       	call   801042a0 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 80101594:	83 c4 10             	add    $0x10,%esp
-80101597:	81 fb c0 25 11 80    	cmp    $0x801125c0,%ebx
+80101597:	81 fb c0 15 11 80    	cmp    $0x801115c0,%ebx
 8010159d:	75 e1                	jne    80101580 <iinit+0x20>
   bp = bread(dev, 1);
 8010159f:	83 ec 08             	sub    $0x8,%esp
@@ -2657,20 +2657,20 @@
 801015b1:	8d 40 5c             	lea    0x5c(%eax),%eax
 801015b4:	6a 1c                	push   $0x1c
 801015b6:	50                   	push   %eax
-801015b7:	68 b4 25 11 80       	push   $0x801125b4
+801015b7:	68 b4 15 11 80       	push   $0x801115b4
 801015bc:	e8 3f 31 00 00       	call   80104700 <memmove>
   brelse(bp);
 801015c1:	89 1c 24             	mov    %ebx,(%esp)
 801015c4:	e8 27 ec ff ff       	call   801001f0 <brelse>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-801015c9:	ff 35 cc 25 11 80    	push   0x801125cc
-801015cf:	ff 35 c8 25 11 80    	push   0x801125c8
-801015d5:	ff 35 c4 25 11 80    	push   0x801125c4
-801015db:	ff 35 c0 25 11 80    	push   0x801125c0
-801015e1:	ff 35 bc 25 11 80    	push   0x801125bc
-801015e7:	ff 35 b8 25 11 80    	push   0x801125b8
-801015ed:	ff 35 b4 25 11 80    	push   0x801125b4
-801015f3:	68 98 73 10 80       	push   $0x80107398
+801015c9:	ff 35 cc 15 11 80    	push   0x801115cc
+801015cf:	ff 35 c8 15 11 80    	push   0x801115c8
+801015d5:	ff 35 c4 15 11 80    	push   0x801115c4
+801015db:	ff 35 c0 15 11 80    	push   0x801115c0
+801015e1:	ff 35 bc 15 11 80    	push   0x801115bc
+801015e7:	ff 35 b8 15 11 80    	push   0x801115b8
+801015ed:	ff 35 b4 15 11 80    	push   0x801115b4
+801015f3:	68 18 73 10 80       	push   $0x80107318
 801015f8:	e8 a3 f0 ff ff       	call   801006a0 <cprintf>
 }
 801015fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2690,7 +2690,7 @@
 80101616:	83 ec 1c             	sub    $0x1c,%esp
 80101619:	8b 45 0c             	mov    0xc(%ebp),%eax
   for(inum = 1; inum < sb.ninodes; inum++){
-8010161c:	83 3d bc 25 11 80 01 	cmpl   $0x1,0x801125bc
+8010161c:	83 3d bc 15 11 80 01 	cmpl   $0x1,0x801115bc
 {
 80101623:	8b 75 08             	mov    0x8(%ebp),%esi
 80101626:	89 45 e4             	mov    %eax,-0x1c(%ebp)
@@ -2709,13 +2709,13 @@
 80101647:	e8 a4 eb ff ff       	call   801001f0 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
 8010164c:	83 c4 10             	add    $0x10,%esp
-8010164f:	3b 3d bc 25 11 80    	cmp    0x801125bc,%edi
+8010164f:	3b 3d bc 15 11 80    	cmp    0x801115bc,%edi
 80101655:	73 69                	jae    801016c0 <ialloc+0xb0>
     bp = bread(dev, IBLOCK(inum, sb));
 80101657:	89 f8                	mov    %edi,%eax
 80101659:	83 ec 08             	sub    $0x8,%esp
 8010165c:	c1 e8 03             	shr    $0x3,%eax
-8010165f:	03 05 c8 25 11 80    	add    0x801125c8,%eax
+8010165f:	03 05 c8 15 11 80    	add    0x801115c8,%eax
 80101665:	50                   	push   %eax
 80101666:	56                   	push   %esi
 80101667:	e8 64 ea ff ff       	call   801000d0 <bread>
@@ -2766,7 +2766,7 @@
 801016bb:	e9 90 fc ff ff       	jmp    80101350 <iget>
   panic("ialloc: no inodes");
 801016c0:	83 ec 0c             	sub    $0xc,%esp
-801016c3:	68 38 73 10 80       	push   $0x80107338
+801016c3:	68 b8 72 10 80       	push   $0x801072b8
 801016c8:	e8 b3 ec ff ff       	call   80100380 <panic>
 801016cd:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2784,7 +2784,7 @@
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
 801016de:	83 ec 08             	sub    $0x8,%esp
 801016e1:	c1 e8 03             	shr    $0x3,%eax
-801016e4:	03 05 c8 25 11 80    	add    0x801125c8,%eax
+801016e4:	03 05 c8 15 11 80    	add    0x801115c8,%eax
 801016ea:	50                   	push   %eax
 801016eb:	ff 73 a4             	push   -0x5c(%ebx)
 801016ee:	e8 dd e9 ff ff       	call   801000d0 <bread>
@@ -2844,12 +2844,12 @@
 80101754:	83 ec 10             	sub    $0x10,%esp
 80101757:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
-8010175a:	68 60 09 11 80       	push   $0x80110960
+8010175a:	68 60 f9 10 80       	push   $0x8010f960
 8010175f:	e8 3c 2e 00 00       	call   801045a0 <acquire>
   ip->ref++;
 80101764:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
-80101768:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+80101768:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
 8010176f:	e8 cc 2d 00 00       	call   80104540 <release>
 }
 80101774:	89 d8                	mov    %ebx,%eax
@@ -2894,7 +2894,7 @@
 801017c0:	8b 43 04             	mov    0x4(%ebx),%eax
 801017c3:	83 ec 08             	sub    $0x8,%esp
 801017c6:	c1 e8 03             	shr    $0x3,%eax
-801017c9:	03 05 c8 25 11 80    	add    0x801125c8,%eax
+801017c9:	03 05 c8 15 11 80    	add    0x801115c8,%eax
 801017cf:	50                   	push   %eax
 801017d0:	ff 33                	push   (%ebx)
 801017d2:	e8 f9 e8 ff ff       	call   801000d0 <bread>
@@ -2943,11 +2943,11 @@
 80101834:	0f 85 77 ff ff ff    	jne    801017b1 <ilock+0x31>
       panic("ilock: no type");
 8010183a:	83 ec 0c             	sub    $0xc,%esp
-8010183d:	68 50 73 10 80       	push   $0x80107350
+8010183d:	68 d0 72 10 80       	push   $0x801072d0
 80101842:	e8 39 eb ff ff       	call   80100380 <panic>
     panic("ilock");
 80101847:	83 ec 0c             	sub    $0xc,%esp
-8010184a:	68 4a 73 10 80       	push   $0x8010734a
+8010184a:	68 ca 72 10 80       	push   $0x801072ca
 8010184f:	e8 2c eb ff ff       	call   80100380 <panic>
 80101854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010185b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2984,7 +2984,7 @@
 8010188f:	e9 ac 2a 00 00       	jmp    80104340 <releasesleep>
     panic("iunlock");
 80101894:	83 ec 0c             	sub    $0xc,%esp
-80101897:	68 5f 73 10 80       	push   $0x8010735f
+80101897:	68 df 72 10 80       	push   $0x801072df
 8010189c:	e8 df ea ff ff       	call   80100380 <panic>
 801018a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801018a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3015,13 +3015,13 @@
 801018d9:	57                   	push   %edi
 801018da:	e8 61 2a 00 00       	call   80104340 <releasesleep>
   acquire(&icache.lock);
-801018df:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+801018df:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
 801018e6:	e8 b5 2c 00 00       	call   801045a0 <acquire>
   ip->ref--;
 801018eb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
 801018ef:	83 c4 10             	add    $0x10,%esp
-801018f2:	c7 45 08 60 09 11 80 	movl   $0x80110960,0x8(%ebp)
+801018f2:	c7 45 08 60 f9 10 80 	movl   $0x8010f960,0x8(%ebp)
 }
 801018f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
 801018fc:	5b                   	pop    %ebx
@@ -3033,12 +3033,12 @@
 80101905:	8d 76 00             	lea    0x0(%esi),%esi
     acquire(&icache.lock);
 80101908:	83 ec 0c             	sub    $0xc,%esp
-8010190b:	68 60 09 11 80       	push   $0x80110960
+8010190b:	68 60 f9 10 80       	push   $0x8010f960
 80101910:	e8 8b 2c 00 00       	call   801045a0 <acquire>
     int r = ip->ref;
 80101915:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
-80101918:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+80101918:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
 8010191f:	e8 1c 2c 00 00       	call   80104540 <release>
     if(r == 1){
 80101924:	83 c4 10             	add    $0x10,%esp
@@ -3179,7 +3179,7 @@
 80101a4b:	e9 60 fe ff ff       	jmp    801018b0 <iput>
     panic("iunlock");
 80101a50:	83 ec 0c             	sub    $0xc,%esp
-80101a53:	68 5f 73 10 80       	push   $0x8010735f
+80101a53:	68 df 72 10 80       	push   $0x801072df
 80101a58:	e8 23 e9 ff ff       	call   80100380 <panic>
 80101a5d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -3336,7 +3336,7 @@
 80101b60:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101b64:	66 83 f8 09          	cmp    $0x9,%ax
 80101b68:	77 17                	ja     80101b81 <readi+0xf1>
-80101b6a:	8b 04 c5 00 09 11 80 	mov    -0x7feef700(,%eax,8),%eax
+80101b6a:	8b 04 c5 00 f9 10 80 	mov    -0x7fef0700(,%eax,8),%eax
 80101b71:	85 c0                	test   %eax,%eax
 80101b73:	74 0c                	je     80101b81 <readi+0xf1>
     return devsw[ip->major].read(ip, dst, n);
@@ -3480,7 +3480,7 @@
 80101c70:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101c74:	66 83 f8 09          	cmp    $0x9,%ax
 80101c78:	77 32                	ja     80101cac <writei+0x11c>
-80101c7a:	8b 04 c5 04 09 11 80 	mov    -0x7feef6fc(,%eax,8),%eax
+80101c7a:	8b 04 c5 04 f9 10 80 	mov    -0x7fef06fc(,%eax,8),%eax
 80101c81:	85 c0                	test   %eax,%eax
 80101c83:	74 27                	je     80101cac <writei+0x11c>
     return devsw[ip->major].write(ip, src, n);
@@ -3629,11 +3629,11 @@
 80101d6e:	c3                   	ret    
       panic("dirlookup read");
 80101d6f:	83 ec 0c             	sub    $0xc,%esp
-80101d72:	68 79 73 10 80       	push   $0x80107379
+80101d72:	68 f9 72 10 80       	push   $0x801072f9
 80101d77:	e8 04 e6 ff ff       	call   80100380 <panic>
     panic("dirlookup not DIR");
 80101d7c:	83 ec 0c             	sub    $0xc,%esp
-80101d7f:	68 67 73 10 80       	push   $0x80107367
+80101d7f:	68 e7 72 10 80       	push   $0x801072e7
 80101d84:	e8 f7 e5 ff ff       	call   80100380 <panic>
 80101d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3669,12 +3669,12 @@
     ip = idup(myproc()->cwd);
 80101db2:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
-80101db5:	68 60 09 11 80       	push   $0x80110960
+80101db5:	68 60 f9 10 80       	push   $0x8010f960
 80101dba:	e8 e1 27 00 00       	call   801045a0 <acquire>
   ip->ref++;
 80101dbf:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
-80101dc3:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+80101dc3:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
 80101dca:	e8 71 27 00 00       	call   80104540 <release>
 80101dcf:	83 c4 10             	add    $0x10,%esp
 80101dd2:	eb 07                	jmp    80101ddb <namex+0x4b>
@@ -3923,7 +3923,7 @@
 80101fc7:	e9 2f ff ff ff       	jmp    80101efb <namex+0x16b>
     panic("iunlock");
 80101fcc:	83 ec 0c             	sub    $0xc,%esp
-80101fcf:	68 5f 73 10 80       	push   $0x8010735f
+80101fcf:	68 df 72 10 80       	push   $0x801072df
 80101fd4:	e8 a7 e3 ff ff       	call   80100380 <panic>
 80101fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -4009,11 +4009,11 @@
 80102076:	eb e5                	jmp    8010205d <dirlink+0x7d>
       panic("dirlink read");
 80102078:	83 ec 0c             	sub    $0xc,%esp
-8010207b:	68 88 73 10 80       	push   $0x80107388
+8010207b:	68 08 73 10 80       	push   $0x80107308
 80102080:	e8 fb e2 ff ff       	call   80100380 <panic>
     panic("dirlink");
 80102085:	83 ec 0c             	sub    $0xc,%esp
-80102088:	68 62 79 10 80       	push   $0x80107962
+80102088:	68 de 78 10 80       	push   $0x801078de
 8010208d:	e8 ee e2 ff ff       	call   80100380 <panic>
 80102092:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4166,11 +4166,11 @@
 80102197:	c3                   	ret    
     panic("incorrect blockno");
 80102198:	83 ec 0c             	sub    $0xc,%esp
-8010219b:	68 f4 73 10 80       	push   $0x801073f4
+8010219b:	68 74 73 10 80       	push   $0x80107374
 801021a0:	e8 db e1 ff ff       	call   80100380 <panic>
     panic("idestart");
 801021a5:	83 ec 0c             	sub    $0xc,%esp
-801021a8:	68 eb 73 10 80       	push   $0x801073eb
+801021a8:	68 6b 73 10 80       	push   $0x8010736b
 801021ad:	e8 ce e1 ff ff       	call   80100380 <panic>
 801021b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801021b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4181,12 +4181,12 @@
 801021c1:	89 e5                	mov    %esp,%ebp
 801021c3:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-801021c6:	68 06 74 10 80       	push   $0x80107406
-801021cb:	68 00 26 11 80       	push   $0x80112600
+801021c6:	68 86 73 10 80       	push   $0x80107386
+801021cb:	68 00 16 11 80       	push   $0x80111600
 801021d0:	e8 fb 21 00 00       	call   801043d0 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 801021d5:	58                   	pop    %eax
-801021d6:	a1 84 27 11 80       	mov    0x80112784,%eax
+801021d6:	a1 84 17 11 80       	mov    0x80111784,%eax
 801021db:	5a                   	pop    %edx
 801021dc:	83 e8 01             	sub    $0x1,%eax
 801021df:	50                   	push   %eax
@@ -4218,7 +4218,7 @@
 80102216:	84 c0                	test   %al,%al
 80102218:	74 f6                	je     80102210 <ideinit+0x50>
       havedisk1 = 1;
-8010221a:	c7 05 e0 25 11 80 01 	movl   $0x1,0x801125e0
+8010221a:	c7 05 e0 15 11 80 01 	movl   $0x1,0x801115e0
 80102221:	00 00 00 
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80102224:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
@@ -4247,11 +4247,11 @@
 
   // First queued buffer is the active request.
   acquire(&idelock);
-80102249:	68 00 26 11 80       	push   $0x80112600
+80102249:	68 00 16 11 80       	push   $0x80111600
 8010224e:	e8 4d 23 00 00       	call   801045a0 <acquire>
 
   if((b = idequeue) == 0){
-80102253:	8b 1d e4 25 11 80    	mov    0x801125e4,%ebx
+80102253:	8b 1d e4 15 11 80    	mov    0x801115e4,%ebx
 80102259:	83 c4 10             	add    $0x10,%esp
 8010225c:	85 db                	test   %ebx,%ebx
 8010225e:	74 63                	je     801022c3 <ideintr+0x83>
@@ -4260,7 +4260,7 @@
   }
   idequeue = b->qnext;
 80102260:	8b 43 58             	mov    0x58(%ebx),%eax
-80102263:	a3 e4 25 11 80       	mov    %eax,0x801125e4
+80102263:	a3 e4 15 11 80       	mov    %eax,0x801115e4
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
@@ -4304,7 +4304,7 @@
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
-801022b2:	a1 e4 25 11 80       	mov    0x801125e4,%eax
+801022b2:	a1 e4 15 11 80       	mov    0x801115e4,%eax
 801022b7:	83 c4 10             	add    $0x10,%esp
 801022ba:	85 c0                	test   %eax,%eax
 801022bc:	74 05                	je     801022c3 <ideintr+0x83>
@@ -4312,7 +4312,7 @@
 801022be:	e8 1d fe ff ff       	call   801020e0 <idestart>
     release(&idelock);
 801022c3:	83 ec 0c             	sub    $0xc,%esp
-801022c6:	68 00 26 11 80       	push   $0x80112600
+801022c6:	68 00 16 11 80       	push   $0x80111600
 801022cb:	e8 70 22 00 00       	call   80104540 <release>
 
   release(&idelock);
@@ -4358,20 +4358,20 @@
 8010230c:	8b 53 04             	mov    0x4(%ebx),%edx
 8010230f:	85 d2                	test   %edx,%edx
 80102311:	74 0d                	je     80102320 <iderw+0x40>
-80102313:	a1 e0 25 11 80       	mov    0x801125e0,%eax
+80102313:	a1 e0 15 11 80       	mov    0x801115e0,%eax
 80102318:	85 c0                	test   %eax,%eax
 8010231a:	0f 84 87 00 00 00    	je     801023a7 <iderw+0xc7>
     panic("iderw: ide disk 1 not present");
 
   acquire(&idelock);  //DOC:acquire-lock
 80102320:	83 ec 0c             	sub    $0xc,%esp
-80102323:	68 00 26 11 80       	push   $0x80112600
+80102323:	68 00 16 11 80       	push   $0x80111600
 80102328:	e8 73 22 00 00       	call   801045a0 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-8010232d:	a1 e4 25 11 80       	mov    0x801125e4,%eax
+8010232d:	a1 e4 15 11 80       	mov    0x801115e4,%eax
   b->qnext = 0;
 80102332:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
@@ -4389,7 +4389,7 @@
 
   // Start disk if necessary.
   if(idequeue == b)
-8010234e:	39 1d e4 25 11 80    	cmp    %ebx,0x801125e4
+8010234e:	39 1d e4 15 11 80    	cmp    %ebx,0x801115e4
 80102354:	74 3a                	je     80102390 <iderw+0xb0>
     idestart(b);
 
@@ -4401,7 +4401,7 @@
 8010235e:	74 1b                	je     8010237b <iderw+0x9b>
     sleep(b, &idelock);
 80102360:	83 ec 08             	sub    $0x8,%esp
-80102363:	68 00 26 11 80       	push   $0x80112600
+80102363:	68 00 16 11 80       	push   $0x80111600
 80102368:	53                   	push   %ebx
 80102369:	e8 d2 1c 00 00       	call   80104040 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
@@ -4414,7 +4414,7 @@
 
 
   release(&idelock);
-8010237b:	c7 45 08 00 26 11 80 	movl   $0x80112600,0x8(%ebp)
+8010237b:	c7 45 08 00 16 11 80 	movl   $0x80111600,0x8(%ebp)
 }
 80102382:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102385:	c9                   	leave  
@@ -4428,19 +4428,19 @@
 80102397:	eb bd                	jmp    80102356 <iderw+0x76>
 80102399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801023a0:	ba e4 25 11 80       	mov    $0x801125e4,%edx
+801023a0:	ba e4 15 11 80       	mov    $0x801115e4,%edx
 801023a5:	eb a5                	jmp    8010234c <iderw+0x6c>
     panic("iderw: ide disk 1 not present");
 801023a7:	83 ec 0c             	sub    $0xc,%esp
-801023aa:	68 35 74 10 80       	push   $0x80107435
+801023aa:	68 b5 73 10 80       	push   $0x801073b5
 801023af:	e8 cc df ff ff       	call   80100380 <panic>
     panic("iderw: nothing to do");
 801023b4:	83 ec 0c             	sub    $0xc,%esp
-801023b7:	68 20 74 10 80       	push   $0x80107420
+801023b7:	68 a0 73 10 80       	push   $0x801073a0
 801023bc:	e8 bf df ff ff       	call   80100380 <panic>
     panic("iderw: buf not locked");
 801023c1:	83 ec 0c             	sub    $0xc,%esp
-801023c4:	68 0a 74 10 80       	push   $0x8010740a
+801023c4:	68 8a 73 10 80       	push   $0x8010738a
 801023c9:	e8 b2 df ff ff       	call   80100380 <panic>
 801023ce:	66 90                	xchg   %ax,%ax
 
@@ -4455,7 +4455,7 @@
   int i, id, maxintr;
 
   ioapic = (volatile struct ioapic*)IOAPIC;
-801023d1:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+801023d1:	c7 05 34 16 11 80 00 	movl   $0xfec00000,0x80111634
 801023d8:	00 c0 fe 
 {
 801023db:	89 e5                	mov    %esp,%ebp
@@ -4465,16 +4465,16 @@
 801023df:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
 801023e6:	00 00 00 
   return ioapic->data;
-801023e9:	8b 15 34 26 11 80    	mov    0x80112634,%edx
+801023e9:	8b 15 34 16 11 80    	mov    0x80111634,%edx
 801023ef:	8b 72 10             	mov    0x10(%edx),%esi
   ioapic->reg = reg;
 801023f2:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
   return ioapic->data;
-801023f8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023f8:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
   id = ioapicread(REG_ID) >> 24;
   if(id != ioapicid)
-801023fe:	0f b6 15 80 27 11 80 	movzbl 0x80112780,%edx
+801023fe:	0f b6 15 80 17 11 80 	movzbl 0x80111780,%edx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
 80102405:	c1 ee 10             	shr    $0x10,%esi
 80102408:	89 f0                	mov    %esi,%eax
@@ -4488,10 +4488,10 @@
 80102415:	74 16                	je     8010242d <ioapicinit+0x5d>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 80102417:	83 ec 0c             	sub    $0xc,%esp
-8010241a:	68 54 74 10 80       	push   $0x80107454
+8010241a:	68 d4 73 10 80       	push   $0x801073d4
 8010241f:	e8 7c e2 ff ff       	call   801006a0 <cprintf>
   ioapic->reg = reg;
-80102424:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102424:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
 8010242a:	83 c4 10             	add    $0x10,%esp
 8010242d:	83 c6 21             	add    $0x21,%esi
 {
@@ -4507,7 +4507,7 @@
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 80102442:	89 c3                	mov    %eax,%ebx
   ioapic->data = data;
-80102444:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102444:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
   for(i = 0; i <= maxintr; i++){
 8010244a:	83 c0 01             	add    $0x1,%eax
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
@@ -4521,7 +4521,7 @@
   ioapic->reg = reg;
 8010245c:	89 19                	mov    %ebx,(%ecx)
   ioapic->data = data;
-8010245e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+8010245e:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
 80102464:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
   for(i = 0; i <= maxintr; i++){
 8010246b:	39 f0                	cmp    %esi,%eax
@@ -4544,7 +4544,7 @@
 {
 80102480:	55                   	push   %ebp
   ioapic->reg = reg;
-80102481:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102481:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
 {
 80102487:	89 e5                	mov    %esp,%ebp
 80102489:	8b 45 08             	mov    0x8(%ebp),%eax
@@ -4557,7 +4557,7 @@
   ioapic->reg = reg;
 80102493:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-80102495:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102495:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010249b:	83 c0 01             	add    $0x1,%eax
   ioapic->data = data;
@@ -4567,7 +4567,7 @@
   ioapic->reg = reg;
 801024a4:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-801024a6:	a1 34 26 11 80       	mov    0x80112634,%eax
+801024a6:	a1 34 16 11 80       	mov    0x80111634,%eax
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 801024ab:	c1 e2 18             	shl    $0x18,%edx
   ioapic->data = data;
@@ -4600,7 +4600,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 801024ca:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 801024d0:	75 76                	jne    80102548 <kfree+0x88>
-801024d2:	81 fb d0 64 11 80    	cmp    $0x801164d0,%ebx
+801024d2:	81 fb d0 54 11 80    	cmp    $0x801154d0,%ebx
 801024d8:	72 6e                	jb     80102548 <kfree+0x88>
 801024da:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 801024e0:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4616,20 +4616,20 @@
 801024f2:	e8 69 21 00 00       	call   80104660 <memset>
 
   if(kmem.use_lock)
-801024f7:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+801024f7:	8b 15 74 16 11 80    	mov    0x80111674,%edx
 801024fd:	83 c4 10             	add    $0x10,%esp
 80102500:	85 d2                	test   %edx,%edx
 80102502:	75 1c                	jne    80102520 <kfree+0x60>
     acquire(&kmem.lock);
   r = (struct run*)v;
   r->next = kmem.freelist;
-80102504:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102504:	a1 78 16 11 80       	mov    0x80111678,%eax
 80102509:	89 03                	mov    %eax,(%ebx)
   kmem.freelist = r;
   if(kmem.use_lock)
-8010250b:	a1 74 26 11 80       	mov    0x80112674,%eax
+8010250b:	a1 74 16 11 80       	mov    0x80111674,%eax
   kmem.freelist = r;
-80102510:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
+80102510:	89 1d 78 16 11 80    	mov    %ebx,0x80111678
   if(kmem.use_lock)
 80102516:	85 c0                	test   %eax,%eax
 80102518:	75 1e                	jne    80102538 <kfree+0x78>
@@ -4641,13 +4641,13 @@
 8010251f:	90                   	nop
     acquire(&kmem.lock);
 80102520:	83 ec 0c             	sub    $0xc,%esp
-80102523:	68 40 26 11 80       	push   $0x80112640
+80102523:	68 40 16 11 80       	push   $0x80111640
 80102528:	e8 73 20 00 00       	call   801045a0 <acquire>
 8010252d:	83 c4 10             	add    $0x10,%esp
 80102530:	eb d2                	jmp    80102504 <kfree+0x44>
 80102532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&kmem.lock);
-80102538:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+80102538:	c7 45 08 40 16 11 80 	movl   $0x80111640,0x8(%ebp)
 }
 8010253f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102542:	c9                   	leave  
@@ -4655,7 +4655,7 @@
 80102543:	e9 f8 1f 00 00       	jmp    80104540 <release>
     panic("kfree");
 80102548:	83 ec 0c             	sub    $0xc,%esp
-8010254b:	68 86 74 10 80       	push   $0x80107486
+8010254b:	68 06 74 10 80       	push   $0x80107406
 80102550:	e8 2b de ff ff       	call   80100380 <panic>
 80102555:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010255c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4730,7 +4730,7 @@
 801025f0:	39 de                	cmp    %ebx,%esi
 801025f2:	73 e4                	jae    801025d8 <kinit2+0x28>
   kmem.use_lock = 1;
-801025f4:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
+801025f4:	c7 05 74 16 11 80 01 	movl   $0x1,0x80111674
 801025fb:	00 00 00 
 }
 801025fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -4750,15 +4750,15 @@
 80102615:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 80102618:	83 ec 08             	sub    $0x8,%esp
-8010261b:	68 8c 74 10 80       	push   $0x8010748c
-80102620:	68 40 26 11 80       	push   $0x80112640
+8010261b:	68 0c 74 10 80       	push   $0x8010740c
+80102620:	68 40 16 11 80       	push   $0x80111640
 80102625:	e8 a6 1d 00 00       	call   801043d0 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010262a:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
 8010262d:	83 c4 10             	add    $0x10,%esp
   kmem.use_lock = 0;
-80102630:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
+80102630:	c7 05 74 16 11 80 00 	movl   $0x0,0x80111674
 80102637:	00 00 00 
   p = (char*)PGROUNDUP((uint)vstart);
 8010263a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
@@ -4795,18 +4795,18 @@
   struct run *r;
 
   if(kmem.use_lock)
-80102680:	a1 74 26 11 80       	mov    0x80112674,%eax
+80102680:	a1 74 16 11 80       	mov    0x80111674,%eax
 80102685:	85 c0                	test   %eax,%eax
 80102687:	75 1f                	jne    801026a8 <kalloc+0x28>
     acquire(&kmem.lock);
   r = kmem.freelist;
-80102689:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102689:	a1 78 16 11 80       	mov    0x80111678,%eax
   if(r)
 8010268e:	85 c0                	test   %eax,%eax
 80102690:	74 0e                	je     801026a0 <kalloc+0x20>
     kmem.freelist = r->next;
 80102692:	8b 10                	mov    (%eax),%edx
-80102694:	89 15 78 26 11 80    	mov    %edx,0x80112678
+80102694:	89 15 78 16 11 80    	mov    %edx,0x80111678
   if(kmem.use_lock)
 8010269a:	c3                   	ret    
 8010269b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4821,26 +4821,26 @@
 801026a9:	89 e5                	mov    %esp,%ebp
 801026ab:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
-801026ae:	68 40 26 11 80       	push   $0x80112640
+801026ae:	68 40 16 11 80       	push   $0x80111640
 801026b3:	e8 e8 1e 00 00       	call   801045a0 <acquire>
   r = kmem.freelist;
-801026b8:	a1 78 26 11 80       	mov    0x80112678,%eax
+801026b8:	a1 78 16 11 80       	mov    0x80111678,%eax
   if(kmem.use_lock)
-801026bd:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+801026bd:	8b 15 74 16 11 80    	mov    0x80111674,%edx
   if(r)
 801026c3:	83 c4 10             	add    $0x10,%esp
 801026c6:	85 c0                	test   %eax,%eax
 801026c8:	74 08                	je     801026d2 <kalloc+0x52>
     kmem.freelist = r->next;
 801026ca:	8b 08                	mov    (%eax),%ecx
-801026cc:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
+801026cc:	89 0d 78 16 11 80    	mov    %ecx,0x80111678
   if(kmem.use_lock)
 801026d2:	85 d2                	test   %edx,%edx
 801026d4:	74 16                	je     801026ec <kalloc+0x6c>
     release(&kmem.lock);
 801026d6:	83 ec 0c             	sub    $0xc,%esp
 801026d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801026dc:	68 40 26 11 80       	push   $0x80112640
+801026dc:	68 40 16 11 80       	push   $0x80111640
 801026e1:	e8 5a 1e 00 00       	call   80104540 <release>
   return (char*)r;
 801026e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
@@ -4874,7 +4874,7 @@
 
   if(data == 0xE0){
     shift |= E0ESC;
-80102708:	8b 1d 7c 26 11 80    	mov    0x8011267c,%ebx
+80102708:	8b 1d 7c 16 11 80    	mov    0x8011167c,%ebx
   data = inb(KBDATAP);
 8010270e:	0f b6 c8             	movzbl %al,%ecx
   if(data == 0xE0){
@@ -4904,9 +4904,9 @@
   }
 
   shift |= shiftcode[data];
-8010272b:	0f b6 91 c0 75 10 80 	movzbl -0x7fef8a40(%ecx),%edx
+8010272b:	0f b6 91 40 75 10 80 	movzbl -0x7fef8ac0(%ecx),%edx
   shift ^= togglecode[data];
-80102732:	0f b6 81 c0 74 10 80 	movzbl -0x7fef8b40(%ecx),%eax
+80102732:	0f b6 81 40 74 10 80 	movzbl -0x7fef8bc0(%ecx),%eax
   shift |= shiftcode[data];
 80102739:	09 da                	or     %ebx,%edx
   shift ^= togglecode[data];
@@ -4914,13 +4914,13 @@
   c = charcode[shift & (CTL | SHIFT)][data];
 8010273d:	89 d0                	mov    %edx,%eax
   shift ^= togglecode[data];
-8010273f:	89 15 7c 26 11 80    	mov    %edx,0x8011267c
+8010273f:	89 15 7c 16 11 80    	mov    %edx,0x8011167c
   c = charcode[shift & (CTL | SHIFT)][data];
 80102745:	83 e0 03             	and    $0x3,%eax
   if(shift & CAPSLOCK){
 80102748:	83 e2 08             	and    $0x8,%edx
   c = charcode[shift & (CTL | SHIFT)][data];
-8010274b:	8b 04 85 a0 74 10 80 	mov    -0x7fef8b60(,%eax,4),%eax
+8010274b:	8b 04 85 20 74 10 80 	mov    -0x7fef8be0(,%eax,4),%eax
 80102752:	0f b6 04 08          	movzbl (%eax,%ecx,1),%eax
   if(shift & CAPSLOCK){
 80102756:	74 0b                	je     80102763 <kbdgetc+0x73>
@@ -4945,7 +4945,7 @@
     return 0;
 80102773:	31 c0                	xor    %eax,%eax
     shift |= E0ESC;
-80102775:	89 1d 7c 26 11 80    	mov    %ebx,0x8011267c
+80102775:	89 1d 7c 16 11 80    	mov    %ebx,0x8011167c
 }
 8010277b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8010277e:	c9                   	leave  
@@ -4955,7 +4955,7 @@
 80102783:	85 d2                	test   %edx,%edx
 80102785:	0f 44 c8             	cmove  %eax,%ecx
     shift &= ~(shiftcode[data] | E0ESC);
-80102788:	0f b6 81 c0 75 10 80 	movzbl -0x7fef8a40(%ecx),%eax
+80102788:	0f b6 81 40 75 10 80 	movzbl -0x7fef8ac0(%ecx),%eax
 8010278f:	83 c8 40             	or     $0x40,%eax
 80102792:	0f b6 c0             	movzbl %al,%eax
 80102795:	f7 d0                	not    %eax
@@ -4963,7 +4963,7 @@
 }
 80102799:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     shift &= ~(shiftcode[data] | E0ESC);
-8010279c:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+8010279c:	a3 7c 16 11 80       	mov    %eax,0x8011167c
     return 0;
 801027a1:	31 c0                	xor    %eax,%eax
 }
@@ -5019,7 +5019,7 @@
 lapicinit(void)
 {
   if(!lapic)
-801027f0:	a1 80 26 11 80       	mov    0x80112680,%eax
+801027f0:	a1 80 16 11 80       	mov    0x80111680,%eax
 801027f5:	85 c0                	test   %eax,%eax
 801027f7:	0f 84 cb 00 00 00    	je     801028c8 <lapicinit+0xd8>
   lapic[index] = value;
@@ -5131,7 +5131,7 @@
 lapicid(void)
 {
   if (!lapic)
-801028f0:	a1 80 26 11 80       	mov    0x80112680,%eax
+801028f0:	a1 80 16 11 80       	mov    0x80111680,%eax
 801028f5:	85 c0                	test   %eax,%eax
 801028f7:	74 07                	je     80102900 <lapicid+0x10>
     return 0;
@@ -5153,7 +5153,7 @@
 lapiceoi(void)
 {
   if(lapic)
-80102910:	a1 80 26 11 80       	mov    0x80112680,%eax
+80102910:	a1 80 16 11 80       	mov    0x80111680,%eax
 80102915:	85 c0                	test   %eax,%eax
 80102917:	74 0d                	je     80102926 <lapiceoi+0x16>
   lapic[index] = value;
@@ -5231,7 +5231,7 @@
   wrv[1] = addr >> 4;
 80102978:	66 a3 69 04 00 80    	mov    %ax,0x80000469
   lapic[index] = value;
-8010297e:	a1 80 26 11 80       	mov    0x80112680,%eax
+8010297e:	a1 80 16 11 80       	mov    0x80111680,%eax
 80102983:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
 80102989:	8b 58 20             	mov    0x20(%eax),%ebx
@@ -5538,7 +5538,7 @@
   int tail;
 
   for (tail = 0; tail < log.lh.n; tail++) {
-80102bc0:	8b 0d e8 26 11 80    	mov    0x801126e8,%ecx
+80102bc0:	8b 0d e8 16 11 80    	mov    0x801116e8,%ecx
 80102bc6:	85 c9                	test   %ecx,%ecx
 80102bc8:	0f 8e 8a 00 00 00    	jle    80102c58 <install_trans+0x98>
 {
@@ -5553,19 +5553,19 @@
 80102bd6:	83 ec 0c             	sub    $0xc,%esp
 80102bd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102be0:	a1 d4 26 11 80       	mov    0x801126d4,%eax
+80102be0:	a1 d4 16 11 80       	mov    0x801116d4,%eax
 80102be5:	83 ec 08             	sub    $0x8,%esp
 80102be8:	01 f8                	add    %edi,%eax
 80102bea:	83 c0 01             	add    $0x1,%eax
 80102bed:	50                   	push   %eax
-80102bee:	ff 35 e4 26 11 80    	push   0x801126e4
+80102bee:	ff 35 e4 16 11 80    	push   0x801116e4
 80102bf4:	e8 d7 d4 ff ff       	call   801000d0 <bread>
 80102bf9:	89 c6                	mov    %eax,%esi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
 80102bfb:	58                   	pop    %eax
 80102bfc:	5a                   	pop    %edx
-80102bfd:	ff 34 bd ec 26 11 80 	push   -0x7feed914(,%edi,4)
-80102c04:	ff 35 e4 26 11 80    	push   0x801126e4
+80102bfd:	ff 34 bd ec 16 11 80 	push   -0x7feee914(,%edi,4)
+80102c04:	ff 35 e4 16 11 80    	push   0x801116e4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102c0a:	83 c7 01             	add    $0x1,%edi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
@@ -5592,7 +5592,7 @@
 80102c3c:	e8 af d5 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102c41:	83 c4 10             	add    $0x10,%esp
-80102c44:	39 3d e8 26 11 80    	cmp    %edi,0x801126e8
+80102c44:	39 3d e8 16 11 80    	cmp    %edi,0x801116e8
 80102c4a:	7f 94                	jg     80102be0 <install_trans+0x20>
   }
 }
@@ -5618,8 +5618,8 @@
 80102c63:	53                   	push   %ebx
 80102c64:	83 ec 0c             	sub    $0xc,%esp
   struct buf *buf = bread(log.dev, log.start);
-80102c67:	ff 35 d4 26 11 80    	push   0x801126d4
-80102c6d:	ff 35 e4 26 11 80    	push   0x801126e4
+80102c67:	ff 35 d4 16 11 80    	push   0x801116d4
+80102c6d:	ff 35 e4 16 11 80    	push   0x801116e4
 80102c73:	e8 58 d4 ff ff       	call   801000d0 <bread>
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
@@ -5629,7 +5629,7 @@
   struct buf *buf = bread(log.dev, log.start);
 80102c7b:	89 c3                	mov    %eax,%ebx
   hb->n = log.lh.n;
-80102c7d:	a1 e8 26 11 80       	mov    0x801126e8,%eax
+80102c7d:	a1 e8 16 11 80       	mov    0x801116e8,%eax
 80102c82:	89 43 5c             	mov    %eax,0x5c(%ebx)
   for (i = 0; i < log.lh.n; i++) {
 80102c85:	85 c0                	test   %eax,%eax
@@ -5638,7 +5638,7 @@
 80102c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80102c8f:	90                   	nop
     hb->block[i] = log.lh.block[i];
-80102c90:	8b 0c 95 ec 26 11 80 	mov    -0x7feed914(,%edx,4),%ecx
+80102c90:	8b 0c 95 ec 16 11 80 	mov    -0x7feee914(,%edx,4),%ecx
 80102c97:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102c9b:	83 c2 01             	add    $0x1,%edx
@@ -5668,8 +5668,8 @@
 80102cc4:	83 ec 2c             	sub    $0x2c,%esp
 80102cc7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102cca:	68 c0 76 10 80       	push   $0x801076c0
-80102ccf:	68 a0 26 11 80       	push   $0x801126a0
+80102cca:	68 40 76 10 80       	push   $0x80107640
+80102ccf:	68 a0 16 11 80       	push   $0x801116a0
 80102cd4:	e8 f7 16 00 00       	call   801043d0 <initlock>
   readsb(dev, &sb);
 80102cd9:	58                   	pop    %eax
@@ -5683,13 +5683,13 @@
   struct buf *buf = bread(log.dev, log.start);
 80102ce8:	59                   	pop    %ecx
   log.dev = dev;
-80102ce9:	89 1d e4 26 11 80    	mov    %ebx,0x801126e4
+80102ce9:	89 1d e4 16 11 80    	mov    %ebx,0x801116e4
   log.size = sb.nlog;
 80102cef:	8b 55 e8             	mov    -0x18(%ebp),%edx
   log.start = sb.logstart;
-80102cf2:	a3 d4 26 11 80       	mov    %eax,0x801126d4
+80102cf2:	a3 d4 16 11 80       	mov    %eax,0x801116d4
   log.size = sb.nlog;
-80102cf7:	89 15 d8 26 11 80    	mov    %edx,0x801126d8
+80102cf7:	89 15 d8 16 11 80    	mov    %edx,0x801116d8
   struct buf *buf = bread(log.dev, log.start);
 80102cfd:	5a                   	pop    %edx
 80102cfe:	50                   	push   %eax
@@ -5699,7 +5699,7 @@
 80102d05:	83 c4 10             	add    $0x10,%esp
   log.lh.n = lh->n;
 80102d08:	8b 58 5c             	mov    0x5c(%eax),%ebx
-80102d0b:	89 1d e8 26 11 80    	mov    %ebx,0x801126e8
+80102d0b:	89 1d e8 16 11 80    	mov    %ebx,0x801116e8
   for (i = 0; i < log.lh.n; i++) {
 80102d11:	85 db                	test   %ebx,%ebx
 80102d13:	7e 1d                	jle    80102d32 <initlog+0x72>
@@ -5708,7 +5708,7 @@
 80102d1e:	66 90                	xchg   %ax,%ax
     log.lh.block[i] = lh->block[i];
 80102d20:	8b 4c 90 60          	mov    0x60(%eax,%edx,4),%ecx
-80102d24:	89 0c 95 ec 26 11 80 	mov    %ecx,-0x7feed914(,%edx,4)
+80102d24:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102d2b:	83 c2 01             	add    $0x1,%edx
 80102d2e:	39 d3                	cmp    %edx,%ebx
@@ -5725,7 +5725,7 @@
   install_trans(); // if committed, copy from log to disk
 80102d3b:	e8 80 fe ff ff       	call   80102bc0 <install_trans>
   log.lh.n = 0;
-80102d40:	c7 05 e8 26 11 80 00 	movl   $0x0,0x801126e8
+80102d40:	c7 05 e8 16 11 80 00 	movl   $0x0,0x801116e8
 80102d47:	00 00 00 
   write_head(); // clear the log
 80102d4a:	e8 11 ff ff ff       	call   80102c60 <write_head>
@@ -5748,7 +5748,7 @@
 80102d61:	89 e5                	mov    %esp,%ebp
 80102d63:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
-80102d66:	68 a0 26 11 80       	push   $0x801126a0
+80102d66:	68 a0 16 11 80       	push   $0x801116a0
 80102d6b:	e8 30 18 00 00       	call   801045a0 <acquire>
 80102d70:	83 c4 10             	add    $0x10,%esp
 80102d73:	eb 18                	jmp    80102d8d <begin_op+0x2d>
@@ -5757,17 +5757,17 @@
     if(log.committing){
       sleep(&log, &log.lock);
 80102d78:	83 ec 08             	sub    $0x8,%esp
-80102d7b:	68 a0 26 11 80       	push   $0x801126a0
-80102d80:	68 a0 26 11 80       	push   $0x801126a0
+80102d7b:	68 a0 16 11 80       	push   $0x801116a0
+80102d80:	68 a0 16 11 80       	push   $0x801116a0
 80102d85:	e8 b6 12 00 00       	call   80104040 <sleep>
 80102d8a:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
-80102d8d:	a1 e0 26 11 80       	mov    0x801126e0,%eax
+80102d8d:	a1 e0 16 11 80       	mov    0x801116e0,%eax
 80102d92:	85 c0                	test   %eax,%eax
 80102d94:	75 e2                	jne    80102d78 <begin_op+0x18>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102d96:	a1 dc 26 11 80       	mov    0x801126dc,%eax
-80102d9b:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
+80102d96:	a1 dc 16 11 80       	mov    0x801116dc,%eax
+80102d9b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
 80102da1:	83 c0 01             	add    $0x1,%eax
 80102da4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
 80102da7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
@@ -5780,9 +5780,9 @@
       release(&log.lock);
 80102daf:	83 ec 0c             	sub    $0xc,%esp
       log.outstanding += 1;
-80102db2:	a3 dc 26 11 80       	mov    %eax,0x801126dc
+80102db2:	a3 dc 16 11 80       	mov    %eax,0x801116dc
       release(&log.lock);
-80102db7:	68 a0 26 11 80       	push   $0x801126a0
+80102db7:	68 a0 16 11 80       	push   $0x801116a0
 80102dbc:	e8 7f 17 00 00       	call   80104540 <release>
       break;
     }
@@ -5810,16 +5810,16 @@
   int do_commit = 0;
 
   acquire(&log.lock);
-80102dd9:	68 a0 26 11 80       	push   $0x801126a0
+80102dd9:	68 a0 16 11 80       	push   $0x801116a0
 80102dde:	e8 bd 17 00 00       	call   801045a0 <acquire>
   log.outstanding -= 1;
-80102de3:	a1 dc 26 11 80       	mov    0x801126dc,%eax
+80102de3:	a1 dc 16 11 80       	mov    0x801116dc,%eax
   if(log.committing)
-80102de8:	8b 35 e0 26 11 80    	mov    0x801126e0,%esi
+80102de8:	8b 35 e0 16 11 80    	mov    0x801116e0,%esi
 80102dee:	83 c4 10             	add    $0x10,%esp
   log.outstanding -= 1;
 80102df1:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80102df4:	89 1d dc 26 11 80    	mov    %ebx,0x801126dc
+80102df4:	89 1d dc 16 11 80    	mov    %ebx,0x801116dc
   if(log.committing)
 80102dfa:	85 f6                	test   %esi,%esi
 80102dfc:	0f 85 22 01 00 00    	jne    80102f24 <end_op+0x154>
@@ -5829,7 +5829,7 @@
 80102e04:	0f 85 f6 00 00 00    	jne    80102f00 <end_op+0x130>
     do_commit = 1;
     log.committing = 1;
-80102e0a:	c7 05 e0 26 11 80 01 	movl   $0x1,0x801126e0
+80102e0a:	c7 05 e0 16 11 80 01 	movl   $0x1,0x801116e0
 80102e11:	00 00 00 
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
@@ -5838,7 +5838,7 @@
   }
   release(&log.lock);
 80102e14:	83 ec 0c             	sub    $0xc,%esp
-80102e17:	68 a0 26 11 80       	push   $0x801126a0
+80102e17:	68 a0 16 11 80       	push   $0x801116a0
 80102e1c:	e8 1f 17 00 00       	call   80104540 <release>
 }
 
@@ -5846,23 +5846,23 @@
 commit()
 {
   if (log.lh.n > 0) {
-80102e21:	8b 0d e8 26 11 80    	mov    0x801126e8,%ecx
+80102e21:	8b 0d e8 16 11 80    	mov    0x801116e8,%ecx
 80102e27:	83 c4 10             	add    $0x10,%esp
 80102e2a:	85 c9                	test   %ecx,%ecx
 80102e2c:	7f 42                	jg     80102e70 <end_op+0xa0>
     acquire(&log.lock);
 80102e2e:	83 ec 0c             	sub    $0xc,%esp
-80102e31:	68 a0 26 11 80       	push   $0x801126a0
+80102e31:	68 a0 16 11 80       	push   $0x801116a0
 80102e36:	e8 65 17 00 00       	call   801045a0 <acquire>
     wakeup(&log);
-80102e3b:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+80102e3b:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
     log.committing = 0;
-80102e42:	c7 05 e0 26 11 80 00 	movl   $0x0,0x801126e0
+80102e42:	c7 05 e0 16 11 80 00 	movl   $0x0,0x801116e0
 80102e49:	00 00 00 
     wakeup(&log);
 80102e4c:	e8 af 12 00 00       	call   80104100 <wakeup>
     release(&log.lock);
-80102e51:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+80102e51:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
 80102e58:	e8 e3 16 00 00       	call   80104540 <release>
 80102e5d:	83 c4 10             	add    $0x10,%esp
 }
@@ -5875,19 +5875,19 @@
 80102e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102e6f:	90                   	nop
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102e70:	a1 d4 26 11 80       	mov    0x801126d4,%eax
+80102e70:	a1 d4 16 11 80       	mov    0x801116d4,%eax
 80102e75:	83 ec 08             	sub    $0x8,%esp
 80102e78:	01 d8                	add    %ebx,%eax
 80102e7a:	83 c0 01             	add    $0x1,%eax
 80102e7d:	50                   	push   %eax
-80102e7e:	ff 35 e4 26 11 80    	push   0x801126e4
+80102e7e:	ff 35 e4 16 11 80    	push   0x801116e4
 80102e84:	e8 47 d2 ff ff       	call   801000d0 <bread>
 80102e89:	89 c6                	mov    %eax,%esi
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
 80102e8b:	58                   	pop    %eax
 80102e8c:	5a                   	pop    %edx
-80102e8d:	ff 34 9d ec 26 11 80 	push   -0x7feed914(,%ebx,4)
-80102e94:	ff 35 e4 26 11 80    	push   0x801126e4
+80102e8d:	ff 34 9d ec 16 11 80 	push   -0x7feee914(,%ebx,4)
+80102e94:	ff 35 e4 16 11 80    	push   0x801116e4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102e9a:	83 c3 01             	add    $0x1,%ebx
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
@@ -5914,7 +5914,7 @@
 80102ecc:	e8 1f d3 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102ed1:	83 c4 10             	add    $0x10,%esp
-80102ed4:	3b 1d e8 26 11 80    	cmp    0x801126e8,%ebx
+80102ed4:	3b 1d e8 16 11 80    	cmp    0x801116e8,%ebx
 80102eda:	7c 94                	jl     80102e70 <end_op+0xa0>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
@@ -5922,7 +5922,7 @@
     install_trans(); // Now install writes to home locations
 80102ee1:	e8 da fc ff ff       	call   80102bc0 <install_trans>
     log.lh.n = 0;
-80102ee6:	c7 05 e8 26 11 80 00 	movl   $0x0,0x801126e8
+80102ee6:	c7 05 e8 16 11 80 00 	movl   $0x0,0x801116e8
 80102eed:	00 00 00 
     write_head();    // Erase the transaction from the log
 80102ef0:	e8 6b fd ff ff       	call   80102c60 <write_head>
@@ -5930,10 +5930,10 @@
 80102efa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     wakeup(&log);
 80102f00:	83 ec 0c             	sub    $0xc,%esp
-80102f03:	68 a0 26 11 80       	push   $0x801126a0
+80102f03:	68 a0 16 11 80       	push   $0x801116a0
 80102f08:	e8 f3 11 00 00       	call   80104100 <wakeup>
   release(&log.lock);
-80102f0d:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+80102f0d:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
 80102f14:	e8 27 16 00 00       	call   80104540 <release>
 80102f19:	83 c4 10             	add    $0x10,%esp
 }
@@ -5945,7 +5945,7 @@
 80102f23:	c3                   	ret    
     panic("log.committing");
 80102f24:	83 ec 0c             	sub    $0xc,%esp
-80102f27:	68 c4 76 10 80       	push   $0x801076c4
+80102f27:	68 44 76 10 80       	push   $0x80107644
 80102f2c:	e8 4f d4 ff ff       	call   80100380 <panic>
 80102f31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5965,29 +5965,29 @@
   int i;
 
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f47:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
+80102f47:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
 {
 80102f4d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
 80102f50:	83 fa 1d             	cmp    $0x1d,%edx
 80102f53:	0f 8f 85 00 00 00    	jg     80102fde <log_write+0x9e>
-80102f59:	a1 d8 26 11 80       	mov    0x801126d8,%eax
+80102f59:	a1 d8 16 11 80       	mov    0x801116d8,%eax
 80102f5e:	83 e8 01             	sub    $0x1,%eax
 80102f61:	39 c2                	cmp    %eax,%edx
 80102f63:	7d 79                	jge    80102fde <log_write+0x9e>
     panic("too big a transaction");
   if (log.outstanding < 1)
-80102f65:	a1 dc 26 11 80       	mov    0x801126dc,%eax
+80102f65:	a1 dc 16 11 80       	mov    0x801116dc,%eax
 80102f6a:	85 c0                	test   %eax,%eax
 80102f6c:	7e 7d                	jle    80102feb <log_write+0xab>
     panic("log_write outside of trans");
 
   acquire(&log.lock);
 80102f6e:	83 ec 0c             	sub    $0xc,%esp
-80102f71:	68 a0 26 11 80       	push   $0x801126a0
+80102f71:	68 a0 16 11 80       	push   $0x801116a0
 80102f76:	e8 25 16 00 00       	call   801045a0 <acquire>
   for (i = 0; i < log.lh.n; i++) {
-80102f7b:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
+80102f7b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
 80102f81:	83 c4 10             	add    $0x10,%esp
 80102f84:	85 d2                	test   %edx,%edx
 80102f86:	7e 4a                	jle    80102fd2 <log_write+0x92>
@@ -6001,12 +6001,12 @@
 80102f93:	39 c2                	cmp    %eax,%edx
 80102f95:	74 29                	je     80102fc0 <log_write+0x80>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f97:	39 0c 85 ec 26 11 80 	cmp    %ecx,-0x7feed914(,%eax,4)
+80102f97:	39 0c 85 ec 16 11 80 	cmp    %ecx,-0x7feee914(,%eax,4)
 80102f9e:	75 f0                	jne    80102f90 <log_write+0x50>
       break;
   }
   log.lh.block[i] = b->blockno;
-80102fa0:	89 0c 85 ec 26 11 80 	mov    %ecx,-0x7feed914(,%eax,4)
+80102fa0:	89 0c 85 ec 16 11 80 	mov    %ecx,-0x7feee914(,%eax,4)
   if (i == log.lh.n)
     log.lh.n++;
   b->flags |= B_DIRTY; // prevent eviction
@@ -6015,31 +6015,31 @@
 }
 80102faa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&log.lock);
-80102fad:	c7 45 08 a0 26 11 80 	movl   $0x801126a0,0x8(%ebp)
+80102fad:	c7 45 08 a0 16 11 80 	movl   $0x801116a0,0x8(%ebp)
 }
 80102fb4:	c9                   	leave  
   release(&log.lock);
 80102fb5:	e9 86 15 00 00       	jmp    80104540 <release>
 80102fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
-80102fc0:	89 0c 95 ec 26 11 80 	mov    %ecx,-0x7feed914(,%edx,4)
+80102fc0:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
     log.lh.n++;
 80102fc7:	83 c2 01             	add    $0x1,%edx
-80102fca:	89 15 e8 26 11 80    	mov    %edx,0x801126e8
+80102fca:	89 15 e8 16 11 80    	mov    %edx,0x801116e8
 80102fd0:	eb d5                	jmp    80102fa7 <log_write+0x67>
   log.lh.block[i] = b->blockno;
 80102fd2:	8b 43 08             	mov    0x8(%ebx),%eax
-80102fd5:	a3 ec 26 11 80       	mov    %eax,0x801126ec
+80102fd5:	a3 ec 16 11 80       	mov    %eax,0x801116ec
   if (i == log.lh.n)
 80102fda:	75 cb                	jne    80102fa7 <log_write+0x67>
 80102fdc:	eb e9                	jmp    80102fc7 <log_write+0x87>
     panic("too big a transaction");
 80102fde:	83 ec 0c             	sub    $0xc,%esp
-80102fe1:	68 d3 76 10 80       	push   $0x801076d3
+80102fe1:	68 53 76 10 80       	push   $0x80107653
 80102fe6:	e8 95 d3 ff ff       	call   80100380 <panic>
     panic("log_write outside of trans");
 80102feb:	83 ec 0c             	sub    $0xc,%esp
-80102fee:	68 e9 76 10 80       	push   $0x801076e9
+80102fee:	68 69 76 10 80       	push   $0x80107669
 80102ff3:	e8 88 d3 ff ff       	call   80100380 <panic>
 80102ff8:	66 90                	xchg   %ax,%ax
 80102ffa:	66 90                	xchg   %ax,%ax
@@ -6064,10 +6064,10 @@
 80103013:	83 ec 04             	sub    $0x4,%esp
 80103016:	53                   	push   %ebx
 80103017:	50                   	push   %eax
-80103018:	68 04 77 10 80       	push   $0x80107704
+80103018:	68 84 76 10 80       	push   $0x80107684
 8010301d:	e8 7e d6 ff ff       	call   801006a0 <cprintf>
   idtinit();       // load idt register
-80103022:	e8 49 29 00 00       	call   80105970 <idtinit>
+80103022:	e8 b9 28 00 00       	call   801058e0 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
 80103027:	e8 c4 08 00 00       	call   801038f0 <mycpu>
 8010302c:	89 c2                	mov    %eax,%edx
@@ -6089,9 +6089,9 @@
 80103041:	89 e5                	mov    %esp,%ebp
 80103043:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80103046:	e8 15 3a 00 00       	call   80106a60 <switchkvm>
+80103046:	e8 85 39 00 00       	call   801069d0 <switchkvm>
   seginit();
-8010304b:	e8 80 39 00 00       	call   801069d0 <seginit>
+8010304b:	e8 f0 38 00 00       	call   80106940 <seginit>
   lapicinit();
 80103050:	e8 9b f7 ff ff       	call   801027f0 <lapicinit>
   mpmain();
@@ -6112,16 +6112,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 8010306f:	83 ec 08             	sub    $0x8,%esp
 80103072:	68 00 00 40 80       	push   $0x80400000
-80103077:	68 d0 64 11 80       	push   $0x801164d0
+80103077:	68 d0 54 11 80       	push   $0x801154d0
 8010307c:	e8 8f f5 ff ff       	call   80102610 <kinit1>
   kvmalloc();      // kernel page table
-80103081:	e8 ca 3e 00 00       	call   80106f50 <kvmalloc>
+80103081:	e8 3a 3e 00 00       	call   80106ec0 <kvmalloc>
   mpinit();        // detect other processors
 80103086:	e8 85 01 00 00       	call   80103210 <mpinit>
   lapicinit();     // interrupt controller
 8010308b:	e8 60 f7 ff ff       	call   801027f0 <lapicinit>
   seginit();       // segment descriptors
-80103090:	e8 3b 39 00 00       	call   801069d0 <seginit>
+80103090:	e8 ab 38 00 00       	call   80106940 <seginit>
   picinit();       // disable pic
 80103095:	e8 76 03 00 00       	call   80103410 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6129,11 +6129,11 @@
   consoleinit();   // console hardware
 8010309f:	e8 bc d9 ff ff       	call   80100a60 <consoleinit>
   uartinit();      // serial port
-801030a4:	e8 b7 2b 00 00       	call   80105c60 <uartinit>
+801030a4:	e8 27 2b 00 00       	call   80105bd0 <uartinit>
   pinit();         // process table
 801030a9:	e8 22 08 00 00       	call   801038d0 <pinit>
   tvinit();        // trap vectors
-801030ae:	e8 3d 28 00 00       	call   801058f0 <tvinit>
+801030ae:	e8 ad 27 00 00       	call   80105860 <tvinit>
   binit();         // buffer cache
 801030b3:	e8 88 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6148,24 +6148,24 @@
   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
 801030c2:	83 c4 0c             	add    $0xc,%esp
 801030c5:	68 8a 00 00 00       	push   $0x8a
-801030ca:	68 8c b4 10 80       	push   $0x8010b48c
+801030ca:	68 8c a4 10 80       	push   $0x8010a48c
 801030cf:	68 00 70 00 80       	push   $0x80007000
 801030d4:	e8 27 16 00 00       	call   80104700 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030d9:	83 c4 10             	add    $0x10,%esp
-801030dc:	69 05 84 27 11 80 b0 	imul   $0xb0,0x80112784,%eax
+801030dc:	69 05 84 17 11 80 b0 	imul   $0xb0,0x80111784,%eax
 801030e3:	00 00 00 
-801030e6:	05 a0 27 11 80       	add    $0x801127a0,%eax
-801030eb:	3d a0 27 11 80       	cmp    $0x801127a0,%eax
+801030e6:	05 a0 17 11 80       	add    $0x801117a0,%eax
+801030eb:	3d a0 17 11 80       	cmp    $0x801117a0,%eax
 801030f0:	76 7e                	jbe    80103170 <main+0x110>
-801030f2:	bb a0 27 11 80       	mov    $0x801127a0,%ebx
+801030f2:	bb a0 17 11 80       	mov    $0x801117a0,%ebx
 801030f7:	eb 20                	jmp    80103119 <main+0xb9>
 801030f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103100:	69 05 84 27 11 80 b0 	imul   $0xb0,0x80112784,%eax
+80103100:	69 05 84 17 11 80 b0 	imul   $0xb0,0x80111784,%eax
 80103107:	00 00 00 
 8010310a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-80103110:	05 a0 27 11 80       	add    $0x801127a0,%eax
+80103110:	05 a0 17 11 80       	add    $0x801117a0,%eax
 80103115:	39 c3                	cmp    %eax,%ebx
 80103117:	73 57                	jae    80103170 <main+0x110>
     if(c == mycpu())  // We've started already.
@@ -6189,8 +6189,8 @@
 8010312a:	c7 05 f8 6f 00 80 40 	movl   $0x80103040,0x80006ff8
 80103131:	30 10 80 
     *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103134:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
-8010313b:	a0 10 00 
+80103134:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
+8010313b:	90 10 00 
     *(void**)(code-4) = stack + KSTACKSIZE;
 8010313e:	05 00 10 00 00       	add    $0x1000,%eax
 80103143:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
@@ -6255,7 +6255,7 @@
 801031b6:	83 ec 04             	sub    $0x4,%esp
 801031b9:	8d 7e 10             	lea    0x10(%esi),%edi
 801031bc:	6a 04                	push   $0x4
-801031be:	68 18 77 10 80       	push   $0x80107718
+801031be:	68 98 76 10 80       	push   $0x80107698
 801031c3:	56                   	push   %esi
 801031c4:	e8 e7 14 00 00       	call   801046b0 <memcmp>
 801031c9:	83 c4 10             	add    $0x10,%esp
@@ -6344,7 +6344,7 @@
 8010326e:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103274:	6a 04                	push   $0x4
-80103276:	68 1d 77 10 80       	push   $0x8010771d
+80103276:	68 9d 76 10 80       	push   $0x8010769d
 8010327b:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 8010327c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
@@ -6388,7 +6388,7 @@
   ismp = 1;
   lapic = (uint*)conf->lapicaddr;
 801032d0:	8b 86 24 00 00 80    	mov    -0x7fffffdc(%esi),%eax
-801032d6:	a3 80 26 11 80       	mov    %eax,0x80112680
+801032d6:	a3 80 16 11 80       	mov    %eax,0x80111680
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
 801032db:	0f b7 96 04 00 00 80 	movzwl -0x7ffffffc(%esi),%edx
 801032e2:	8d 86 2c 00 00 80    	lea    -0x7fffffd4(%esi),%eax
@@ -6467,12 +6467,12 @@
       p += sizeof(struct mpioapic);
 80103354:	83 c0 08             	add    $0x8,%eax
       ioapicid = ioapic->apicno;
-80103357:	88 0d 80 27 11 80    	mov    %cl,0x80112780
+80103357:	88 0d 80 17 11 80    	mov    %cl,0x80111780
       continue;
 8010335d:	eb 99                	jmp    801032f8 <mpinit+0xe8>
 8010335f:	90                   	nop
       if(ncpu < NCPU) {
-80103360:	8b 0d 84 27 11 80    	mov    0x80112784,%ecx
+80103360:	8b 0d 84 17 11 80    	mov    0x80111784,%ecx
 80103366:	83 f9 07             	cmp    $0x7,%ecx
 80103369:	7f 19                	jg     80103384 <mpinit+0x174>
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
@@ -6480,9 +6480,9 @@
 80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
         ncpu++;
 80103375:	83 c1 01             	add    $0x1,%ecx
-80103378:	89 0d 84 27 11 80    	mov    %ecx,0x80112784
+80103378:	89 0d 84 17 11 80    	mov    %ecx,0x80111784
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010337e:	88 9f a0 27 11 80    	mov    %bl,-0x7feed860(%edi)
+8010337e:	88 9f a0 17 11 80    	mov    %bl,-0x7feee860(%edi)
       p += sizeof(struct mpproc);
 80103384:	83 c0 14             	add    $0x14,%eax
       continue;
@@ -6490,7 +6490,7 @@
 8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 80103390:	83 ec 0c             	sub    $0xc,%esp
-80103393:	68 22 77 10 80       	push   $0x80107722
+80103393:	68 a2 76 10 80       	push   $0x801076a2
 80103398:	e8 e3 cf ff ff       	call   80100380 <panic>
 8010339d:	8d 76 00             	lea    0x0(%esi),%esi
 {
@@ -6506,7 +6506,7 @@
 801033ba:	83 ec 04             	sub    $0x4,%esp
 801033bd:	8d 73 10             	lea    0x10(%ebx),%esi
 801033c0:	6a 04                	push   $0x4
-801033c2:	68 18 77 10 80       	push   $0x80107718
+801033c2:	68 98 76 10 80       	push   $0x80107698
 801033c7:	53                   	push   %ebx
 801033c8:	e8 e3 12 00 00       	call   801046b0 <memcmp>
 801033cd:	83 c4 10             	add    $0x10,%esp
@@ -6530,7 +6530,7 @@
 801033f0:	e9 6b fe ff ff       	jmp    80103260 <mpinit+0x50>
     panic("Didn't find a suitable machine");
 801033f5:	83 ec 0c             	sub    $0xc,%esp
-801033f8:	68 3c 77 10 80       	push   $0x8010773c
+801033f8:	68 bc 76 10 80       	push   $0x801076bc
 801033fd:	e8 7e cf ff ff       	call   80100380 <panic>
 80103402:	66 90                	xchg   %ax,%ax
 80103404:	66 90                	xchg   %ax,%ax
@@ -6616,7 +6616,7 @@
 80103499:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 801034a0:	00 00 00 
   initlock(&p->lock, "pipe");
-801034a3:	68 5b 77 10 80       	push   $0x8010775b
+801034a3:	68 db 76 10 80       	push   $0x801076db
 801034a8:	50                   	push   %eax
 801034a9:	e8 22 0f 00 00       	call   801043d0 <initlock>
   (*f0)->type = FD_PIPE;
@@ -7030,11 +7030,11 @@
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b4:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+801037b4:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
 {
 801037b9:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-801037bc:	68 20 2d 11 80       	push   $0x80112d20
+801037bc:	68 20 1d 11 80       	push   $0x80111d20
 801037c1:	e8 da 0d 00 00       	call   801045a0 <acquire>
 801037c6:	83 c4 10             	add    $0x10,%esp
 801037c9:	eb 10                	jmp    801037db <allocproc+0x2b>
@@ -7042,7 +7042,7 @@
 801037cf:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 801037d0:	83 c3 7c             	add    $0x7c,%ebx
-801037d3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+801037d3:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
 801037d9:	74 75                	je     80103850 <allocproc+0xa0>
     if(p->state == UNUSED)
 801037db:	8b 43 0c             	mov    0xc(%ebx),%eax
@@ -7054,7 +7054,7 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-801037e2:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+801037e2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
 
   release(&ptable.lock);
 801037e7:	83 ec 0c             	sub    $0xc,%esp
@@ -7064,9 +7064,9 @@
 801037f1:	89 43 10             	mov    %eax,0x10(%ebx)
 801037f4:	8d 50 01             	lea    0x1(%eax),%edx
   release(&ptable.lock);
-801037f7:	68 20 2d 11 80       	push   $0x80112d20
+801037f7:	68 20 1d 11 80       	push   $0x80111d20
   p->pid = nextpid++;
-801037fc:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
+801037fc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
   release(&ptable.lock);
 80103802:	e8 39 0d 00 00       	call   80104540 <release>
 
@@ -7096,7 +7096,7 @@
   sp -= sizeof *p->tf;
 80103824:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103827:	c7 40 14 d7 58 10 80 	movl   $0x801058d7,0x14(%eax)
+80103827:	c7 40 14 52 58 10 80 	movl   $0x80105852,0x14(%eax)
   p->context = (struct context*)sp;
 8010382e:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
@@ -7122,7 +7122,7 @@
   return 0;
 80103853:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103855:	68 20 2d 11 80       	push   $0x80112d20
+80103855:	68 20 1d 11 80       	push   $0x80111d20
 8010385a:	e8 e1 0c 00 00       	call   80104540 <release>
 }
 8010385f:	89 d8                	mov    %ebx,%eax
@@ -7156,11 +7156,11 @@
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-80103886:	68 20 2d 11 80       	push   $0x80112d20
+80103886:	68 20 1d 11 80       	push   $0x80111d20
 8010388b:	e8 b0 0c 00 00       	call   80104540 <release>
 
   if (first) {
-80103890:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+80103890:	a1 00 a0 10 80       	mov    0x8010a000,%eax
 80103895:	83 c4 10             	add    $0x10,%esp
 80103898:	85 c0                	test   %eax,%eax
 8010389a:	75 04                	jne    801038a0 <forkret+0x20>
@@ -7174,7 +7174,7 @@
 8010389d:	c3                   	ret    
 8010389e:	66 90                	xchg   %ax,%ax
     first = 0;
-801038a0:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+801038a0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
 801038a7:	00 00 00 
     iinit(ROOTDEV);
 801038aa:	83 ec 0c             	sub    $0xc,%esp
@@ -7196,8 +7196,8 @@
 801038d1:	89 e5                	mov    %esp,%ebp
 801038d3:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-801038d6:	68 60 77 10 80       	push   $0x80107760
-801038db:	68 20 2d 11 80       	push   $0x80112d20
+801038d6:	68 e0 76 10 80       	push   $0x801076e0
+801038db:	68 20 1d 11 80       	push   $0x80111d20
 801038e0:	e8 eb 0a 00 00       	call   801043d0 <initlock>
 }
 801038e5:	83 c4 10             	add    $0x10,%esp
@@ -7220,7 +7220,7 @@
   apicid = lapicid();
 801038fc:	e8 ef ef ff ff       	call   801028f0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-80103901:	8b 35 84 27 11 80    	mov    0x80112784,%esi
+80103901:	8b 35 84 17 11 80    	mov    0x80111784,%esi
 80103907:	85 f6                	test   %esi,%esi
 80103909:	7e 2a                	jle    80103935 <mycpu+0x45>
 8010390b:	31 d2                	xor    %edx,%edx
@@ -7231,13 +7231,13 @@
 80103915:	74 1e                	je     80103935 <mycpu+0x45>
     if (cpus[i].apicid == apicid)
 80103917:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-8010391d:	0f b6 99 a0 27 11 80 	movzbl -0x7feed860(%ecx),%ebx
+8010391d:	0f b6 99 a0 17 11 80 	movzbl -0x7feee860(%ecx),%ebx
 80103924:	39 c3                	cmp    %eax,%ebx
 80103926:	75 e8                	jne    80103910 <mycpu+0x20>
 }
 80103928:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return &cpus[i];
-8010392b:	8d 81 a0 27 11 80    	lea    -0x7feed860(%ecx),%eax
+8010392b:	8d 81 a0 17 11 80    	lea    -0x7feee860(%ecx),%eax
 }
 80103931:	5b                   	pop    %ebx
 80103932:	5e                   	pop    %esi
@@ -7245,11 +7245,11 @@
 80103934:	c3                   	ret    
   panic("unknown apicid\n");
 80103935:	83 ec 0c             	sub    $0xc,%esp
-80103938:	68 67 77 10 80       	push   $0x80107767
+80103938:	68 e7 76 10 80       	push   $0x801076e7
 8010393d:	e8 3e ca ff ff       	call   80100380 <panic>
     panic("mycpu called with interrupts enabled\n");
 80103942:	83 ec 0c             	sub    $0xc,%esp
-80103945:	68 44 78 10 80       	push   $0x80107844
+80103945:	68 c4 77 10 80       	push   $0x801077c4
 8010394a:	e8 31 ca ff ff       	call   80100380 <panic>
 8010394f:	90                   	nop
 
@@ -7263,7 +7263,7 @@
 }
 8010395b:	c9                   	leave  
   return mycpu()-cpus;
-8010395c:	2d a0 27 11 80       	sub    $0x801127a0,%eax
+8010395c:	2d a0 17 11 80       	sub    $0x801117a0,%eax
 80103961:	c1 f8 04             	sar    $0x4,%eax
 80103964:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
 }
@@ -7303,18 +7303,18 @@
 801039a7:	e8 04 fe ff ff       	call   801037b0 <allocproc>
 801039ac:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039ae:	a3 54 4c 11 80       	mov    %eax,0x80114c54
+801039ae:	a3 54 3c 11 80       	mov    %eax,0x80113c54
   if((p->pgdir = setupkvm()) == 0)
-801039b3:	e8 18 35 00 00       	call   80106ed0 <setupkvm>
+801039b3:	e8 88 34 00 00       	call   80106e40 <setupkvm>
 801039b8:	89 43 04             	mov    %eax,0x4(%ebx)
 801039bb:	85 c0                	test   %eax,%eax
 801039bd:	0f 84 bd 00 00 00    	je     80103a80 <userinit+0xe0>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
 801039c3:	83 ec 04             	sub    $0x4,%esp
 801039c6:	68 2c 00 00 00       	push   $0x2c
-801039cb:	68 60 b4 10 80       	push   $0x8010b460
+801039cb:	68 60 a4 10 80       	push   $0x8010a460
 801039d0:	50                   	push   %eax
-801039d1:	e8 aa 31 00 00       	call   80106b80 <inituvm>
+801039d1:	e8 1a 31 00 00       	call   80106af0 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
 801039d6:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
@@ -7356,20 +7356,20 @@
   safestrcpy(p->name, "initcode", sizeof(p->name));
 80103a3a:	8d 43 6c             	lea    0x6c(%ebx),%eax
 80103a3d:	6a 10                	push   $0x10
-80103a3f:	68 90 77 10 80       	push   $0x80107790
+80103a3f:	68 10 77 10 80       	push   $0x80107710
 80103a44:	50                   	push   %eax
 80103a45:	e8 d6 0d 00 00       	call   80104820 <safestrcpy>
   p->cwd = namei("/");
-80103a4a:	c7 04 24 99 77 10 80 	movl   $0x80107799,(%esp)
+80103a4a:	c7 04 24 19 77 10 80 	movl   $0x80107719,(%esp)
 80103a51:	e8 4a e6 ff ff       	call   801020a0 <namei>
 80103a56:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a59:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a59:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 80103a60:	e8 3b 0b 00 00       	call   801045a0 <acquire>
   p->state = RUNNABLE;
 80103a65:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-80103a6c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a6c:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 80103a73:	e8 c8 0a 00 00       	call   80104540 <release>
 }
 80103a78:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -7378,7 +7378,7 @@
 80103a7f:	c3                   	ret    
     panic("userinit: out of memory?");
 80103a80:	83 ec 0c             	sub    $0xc,%esp
-80103a83:	68 77 77 10 80       	push   $0x80107777
+80103a83:	68 f7 76 10 80       	push   $0x801076f7
 80103a88:	e8 f3 c8 ff ff       	call   80100380 <panic>
 80103a8d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -7410,7 +7410,7 @@
 80103ab8:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
 80103aba:	53                   	push   %ebx
-80103abb:	e8 b0 2f 00 00       	call   80106a70 <switchuvm>
+80103abb:	e8 20 2f 00 00       	call   801069e0 <switchuvm>
   return 0;
 80103ac0:	83 c4 10             	add    $0x10,%esp
 80103ac3:	31 c0                	xor    %eax,%eax
@@ -7427,7 +7427,7 @@
 80103ad5:	56                   	push   %esi
 80103ad6:	50                   	push   %eax
 80103ad7:	ff 73 04             	push   0x4(%ebx)
-80103ada:	e8 11 32 00 00       	call   80106cf0 <allocuvm>
+80103ada:	e8 81 31 00 00       	call   80106c60 <allocuvm>
 80103adf:	83 c4 10             	add    $0x10,%esp
 80103ae2:	85 c0                	test   %eax,%eax
 80103ae4:	75 cf                	jne    80103ab5 <growproc+0x25>
@@ -7441,7 +7441,7 @@
 80103af5:	56                   	push   %esi
 80103af6:	50                   	push   %eax
 80103af7:	ff 73 04             	push   0x4(%ebx)
-80103afa:	e8 21 33 00 00       	call   80106e20 <deallocuvm>
+80103afa:	e8 91 32 00 00       	call   80106d90 <deallocuvm>
 80103aff:	83 c4 10             	add    $0x10,%esp
 80103b02:	85 c0                	test   %eax,%eax
 80103b04:	75 af                	jne    80103ab5 <growproc+0x25>
@@ -7475,7 +7475,7 @@
 80103b41:	ff 33                	push   (%ebx)
 80103b43:	89 c7                	mov    %eax,%edi
 80103b45:	ff 73 04             	push   0x4(%ebx)
-80103b48:	e8 73 34 00 00       	call   80106fc0 <copyuvm>
+80103b48:	e8 e3 33 00 00       	call   80106f30 <copyuvm>
 80103b4d:	83 c4 10             	add    $0x10,%esp
 80103b50:	89 47 04             	mov    %eax,0x4(%edi)
 80103b53:	85 c0                	test   %eax,%eax
@@ -7534,12 +7534,12 @@
   pid = np->pid;
 80103bc6:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103bc9:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103bc9:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 80103bd0:	e8 cb 09 00 00       	call   801045a0 <acquire>
   np->state = RUNNABLE;
 80103bd5:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80103bdc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103bdc:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 80103be3:	e8 58 09 00 00       	call   80104540 <release>
   return pid;
 80103be8:	83 c4 10             	add    $0x10,%esp
@@ -7594,9 +7594,9 @@
     acquire(&ptable.lock);
 80103c51:	83 ec 0c             	sub    $0xc,%esp
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c54:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103c54:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
     acquire(&ptable.lock);
-80103c59:	68 20 2d 11 80       	push   $0x80112d20
+80103c59:	68 20 1d 11 80       	push   $0x80111d20
 80103c5e:	e8 3d 09 00 00       	call   801045a0 <acquire>
 80103c63:	83 c4 10             	add    $0x10,%esp
 80103c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -7610,7 +7610,7 @@
 80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
       switchuvm(p);
 80103c7f:	53                   	push   %ebx
-80103c80:	e8 eb 2d 00 00       	call   80106a70 <switchuvm>
+80103c80:	e8 5b 2d 00 00       	call   801069e0 <switchuvm>
       swtch(&(c->scheduler), p->context);
 80103c85:	58                   	pop    %eax
 80103c86:	5a                   	pop    %edx
@@ -7621,18 +7621,18 @@
       swtch(&(c->scheduler), p->context);
 80103c92:	e8 e4 0b 00 00       	call   8010487b <swtch>
       switchkvm();
-80103c97:	e8 c4 2d 00 00       	call   80106a60 <switchkvm>
+80103c97:	e8 34 2d 00 00       	call   801069d0 <switchkvm>
       c->proc = 0;
 80103c9c:	83 c4 10             	add    $0x10,%esp
 80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
 80103ca6:	00 00 00 
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
 80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103cac:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
 80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
     release(&ptable.lock);
 80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 2d 11 80       	push   $0x80112d20
+80103cb7:	68 20 1d 11 80       	push   $0x80111d20
 80103cbc:	e8 7f 08 00 00       	call   80104540 <release>
     sti();
 80103cc1:	83 c4 10             	add    $0x10,%esp
@@ -7656,7 +7656,7 @@
 80103ce5:	e8 b6 07 00 00       	call   801044a0 <popcli>
   if(!holding(&ptable.lock))
 80103cea:	83 ec 0c             	sub    $0xc,%esp
-80103ced:	68 20 2d 11 80       	push   $0x80112d20
+80103ced:	68 20 1d 11 80       	push   $0x80111d20
 80103cf2:	e8 09 08 00 00       	call   80104500 <holding>
 80103cf7:	83 c4 10             	add    $0x10,%esp
 80103cfa:	85 c0                	test   %eax,%eax
@@ -7700,19 +7700,19 @@
 80103d4c:	c3                   	ret    
     panic("sched ptable.lock");
 80103d4d:	83 ec 0c             	sub    $0xc,%esp
-80103d50:	68 9b 77 10 80       	push   $0x8010779b
+80103d50:	68 1b 77 10 80       	push   $0x8010771b
 80103d55:	e8 26 c6 ff ff       	call   80100380 <panic>
     panic("sched interruptible");
 80103d5a:	83 ec 0c             	sub    $0xc,%esp
-80103d5d:	68 c7 77 10 80       	push   $0x801077c7
+80103d5d:	68 47 77 10 80       	push   $0x80107747
 80103d62:	e8 19 c6 ff ff       	call   80100380 <panic>
     panic("sched running");
 80103d67:	83 ec 0c             	sub    $0xc,%esp
-80103d6a:	68 b9 77 10 80       	push   $0x801077b9
+80103d6a:	68 39 77 10 80       	push   $0x80107739
 80103d6f:	e8 0c c6 ff ff       	call   80100380 <panic>
     panic("sched locks");
 80103d74:	83 ec 0c             	sub    $0xc,%esp
-80103d77:	68 ad 77 10 80       	push   $0x801077ad
+80103d77:	68 2d 77 10 80       	push   $0x8010772d
 80103d7c:	e8 ff c5 ff ff       	call   80100380 <panic>
 80103d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103d88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -7729,7 +7729,7 @@
   struct proc *curproc = myproc();
 80103d99:	e8 d2 fb ff ff       	call   80103970 <myproc>
   if(curproc == initproc)
-80103d9e:	39 05 54 4c 11 80    	cmp    %eax,0x80114c54
+80103d9e:	39 05 54 3c 11 80    	cmp    %eax,0x80113c54
 80103da4:	0f 84 fd 00 00 00    	je     80103ea7 <exit+0x117>
 80103daa:	89 c3                	mov    %eax,%ebx
 80103dac:	8d 70 28             	lea    0x28(%eax),%esi
@@ -7761,7 +7761,7 @@
   curproc->cwd = 0;
 80103dec:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
   acquire(&ptable.lock);
-80103df3:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103df3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 80103dfa:	e8 a1 07 00 00       	call   801045a0 <acquire>
   wakeup1(curproc->parent);
 80103dff:	8b 53 14             	mov    0x14(%ebx),%edx
@@ -7772,11 +7772,11 @@
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e05:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103e05:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
 80103e0a:	eb 0e                	jmp    80103e1a <exit+0x8a>
 80103e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80103e10:	83 c0 7c             	add    $0x7c,%eax
-80103e13:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e13:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
 80103e18:	74 1c                	je     80103e36 <exit+0xa6>
     if(p->state == SLEEPING && p->chan == chan)
 80103e1a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
@@ -7787,17 +7787,17 @@
 80103e25:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 80103e2c:	83 c0 7c             	add    $0x7c,%eax
-80103e2f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e2f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
 80103e34:	75 e4                	jne    80103e1a <exit+0x8a>
       p->parent = initproc;
-80103e36:	8b 0d 54 4c 11 80    	mov    0x80114c54,%ecx
+80103e36:	8b 0d 54 3c 11 80    	mov    0x80113c54,%ecx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e3c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103e3c:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
 80103e41:	eb 10                	jmp    80103e53 <exit+0xc3>
 80103e43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80103e47:	90                   	nop
 80103e48:	83 c2 7c             	add    $0x7c,%edx
-80103e4b:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
+80103e4b:	81 fa 54 3c 11 80    	cmp    $0x80113c54,%edx
 80103e51:	74 3b                	je     80103e8e <exit+0xfe>
     if(p->parent == curproc){
 80103e53:	39 5a 14             	cmp    %ebx,0x14(%edx)
@@ -7809,12 +7809,12 @@
       if(p->state == ZOMBIE)
 80103e5f:	75 e7                	jne    80103e48 <exit+0xb8>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e61:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103e61:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
 80103e66:	eb 12                	jmp    80103e7a <exit+0xea>
 80103e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103e6f:	90                   	nop
 80103e70:	83 c0 7c             	add    $0x7c,%eax
-80103e73:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e73:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
 80103e78:	74 ce                	je     80103e48 <exit+0xb8>
     if(p->state == SLEEPING && p->chan == chan)
 80103e7a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
@@ -7830,11 +7830,11 @@
 80103e95:	e8 36 fe ff ff       	call   80103cd0 <sched>
   panic("zombie exit");
 80103e9a:	83 ec 0c             	sub    $0xc,%esp
-80103e9d:	68 e8 77 10 80       	push   $0x801077e8
+80103e9d:	68 68 77 10 80       	push   $0x80107768
 80103ea2:	e8 d9 c4 ff ff       	call   80100380 <panic>
     panic("init exiting");
 80103ea7:	83 ec 0c             	sub    $0xc,%esp
-80103eaa:	68 db 77 10 80       	push   $0x801077db
+80103eaa:	68 5b 77 10 80       	push   $0x8010775b
 80103eaf:	e8 cc c4 ff ff       	call   80100380 <panic>
 80103eb4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103ebb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -7856,18 +7856,18 @@
 80103ed5:	e8 c6 05 00 00       	call   801044a0 <popcli>
   acquire(&ptable.lock);
 80103eda:	83 ec 0c             	sub    $0xc,%esp
-80103edd:	68 20 2d 11 80       	push   $0x80112d20
+80103edd:	68 20 1d 11 80       	push   $0x80111d20
 80103ee2:	e8 b9 06 00 00       	call   801045a0 <acquire>
 80103ee7:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
 80103eea:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103eec:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103eec:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
 80103ef1:	eb 10                	jmp    80103f03 <wait+0x43>
 80103ef3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80103ef7:	90                   	nop
 80103ef8:	83 c3 7c             	add    $0x7c,%ebx
-80103efb:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103efb:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
 80103f01:	74 1b                	je     80103f1e <wait+0x5e>
       if(p->parent != curproc)
 80103f03:	39 73 14             	cmp    %esi,0x14(%ebx)
@@ -7880,7 +7880,7 @@
       havekids = 1;
 80103f11:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f16:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103f16:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
 80103f1c:	75 e5                	jne    80103f03 <wait+0x43>
     if(!havekids || curproc->killed){
 80103f1e:	85 c0                	test   %eax,%eax
@@ -7923,7 +7923,7 @@
         freevm(p->pgdir);
 80103f85:	5a                   	pop    %edx
 80103f86:	ff 73 04             	push   0x4(%ebx)
-80103f89:	e8 c2 2e 00 00       	call   80106e50 <freevm>
+80103f89:	e8 32 2e 00 00       	call   80106dc0 <freevm>
         p->pid = 0;
 80103f8e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
@@ -7935,7 +7935,7 @@
         p->state = UNUSED;
 80103fa7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-80103fae:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103fae:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 80103fb5:	e8 86 05 00 00       	call   80104540 <release>
         return pid;
 80103fba:	83 c4 10             	add    $0x10,%esp
@@ -7951,14 +7951,14 @@
       return -1;
 80103fc9:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-80103fce:	68 20 2d 11 80       	push   $0x80112d20
+80103fce:	68 20 1d 11 80       	push   $0x80111d20
 80103fd3:	e8 68 05 00 00       	call   80104540 <release>
       return -1;
 80103fd8:	83 c4 10             	add    $0x10,%esp
 80103fdb:	eb e0                	jmp    80103fbd <wait+0xfd>
     panic("sleep");
 80103fdd:	83 ec 0c             	sub    $0xc,%esp
-80103fe0:	68 f4 77 10 80       	push   $0x801077f4
+80103fe0:	68 74 77 10 80       	push   $0x80107774
 80103fe5:	e8 96 c3 ff ff       	call   80100380 <panic>
 80103fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -7969,7 +7969,7 @@
 80103ff3:	53                   	push   %ebx
 80103ff4:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103ff7:	68 20 2d 11 80       	push   $0x80112d20
+80103ff7:	68 20 1d 11 80       	push   $0x80111d20
 80103ffc:	e8 9f 05 00 00       	call   801045a0 <acquire>
   pushcli();
 80104001:	e8 4a 04 00 00       	call   80104450 <pushcli>
@@ -7984,7 +7984,7 @@
   sched();
 8010401d:	e8 ae fc ff ff       	call   80103cd0 <sched>
   release(&ptable.lock);
-80104022:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80104022:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 80104029:	e8 12 05 00 00       	call   80104540 <release>
 }
 8010402e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -8019,11 +8019,11 @@
 8010406c:	85 f6                	test   %esi,%esi
 8010406e:	74 76                	je     801040e6 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80104070:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
+80104070:	81 fe 20 1d 11 80    	cmp    $0x80111d20,%esi
 80104076:	74 50                	je     801040c8 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
 80104078:	83 ec 0c             	sub    $0xc,%esp
-8010407b:	68 20 2d 11 80       	push   $0x80112d20
+8010407b:	68 20 1d 11 80       	push   $0x80111d20
 80104080:	e8 1b 05 00 00       	call   801045a0 <acquire>
     release(lk);
 80104085:	89 34 24             	mov    %esi,(%esp)
@@ -8037,7 +8037,7 @@
   p->chan = 0;
 8010409c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-801040a3:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801040a3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
 801040aa:	e8 91 04 00 00       	call   80104540 <release>
     acquire(lk);
 801040af:	89 75 08             	mov    %esi,0x8(%ebp)
@@ -8068,11 +8068,11 @@
 801040e5:	c3                   	ret    
     panic("sleep without lk");
 801040e6:	83 ec 0c             	sub    $0xc,%esp
-801040e9:	68 fa 77 10 80       	push   $0x801077fa
+801040e9:	68 7a 77 10 80       	push   $0x8010777a
 801040ee:	e8 8d c2 ff ff       	call   80100380 <panic>
     panic("sleep");
 801040f3:	83 ec 0c             	sub    $0xc,%esp
-801040f6:	68 f4 77 10 80       	push   $0x801077f4
+801040f6:	68 74 77 10 80       	push   $0x80107774
 801040fb:	e8 80 c2 ff ff       	call   80100380 <panic>
 
 80104100 <wakeup>:
@@ -8088,15 +8088,15 @@
 80104104:	83 ec 10             	sub    $0x10,%esp
 80104107:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-8010410a:	68 20 2d 11 80       	push   $0x80112d20
+8010410a:	68 20 1d 11 80       	push   $0x80111d20
 8010410f:	e8 8c 04 00 00       	call   801045a0 <acquire>
 80104114:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104117:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104117:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
 8010411c:	eb 0c                	jmp    8010412a <wakeup+0x2a>
 8010411e:	66 90                	xchg   %ax,%ax
 80104120:	83 c0 7c             	add    $0x7c,%eax
-80104123:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104123:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
 80104128:	74 1c                	je     80104146 <wakeup+0x46>
     if(p->state == SLEEPING && p->chan == chan)
 8010412a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
@@ -8107,11 +8107,11 @@
 80104135:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 8010413c:	83 c0 7c             	add    $0x7c,%eax
-8010413f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+8010413f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
 80104144:	75 e4                	jne    8010412a <wakeup+0x2a>
   wakeup1(chan);
   release(&ptable.lock);
-80104146:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+80104146:	c7 45 08 20 1d 11 80 	movl   $0x80111d20,0x8(%ebp)
 }
 8010414d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80104150:	c9                   	leave  
@@ -8135,15 +8135,15 @@
   struct proc *p;
 
   acquire(&ptable.lock);
-8010416a:	68 20 2d 11 80       	push   $0x80112d20
+8010416a:	68 20 1d 11 80       	push   $0x80111d20
 8010416f:	e8 2c 04 00 00       	call   801045a0 <acquire>
 80104174:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104177:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104177:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
 8010417c:	eb 0c                	jmp    8010418a <kill+0x2a>
 8010417e:	66 90                	xchg   %ax,%ax
 80104180:	83 c0 7c             	add    $0x7c,%eax
-80104183:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104183:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
 80104188:	74 36                	je     801041c0 <kill+0x60>
     if(p->pid == pid){
 8010418a:	39 58 10             	cmp    %ebx,0x10(%eax)
@@ -8160,7 +8160,7 @@
 8010419c:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
 801041a3:	83 ec 0c             	sub    $0xc,%esp
-801041a6:	68 20 2d 11 80       	push   $0x80112d20
+801041a6:	68 20 1d 11 80       	push   $0x80111d20
 801041ab:	e8 90 03 00 00       	call   80104540 <release>
       return 0;
     }
@@ -8178,7 +8178,7 @@
 801041ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   release(&ptable.lock);
 801041c0:	83 ec 0c             	sub    $0xc,%esp
-801041c3:	68 20 2d 11 80       	push   $0x80112d20
+801041c3:	68 20 1d 11 80       	push   $0x80111d20
 801041c8:	e8 73 03 00 00       	call   80104540 <release>
 }
 801041cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -8203,7 +8203,7 @@
 801041e4:	56                   	push   %esi
 801041e5:	8d 75 e8             	lea    -0x18(%ebp),%esi
 801041e8:	53                   	push   %ebx
-801041e9:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
+801041e9:	bb c0 1d 11 80       	mov    $0x80111dc0,%ebx
 801041ee:	83 ec 3c             	sub    $0x3c,%esp
 801041f1:	eb 24                	jmp    80104217 <procdump+0x37>
 801041f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -8215,32 +8215,32 @@
     }
     cprintf("\n");
 801041f8:	83 ec 0c             	sub    $0xc,%esp
-801041fb:	68 77 80 10 80       	push   $0x80108077
+801041fb:	68 f7 7a 10 80       	push   $0x80107af7
 80104200:	e8 9b c4 ff ff       	call   801006a0 <cprintf>
 80104205:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
 80104208:	83 c3 7c             	add    $0x7c,%ebx
-8010420b:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
+8010420b:	81 fb c0 3c 11 80    	cmp    $0x80113cc0,%ebx
 80104211:	0f 84 81 00 00 00    	je     80104298 <procdump+0xb8>
     if(p->state == UNUSED)
 80104217:	8b 43 a0             	mov    -0x60(%ebx),%eax
 8010421a:	85 c0                	test   %eax,%eax
 8010421c:	74 ea                	je     80104208 <procdump+0x28>
       state = "???";
-8010421e:	ba 0b 78 10 80       	mov    $0x8010780b,%edx
+8010421e:	ba 8b 77 10 80       	mov    $0x8010778b,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
 80104223:	83 f8 05             	cmp    $0x5,%eax
 80104226:	77 11                	ja     80104239 <procdump+0x59>
-80104228:	8b 14 85 6c 78 10 80 	mov    -0x7fef8794(,%eax,4),%edx
+80104228:	8b 14 85 ec 77 10 80 	mov    -0x7fef8814(,%eax,4),%edx
       state = "???";
-8010422f:	b8 0b 78 10 80       	mov    $0x8010780b,%eax
+8010422f:	b8 8b 77 10 80       	mov    $0x8010778b,%eax
 80104234:	85 d2                	test   %edx,%edx
 80104236:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
 80104239:	53                   	push   %ebx
 8010423a:	52                   	push   %edx
 8010423b:	ff 73 a4             	push   -0x5c(%ebx)
-8010423e:	68 0f 78 10 80       	push   $0x8010780f
+8010423e:	68 8f 77 10 80       	push   $0x8010778f
 80104243:	e8 58 c4 ff ff       	call   801006a0 <cprintf>
     if(p->state == SLEEPING){
 80104248:	83 c4 10             	add    $0x10,%esp
@@ -8268,7 +8268,7 @@
 80104279:	83 c7 04             	add    $0x4,%edi
         cprintf(" %p", pc[i]);
 8010427c:	52                   	push   %edx
-8010427d:	68 61 72 10 80       	push   $0x80107261
+8010427d:	68 e1 71 10 80       	push   $0x801071e1
 80104282:	e8 19 c4 ff ff       	call   801006a0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
 80104287:	83 c4 10             	add    $0x10,%esp
@@ -8299,7 +8299,7 @@
 801042a4:	83 ec 0c             	sub    $0xc,%esp
 801042a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042aa:	68 84 78 10 80       	push   $0x80107884
+801042aa:	68 04 78 10 80       	push   $0x80107804
 801042af:	8d 43 04             	lea    0x4(%ebx),%eax
 801042b2:	50                   	push   %eax
 801042b3:	e8 18 01 00 00       	call   801043d0 <initlock>
@@ -8628,11 +8628,11 @@
 801044e1:	c3                   	ret    
     panic("popcli - interruptible");
 801044e2:	83 ec 0c             	sub    $0xc,%esp
-801044e5:	68 8f 78 10 80       	push   $0x8010788f
+801044e5:	68 0f 78 10 80       	push   $0x8010780f
 801044ea:	e8 91 be ff ff       	call   80100380 <panic>
     panic("popcli");
 801044ef:	83 ec 0c             	sub    $0xc,%esp
-801044f2:	68 a6 78 10 80       	push   $0x801078a6
+801044f2:	68 26 78 10 80       	push   $0x80107826
 801044f7:	e8 84 be ff ff       	call   80100380 <panic>
 801044fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -8693,7 +8693,7 @@
 80104553:	e8 48 ff ff ff       	call   801044a0 <popcli>
     panic("release");
 80104558:	83 ec 0c             	sub    $0xc,%esp
-8010455b:	68 ad 78 10 80       	push   $0x801078ad
+8010455b:	68 2d 78 10 80       	push   $0x8010782d
 80104560:	e8 1b be ff ff       	call   80100380 <panic>
 80104565:	8d 76 00             	lea    0x0(%esi),%esi
   r = lock->locked && lock->cpu == mycpu();
@@ -8805,7 +8805,7 @@
 80104648:	e8 53 fe ff ff       	call   801044a0 <popcli>
     panic("acquire");
 8010464d:	83 ec 0c             	sub    $0xc,%esp
-80104650:	68 b5 78 10 80       	push   $0x801078b5
+80104650:	68 35 78 10 80       	push   $0x80107835
 80104655:	e8 26 bd ff ff       	call   80100380 <panic>
 8010465a:	66 90                	xchg   %ax,%ax
 8010465c:	66 90                	xchg   %ax,%ax
@@ -9509,7 +9509,7 @@
 80104a5f:	90                   	nop
 
 80104a60 <syscall>:
-[SYS_draw]    sys_draw,   // Edited line, added the draw function pointer.
+[SYS_close]   sys_close,
 };
 
 void
@@ -9529,9 +9529,9 @@
 80104a71:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
 80104a74:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a77:	83 fa 15             	cmp    $0x15,%edx
+80104a77:	83 fa 14             	cmp    $0x14,%edx
 80104a7a:	77 24                	ja     80104aa0 <syscall+0x40>
-80104a7c:	8b 14 85 e0 78 10 80 	mov    -0x7fef8720(,%eax,4),%edx
+80104a7c:	8b 14 85 60 78 10 80 	mov    -0x7fef87a0(,%eax,4),%edx
 80104a83:	85 d2                	test   %edx,%edx
 80104a85:	74 19                	je     80104aa0 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
@@ -9557,7 +9557,7 @@
     cprintf("%d %s: unknown sys call %d\n",
 80104aa4:	50                   	push   %eax
 80104aa5:	ff 73 10             	push   0x10(%ebx)
-80104aa8:	68 bd 78 10 80       	push   $0x801078bd
+80104aa8:	68 3d 78 10 80       	push   $0x8010783d
 80104aad:	e8 ee bb ff ff       	call   801006a0 <cprintf>
     curproc->tf->eax = -1;
 80104ab2:	8b 43 18             	mov    0x18(%ebx),%eax
@@ -9734,7 +9734,7 @@
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
 80104bfe:	83 c4 0c             	add    $0xc,%esp
 80104c01:	ff 76 04             	push   0x4(%esi)
-80104c04:	68 58 79 10 80       	push   $0x80107958
+80104c04:	68 d4 78 10 80       	push   $0x801078d4
 80104c09:	56                   	push   %esi
 80104c0a:	e8 d1 d3 ff ff       	call   80101fe0 <dirlink>
 80104c0f:	83 c4 10             	add    $0x10,%esp
@@ -9742,7 +9742,7 @@
 80104c14:	78 18                	js     80104c2e <create+0x15e>
 80104c16:	83 ec 04             	sub    $0x4,%esp
 80104c19:	ff 73 04             	push   0x4(%ebx)
-80104c1c:	68 57 79 10 80       	push   $0x80107957
+80104c1c:	68 d3 78 10 80       	push   $0x801078d3
 80104c21:	56                   	push   %esi
 80104c22:	e8 b9 d3 ff ff       	call   80101fe0 <dirlink>
 80104c27:	83 c4 10             	add    $0x10,%esp
@@ -9750,7 +9750,7 @@
 80104c2c:	79 92                	jns    80104bc0 <create+0xf0>
       panic("create dots");
 80104c2e:	83 ec 0c             	sub    $0xc,%esp
-80104c31:	68 4b 79 10 80       	push   $0x8010794b
+80104c31:	68 c7 78 10 80       	push   $0x801078c7
 80104c36:	e8 45 b7 ff ff       	call   80100380 <panic>
 80104c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80104c3f:	90                   	nop
@@ -9767,11 +9767,11 @@
 80104c4b:	c3                   	ret    
     panic("create: dirlink");
 80104c4c:	83 ec 0c             	sub    $0xc,%esp
-80104c4f:	68 5a 79 10 80       	push   $0x8010795a
+80104c4f:	68 d6 78 10 80       	push   $0x801078d6
 80104c54:	e8 27 b7 ff ff       	call   80100380 <panic>
     panic("create: ialloc");
 80104c59:	83 ec 0c             	sub    $0xc,%esp
-80104c5c:	68 3c 79 10 80       	push   $0x8010793c
+80104c5c:	68 b8 78 10 80       	push   $0x801078b8
 80104c61:	e8 1a b7 ff ff       	call   80100380 <panic>
 80104c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80104c6d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -10255,14 +10255,14 @@
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
 8010505d:	58                   	pop    %eax
 8010505e:	5a                   	pop    %edx
-8010505f:	68 58 79 10 80       	push   $0x80107958
+8010505f:	68 d4 78 10 80       	push   $0x801078d4
 80105064:	53                   	push   %ebx
 80105065:	e8 56 cc ff ff       	call   80101cc0 <namecmp>
 8010506a:	83 c4 10             	add    $0x10,%esp
 8010506d:	85 c0                	test   %eax,%eax
 8010506f:	0f 84 fb 00 00 00    	je     80105170 <sys_unlink+0x160>
 80105075:	83 ec 08             	sub    $0x8,%esp
-80105078:	68 57 79 10 80       	push   $0x80107957
+80105078:	68 d3 78 10 80       	push   $0x801078d3
 8010507d:	53                   	push   %ebx
 8010507e:	e8 3d cc ff ff       	call   80101cc0 <namecmp>
 80105083:	83 c4 10             	add    $0x10,%esp
@@ -10394,15 +10394,15 @@
 801051bd:	e9 64 ff ff ff       	jmp    80105126 <sys_unlink+0x116>
       panic("isdirempty: readi");
 801051c2:	83 ec 0c             	sub    $0xc,%esp
-801051c5:	68 7c 79 10 80       	push   $0x8010797c
+801051c5:	68 f8 78 10 80       	push   $0x801078f8
 801051ca:	e8 b1 b1 ff ff       	call   80100380 <panic>
     panic("unlink: writei");
 801051cf:	83 ec 0c             	sub    $0xc,%esp
-801051d2:	68 8e 79 10 80       	push   $0x8010798e
+801051d2:	68 0a 79 10 80       	push   $0x8010790a
 801051d7:	e8 a4 b1 ff ff       	call   80100380 <panic>
     panic("unlink: nlink < 1");
 801051dc:	83 ec 0c             	sub    $0xc,%esp
-801051df:	68 6a 79 10 80       	push   $0x8010796a
+801051df:	68 e6 78 10 80       	push   $0x801078e6
 801051e4:	e8 97 b1 ff ff       	call   80100380 <panic>
 801051e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -11209,13 +11209,13 @@
     return -1;
   acquire(&tickslock);
 8010577d:	83 ec 0c             	sub    $0xc,%esp
-80105780:	68 80 4c 11 80       	push   $0x80114c80
+80105780:	68 80 3c 11 80       	push   $0x80113c80
 80105785:	e8 16 ee ff ff       	call   801045a0 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
 8010578a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-8010578d:	8b 1d 60 4c 11 80    	mov    0x80114c60,%ebx
+8010578d:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
   while(ticks - ticks0 < n){
 80105793:	83 c4 10             	add    $0x10,%esp
 80105796:	85 d2                	test   %edx,%edx
@@ -11228,11 +11228,11 @@
     }
     sleep(&ticks, &tickslock);
 801057a0:	83 ec 08             	sub    $0x8,%esp
-801057a3:	68 80 4c 11 80       	push   $0x80114c80
-801057a8:	68 60 4c 11 80       	push   $0x80114c60
+801057a3:	68 80 3c 11 80       	push   $0x80113c80
+801057a8:	68 60 3c 11 80       	push   $0x80113c60
 801057ad:	e8 8e e8 ff ff       	call   80104040 <sleep>
   while(ticks - ticks0 < n){
-801057b2:	a1 60 4c 11 80       	mov    0x80114c60,%eax
+801057b2:	a1 60 3c 11 80       	mov    0x80113c60,%eax
 801057b7:	83 c4 10             	add    $0x10,%esp
 801057ba:	29 d8                	sub    %ebx,%eax
 801057bc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
@@ -11244,7 +11244,7 @@
 801057cb:	74 d3                	je     801057a0 <sys_sleep+0x40>
       release(&tickslock);
 801057cd:	83 ec 0c             	sub    $0xc,%esp
-801057d0:	68 80 4c 11 80       	push   $0x80114c80
+801057d0:	68 80 3c 11 80       	push   $0x80113c80
 801057d5:	e8 66 ed ff ff       	call   80104540 <release>
   }
   release(&tickslock);
@@ -11261,7 +11261,7 @@
 801057ee:	66 90                	xchg   %ax,%ax
   release(&tickslock);
 801057f0:	83 ec 0c             	sub    $0xc,%esp
-801057f3:	68 80 4c 11 80       	push   $0x80114c80
+801057f3:	68 80 3c 11 80       	push   $0x80113c80
 801057f8:	e8 43 ed ff ff       	call   80104540 <release>
   return 0;
 801057fd:	83 c4 10             	add    $0x10,%esp
@@ -11289,12 +11289,12 @@
   uint xticks;
 
   acquire(&tickslock);
-80105817:	68 80 4c 11 80       	push   $0x80114c80
+80105817:	68 80 3c 11 80       	push   $0x80113c80
 8010581c:	e8 7f ed ff ff       	call   801045a0 <acquire>
   xticks = ticks;
-80105821:	8b 1d 60 4c 11 80    	mov    0x80114c60,%ebx
+80105821:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
   release(&tickslock);
-80105827:	c7 04 24 80 4c 11 80 	movl   $0x80114c80,(%esp)
+80105827:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
 8010582e:	e8 0d ed ff ff       	call   80104540 <release>
   return xticks;
 }
@@ -11302,4422 +11302,4350 @@
 80105835:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80105838:	c9                   	leave  
 80105839:	c3                   	ret    
-8010583a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80105840 <sys_draw>:
-
-// function to implement the draw function call.
-int
-sys_draw(void){
-80105840:	55                   	push   %ebp
-80105841:	89 e5                	mov    %esp,%ebp
-80105843:	57                   	push   %edi
-80105844:	56                   	push   %esi
-  void* buff;
-  uint size;
-
-  argptr(0, (void*)&buff, sizeof(buff));
-80105845:	8d 85 f8 fa ff ff    	lea    -0x508(%ebp),%eax
-  argptr(1, (void*)&size, sizeof(size));
-
-  char ascii_text [] = "                    ***********************\n               *********************************\n           *******   *     *       *    *    *******\n        *******   ***      **     **     ***   *******\n      ******   *****       *********      *****    *****\n    ******  ********       *********       ******    *****\n   ****   **********       *********       *********   *****\n  ****  **************    ***********     ************   ****\n ****  *************************************************  ****\n****  ***************************************************  ****\n****  ****************************************************  ****\n****  ****************************************************  ****\n ****  ***************************************************  ****\n  ****  *******     ****  ***********  ****     *********  ****\n   ****   *****      *      *******      *      ********  ****\n    *****   ****             *****             ******   *****\n      *****   **              ***              **    ******\n       ******   *              *              *   *******\n         *******                                *******\n            ********                         *******\n               *********************************\n                    ***********************\n";
-8010584b:	be a0 79 10 80       	mov    $0x801079a0,%esi
-sys_draw(void){
-80105850:	81 ec 04 05 00 00    	sub    $0x504,%esp
-  argptr(0, (void*)&buff, sizeof(buff));
-80105856:	6a 04                	push   $0x4
-80105858:	50                   	push   %eax
-80105859:	6a 00                	push   $0x0
-8010585b:	e8 10 f1 ff ff       	call   80104970 <argptr>
-  argptr(1, (void*)&size, sizeof(size));
-80105860:	83 c4 0c             	add    $0xc,%esp
-80105863:	8d 85 fc fa ff ff    	lea    -0x504(%ebp),%eax
-80105869:	6a 04                	push   $0x4
-8010586b:	50                   	push   %eax
-8010586c:	6a 01                	push   $0x1
-8010586e:	e8 fd f0 ff ff       	call   80104970 <argptr>
-  if(sizeof(ascii_text) > size){
-80105873:	8b 95 fc fa ff ff    	mov    -0x504(%ebp),%edx
-  char ascii_text [] = "                    ***********************\n               *********************************\n           *******   *     *       *    *    *******\n        *******   ***      **     **     ***   *******\n      ******   *****       *********      *****    *****\n    ******  ********       *********       ******    *****\n   ****   **********       *********       *********   *****\n  ****  **************    ***********     ************   ****\n ****  *************************************************  ****\n****  ***************************************************  ****\n****  ****************************************************  ****\n****  ****************************************************  ****\n ****  ***************************************************  ****\n  ****  *******     ****  ***********  ****     *********  ****\n   ****   *****      *      *******      *      ********  ****\n    *****   ****             *****             ******   *****\n      *****   **              ***              **    ******\n       ******   *              *              *   *******\n         *******                                *******\n            ********                         *******\n               *********************************\n                    ***********************\n";
-80105879:	b9 3e 01 00 00       	mov    $0x13e,%ecx
-  if(sizeof(ascii_text) > size){
-8010587e:	83 c4 10             	add    $0x10,%esp
-  char ascii_text [] = "                    ***********************\n               *********************************\n           *******   *     *       *    *    *******\n        *******   ***      **     **     ***   *******\n      ******   *****       *********      *****    *****\n    ******  ********       *********       ******    *****\n   ****   **********       *********       *********   *****\n  ****  **************    ***********     ************   ****\n ****  *************************************************  ****\n****  ***************************************************  ****\n****  ****************************************************  ****\n****  ****************************************************  ****\n ****  ***************************************************  ****\n  ****  *******     ****  ***********  ****     *********  ****\n   ****   *****      *      *******      *      ********  ****\n    *****   ****             *****             ******   *****\n      *****   **              ***              **    ******\n       ******   *              *              *   *******\n         *******                                *******\n            ********                         *******\n               *********************************\n                    ***********************\n";
-80105881:	8d 85 00 fb ff ff    	lea    -0x500(%ebp),%eax
-80105887:	89 c7                	mov    %eax,%edi
-80105889:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-  if(sizeof(ascii_text) > size){
-8010588b:	81 fa f7 04 00 00    	cmp    $0x4f7,%edx
-80105891:	76 25                	jbe    801058b8 <sys_draw+0x78>
-    return -1;
-  }
-  strncpy((char*)buff, ascii_text, size);
-80105893:	83 ec 04             	sub    $0x4,%esp
-80105896:	52                   	push   %edx
-80105897:	50                   	push   %eax
-80105898:	ff b5 f8 fa ff ff    	push   -0x508(%ebp)
-8010589e:	e8 1d ef ff ff       	call   801047c0 <strncpy>
-  return sizeof(ascii_text);
-801058a3:	83 c4 10             	add    $0x10,%esp
-801058a6:	b8 f8 04 00 00       	mov    $0x4f8,%eax
-801058ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801058ae:	5e                   	pop    %esi
-801058af:	5f                   	pop    %edi
-801058b0:	5d                   	pop    %ebp
-801058b1:	c3                   	ret    
-801058b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-801058b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801058bd:	eb ec                	jmp    801058ab <sys_draw+0x6b>
-
-801058bf <alltraps>:
+8010583a <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-801058bf:	1e                   	push   %ds
+8010583a:	1e                   	push   %ds
   pushl %es
-801058c0:	06                   	push   %es
+8010583b:	06                   	push   %es
   pushl %fs
-801058c1:	0f a0                	push   %fs
+8010583c:	0f a0                	push   %fs
   pushl %gs
-801058c3:	0f a8                	push   %gs
+8010583e:	0f a8                	push   %gs
   pushal
-801058c5:	60                   	pusha  
+80105840:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-801058c6:	66 b8 10 00          	mov    $0x10,%ax
+80105841:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-801058ca:	8e d8                	mov    %eax,%ds
+80105845:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-801058cc:	8e c0                	mov    %eax,%es
+80105847:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-801058ce:	54                   	push   %esp
+80105849:	54                   	push   %esp
   call trap
-801058cf:	e8 cc 00 00 00       	call   801059a0 <trap>
+8010584a:	e8 c1 00 00 00       	call   80105910 <trap>
   addl $4, %esp
-801058d4:	83 c4 04             	add    $0x4,%esp
+8010584f:	83 c4 04             	add    $0x4,%esp
 
-801058d7 <trapret>:
+80105852 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-801058d7:	61                   	popa   
+80105852:	61                   	popa   
   popl %gs
-801058d8:	0f a9                	pop    %gs
+80105853:	0f a9                	pop    %gs
   popl %fs
-801058da:	0f a1                	pop    %fs
+80105855:	0f a1                	pop    %fs
   popl %es
-801058dc:	07                   	pop    %es
+80105857:	07                   	pop    %es
   popl %ds
-801058dd:	1f                   	pop    %ds
+80105858:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-801058de:	83 c4 08             	add    $0x8,%esp
+80105859:	83 c4 08             	add    $0x8,%esp
   iret
-801058e1:	cf                   	iret   
-801058e2:	66 90                	xchg   %ax,%ax
-801058e4:	66 90                	xchg   %ax,%ax
-801058e6:	66 90                	xchg   %ax,%ax
-801058e8:	66 90                	xchg   %ax,%ax
-801058ea:	66 90                	xchg   %ax,%ax
-801058ec:	66 90                	xchg   %ax,%ax
-801058ee:	66 90                	xchg   %ax,%ax
+8010585c:	cf                   	iret   
+8010585d:	66 90                	xchg   %ax,%ax
+8010585f:	90                   	nop
 
-801058f0 <tvinit>:
+80105860 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-801058f0:	55                   	push   %ebp
+80105860:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-801058f1:	31 c0                	xor    %eax,%eax
+80105861:	31 c0                	xor    %eax,%eax
 {
-801058f3:	89 e5                	mov    %esp,%ebp
-801058f5:	83 ec 08             	sub    $0x8,%esp
-801058f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801058ff:	90                   	nop
+80105863:	89 e5                	mov    %esp,%ebp
+80105865:	83 ec 08             	sub    $0x8,%esp
+80105868:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010586f:	90                   	nop
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105900:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
-80105907:	c7 04 c5 c2 4c 11 80 	movl   $0x8e000008,-0x7feeb33e(,%eax,8)
-8010590e:	08 00 00 8e 
-80105912:	66 89 14 c5 c0 4c 11 	mov    %dx,-0x7feeb340(,%eax,8)
-80105919:	80 
-8010591a:	c1 ea 10             	shr    $0x10,%edx
-8010591d:	66 89 14 c5 c6 4c 11 	mov    %dx,-0x7feeb33a(,%eax,8)
-80105924:	80 
+80105870:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105877:	c7 04 c5 c2 3c 11 80 	movl   $0x8e000008,-0x7feec33e(,%eax,8)
+8010587e:	08 00 00 8e 
+80105882:	66 89 14 c5 c0 3c 11 	mov    %dx,-0x7feec340(,%eax,8)
+80105889:	80 
+8010588a:	c1 ea 10             	shr    $0x10,%edx
+8010588d:	66 89 14 c5 c6 3c 11 	mov    %dx,-0x7feec33a(,%eax,8)
+80105894:	80 
   for(i = 0; i < 256; i++)
-80105925:	83 c0 01             	add    $0x1,%eax
-80105928:	3d 00 01 00 00       	cmp    $0x100,%eax
-8010592d:	75 d1                	jne    80105900 <tvinit+0x10>
+80105895:	83 c0 01             	add    $0x1,%eax
+80105898:	3d 00 01 00 00       	cmp    $0x100,%eax
+8010589d:	75 d1                	jne    80105870 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-8010592f:	83 ec 08             	sub    $0x8,%esp
+8010589f:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105932:	a1 08 b1 10 80       	mov    0x8010b108,%eax
-80105937:	c7 05 c2 4e 11 80 08 	movl   $0xef000008,0x80114ec2
-8010593e:	00 00 ef 
+801058a2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+801058a7:	c7 05 c2 3e 11 80 08 	movl   $0xef000008,0x80113ec2
+801058ae:	00 00 ef 
   initlock(&tickslock, "time");
-80105941:	68 98 7e 10 80       	push   $0x80107e98
-80105946:	68 80 4c 11 80       	push   $0x80114c80
+801058b1:	68 19 79 10 80       	push   $0x80107919
+801058b6:	68 80 3c 11 80       	push   $0x80113c80
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-8010594b:	66 a3 c0 4e 11 80    	mov    %ax,0x80114ec0
-80105951:	c1 e8 10             	shr    $0x10,%eax
-80105954:	66 a3 c6 4e 11 80    	mov    %ax,0x80114ec6
+801058bb:	66 a3 c0 3e 11 80    	mov    %ax,0x80113ec0
+801058c1:	c1 e8 10             	shr    $0x10,%eax
+801058c4:	66 a3 c6 3e 11 80    	mov    %ax,0x80113ec6
   initlock(&tickslock, "time");
-8010595a:	e8 71 ea ff ff       	call   801043d0 <initlock>
+801058ca:	e8 01 eb ff ff       	call   801043d0 <initlock>
 }
-8010595f:	83 c4 10             	add    $0x10,%esp
-80105962:	c9                   	leave  
-80105963:	c3                   	ret    
-80105964:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010596b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010596f:	90                   	nop
+801058cf:	83 c4 10             	add    $0x10,%esp
+801058d2:	c9                   	leave  
+801058d3:	c3                   	ret    
+801058d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058df:	90                   	nop
 
-80105970 <idtinit>:
+801058e0 <idtinit>:
 
 void
 idtinit(void)
 {
-80105970:	55                   	push   %ebp
+801058e0:	55                   	push   %ebp
   pd[0] = size-1;
-80105971:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-80105976:	89 e5                	mov    %esp,%ebp
-80105978:	83 ec 10             	sub    $0x10,%esp
-8010597b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+801058e1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+801058e6:	89 e5                	mov    %esp,%ebp
+801058e8:	83 ec 10             	sub    $0x10,%esp
+801058eb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-8010597f:	b8 c0 4c 11 80       	mov    $0x80114cc0,%eax
-80105984:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+801058ef:	b8 c0 3c 11 80       	mov    $0x80113cc0,%eax
+801058f4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-80105988:	c1 e8 10             	shr    $0x10,%eax
-8010598b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+801058f8:	c1 e8 10             	shr    $0x10,%eax
+801058fb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-8010598f:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105992:	0f 01 18             	lidtl  (%eax)
+801058ff:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105902:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105995:	c9                   	leave  
-80105996:	c3                   	ret    
-80105997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010599e:	66 90                	xchg   %ax,%ax
+80105905:	c9                   	leave  
+80105906:	c3                   	ret    
+80105907:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010590e:	66 90                	xchg   %ax,%ax
 
-801059a0 <trap>:
+80105910 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-801059a0:	55                   	push   %ebp
-801059a1:	89 e5                	mov    %esp,%ebp
-801059a3:	57                   	push   %edi
-801059a4:	56                   	push   %esi
-801059a5:	53                   	push   %ebx
-801059a6:	83 ec 1c             	sub    $0x1c,%esp
-801059a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105910:	55                   	push   %ebp
+80105911:	89 e5                	mov    %esp,%ebp
+80105913:	57                   	push   %edi
+80105914:	56                   	push   %esi
+80105915:	53                   	push   %ebx
+80105916:	83 ec 1c             	sub    $0x1c,%esp
+80105919:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-801059ac:	8b 43 30             	mov    0x30(%ebx),%eax
-801059af:	83 f8 40             	cmp    $0x40,%eax
-801059b2:	0f 84 68 01 00 00    	je     80105b20 <trap+0x180>
+8010591c:	8b 43 30             	mov    0x30(%ebx),%eax
+8010591f:	83 f8 40             	cmp    $0x40,%eax
+80105922:	0f 84 68 01 00 00    	je     80105a90 <trap+0x180>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-801059b8:	83 e8 20             	sub    $0x20,%eax
-801059bb:	83 f8 1f             	cmp    $0x1f,%eax
-801059be:	0f 87 8c 00 00 00    	ja     80105a50 <trap+0xb0>
-801059c4:	ff 24 85 40 7f 10 80 	jmp    *-0x7fef80c0(,%eax,4)
-801059cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801059cf:	90                   	nop
+80105928:	83 e8 20             	sub    $0x20,%eax
+8010592b:	83 f8 1f             	cmp    $0x1f,%eax
+8010592e:	0f 87 8c 00 00 00    	ja     801059c0 <trap+0xb0>
+80105934:	ff 24 85 c0 79 10 80 	jmp    *-0x7fef8640(,%eax,4)
+8010593b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010593f:	90                   	nop
       release(&tickslock);
     }
     lapiceoi();
     break;
   case T_IRQ0 + IRQ_IDE:
     ideintr();
-801059d0:	e8 6b c8 ff ff       	call   80102240 <ideintr>
+80105940:	e8 fb c8 ff ff       	call   80102240 <ideintr>
     lapiceoi();
-801059d5:	e8 36 cf ff ff       	call   80102910 <lapiceoi>
+80105945:	e8 c6 cf ff ff       	call   80102910 <lapiceoi>
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801059da:	e8 91 df ff ff       	call   80103970 <myproc>
-801059df:	85 c0                	test   %eax,%eax
-801059e1:	74 1d                	je     80105a00 <trap+0x60>
-801059e3:	e8 88 df ff ff       	call   80103970 <myproc>
-801059e8:	8b 50 24             	mov    0x24(%eax),%edx
-801059eb:	85 d2                	test   %edx,%edx
-801059ed:	74 11                	je     80105a00 <trap+0x60>
-801059ef:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801059f3:	83 e0 03             	and    $0x3,%eax
-801059f6:	66 83 f8 03          	cmp    $0x3,%ax
-801059fa:	0f 84 e8 01 00 00    	je     80105be8 <trap+0x248>
+8010594a:	e8 21 e0 ff ff       	call   80103970 <myproc>
+8010594f:	85 c0                	test   %eax,%eax
+80105951:	74 1d                	je     80105970 <trap+0x60>
+80105953:	e8 18 e0 ff ff       	call   80103970 <myproc>
+80105958:	8b 50 24             	mov    0x24(%eax),%edx
+8010595b:	85 d2                	test   %edx,%edx
+8010595d:	74 11                	je     80105970 <trap+0x60>
+8010595f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105963:	83 e0 03             	and    $0x3,%eax
+80105966:	66 83 f8 03          	cmp    $0x3,%ax
+8010596a:	0f 84 e8 01 00 00    	je     80105b58 <trap+0x248>
     exit();
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-80105a00:	e8 6b df ff ff       	call   80103970 <myproc>
-80105a05:	85 c0                	test   %eax,%eax
-80105a07:	74 0f                	je     80105a18 <trap+0x78>
-80105a09:	e8 62 df ff ff       	call   80103970 <myproc>
-80105a0e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105a12:	0f 84 b8 00 00 00    	je     80105ad0 <trap+0x130>
+80105970:	e8 fb df ff ff       	call   80103970 <myproc>
+80105975:	85 c0                	test   %eax,%eax
+80105977:	74 0f                	je     80105988 <trap+0x78>
+80105979:	e8 f2 df ff ff       	call   80103970 <myproc>
+8010597e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105982:	0f 84 b8 00 00 00    	je     80105a40 <trap+0x130>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a18:	e8 53 df ff ff       	call   80103970 <myproc>
-80105a1d:	85 c0                	test   %eax,%eax
-80105a1f:	74 1d                	je     80105a3e <trap+0x9e>
-80105a21:	e8 4a df ff ff       	call   80103970 <myproc>
-80105a26:	8b 40 24             	mov    0x24(%eax),%eax
-80105a29:	85 c0                	test   %eax,%eax
-80105a2b:	74 11                	je     80105a3e <trap+0x9e>
-80105a2d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a31:	83 e0 03             	and    $0x3,%eax
-80105a34:	66 83 f8 03          	cmp    $0x3,%ax
-80105a38:	0f 84 0f 01 00 00    	je     80105b4d <trap+0x1ad>
+80105988:	e8 e3 df ff ff       	call   80103970 <myproc>
+8010598d:	85 c0                	test   %eax,%eax
+8010598f:	74 1d                	je     801059ae <trap+0x9e>
+80105991:	e8 da df ff ff       	call   80103970 <myproc>
+80105996:	8b 40 24             	mov    0x24(%eax),%eax
+80105999:	85 c0                	test   %eax,%eax
+8010599b:	74 11                	je     801059ae <trap+0x9e>
+8010599d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801059a1:	83 e0 03             	and    $0x3,%eax
+801059a4:	66 83 f8 03          	cmp    $0x3,%ax
+801059a8:	0f 84 0f 01 00 00    	je     80105abd <trap+0x1ad>
     exit();
 }
-80105a3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105a41:	5b                   	pop    %ebx
-80105a42:	5e                   	pop    %esi
-80105a43:	5f                   	pop    %edi
-80105a44:	5d                   	pop    %ebp
-80105a45:	c3                   	ret    
-80105a46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105a4d:	8d 76 00             	lea    0x0(%esi),%esi
+801059ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801059b1:	5b                   	pop    %ebx
+801059b2:	5e                   	pop    %esi
+801059b3:	5f                   	pop    %edi
+801059b4:	5d                   	pop    %ebp
+801059b5:	c3                   	ret    
+801059b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059bd:	8d 76 00             	lea    0x0(%esi),%esi
     if(myproc() == 0 || (tf->cs&3) == 0){
-80105a50:	e8 1b df ff ff       	call   80103970 <myproc>
-80105a55:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105a58:	85 c0                	test   %eax,%eax
-80105a5a:	0f 84 a2 01 00 00    	je     80105c02 <trap+0x262>
-80105a60:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105a64:	0f 84 98 01 00 00    	je     80105c02 <trap+0x262>
+801059c0:	e8 ab df ff ff       	call   80103970 <myproc>
+801059c5:	8b 7b 38             	mov    0x38(%ebx),%edi
+801059c8:	85 c0                	test   %eax,%eax
+801059ca:	0f 84 a2 01 00 00    	je     80105b72 <trap+0x262>
+801059d0:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+801059d4:	0f 84 98 01 00 00    	je     80105b72 <trap+0x262>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105a6a:	0f 20 d1             	mov    %cr2,%ecx
-80105a6d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+801059da:	0f 20 d1             	mov    %cr2,%ecx
+801059dd:	89 4d d8             	mov    %ecx,-0x28(%ebp)
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105a70:	e8 db de ff ff       	call   80103950 <cpuid>
-80105a75:	8b 73 30             	mov    0x30(%ebx),%esi
-80105a78:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80105a7b:	8b 43 34             	mov    0x34(%ebx),%eax
-80105a7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801059e0:	e8 6b df ff ff       	call   80103950 <cpuid>
+801059e5:	8b 73 30             	mov    0x30(%ebx),%esi
+801059e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801059eb:	8b 43 34             	mov    0x34(%ebx),%eax
+801059ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             myproc()->pid, myproc()->name, tf->trapno,
-80105a81:	e8 ea de ff ff       	call   80103970 <myproc>
-80105a86:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80105a89:	e8 e2 de ff ff       	call   80103970 <myproc>
+801059f1:	e8 7a df ff ff       	call   80103970 <myproc>
+801059f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801059f9:	e8 72 df ff ff       	call   80103970 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105a8e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105a91:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80105a94:	51                   	push   %ecx
-80105a95:	57                   	push   %edi
-80105a96:	52                   	push   %edx
-80105a97:	ff 75 e4             	push   -0x1c(%ebp)
-80105a9a:	56                   	push   %esi
+801059fe:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105a01:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105a04:	51                   	push   %ecx
+80105a05:	57                   	push   %edi
+80105a06:	52                   	push   %edx
+80105a07:	ff 75 e4             	push   -0x1c(%ebp)
+80105a0a:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-80105a9b:	8b 75 e0             	mov    -0x20(%ebp),%esi
-80105a9e:	83 c6 6c             	add    $0x6c,%esi
+80105a0b:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105a0e:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105aa1:	56                   	push   %esi
-80105aa2:	ff 70 10             	push   0x10(%eax)
-80105aa5:	68 fc 7e 10 80       	push   $0x80107efc
-80105aaa:	e8 f1 ab ff ff       	call   801006a0 <cprintf>
+80105a11:	56                   	push   %esi
+80105a12:	ff 70 10             	push   0x10(%eax)
+80105a15:	68 7c 79 10 80       	push   $0x8010797c
+80105a1a:	e8 81 ac ff ff       	call   801006a0 <cprintf>
     myproc()->killed = 1;
-80105aaf:	83 c4 20             	add    $0x20,%esp
-80105ab2:	e8 b9 de ff ff       	call   80103970 <myproc>
-80105ab7:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80105a1f:	83 c4 20             	add    $0x20,%esp
+80105a22:	e8 49 df ff ff       	call   80103970 <myproc>
+80105a27:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105abe:	e8 ad de ff ff       	call   80103970 <myproc>
-80105ac3:	85 c0                	test   %eax,%eax
-80105ac5:	0f 85 18 ff ff ff    	jne    801059e3 <trap+0x43>
-80105acb:	e9 30 ff ff ff       	jmp    80105a00 <trap+0x60>
+80105a2e:	e8 3d df ff ff       	call   80103970 <myproc>
+80105a33:	85 c0                	test   %eax,%eax
+80105a35:	0f 85 18 ff ff ff    	jne    80105953 <trap+0x43>
+80105a3b:	e9 30 ff ff ff       	jmp    80105970 <trap+0x60>
   if(myproc() && myproc()->state == RUNNING &&
-80105ad0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105ad4:	0f 85 3e ff ff ff    	jne    80105a18 <trap+0x78>
+80105a40:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80105a44:	0f 85 3e ff ff ff    	jne    80105988 <trap+0x78>
     yield();
-80105ada:	e8 11 e5 ff ff       	call   80103ff0 <yield>
-80105adf:	e9 34 ff ff ff       	jmp    80105a18 <trap+0x78>
-80105ae4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a4a:	e8 a1 e5 ff ff       	call   80103ff0 <yield>
+80105a4f:	e9 34 ff ff ff       	jmp    80105988 <trap+0x78>
+80105a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105ae8:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105aeb:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105aef:	e8 5c de ff ff       	call   80103950 <cpuid>
-80105af4:	57                   	push   %edi
-80105af5:	56                   	push   %esi
-80105af6:	50                   	push   %eax
-80105af7:	68 a4 7e 10 80       	push   $0x80107ea4
-80105afc:	e8 9f ab ff ff       	call   801006a0 <cprintf>
+80105a58:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105a5b:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105a5f:	e8 ec de ff ff       	call   80103950 <cpuid>
+80105a64:	57                   	push   %edi
+80105a65:	56                   	push   %esi
+80105a66:	50                   	push   %eax
+80105a67:	68 24 79 10 80       	push   $0x80107924
+80105a6c:	e8 2f ac ff ff       	call   801006a0 <cprintf>
     lapiceoi();
-80105b01:	e8 0a ce ff ff       	call   80102910 <lapiceoi>
+80105a71:	e8 9a ce ff ff       	call   80102910 <lapiceoi>
     break;
-80105b06:	83 c4 10             	add    $0x10,%esp
+80105a76:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105b09:	e8 62 de ff ff       	call   80103970 <myproc>
-80105b0e:	85 c0                	test   %eax,%eax
-80105b10:	0f 85 cd fe ff ff    	jne    801059e3 <trap+0x43>
-80105b16:	e9 e5 fe ff ff       	jmp    80105a00 <trap+0x60>
-80105b1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105b1f:	90                   	nop
+80105a79:	e8 f2 de ff ff       	call   80103970 <myproc>
+80105a7e:	85 c0                	test   %eax,%eax
+80105a80:	0f 85 cd fe ff ff    	jne    80105953 <trap+0x43>
+80105a86:	e9 e5 fe ff ff       	jmp    80105970 <trap+0x60>
+80105a8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a8f:	90                   	nop
     if(myproc()->killed)
-80105b20:	e8 4b de ff ff       	call   80103970 <myproc>
-80105b25:	8b 70 24             	mov    0x24(%eax),%esi
-80105b28:	85 f6                	test   %esi,%esi
-80105b2a:	0f 85 c8 00 00 00    	jne    80105bf8 <trap+0x258>
+80105a90:	e8 db de ff ff       	call   80103970 <myproc>
+80105a95:	8b 70 24             	mov    0x24(%eax),%esi
+80105a98:	85 f6                	test   %esi,%esi
+80105a9a:	0f 85 c8 00 00 00    	jne    80105b68 <trap+0x258>
     myproc()->tf = tf;
-80105b30:	e8 3b de ff ff       	call   80103970 <myproc>
-80105b35:	89 58 18             	mov    %ebx,0x18(%eax)
+80105aa0:	e8 cb de ff ff       	call   80103970 <myproc>
+80105aa5:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105b38:	e8 23 ef ff ff       	call   80104a60 <syscall>
+80105aa8:	e8 b3 ef ff ff       	call   80104a60 <syscall>
     if(myproc()->killed)
-80105b3d:	e8 2e de ff ff       	call   80103970 <myproc>
-80105b42:	8b 48 24             	mov    0x24(%eax),%ecx
-80105b45:	85 c9                	test   %ecx,%ecx
-80105b47:	0f 84 f1 fe ff ff    	je     80105a3e <trap+0x9e>
-}
-80105b4d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b50:	5b                   	pop    %ebx
-80105b51:	5e                   	pop    %esi
-80105b52:	5f                   	pop    %edi
-80105b53:	5d                   	pop    %ebp
+80105aad:	e8 be de ff ff       	call   80103970 <myproc>
+80105ab2:	8b 48 24             	mov    0x24(%eax),%ecx
+80105ab5:	85 c9                	test   %ecx,%ecx
+80105ab7:	0f 84 f1 fe ff ff    	je     801059ae <trap+0x9e>
+}
+80105abd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ac0:	5b                   	pop    %ebx
+80105ac1:	5e                   	pop    %esi
+80105ac2:	5f                   	pop    %edi
+80105ac3:	5d                   	pop    %ebp
       exit();
-80105b54:	e9 37 e2 ff ff       	jmp    80103d90 <exit>
-80105b59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ac4:	e9 c7 e2 ff ff       	jmp    80103d90 <exit>
+80105ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     uartintr();
-80105b60:	e8 3b 02 00 00       	call   80105da0 <uartintr>
+80105ad0:	e8 3b 02 00 00       	call   80105d10 <uartintr>
     lapiceoi();
-80105b65:	e8 a6 cd ff ff       	call   80102910 <lapiceoi>
+80105ad5:	e8 36 ce ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105b6a:	e8 01 de ff ff       	call   80103970 <myproc>
-80105b6f:	85 c0                	test   %eax,%eax
-80105b71:	0f 85 6c fe ff ff    	jne    801059e3 <trap+0x43>
-80105b77:	e9 84 fe ff ff       	jmp    80105a00 <trap+0x60>
-80105b7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105ada:	e8 91 de ff ff       	call   80103970 <myproc>
+80105adf:	85 c0                	test   %eax,%eax
+80105ae1:	0f 85 6c fe ff ff    	jne    80105953 <trap+0x43>
+80105ae7:	e9 84 fe ff ff       	jmp    80105970 <trap+0x60>
+80105aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     kbdintr();
-80105b80:	e8 4b cc ff ff       	call   801027d0 <kbdintr>
+80105af0:	e8 db cc ff ff       	call   801027d0 <kbdintr>
     lapiceoi();
-80105b85:	e8 86 cd ff ff       	call   80102910 <lapiceoi>
+80105af5:	e8 16 ce ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105b8a:	e8 e1 dd ff ff       	call   80103970 <myproc>
-80105b8f:	85 c0                	test   %eax,%eax
-80105b91:	0f 85 4c fe ff ff    	jne    801059e3 <trap+0x43>
-80105b97:	e9 64 fe ff ff       	jmp    80105a00 <trap+0x60>
-80105b9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105afa:	e8 71 de ff ff       	call   80103970 <myproc>
+80105aff:	85 c0                	test   %eax,%eax
+80105b01:	0f 85 4c fe ff ff    	jne    80105953 <trap+0x43>
+80105b07:	e9 64 fe ff ff       	jmp    80105970 <trap+0x60>
+80105b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(cpuid() == 0){
-80105ba0:	e8 ab dd ff ff       	call   80103950 <cpuid>
-80105ba5:	85 c0                	test   %eax,%eax
-80105ba7:	0f 85 28 fe ff ff    	jne    801059d5 <trap+0x35>
+80105b10:	e8 3b de ff ff       	call   80103950 <cpuid>
+80105b15:	85 c0                	test   %eax,%eax
+80105b17:	0f 85 28 fe ff ff    	jne    80105945 <trap+0x35>
       acquire(&tickslock);
-80105bad:	83 ec 0c             	sub    $0xc,%esp
-80105bb0:	68 80 4c 11 80       	push   $0x80114c80
-80105bb5:	e8 e6 e9 ff ff       	call   801045a0 <acquire>
+80105b1d:	83 ec 0c             	sub    $0xc,%esp
+80105b20:	68 80 3c 11 80       	push   $0x80113c80
+80105b25:	e8 76 ea ff ff       	call   801045a0 <acquire>
       wakeup(&ticks);
-80105bba:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
+80105b2a:	c7 04 24 60 3c 11 80 	movl   $0x80113c60,(%esp)
       ticks++;
-80105bc1:	83 05 60 4c 11 80 01 	addl   $0x1,0x80114c60
+80105b31:	83 05 60 3c 11 80 01 	addl   $0x1,0x80113c60
       wakeup(&ticks);
-80105bc8:	e8 33 e5 ff ff       	call   80104100 <wakeup>
+80105b38:	e8 c3 e5 ff ff       	call   80104100 <wakeup>
       release(&tickslock);
-80105bcd:	c7 04 24 80 4c 11 80 	movl   $0x80114c80,(%esp)
-80105bd4:	e8 67 e9 ff ff       	call   80104540 <release>
-80105bd9:	83 c4 10             	add    $0x10,%esp
+80105b3d:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
+80105b44:	e8 f7 e9 ff ff       	call   80104540 <release>
+80105b49:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105bdc:	e9 f4 fd ff ff       	jmp    801059d5 <trap+0x35>
-80105be1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b4c:	e9 f4 fd ff ff       	jmp    80105945 <trap+0x35>
+80105b51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     exit();
-80105be8:	e8 a3 e1 ff ff       	call   80103d90 <exit>
-80105bed:	e9 0e fe ff ff       	jmp    80105a00 <trap+0x60>
-80105bf2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105b58:	e8 33 e2 ff ff       	call   80103d90 <exit>
+80105b5d:	e9 0e fe ff ff       	jmp    80105970 <trap+0x60>
+80105b62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105bf8:	e8 93 e1 ff ff       	call   80103d90 <exit>
-80105bfd:	e9 2e ff ff ff       	jmp    80105b30 <trap+0x190>
-80105c02:	0f 20 d6             	mov    %cr2,%esi
+80105b68:	e8 23 e2 ff ff       	call   80103d90 <exit>
+80105b6d:	e9 2e ff ff ff       	jmp    80105aa0 <trap+0x190>
+80105b72:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105c05:	e8 46 dd ff ff       	call   80103950 <cpuid>
-80105c0a:	83 ec 0c             	sub    $0xc,%esp
-80105c0d:	56                   	push   %esi
-80105c0e:	57                   	push   %edi
-80105c0f:	50                   	push   %eax
-80105c10:	ff 73 30             	push   0x30(%ebx)
-80105c13:	68 c8 7e 10 80       	push   $0x80107ec8
-80105c18:	e8 83 aa ff ff       	call   801006a0 <cprintf>
+80105b75:	e8 d6 dd ff ff       	call   80103950 <cpuid>
+80105b7a:	83 ec 0c             	sub    $0xc,%esp
+80105b7d:	56                   	push   %esi
+80105b7e:	57                   	push   %edi
+80105b7f:	50                   	push   %eax
+80105b80:	ff 73 30             	push   0x30(%ebx)
+80105b83:	68 48 79 10 80       	push   $0x80107948
+80105b88:	e8 13 ab ff ff       	call   801006a0 <cprintf>
       panic("trap");
-80105c1d:	83 c4 14             	add    $0x14,%esp
-80105c20:	68 9d 7e 10 80       	push   $0x80107e9d
-80105c25:	e8 56 a7 ff ff       	call   80100380 <panic>
-80105c2a:	66 90                	xchg   %ax,%ax
-80105c2c:	66 90                	xchg   %ax,%ax
-80105c2e:	66 90                	xchg   %ax,%ax
+80105b8d:	83 c4 14             	add    $0x14,%esp
+80105b90:	68 1e 79 10 80       	push   $0x8010791e
+80105b95:	e8 e6 a7 ff ff       	call   80100380 <panic>
+80105b9a:	66 90                	xchg   %ax,%ax
+80105b9c:	66 90                	xchg   %ax,%ax
+80105b9e:	66 90                	xchg   %ax,%ax
 
-80105c30 <uartgetc>:
+80105ba0 <uartgetc>:
 }
 
 static int
 uartgetc(void)
 {
   if(!uart)
-80105c30:	a1 c0 54 11 80       	mov    0x801154c0,%eax
-80105c35:	85 c0                	test   %eax,%eax
-80105c37:	74 17                	je     80105c50 <uartgetc+0x20>
+80105ba0:	a1 c0 44 11 80       	mov    0x801144c0,%eax
+80105ba5:	85 c0                	test   %eax,%eax
+80105ba7:	74 17                	je     80105bc0 <uartgetc+0x20>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c39:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c3e:	ec                   	in     (%dx),%al
+80105ba9:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105bae:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105c3f:	a8 01                	test   $0x1,%al
-80105c41:	74 0d                	je     80105c50 <uartgetc+0x20>
-80105c43:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c48:	ec                   	in     (%dx),%al
+80105baf:	a8 01                	test   $0x1,%al
+80105bb1:	74 0d                	je     80105bc0 <uartgetc+0x20>
+80105bb3:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105bb8:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105c49:	0f b6 c0             	movzbl %al,%eax
-80105c4c:	c3                   	ret    
-80105c4d:	8d 76 00             	lea    0x0(%esi),%esi
+80105bb9:	0f b6 c0             	movzbl %al,%eax
+80105bbc:	c3                   	ret    
+80105bbd:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105c50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105bc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105c55:	c3                   	ret    
-80105c56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105c5d:	8d 76 00             	lea    0x0(%esi),%esi
+80105bc5:	c3                   	ret    
+80105bc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bcd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80105c60 <uartinit>:
+80105bd0 <uartinit>:
 {
-80105c60:	55                   	push   %ebp
+80105bd0:	55                   	push   %ebp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c61:	31 c9                	xor    %ecx,%ecx
-80105c63:	89 c8                	mov    %ecx,%eax
-80105c65:	89 e5                	mov    %esp,%ebp
-80105c67:	57                   	push   %edi
-80105c68:	bf fa 03 00 00       	mov    $0x3fa,%edi
-80105c6d:	56                   	push   %esi
-80105c6e:	89 fa                	mov    %edi,%edx
-80105c70:	53                   	push   %ebx
-80105c71:	83 ec 1c             	sub    $0x1c,%esp
-80105c74:	ee                   	out    %al,(%dx)
-80105c75:	be fb 03 00 00       	mov    $0x3fb,%esi
-80105c7a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105c7f:	89 f2                	mov    %esi,%edx
-80105c81:	ee                   	out    %al,(%dx)
-80105c82:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105c87:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c8c:	ee                   	out    %al,(%dx)
-80105c8d:	bb f9 03 00 00       	mov    $0x3f9,%ebx
-80105c92:	89 c8                	mov    %ecx,%eax
-80105c94:	89 da                	mov    %ebx,%edx
-80105c96:	ee                   	out    %al,(%dx)
-80105c97:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c9c:	89 f2                	mov    %esi,%edx
-80105c9e:	ee                   	out    %al,(%dx)
-80105c9f:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105ca4:	89 c8                	mov    %ecx,%eax
-80105ca6:	ee                   	out    %al,(%dx)
-80105ca7:	b8 01 00 00 00       	mov    $0x1,%eax
-80105cac:	89 da                	mov    %ebx,%edx
-80105cae:	ee                   	out    %al,(%dx)
+80105bd1:	31 c9                	xor    %ecx,%ecx
+80105bd3:	89 c8                	mov    %ecx,%eax
+80105bd5:	89 e5                	mov    %esp,%ebp
+80105bd7:	57                   	push   %edi
+80105bd8:	bf fa 03 00 00       	mov    $0x3fa,%edi
+80105bdd:	56                   	push   %esi
+80105bde:	89 fa                	mov    %edi,%edx
+80105be0:	53                   	push   %ebx
+80105be1:	83 ec 1c             	sub    $0x1c,%esp
+80105be4:	ee                   	out    %al,(%dx)
+80105be5:	be fb 03 00 00       	mov    $0x3fb,%esi
+80105bea:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105bef:	89 f2                	mov    %esi,%edx
+80105bf1:	ee                   	out    %al,(%dx)
+80105bf2:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105bf7:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105bfc:	ee                   	out    %al,(%dx)
+80105bfd:	bb f9 03 00 00       	mov    $0x3f9,%ebx
+80105c02:	89 c8                	mov    %ecx,%eax
+80105c04:	89 da                	mov    %ebx,%edx
+80105c06:	ee                   	out    %al,(%dx)
+80105c07:	b8 03 00 00 00       	mov    $0x3,%eax
+80105c0c:	89 f2                	mov    %esi,%edx
+80105c0e:	ee                   	out    %al,(%dx)
+80105c0f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105c14:	89 c8                	mov    %ecx,%eax
+80105c16:	ee                   	out    %al,(%dx)
+80105c17:	b8 01 00 00 00       	mov    $0x1,%eax
+80105c1c:	89 da                	mov    %ebx,%edx
+80105c1e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105caf:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105cb4:	ec                   	in     (%dx),%al
+80105c1f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105c24:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105cb5:	3c ff                	cmp    $0xff,%al
-80105cb7:	74 78                	je     80105d31 <uartinit+0xd1>
+80105c25:	3c ff                	cmp    $0xff,%al
+80105c27:	74 78                	je     80105ca1 <uartinit+0xd1>
   uart = 1;
-80105cb9:	c7 05 c0 54 11 80 01 	movl   $0x1,0x801154c0
-80105cc0:	00 00 00 
-80105cc3:	89 fa                	mov    %edi,%edx
-80105cc5:	ec                   	in     (%dx),%al
-80105cc6:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105ccb:	ec                   	in     (%dx),%al
+80105c29:	c7 05 c0 44 11 80 01 	movl   $0x1,0x801144c0
+80105c30:	00 00 00 
+80105c33:	89 fa                	mov    %edi,%edx
+80105c35:	ec                   	in     (%dx),%al
+80105c36:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105c3b:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105ccc:	83 ec 08             	sub    $0x8,%esp
+80105c3c:	83 ec 08             	sub    $0x8,%esp
   for(p="xv6...\n"; *p; p++)
-80105ccf:	bf c0 7f 10 80       	mov    $0x80107fc0,%edi
-80105cd4:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105c3f:	bf 40 7a 10 80       	mov    $0x80107a40,%edi
+80105c44:	be fd 03 00 00       	mov    $0x3fd,%esi
   ioapicenable(IRQ_COM1, 0);
-80105cd9:	6a 00                	push   $0x0
-80105cdb:	6a 04                	push   $0x4
-80105cdd:	e8 9e c7 ff ff       	call   80102480 <ioapicenable>
+80105c49:	6a 00                	push   $0x0
+80105c4b:	6a 04                	push   $0x4
+80105c4d:	e8 2e c8 ff ff       	call   80102480 <ioapicenable>
   for(p="xv6...\n"; *p; p++)
-80105ce2:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
+80105c52:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
   ioapicenable(IRQ_COM1, 0);
-80105ce6:	83 c4 10             	add    $0x10,%esp
-80105ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c56:	83 c4 10             	add    $0x10,%esp
+80105c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(!uart)
-80105cf0:	a1 c0 54 11 80       	mov    0x801154c0,%eax
-80105cf5:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105cfa:	85 c0                	test   %eax,%eax
-80105cfc:	75 14                	jne    80105d12 <uartinit+0xb2>
-80105cfe:	eb 23                	jmp    80105d23 <uartinit+0xc3>
+80105c60:	a1 c0 44 11 80       	mov    0x801144c0,%eax
+80105c65:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105c6a:	85 c0                	test   %eax,%eax
+80105c6c:	75 14                	jne    80105c82 <uartinit+0xb2>
+80105c6e:	eb 23                	jmp    80105c93 <uartinit+0xc3>
     microdelay(10);
-80105d00:	83 ec 0c             	sub    $0xc,%esp
-80105d03:	6a 0a                	push   $0xa
-80105d05:	e8 26 cc ff ff       	call   80102930 <microdelay>
+80105c70:	83 ec 0c             	sub    $0xc,%esp
+80105c73:	6a 0a                	push   $0xa
+80105c75:	e8 b6 cc ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105d0a:	83 c4 10             	add    $0x10,%esp
-80105d0d:	83 eb 01             	sub    $0x1,%ebx
-80105d10:	74 07                	je     80105d19 <uartinit+0xb9>
-80105d12:	89 f2                	mov    %esi,%edx
-80105d14:	ec                   	in     (%dx),%al
-80105d15:	a8 20                	test   $0x20,%al
-80105d17:	74 e7                	je     80105d00 <uartinit+0xa0>
+80105c7a:	83 c4 10             	add    $0x10,%esp
+80105c7d:	83 eb 01             	sub    $0x1,%ebx
+80105c80:	74 07                	je     80105c89 <uartinit+0xb9>
+80105c82:	89 f2                	mov    %esi,%edx
+80105c84:	ec                   	in     (%dx),%al
+80105c85:	a8 20                	test   $0x20,%al
+80105c87:	74 e7                	je     80105c70 <uartinit+0xa0>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105d19:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-80105d1d:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105d22:	ee                   	out    %al,(%dx)
+80105c89:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+80105c8d:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105c92:	ee                   	out    %al,(%dx)
   for(p="xv6...\n"; *p; p++)
-80105d23:	0f b6 47 01          	movzbl 0x1(%edi),%eax
-80105d27:	83 c7 01             	add    $0x1,%edi
-80105d2a:	88 45 e7             	mov    %al,-0x19(%ebp)
-80105d2d:	84 c0                	test   %al,%al
-80105d2f:	75 bf                	jne    80105cf0 <uartinit+0x90>
-}
-80105d31:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105d34:	5b                   	pop    %ebx
-80105d35:	5e                   	pop    %esi
-80105d36:	5f                   	pop    %edi
-80105d37:	5d                   	pop    %ebp
-80105d38:	c3                   	ret    
-80105d39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c93:	0f b6 47 01          	movzbl 0x1(%edi),%eax
+80105c97:	83 c7 01             	add    $0x1,%edi
+80105c9a:	88 45 e7             	mov    %al,-0x19(%ebp)
+80105c9d:	84 c0                	test   %al,%al
+80105c9f:	75 bf                	jne    80105c60 <uartinit+0x90>
+}
+80105ca1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ca4:	5b                   	pop    %ebx
+80105ca5:	5e                   	pop    %esi
+80105ca6:	5f                   	pop    %edi
+80105ca7:	5d                   	pop    %ebp
+80105ca8:	c3                   	ret    
+80105ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105d40 <uartputc>:
+80105cb0 <uartputc>:
   if(!uart)
-80105d40:	a1 c0 54 11 80       	mov    0x801154c0,%eax
-80105d45:	85 c0                	test   %eax,%eax
-80105d47:	74 47                	je     80105d90 <uartputc+0x50>
-{
-80105d49:	55                   	push   %ebp
-80105d4a:	89 e5                	mov    %esp,%ebp
-80105d4c:	56                   	push   %esi
+80105cb0:	a1 c0 44 11 80       	mov    0x801144c0,%eax
+80105cb5:	85 c0                	test   %eax,%eax
+80105cb7:	74 47                	je     80105d00 <uartputc+0x50>
+{
+80105cb9:	55                   	push   %ebp
+80105cba:	89 e5                	mov    %esp,%ebp
+80105cbc:	56                   	push   %esi
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105d4d:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105d52:	53                   	push   %ebx
-80105d53:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105d58:	eb 18                	jmp    80105d72 <uartputc+0x32>
-80105d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105cbd:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105cc2:	53                   	push   %ebx
+80105cc3:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105cc8:	eb 18                	jmp    80105ce2 <uartputc+0x32>
+80105cca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     microdelay(10);
-80105d60:	83 ec 0c             	sub    $0xc,%esp
-80105d63:	6a 0a                	push   $0xa
-80105d65:	e8 c6 cb ff ff       	call   80102930 <microdelay>
+80105cd0:	83 ec 0c             	sub    $0xc,%esp
+80105cd3:	6a 0a                	push   $0xa
+80105cd5:	e8 56 cc ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105d6a:	83 c4 10             	add    $0x10,%esp
-80105d6d:	83 eb 01             	sub    $0x1,%ebx
-80105d70:	74 07                	je     80105d79 <uartputc+0x39>
-80105d72:	89 f2                	mov    %esi,%edx
-80105d74:	ec                   	in     (%dx),%al
-80105d75:	a8 20                	test   $0x20,%al
-80105d77:	74 e7                	je     80105d60 <uartputc+0x20>
+80105cda:	83 c4 10             	add    $0x10,%esp
+80105cdd:	83 eb 01             	sub    $0x1,%ebx
+80105ce0:	74 07                	je     80105ce9 <uartputc+0x39>
+80105ce2:	89 f2                	mov    %esi,%edx
+80105ce4:	ec                   	in     (%dx),%al
+80105ce5:	a8 20                	test   $0x20,%al
+80105ce7:	74 e7                	je     80105cd0 <uartputc+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105d79:	8b 45 08             	mov    0x8(%ebp),%eax
-80105d7c:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105d81:	ee                   	out    %al,(%dx)
-}
-80105d82:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105d85:	5b                   	pop    %ebx
-80105d86:	5e                   	pop    %esi
-80105d87:	5d                   	pop    %ebp
-80105d88:	c3                   	ret    
-80105d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d90:	c3                   	ret    
-80105d91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d9f:	90                   	nop
+80105ce9:	8b 45 08             	mov    0x8(%ebp),%eax
+80105cec:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105cf1:	ee                   	out    %al,(%dx)
+}
+80105cf2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105cf5:	5b                   	pop    %ebx
+80105cf6:	5e                   	pop    %esi
+80105cf7:	5d                   	pop    %ebp
+80105cf8:	c3                   	ret    
+80105cf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d00:	c3                   	ret    
+80105d01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d0f:	90                   	nop
 
-80105da0 <uartintr>:
+80105d10 <uartintr>:
 
 void
 uartintr(void)
 {
-80105da0:	55                   	push   %ebp
-80105da1:	89 e5                	mov    %esp,%ebp
-80105da3:	83 ec 14             	sub    $0x14,%esp
+80105d10:	55                   	push   %ebp
+80105d11:	89 e5                	mov    %esp,%ebp
+80105d13:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105da6:	68 30 5c 10 80       	push   $0x80105c30
-80105dab:	e8 d0 aa ff ff       	call   80100880 <consoleintr>
+80105d16:	68 a0 5b 10 80       	push   $0x80105ba0
+80105d1b:	e8 60 ab ff ff       	call   80100880 <consoleintr>
 }
-80105db0:	83 c4 10             	add    $0x10,%esp
-80105db3:	c9                   	leave  
-80105db4:	c3                   	ret    
+80105d20:	83 c4 10             	add    $0x10,%esp
+80105d23:	c9                   	leave  
+80105d24:	c3                   	ret    
 
-80105db5 <vector0>:
+80105d25 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105db5:	6a 00                	push   $0x0
+80105d25:	6a 00                	push   $0x0
   pushl $0
-80105db7:	6a 00                	push   $0x0
+80105d27:	6a 00                	push   $0x0
   jmp alltraps
-80105db9:	e9 01 fb ff ff       	jmp    801058bf <alltraps>
+80105d29:	e9 0c fb ff ff       	jmp    8010583a <alltraps>
 
-80105dbe <vector1>:
+80105d2e <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105dbe:	6a 00                	push   $0x0
+80105d2e:	6a 00                	push   $0x0
   pushl $1
-80105dc0:	6a 01                	push   $0x1
+80105d30:	6a 01                	push   $0x1
   jmp alltraps
-80105dc2:	e9 f8 fa ff ff       	jmp    801058bf <alltraps>
+80105d32:	e9 03 fb ff ff       	jmp    8010583a <alltraps>
 
-80105dc7 <vector2>:
+80105d37 <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105dc7:	6a 00                	push   $0x0
+80105d37:	6a 00                	push   $0x0
   pushl $2
-80105dc9:	6a 02                	push   $0x2
+80105d39:	6a 02                	push   $0x2
   jmp alltraps
-80105dcb:	e9 ef fa ff ff       	jmp    801058bf <alltraps>
+80105d3b:	e9 fa fa ff ff       	jmp    8010583a <alltraps>
 
-80105dd0 <vector3>:
+80105d40 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105dd0:	6a 00                	push   $0x0
+80105d40:	6a 00                	push   $0x0
   pushl $3
-80105dd2:	6a 03                	push   $0x3
+80105d42:	6a 03                	push   $0x3
   jmp alltraps
-80105dd4:	e9 e6 fa ff ff       	jmp    801058bf <alltraps>
+80105d44:	e9 f1 fa ff ff       	jmp    8010583a <alltraps>
 
-80105dd9 <vector4>:
+80105d49 <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105dd9:	6a 00                	push   $0x0
+80105d49:	6a 00                	push   $0x0
   pushl $4
-80105ddb:	6a 04                	push   $0x4
+80105d4b:	6a 04                	push   $0x4
   jmp alltraps
-80105ddd:	e9 dd fa ff ff       	jmp    801058bf <alltraps>
+80105d4d:	e9 e8 fa ff ff       	jmp    8010583a <alltraps>
 
-80105de2 <vector5>:
+80105d52 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105de2:	6a 00                	push   $0x0
+80105d52:	6a 00                	push   $0x0
   pushl $5
-80105de4:	6a 05                	push   $0x5
+80105d54:	6a 05                	push   $0x5
   jmp alltraps
-80105de6:	e9 d4 fa ff ff       	jmp    801058bf <alltraps>
+80105d56:	e9 df fa ff ff       	jmp    8010583a <alltraps>
 
-80105deb <vector6>:
+80105d5b <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105deb:	6a 00                	push   $0x0
+80105d5b:	6a 00                	push   $0x0
   pushl $6
-80105ded:	6a 06                	push   $0x6
+80105d5d:	6a 06                	push   $0x6
   jmp alltraps
-80105def:	e9 cb fa ff ff       	jmp    801058bf <alltraps>
+80105d5f:	e9 d6 fa ff ff       	jmp    8010583a <alltraps>
 
-80105df4 <vector7>:
+80105d64 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105df4:	6a 00                	push   $0x0
+80105d64:	6a 00                	push   $0x0
   pushl $7
-80105df6:	6a 07                	push   $0x7
+80105d66:	6a 07                	push   $0x7
   jmp alltraps
-80105df8:	e9 c2 fa ff ff       	jmp    801058bf <alltraps>
+80105d68:	e9 cd fa ff ff       	jmp    8010583a <alltraps>
 
-80105dfd <vector8>:
+80105d6d <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105dfd:	6a 08                	push   $0x8
+80105d6d:	6a 08                	push   $0x8
   jmp alltraps
-80105dff:	e9 bb fa ff ff       	jmp    801058bf <alltraps>
+80105d6f:	e9 c6 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e04 <vector9>:
+80105d74 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105e04:	6a 00                	push   $0x0
+80105d74:	6a 00                	push   $0x0
   pushl $9
-80105e06:	6a 09                	push   $0x9
+80105d76:	6a 09                	push   $0x9
   jmp alltraps
-80105e08:	e9 b2 fa ff ff       	jmp    801058bf <alltraps>
+80105d78:	e9 bd fa ff ff       	jmp    8010583a <alltraps>
 
-80105e0d <vector10>:
+80105d7d <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105e0d:	6a 0a                	push   $0xa
+80105d7d:	6a 0a                	push   $0xa
   jmp alltraps
-80105e0f:	e9 ab fa ff ff       	jmp    801058bf <alltraps>
+80105d7f:	e9 b6 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e14 <vector11>:
+80105d84 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105e14:	6a 0b                	push   $0xb
+80105d84:	6a 0b                	push   $0xb
   jmp alltraps
-80105e16:	e9 a4 fa ff ff       	jmp    801058bf <alltraps>
+80105d86:	e9 af fa ff ff       	jmp    8010583a <alltraps>
 
-80105e1b <vector12>:
+80105d8b <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105e1b:	6a 0c                	push   $0xc
+80105d8b:	6a 0c                	push   $0xc
   jmp alltraps
-80105e1d:	e9 9d fa ff ff       	jmp    801058bf <alltraps>
+80105d8d:	e9 a8 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e22 <vector13>:
+80105d92 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105e22:	6a 0d                	push   $0xd
+80105d92:	6a 0d                	push   $0xd
   jmp alltraps
-80105e24:	e9 96 fa ff ff       	jmp    801058bf <alltraps>
+80105d94:	e9 a1 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e29 <vector14>:
+80105d99 <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105e29:	6a 0e                	push   $0xe
+80105d99:	6a 0e                	push   $0xe
   jmp alltraps
-80105e2b:	e9 8f fa ff ff       	jmp    801058bf <alltraps>
+80105d9b:	e9 9a fa ff ff       	jmp    8010583a <alltraps>
 
-80105e30 <vector15>:
+80105da0 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105e30:	6a 00                	push   $0x0
+80105da0:	6a 00                	push   $0x0
   pushl $15
-80105e32:	6a 0f                	push   $0xf
+80105da2:	6a 0f                	push   $0xf
   jmp alltraps
-80105e34:	e9 86 fa ff ff       	jmp    801058bf <alltraps>
+80105da4:	e9 91 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e39 <vector16>:
+80105da9 <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105e39:	6a 00                	push   $0x0
+80105da9:	6a 00                	push   $0x0
   pushl $16
-80105e3b:	6a 10                	push   $0x10
+80105dab:	6a 10                	push   $0x10
   jmp alltraps
-80105e3d:	e9 7d fa ff ff       	jmp    801058bf <alltraps>
+80105dad:	e9 88 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e42 <vector17>:
+80105db2 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105e42:	6a 11                	push   $0x11
+80105db2:	6a 11                	push   $0x11
   jmp alltraps
-80105e44:	e9 76 fa ff ff       	jmp    801058bf <alltraps>
+80105db4:	e9 81 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e49 <vector18>:
+80105db9 <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105e49:	6a 00                	push   $0x0
+80105db9:	6a 00                	push   $0x0
   pushl $18
-80105e4b:	6a 12                	push   $0x12
+80105dbb:	6a 12                	push   $0x12
   jmp alltraps
-80105e4d:	e9 6d fa ff ff       	jmp    801058bf <alltraps>
+80105dbd:	e9 78 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e52 <vector19>:
+80105dc2 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105e52:	6a 00                	push   $0x0
+80105dc2:	6a 00                	push   $0x0
   pushl $19
-80105e54:	6a 13                	push   $0x13
+80105dc4:	6a 13                	push   $0x13
   jmp alltraps
-80105e56:	e9 64 fa ff ff       	jmp    801058bf <alltraps>
+80105dc6:	e9 6f fa ff ff       	jmp    8010583a <alltraps>
 
-80105e5b <vector20>:
+80105dcb <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105e5b:	6a 00                	push   $0x0
+80105dcb:	6a 00                	push   $0x0
   pushl $20
-80105e5d:	6a 14                	push   $0x14
+80105dcd:	6a 14                	push   $0x14
   jmp alltraps
-80105e5f:	e9 5b fa ff ff       	jmp    801058bf <alltraps>
+80105dcf:	e9 66 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e64 <vector21>:
+80105dd4 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105e64:	6a 00                	push   $0x0
+80105dd4:	6a 00                	push   $0x0
   pushl $21
-80105e66:	6a 15                	push   $0x15
+80105dd6:	6a 15                	push   $0x15
   jmp alltraps
-80105e68:	e9 52 fa ff ff       	jmp    801058bf <alltraps>
+80105dd8:	e9 5d fa ff ff       	jmp    8010583a <alltraps>
 
-80105e6d <vector22>:
+80105ddd <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105e6d:	6a 00                	push   $0x0
+80105ddd:	6a 00                	push   $0x0
   pushl $22
-80105e6f:	6a 16                	push   $0x16
+80105ddf:	6a 16                	push   $0x16
   jmp alltraps
-80105e71:	e9 49 fa ff ff       	jmp    801058bf <alltraps>
+80105de1:	e9 54 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e76 <vector23>:
+80105de6 <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105e76:	6a 00                	push   $0x0
+80105de6:	6a 00                	push   $0x0
   pushl $23
-80105e78:	6a 17                	push   $0x17
+80105de8:	6a 17                	push   $0x17
   jmp alltraps
-80105e7a:	e9 40 fa ff ff       	jmp    801058bf <alltraps>
+80105dea:	e9 4b fa ff ff       	jmp    8010583a <alltraps>
 
-80105e7f <vector24>:
+80105def <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105e7f:	6a 00                	push   $0x0
+80105def:	6a 00                	push   $0x0
   pushl $24
-80105e81:	6a 18                	push   $0x18
+80105df1:	6a 18                	push   $0x18
   jmp alltraps
-80105e83:	e9 37 fa ff ff       	jmp    801058bf <alltraps>
+80105df3:	e9 42 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e88 <vector25>:
+80105df8 <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105e88:	6a 00                	push   $0x0
+80105df8:	6a 00                	push   $0x0
   pushl $25
-80105e8a:	6a 19                	push   $0x19
+80105dfa:	6a 19                	push   $0x19
   jmp alltraps
-80105e8c:	e9 2e fa ff ff       	jmp    801058bf <alltraps>
+80105dfc:	e9 39 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e91 <vector26>:
+80105e01 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105e91:	6a 00                	push   $0x0
+80105e01:	6a 00                	push   $0x0
   pushl $26
-80105e93:	6a 1a                	push   $0x1a
+80105e03:	6a 1a                	push   $0x1a
   jmp alltraps
-80105e95:	e9 25 fa ff ff       	jmp    801058bf <alltraps>
+80105e05:	e9 30 fa ff ff       	jmp    8010583a <alltraps>
 
-80105e9a <vector27>:
+80105e0a <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105e9a:	6a 00                	push   $0x0
+80105e0a:	6a 00                	push   $0x0
   pushl $27
-80105e9c:	6a 1b                	push   $0x1b
+80105e0c:	6a 1b                	push   $0x1b
   jmp alltraps
-80105e9e:	e9 1c fa ff ff       	jmp    801058bf <alltraps>
+80105e0e:	e9 27 fa ff ff       	jmp    8010583a <alltraps>
 
-80105ea3 <vector28>:
+80105e13 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105ea3:	6a 00                	push   $0x0
+80105e13:	6a 00                	push   $0x0
   pushl $28
-80105ea5:	6a 1c                	push   $0x1c
+80105e15:	6a 1c                	push   $0x1c
   jmp alltraps
-80105ea7:	e9 13 fa ff ff       	jmp    801058bf <alltraps>
+80105e17:	e9 1e fa ff ff       	jmp    8010583a <alltraps>
 
-80105eac <vector29>:
+80105e1c <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105eac:	6a 00                	push   $0x0
+80105e1c:	6a 00                	push   $0x0
   pushl $29
-80105eae:	6a 1d                	push   $0x1d
+80105e1e:	6a 1d                	push   $0x1d
   jmp alltraps
-80105eb0:	e9 0a fa ff ff       	jmp    801058bf <alltraps>
+80105e20:	e9 15 fa ff ff       	jmp    8010583a <alltraps>
 
-80105eb5 <vector30>:
+80105e25 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105eb5:	6a 00                	push   $0x0
+80105e25:	6a 00                	push   $0x0
   pushl $30
-80105eb7:	6a 1e                	push   $0x1e
+80105e27:	6a 1e                	push   $0x1e
   jmp alltraps
-80105eb9:	e9 01 fa ff ff       	jmp    801058bf <alltraps>
+80105e29:	e9 0c fa ff ff       	jmp    8010583a <alltraps>
 
-80105ebe <vector31>:
+80105e2e <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105ebe:	6a 00                	push   $0x0
+80105e2e:	6a 00                	push   $0x0
   pushl $31
-80105ec0:	6a 1f                	push   $0x1f
+80105e30:	6a 1f                	push   $0x1f
   jmp alltraps
-80105ec2:	e9 f8 f9 ff ff       	jmp    801058bf <alltraps>
+80105e32:	e9 03 fa ff ff       	jmp    8010583a <alltraps>
 
-80105ec7 <vector32>:
+80105e37 <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105ec7:	6a 00                	push   $0x0
+80105e37:	6a 00                	push   $0x0
   pushl $32
-80105ec9:	6a 20                	push   $0x20
+80105e39:	6a 20                	push   $0x20
   jmp alltraps
-80105ecb:	e9 ef f9 ff ff       	jmp    801058bf <alltraps>
+80105e3b:	e9 fa f9 ff ff       	jmp    8010583a <alltraps>
 
-80105ed0 <vector33>:
+80105e40 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105ed0:	6a 00                	push   $0x0
+80105e40:	6a 00                	push   $0x0
   pushl $33
-80105ed2:	6a 21                	push   $0x21
+80105e42:	6a 21                	push   $0x21
   jmp alltraps
-80105ed4:	e9 e6 f9 ff ff       	jmp    801058bf <alltraps>
+80105e44:	e9 f1 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105ed9 <vector34>:
+80105e49 <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105ed9:	6a 00                	push   $0x0
+80105e49:	6a 00                	push   $0x0
   pushl $34
-80105edb:	6a 22                	push   $0x22
+80105e4b:	6a 22                	push   $0x22
   jmp alltraps
-80105edd:	e9 dd f9 ff ff       	jmp    801058bf <alltraps>
+80105e4d:	e9 e8 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105ee2 <vector35>:
+80105e52 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105ee2:	6a 00                	push   $0x0
+80105e52:	6a 00                	push   $0x0
   pushl $35
-80105ee4:	6a 23                	push   $0x23
+80105e54:	6a 23                	push   $0x23
   jmp alltraps
-80105ee6:	e9 d4 f9 ff ff       	jmp    801058bf <alltraps>
+80105e56:	e9 df f9 ff ff       	jmp    8010583a <alltraps>
 
-80105eeb <vector36>:
+80105e5b <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105eeb:	6a 00                	push   $0x0
+80105e5b:	6a 00                	push   $0x0
   pushl $36
-80105eed:	6a 24                	push   $0x24
+80105e5d:	6a 24                	push   $0x24
   jmp alltraps
-80105eef:	e9 cb f9 ff ff       	jmp    801058bf <alltraps>
+80105e5f:	e9 d6 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105ef4 <vector37>:
+80105e64 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105ef4:	6a 00                	push   $0x0
+80105e64:	6a 00                	push   $0x0
   pushl $37
-80105ef6:	6a 25                	push   $0x25
+80105e66:	6a 25                	push   $0x25
   jmp alltraps
-80105ef8:	e9 c2 f9 ff ff       	jmp    801058bf <alltraps>
+80105e68:	e9 cd f9 ff ff       	jmp    8010583a <alltraps>
 
-80105efd <vector38>:
+80105e6d <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105efd:	6a 00                	push   $0x0
+80105e6d:	6a 00                	push   $0x0
   pushl $38
-80105eff:	6a 26                	push   $0x26
+80105e6f:	6a 26                	push   $0x26
   jmp alltraps
-80105f01:	e9 b9 f9 ff ff       	jmp    801058bf <alltraps>
+80105e71:	e9 c4 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f06 <vector39>:
+80105e76 <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105f06:	6a 00                	push   $0x0
+80105e76:	6a 00                	push   $0x0
   pushl $39
-80105f08:	6a 27                	push   $0x27
+80105e78:	6a 27                	push   $0x27
   jmp alltraps
-80105f0a:	e9 b0 f9 ff ff       	jmp    801058bf <alltraps>
+80105e7a:	e9 bb f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f0f <vector40>:
+80105e7f <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105f0f:	6a 00                	push   $0x0
+80105e7f:	6a 00                	push   $0x0
   pushl $40
-80105f11:	6a 28                	push   $0x28
+80105e81:	6a 28                	push   $0x28
   jmp alltraps
-80105f13:	e9 a7 f9 ff ff       	jmp    801058bf <alltraps>
+80105e83:	e9 b2 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f18 <vector41>:
+80105e88 <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105f18:	6a 00                	push   $0x0
+80105e88:	6a 00                	push   $0x0
   pushl $41
-80105f1a:	6a 29                	push   $0x29
+80105e8a:	6a 29                	push   $0x29
   jmp alltraps
-80105f1c:	e9 9e f9 ff ff       	jmp    801058bf <alltraps>
+80105e8c:	e9 a9 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f21 <vector42>:
+80105e91 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105f21:	6a 00                	push   $0x0
+80105e91:	6a 00                	push   $0x0
   pushl $42
-80105f23:	6a 2a                	push   $0x2a
+80105e93:	6a 2a                	push   $0x2a
   jmp alltraps
-80105f25:	e9 95 f9 ff ff       	jmp    801058bf <alltraps>
+80105e95:	e9 a0 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f2a <vector43>:
+80105e9a <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105f2a:	6a 00                	push   $0x0
+80105e9a:	6a 00                	push   $0x0
   pushl $43
-80105f2c:	6a 2b                	push   $0x2b
+80105e9c:	6a 2b                	push   $0x2b
   jmp alltraps
-80105f2e:	e9 8c f9 ff ff       	jmp    801058bf <alltraps>
+80105e9e:	e9 97 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f33 <vector44>:
+80105ea3 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105f33:	6a 00                	push   $0x0
+80105ea3:	6a 00                	push   $0x0
   pushl $44
-80105f35:	6a 2c                	push   $0x2c
+80105ea5:	6a 2c                	push   $0x2c
   jmp alltraps
-80105f37:	e9 83 f9 ff ff       	jmp    801058bf <alltraps>
+80105ea7:	e9 8e f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f3c <vector45>:
+80105eac <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105f3c:	6a 00                	push   $0x0
+80105eac:	6a 00                	push   $0x0
   pushl $45
-80105f3e:	6a 2d                	push   $0x2d
+80105eae:	6a 2d                	push   $0x2d
   jmp alltraps
-80105f40:	e9 7a f9 ff ff       	jmp    801058bf <alltraps>
+80105eb0:	e9 85 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f45 <vector46>:
+80105eb5 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105f45:	6a 00                	push   $0x0
+80105eb5:	6a 00                	push   $0x0
   pushl $46
-80105f47:	6a 2e                	push   $0x2e
+80105eb7:	6a 2e                	push   $0x2e
   jmp alltraps
-80105f49:	e9 71 f9 ff ff       	jmp    801058bf <alltraps>
+80105eb9:	e9 7c f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f4e <vector47>:
+80105ebe <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105f4e:	6a 00                	push   $0x0
+80105ebe:	6a 00                	push   $0x0
   pushl $47
-80105f50:	6a 2f                	push   $0x2f
+80105ec0:	6a 2f                	push   $0x2f
   jmp alltraps
-80105f52:	e9 68 f9 ff ff       	jmp    801058bf <alltraps>
+80105ec2:	e9 73 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f57 <vector48>:
+80105ec7 <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105f57:	6a 00                	push   $0x0
+80105ec7:	6a 00                	push   $0x0
   pushl $48
-80105f59:	6a 30                	push   $0x30
+80105ec9:	6a 30                	push   $0x30
   jmp alltraps
-80105f5b:	e9 5f f9 ff ff       	jmp    801058bf <alltraps>
+80105ecb:	e9 6a f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f60 <vector49>:
+80105ed0 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105f60:	6a 00                	push   $0x0
+80105ed0:	6a 00                	push   $0x0
   pushl $49
-80105f62:	6a 31                	push   $0x31
+80105ed2:	6a 31                	push   $0x31
   jmp alltraps
-80105f64:	e9 56 f9 ff ff       	jmp    801058bf <alltraps>
+80105ed4:	e9 61 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f69 <vector50>:
+80105ed9 <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105f69:	6a 00                	push   $0x0
+80105ed9:	6a 00                	push   $0x0
   pushl $50
-80105f6b:	6a 32                	push   $0x32
+80105edb:	6a 32                	push   $0x32
   jmp alltraps
-80105f6d:	e9 4d f9 ff ff       	jmp    801058bf <alltraps>
+80105edd:	e9 58 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f72 <vector51>:
+80105ee2 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105f72:	6a 00                	push   $0x0
+80105ee2:	6a 00                	push   $0x0
   pushl $51
-80105f74:	6a 33                	push   $0x33
+80105ee4:	6a 33                	push   $0x33
   jmp alltraps
-80105f76:	e9 44 f9 ff ff       	jmp    801058bf <alltraps>
+80105ee6:	e9 4f f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f7b <vector52>:
+80105eeb <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105f7b:	6a 00                	push   $0x0
+80105eeb:	6a 00                	push   $0x0
   pushl $52
-80105f7d:	6a 34                	push   $0x34
+80105eed:	6a 34                	push   $0x34
   jmp alltraps
-80105f7f:	e9 3b f9 ff ff       	jmp    801058bf <alltraps>
+80105eef:	e9 46 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f84 <vector53>:
+80105ef4 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105f84:	6a 00                	push   $0x0
+80105ef4:	6a 00                	push   $0x0
   pushl $53
-80105f86:	6a 35                	push   $0x35
+80105ef6:	6a 35                	push   $0x35
   jmp alltraps
-80105f88:	e9 32 f9 ff ff       	jmp    801058bf <alltraps>
+80105ef8:	e9 3d f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f8d <vector54>:
+80105efd <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105f8d:	6a 00                	push   $0x0
+80105efd:	6a 00                	push   $0x0
   pushl $54
-80105f8f:	6a 36                	push   $0x36
+80105eff:	6a 36                	push   $0x36
   jmp alltraps
-80105f91:	e9 29 f9 ff ff       	jmp    801058bf <alltraps>
+80105f01:	e9 34 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f96 <vector55>:
+80105f06 <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105f96:	6a 00                	push   $0x0
+80105f06:	6a 00                	push   $0x0
   pushl $55
-80105f98:	6a 37                	push   $0x37
+80105f08:	6a 37                	push   $0x37
   jmp alltraps
-80105f9a:	e9 20 f9 ff ff       	jmp    801058bf <alltraps>
+80105f0a:	e9 2b f9 ff ff       	jmp    8010583a <alltraps>
 
-80105f9f <vector56>:
+80105f0f <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105f9f:	6a 00                	push   $0x0
+80105f0f:	6a 00                	push   $0x0
   pushl $56
-80105fa1:	6a 38                	push   $0x38
+80105f11:	6a 38                	push   $0x38
   jmp alltraps
-80105fa3:	e9 17 f9 ff ff       	jmp    801058bf <alltraps>
+80105f13:	e9 22 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105fa8 <vector57>:
+80105f18 <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105fa8:	6a 00                	push   $0x0
+80105f18:	6a 00                	push   $0x0
   pushl $57
-80105faa:	6a 39                	push   $0x39
+80105f1a:	6a 39                	push   $0x39
   jmp alltraps
-80105fac:	e9 0e f9 ff ff       	jmp    801058bf <alltraps>
+80105f1c:	e9 19 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105fb1 <vector58>:
+80105f21 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105fb1:	6a 00                	push   $0x0
+80105f21:	6a 00                	push   $0x0
   pushl $58
-80105fb3:	6a 3a                	push   $0x3a
+80105f23:	6a 3a                	push   $0x3a
   jmp alltraps
-80105fb5:	e9 05 f9 ff ff       	jmp    801058bf <alltraps>
+80105f25:	e9 10 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105fba <vector59>:
+80105f2a <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105fba:	6a 00                	push   $0x0
+80105f2a:	6a 00                	push   $0x0
   pushl $59
-80105fbc:	6a 3b                	push   $0x3b
+80105f2c:	6a 3b                	push   $0x3b
   jmp alltraps
-80105fbe:	e9 fc f8 ff ff       	jmp    801058bf <alltraps>
+80105f2e:	e9 07 f9 ff ff       	jmp    8010583a <alltraps>
 
-80105fc3 <vector60>:
+80105f33 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105fc3:	6a 00                	push   $0x0
+80105f33:	6a 00                	push   $0x0
   pushl $60
-80105fc5:	6a 3c                	push   $0x3c
+80105f35:	6a 3c                	push   $0x3c
   jmp alltraps
-80105fc7:	e9 f3 f8 ff ff       	jmp    801058bf <alltraps>
+80105f37:	e9 fe f8 ff ff       	jmp    8010583a <alltraps>
 
-80105fcc <vector61>:
+80105f3c <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105fcc:	6a 00                	push   $0x0
+80105f3c:	6a 00                	push   $0x0
   pushl $61
-80105fce:	6a 3d                	push   $0x3d
+80105f3e:	6a 3d                	push   $0x3d
   jmp alltraps
-80105fd0:	e9 ea f8 ff ff       	jmp    801058bf <alltraps>
+80105f40:	e9 f5 f8 ff ff       	jmp    8010583a <alltraps>
 
-80105fd5 <vector62>:
+80105f45 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105fd5:	6a 00                	push   $0x0
+80105f45:	6a 00                	push   $0x0
   pushl $62
-80105fd7:	6a 3e                	push   $0x3e
+80105f47:	6a 3e                	push   $0x3e
   jmp alltraps
-80105fd9:	e9 e1 f8 ff ff       	jmp    801058bf <alltraps>
+80105f49:	e9 ec f8 ff ff       	jmp    8010583a <alltraps>
 
-80105fde <vector63>:
+80105f4e <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105fde:	6a 00                	push   $0x0
+80105f4e:	6a 00                	push   $0x0
   pushl $63
-80105fe0:	6a 3f                	push   $0x3f
+80105f50:	6a 3f                	push   $0x3f
   jmp alltraps
-80105fe2:	e9 d8 f8 ff ff       	jmp    801058bf <alltraps>
+80105f52:	e9 e3 f8 ff ff       	jmp    8010583a <alltraps>
 
-80105fe7 <vector64>:
+80105f57 <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105fe7:	6a 00                	push   $0x0
+80105f57:	6a 00                	push   $0x0
   pushl $64
-80105fe9:	6a 40                	push   $0x40
+80105f59:	6a 40                	push   $0x40
   jmp alltraps
-80105feb:	e9 cf f8 ff ff       	jmp    801058bf <alltraps>
+80105f5b:	e9 da f8 ff ff       	jmp    8010583a <alltraps>
 
-80105ff0 <vector65>:
+80105f60 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105ff0:	6a 00                	push   $0x0
+80105f60:	6a 00                	push   $0x0
   pushl $65
-80105ff2:	6a 41                	push   $0x41
+80105f62:	6a 41                	push   $0x41
   jmp alltraps
-80105ff4:	e9 c6 f8 ff ff       	jmp    801058bf <alltraps>
+80105f64:	e9 d1 f8 ff ff       	jmp    8010583a <alltraps>
 
-80105ff9 <vector66>:
+80105f69 <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105ff9:	6a 00                	push   $0x0
+80105f69:	6a 00                	push   $0x0
   pushl $66
-80105ffb:	6a 42                	push   $0x42
+80105f6b:	6a 42                	push   $0x42
   jmp alltraps
-80105ffd:	e9 bd f8 ff ff       	jmp    801058bf <alltraps>
+80105f6d:	e9 c8 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106002 <vector67>:
+80105f72 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80106002:	6a 00                	push   $0x0
+80105f72:	6a 00                	push   $0x0
   pushl $67
-80106004:	6a 43                	push   $0x43
+80105f74:	6a 43                	push   $0x43
   jmp alltraps
-80106006:	e9 b4 f8 ff ff       	jmp    801058bf <alltraps>
+80105f76:	e9 bf f8 ff ff       	jmp    8010583a <alltraps>
 
-8010600b <vector68>:
+80105f7b <vector68>:
 .globl vector68
 vector68:
   pushl $0
-8010600b:	6a 00                	push   $0x0
+80105f7b:	6a 00                	push   $0x0
   pushl $68
-8010600d:	6a 44                	push   $0x44
+80105f7d:	6a 44                	push   $0x44
   jmp alltraps
-8010600f:	e9 ab f8 ff ff       	jmp    801058bf <alltraps>
+80105f7f:	e9 b6 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106014 <vector69>:
+80105f84 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80106014:	6a 00                	push   $0x0
+80105f84:	6a 00                	push   $0x0
   pushl $69
-80106016:	6a 45                	push   $0x45
+80105f86:	6a 45                	push   $0x45
   jmp alltraps
-80106018:	e9 a2 f8 ff ff       	jmp    801058bf <alltraps>
+80105f88:	e9 ad f8 ff ff       	jmp    8010583a <alltraps>
 
-8010601d <vector70>:
+80105f8d <vector70>:
 .globl vector70
 vector70:
   pushl $0
-8010601d:	6a 00                	push   $0x0
+80105f8d:	6a 00                	push   $0x0
   pushl $70
-8010601f:	6a 46                	push   $0x46
+80105f8f:	6a 46                	push   $0x46
   jmp alltraps
-80106021:	e9 99 f8 ff ff       	jmp    801058bf <alltraps>
+80105f91:	e9 a4 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106026 <vector71>:
+80105f96 <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80106026:	6a 00                	push   $0x0
+80105f96:	6a 00                	push   $0x0
   pushl $71
-80106028:	6a 47                	push   $0x47
+80105f98:	6a 47                	push   $0x47
   jmp alltraps
-8010602a:	e9 90 f8 ff ff       	jmp    801058bf <alltraps>
+80105f9a:	e9 9b f8 ff ff       	jmp    8010583a <alltraps>
 
-8010602f <vector72>:
+80105f9f <vector72>:
 .globl vector72
 vector72:
   pushl $0
-8010602f:	6a 00                	push   $0x0
+80105f9f:	6a 00                	push   $0x0
   pushl $72
-80106031:	6a 48                	push   $0x48
+80105fa1:	6a 48                	push   $0x48
   jmp alltraps
-80106033:	e9 87 f8 ff ff       	jmp    801058bf <alltraps>
+80105fa3:	e9 92 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106038 <vector73>:
+80105fa8 <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80106038:	6a 00                	push   $0x0
+80105fa8:	6a 00                	push   $0x0
   pushl $73
-8010603a:	6a 49                	push   $0x49
+80105faa:	6a 49                	push   $0x49
   jmp alltraps
-8010603c:	e9 7e f8 ff ff       	jmp    801058bf <alltraps>
+80105fac:	e9 89 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106041 <vector74>:
+80105fb1 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80106041:	6a 00                	push   $0x0
+80105fb1:	6a 00                	push   $0x0
   pushl $74
-80106043:	6a 4a                	push   $0x4a
+80105fb3:	6a 4a                	push   $0x4a
   jmp alltraps
-80106045:	e9 75 f8 ff ff       	jmp    801058bf <alltraps>
+80105fb5:	e9 80 f8 ff ff       	jmp    8010583a <alltraps>
 
-8010604a <vector75>:
+80105fba <vector75>:
 .globl vector75
 vector75:
   pushl $0
-8010604a:	6a 00                	push   $0x0
+80105fba:	6a 00                	push   $0x0
   pushl $75
-8010604c:	6a 4b                	push   $0x4b
+80105fbc:	6a 4b                	push   $0x4b
   jmp alltraps
-8010604e:	e9 6c f8 ff ff       	jmp    801058bf <alltraps>
+80105fbe:	e9 77 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106053 <vector76>:
+80105fc3 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80106053:	6a 00                	push   $0x0
+80105fc3:	6a 00                	push   $0x0
   pushl $76
-80106055:	6a 4c                	push   $0x4c
+80105fc5:	6a 4c                	push   $0x4c
   jmp alltraps
-80106057:	e9 63 f8 ff ff       	jmp    801058bf <alltraps>
+80105fc7:	e9 6e f8 ff ff       	jmp    8010583a <alltraps>
 
-8010605c <vector77>:
+80105fcc <vector77>:
 .globl vector77
 vector77:
   pushl $0
-8010605c:	6a 00                	push   $0x0
+80105fcc:	6a 00                	push   $0x0
   pushl $77
-8010605e:	6a 4d                	push   $0x4d
+80105fce:	6a 4d                	push   $0x4d
   jmp alltraps
-80106060:	e9 5a f8 ff ff       	jmp    801058bf <alltraps>
+80105fd0:	e9 65 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106065 <vector78>:
+80105fd5 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80106065:	6a 00                	push   $0x0
+80105fd5:	6a 00                	push   $0x0
   pushl $78
-80106067:	6a 4e                	push   $0x4e
+80105fd7:	6a 4e                	push   $0x4e
   jmp alltraps
-80106069:	e9 51 f8 ff ff       	jmp    801058bf <alltraps>
+80105fd9:	e9 5c f8 ff ff       	jmp    8010583a <alltraps>
 
-8010606e <vector79>:
+80105fde <vector79>:
 .globl vector79
 vector79:
   pushl $0
-8010606e:	6a 00                	push   $0x0
+80105fde:	6a 00                	push   $0x0
   pushl $79
-80106070:	6a 4f                	push   $0x4f
+80105fe0:	6a 4f                	push   $0x4f
   jmp alltraps
-80106072:	e9 48 f8 ff ff       	jmp    801058bf <alltraps>
+80105fe2:	e9 53 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106077 <vector80>:
+80105fe7 <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80106077:	6a 00                	push   $0x0
+80105fe7:	6a 00                	push   $0x0
   pushl $80
-80106079:	6a 50                	push   $0x50
+80105fe9:	6a 50                	push   $0x50
   jmp alltraps
-8010607b:	e9 3f f8 ff ff       	jmp    801058bf <alltraps>
+80105feb:	e9 4a f8 ff ff       	jmp    8010583a <alltraps>
 
-80106080 <vector81>:
+80105ff0 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80106080:	6a 00                	push   $0x0
+80105ff0:	6a 00                	push   $0x0
   pushl $81
-80106082:	6a 51                	push   $0x51
+80105ff2:	6a 51                	push   $0x51
   jmp alltraps
-80106084:	e9 36 f8 ff ff       	jmp    801058bf <alltraps>
+80105ff4:	e9 41 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106089 <vector82>:
+80105ff9 <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80106089:	6a 00                	push   $0x0
+80105ff9:	6a 00                	push   $0x0
   pushl $82
-8010608b:	6a 52                	push   $0x52
+80105ffb:	6a 52                	push   $0x52
   jmp alltraps
-8010608d:	e9 2d f8 ff ff       	jmp    801058bf <alltraps>
+80105ffd:	e9 38 f8 ff ff       	jmp    8010583a <alltraps>
 
-80106092 <vector83>:
+80106002 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106092:	6a 00                	push   $0x0
+80106002:	6a 00                	push   $0x0
   pushl $83
-80106094:	6a 53                	push   $0x53
+80106004:	6a 53                	push   $0x53
   jmp alltraps
-80106096:	e9 24 f8 ff ff       	jmp    801058bf <alltraps>
+80106006:	e9 2f f8 ff ff       	jmp    8010583a <alltraps>
 
-8010609b <vector84>:
+8010600b <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010609b:	6a 00                	push   $0x0
+8010600b:	6a 00                	push   $0x0
   pushl $84
-8010609d:	6a 54                	push   $0x54
+8010600d:	6a 54                	push   $0x54
   jmp alltraps
-8010609f:	e9 1b f8 ff ff       	jmp    801058bf <alltraps>
+8010600f:	e9 26 f8 ff ff       	jmp    8010583a <alltraps>
 
-801060a4 <vector85>:
+80106014 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-801060a4:	6a 00                	push   $0x0
+80106014:	6a 00                	push   $0x0
   pushl $85
-801060a6:	6a 55                	push   $0x55
+80106016:	6a 55                	push   $0x55
   jmp alltraps
-801060a8:	e9 12 f8 ff ff       	jmp    801058bf <alltraps>
+80106018:	e9 1d f8 ff ff       	jmp    8010583a <alltraps>
 
-801060ad <vector86>:
+8010601d <vector86>:
 .globl vector86
 vector86:
   pushl $0
-801060ad:	6a 00                	push   $0x0
+8010601d:	6a 00                	push   $0x0
   pushl $86
-801060af:	6a 56                	push   $0x56
+8010601f:	6a 56                	push   $0x56
   jmp alltraps
-801060b1:	e9 09 f8 ff ff       	jmp    801058bf <alltraps>
+80106021:	e9 14 f8 ff ff       	jmp    8010583a <alltraps>
 
-801060b6 <vector87>:
+80106026 <vector87>:
 .globl vector87
 vector87:
   pushl $0
-801060b6:	6a 00                	push   $0x0
+80106026:	6a 00                	push   $0x0
   pushl $87
-801060b8:	6a 57                	push   $0x57
+80106028:	6a 57                	push   $0x57
   jmp alltraps
-801060ba:	e9 00 f8 ff ff       	jmp    801058bf <alltraps>
+8010602a:	e9 0b f8 ff ff       	jmp    8010583a <alltraps>
 
-801060bf <vector88>:
+8010602f <vector88>:
 .globl vector88
 vector88:
   pushl $0
-801060bf:	6a 00                	push   $0x0
+8010602f:	6a 00                	push   $0x0
   pushl $88
-801060c1:	6a 58                	push   $0x58
+80106031:	6a 58                	push   $0x58
   jmp alltraps
-801060c3:	e9 f7 f7 ff ff       	jmp    801058bf <alltraps>
+80106033:	e9 02 f8 ff ff       	jmp    8010583a <alltraps>
 
-801060c8 <vector89>:
+80106038 <vector89>:
 .globl vector89
 vector89:
   pushl $0
-801060c8:	6a 00                	push   $0x0
+80106038:	6a 00                	push   $0x0
   pushl $89
-801060ca:	6a 59                	push   $0x59
+8010603a:	6a 59                	push   $0x59
   jmp alltraps
-801060cc:	e9 ee f7 ff ff       	jmp    801058bf <alltraps>
+8010603c:	e9 f9 f7 ff ff       	jmp    8010583a <alltraps>
 
-801060d1 <vector90>:
+80106041 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-801060d1:	6a 00                	push   $0x0
+80106041:	6a 00                	push   $0x0
   pushl $90
-801060d3:	6a 5a                	push   $0x5a
+80106043:	6a 5a                	push   $0x5a
   jmp alltraps
-801060d5:	e9 e5 f7 ff ff       	jmp    801058bf <alltraps>
+80106045:	e9 f0 f7 ff ff       	jmp    8010583a <alltraps>
 
-801060da <vector91>:
+8010604a <vector91>:
 .globl vector91
 vector91:
   pushl $0
-801060da:	6a 00                	push   $0x0
+8010604a:	6a 00                	push   $0x0
   pushl $91
-801060dc:	6a 5b                	push   $0x5b
+8010604c:	6a 5b                	push   $0x5b
   jmp alltraps
-801060de:	e9 dc f7 ff ff       	jmp    801058bf <alltraps>
+8010604e:	e9 e7 f7 ff ff       	jmp    8010583a <alltraps>
 
-801060e3 <vector92>:
+80106053 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-801060e3:	6a 00                	push   $0x0
+80106053:	6a 00                	push   $0x0
   pushl $92
-801060e5:	6a 5c                	push   $0x5c
+80106055:	6a 5c                	push   $0x5c
   jmp alltraps
-801060e7:	e9 d3 f7 ff ff       	jmp    801058bf <alltraps>
+80106057:	e9 de f7 ff ff       	jmp    8010583a <alltraps>
 
-801060ec <vector93>:
+8010605c <vector93>:
 .globl vector93
 vector93:
   pushl $0
-801060ec:	6a 00                	push   $0x0
+8010605c:	6a 00                	push   $0x0
   pushl $93
-801060ee:	6a 5d                	push   $0x5d
+8010605e:	6a 5d                	push   $0x5d
   jmp alltraps
-801060f0:	e9 ca f7 ff ff       	jmp    801058bf <alltraps>
+80106060:	e9 d5 f7 ff ff       	jmp    8010583a <alltraps>
 
-801060f5 <vector94>:
+80106065 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-801060f5:	6a 00                	push   $0x0
+80106065:	6a 00                	push   $0x0
   pushl $94
-801060f7:	6a 5e                	push   $0x5e
+80106067:	6a 5e                	push   $0x5e
   jmp alltraps
-801060f9:	e9 c1 f7 ff ff       	jmp    801058bf <alltraps>
+80106069:	e9 cc f7 ff ff       	jmp    8010583a <alltraps>
 
-801060fe <vector95>:
+8010606e <vector95>:
 .globl vector95
 vector95:
   pushl $0
-801060fe:	6a 00                	push   $0x0
+8010606e:	6a 00                	push   $0x0
   pushl $95
-80106100:	6a 5f                	push   $0x5f
+80106070:	6a 5f                	push   $0x5f
   jmp alltraps
-80106102:	e9 b8 f7 ff ff       	jmp    801058bf <alltraps>
+80106072:	e9 c3 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106107 <vector96>:
+80106077 <vector96>:
 .globl vector96
 vector96:
   pushl $0
-80106107:	6a 00                	push   $0x0
+80106077:	6a 00                	push   $0x0
   pushl $96
-80106109:	6a 60                	push   $0x60
+80106079:	6a 60                	push   $0x60
   jmp alltraps
-8010610b:	e9 af f7 ff ff       	jmp    801058bf <alltraps>
+8010607b:	e9 ba f7 ff ff       	jmp    8010583a <alltraps>
 
-80106110 <vector97>:
+80106080 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106110:	6a 00                	push   $0x0
+80106080:	6a 00                	push   $0x0
   pushl $97
-80106112:	6a 61                	push   $0x61
+80106082:	6a 61                	push   $0x61
   jmp alltraps
-80106114:	e9 a6 f7 ff ff       	jmp    801058bf <alltraps>
+80106084:	e9 b1 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106119 <vector98>:
+80106089 <vector98>:
 .globl vector98
 vector98:
   pushl $0
-80106119:	6a 00                	push   $0x0
+80106089:	6a 00                	push   $0x0
   pushl $98
-8010611b:	6a 62                	push   $0x62
+8010608b:	6a 62                	push   $0x62
   jmp alltraps
-8010611d:	e9 9d f7 ff ff       	jmp    801058bf <alltraps>
+8010608d:	e9 a8 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106122 <vector99>:
+80106092 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106122:	6a 00                	push   $0x0
+80106092:	6a 00                	push   $0x0
   pushl $99
-80106124:	6a 63                	push   $0x63
+80106094:	6a 63                	push   $0x63
   jmp alltraps
-80106126:	e9 94 f7 ff ff       	jmp    801058bf <alltraps>
+80106096:	e9 9f f7 ff ff       	jmp    8010583a <alltraps>
 
-8010612b <vector100>:
+8010609b <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010612b:	6a 00                	push   $0x0
+8010609b:	6a 00                	push   $0x0
   pushl $100
-8010612d:	6a 64                	push   $0x64
+8010609d:	6a 64                	push   $0x64
   jmp alltraps
-8010612f:	e9 8b f7 ff ff       	jmp    801058bf <alltraps>
+8010609f:	e9 96 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106134 <vector101>:
+801060a4 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-80106134:	6a 00                	push   $0x0
+801060a4:	6a 00                	push   $0x0
   pushl $101
-80106136:	6a 65                	push   $0x65
+801060a6:	6a 65                	push   $0x65
   jmp alltraps
-80106138:	e9 82 f7 ff ff       	jmp    801058bf <alltraps>
+801060a8:	e9 8d f7 ff ff       	jmp    8010583a <alltraps>
 
-8010613d <vector102>:
+801060ad <vector102>:
 .globl vector102
 vector102:
   pushl $0
-8010613d:	6a 00                	push   $0x0
+801060ad:	6a 00                	push   $0x0
   pushl $102
-8010613f:	6a 66                	push   $0x66
+801060af:	6a 66                	push   $0x66
   jmp alltraps
-80106141:	e9 79 f7 ff ff       	jmp    801058bf <alltraps>
+801060b1:	e9 84 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106146 <vector103>:
+801060b6 <vector103>:
 .globl vector103
 vector103:
   pushl $0
-80106146:	6a 00                	push   $0x0
+801060b6:	6a 00                	push   $0x0
   pushl $103
-80106148:	6a 67                	push   $0x67
+801060b8:	6a 67                	push   $0x67
   jmp alltraps
-8010614a:	e9 70 f7 ff ff       	jmp    801058bf <alltraps>
+801060ba:	e9 7b f7 ff ff       	jmp    8010583a <alltraps>
 
-8010614f <vector104>:
+801060bf <vector104>:
 .globl vector104
 vector104:
   pushl $0
-8010614f:	6a 00                	push   $0x0
+801060bf:	6a 00                	push   $0x0
   pushl $104
-80106151:	6a 68                	push   $0x68
+801060c1:	6a 68                	push   $0x68
   jmp alltraps
-80106153:	e9 67 f7 ff ff       	jmp    801058bf <alltraps>
+801060c3:	e9 72 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106158 <vector105>:
+801060c8 <vector105>:
 .globl vector105
 vector105:
   pushl $0
-80106158:	6a 00                	push   $0x0
+801060c8:	6a 00                	push   $0x0
   pushl $105
-8010615a:	6a 69                	push   $0x69
+801060ca:	6a 69                	push   $0x69
   jmp alltraps
-8010615c:	e9 5e f7 ff ff       	jmp    801058bf <alltraps>
+801060cc:	e9 69 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106161 <vector106>:
+801060d1 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-80106161:	6a 00                	push   $0x0
+801060d1:	6a 00                	push   $0x0
   pushl $106
-80106163:	6a 6a                	push   $0x6a
+801060d3:	6a 6a                	push   $0x6a
   jmp alltraps
-80106165:	e9 55 f7 ff ff       	jmp    801058bf <alltraps>
+801060d5:	e9 60 f7 ff ff       	jmp    8010583a <alltraps>
 
-8010616a <vector107>:
+801060da <vector107>:
 .globl vector107
 vector107:
   pushl $0
-8010616a:	6a 00                	push   $0x0
+801060da:	6a 00                	push   $0x0
   pushl $107
-8010616c:	6a 6b                	push   $0x6b
+801060dc:	6a 6b                	push   $0x6b
   jmp alltraps
-8010616e:	e9 4c f7 ff ff       	jmp    801058bf <alltraps>
+801060de:	e9 57 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106173 <vector108>:
+801060e3 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-80106173:	6a 00                	push   $0x0
+801060e3:	6a 00                	push   $0x0
   pushl $108
-80106175:	6a 6c                	push   $0x6c
+801060e5:	6a 6c                	push   $0x6c
   jmp alltraps
-80106177:	e9 43 f7 ff ff       	jmp    801058bf <alltraps>
+801060e7:	e9 4e f7 ff ff       	jmp    8010583a <alltraps>
 
-8010617c <vector109>:
+801060ec <vector109>:
 .globl vector109
 vector109:
   pushl $0
-8010617c:	6a 00                	push   $0x0
+801060ec:	6a 00                	push   $0x0
   pushl $109
-8010617e:	6a 6d                	push   $0x6d
+801060ee:	6a 6d                	push   $0x6d
   jmp alltraps
-80106180:	e9 3a f7 ff ff       	jmp    801058bf <alltraps>
+801060f0:	e9 45 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106185 <vector110>:
+801060f5 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-80106185:	6a 00                	push   $0x0
+801060f5:	6a 00                	push   $0x0
   pushl $110
-80106187:	6a 6e                	push   $0x6e
+801060f7:	6a 6e                	push   $0x6e
   jmp alltraps
-80106189:	e9 31 f7 ff ff       	jmp    801058bf <alltraps>
+801060f9:	e9 3c f7 ff ff       	jmp    8010583a <alltraps>
 
-8010618e <vector111>:
+801060fe <vector111>:
 .globl vector111
 vector111:
   pushl $0
-8010618e:	6a 00                	push   $0x0
+801060fe:	6a 00                	push   $0x0
   pushl $111
-80106190:	6a 6f                	push   $0x6f
+80106100:	6a 6f                	push   $0x6f
   jmp alltraps
-80106192:	e9 28 f7 ff ff       	jmp    801058bf <alltraps>
+80106102:	e9 33 f7 ff ff       	jmp    8010583a <alltraps>
 
-80106197 <vector112>:
+80106107 <vector112>:
 .globl vector112
 vector112:
   pushl $0
-80106197:	6a 00                	push   $0x0
+80106107:	6a 00                	push   $0x0
   pushl $112
-80106199:	6a 70                	push   $0x70
+80106109:	6a 70                	push   $0x70
   jmp alltraps
-8010619b:	e9 1f f7 ff ff       	jmp    801058bf <alltraps>
+8010610b:	e9 2a f7 ff ff       	jmp    8010583a <alltraps>
 
-801061a0 <vector113>:
+80106110 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-801061a0:	6a 00                	push   $0x0
+80106110:	6a 00                	push   $0x0
   pushl $113
-801061a2:	6a 71                	push   $0x71
+80106112:	6a 71                	push   $0x71
   jmp alltraps
-801061a4:	e9 16 f7 ff ff       	jmp    801058bf <alltraps>
+80106114:	e9 21 f7 ff ff       	jmp    8010583a <alltraps>
 
-801061a9 <vector114>:
+80106119 <vector114>:
 .globl vector114
 vector114:
   pushl $0
-801061a9:	6a 00                	push   $0x0
+80106119:	6a 00                	push   $0x0
   pushl $114
-801061ab:	6a 72                	push   $0x72
+8010611b:	6a 72                	push   $0x72
   jmp alltraps
-801061ad:	e9 0d f7 ff ff       	jmp    801058bf <alltraps>
+8010611d:	e9 18 f7 ff ff       	jmp    8010583a <alltraps>
 
-801061b2 <vector115>:
+80106122 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-801061b2:	6a 00                	push   $0x0
+80106122:	6a 00                	push   $0x0
   pushl $115
-801061b4:	6a 73                	push   $0x73
+80106124:	6a 73                	push   $0x73
   jmp alltraps
-801061b6:	e9 04 f7 ff ff       	jmp    801058bf <alltraps>
+80106126:	e9 0f f7 ff ff       	jmp    8010583a <alltraps>
 
-801061bb <vector116>:
+8010612b <vector116>:
 .globl vector116
 vector116:
   pushl $0
-801061bb:	6a 00                	push   $0x0
+8010612b:	6a 00                	push   $0x0
   pushl $116
-801061bd:	6a 74                	push   $0x74
+8010612d:	6a 74                	push   $0x74
   jmp alltraps
-801061bf:	e9 fb f6 ff ff       	jmp    801058bf <alltraps>
+8010612f:	e9 06 f7 ff ff       	jmp    8010583a <alltraps>
 
-801061c4 <vector117>:
+80106134 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-801061c4:	6a 00                	push   $0x0
+80106134:	6a 00                	push   $0x0
   pushl $117
-801061c6:	6a 75                	push   $0x75
+80106136:	6a 75                	push   $0x75
   jmp alltraps
-801061c8:	e9 f2 f6 ff ff       	jmp    801058bf <alltraps>
+80106138:	e9 fd f6 ff ff       	jmp    8010583a <alltraps>
 
-801061cd <vector118>:
+8010613d <vector118>:
 .globl vector118
 vector118:
   pushl $0
-801061cd:	6a 00                	push   $0x0
+8010613d:	6a 00                	push   $0x0
   pushl $118
-801061cf:	6a 76                	push   $0x76
+8010613f:	6a 76                	push   $0x76
   jmp alltraps
-801061d1:	e9 e9 f6 ff ff       	jmp    801058bf <alltraps>
+80106141:	e9 f4 f6 ff ff       	jmp    8010583a <alltraps>
 
-801061d6 <vector119>:
+80106146 <vector119>:
 .globl vector119
 vector119:
   pushl $0
-801061d6:	6a 00                	push   $0x0
+80106146:	6a 00                	push   $0x0
   pushl $119
-801061d8:	6a 77                	push   $0x77
+80106148:	6a 77                	push   $0x77
   jmp alltraps
-801061da:	e9 e0 f6 ff ff       	jmp    801058bf <alltraps>
+8010614a:	e9 eb f6 ff ff       	jmp    8010583a <alltraps>
 
-801061df <vector120>:
+8010614f <vector120>:
 .globl vector120
 vector120:
   pushl $0
-801061df:	6a 00                	push   $0x0
+8010614f:	6a 00                	push   $0x0
   pushl $120
-801061e1:	6a 78                	push   $0x78
+80106151:	6a 78                	push   $0x78
   jmp alltraps
-801061e3:	e9 d7 f6 ff ff       	jmp    801058bf <alltraps>
+80106153:	e9 e2 f6 ff ff       	jmp    8010583a <alltraps>
 
-801061e8 <vector121>:
+80106158 <vector121>:
 .globl vector121
 vector121:
   pushl $0
-801061e8:	6a 00                	push   $0x0
+80106158:	6a 00                	push   $0x0
   pushl $121
-801061ea:	6a 79                	push   $0x79
+8010615a:	6a 79                	push   $0x79
   jmp alltraps
-801061ec:	e9 ce f6 ff ff       	jmp    801058bf <alltraps>
+8010615c:	e9 d9 f6 ff ff       	jmp    8010583a <alltraps>
 
-801061f1 <vector122>:
+80106161 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-801061f1:	6a 00                	push   $0x0
+80106161:	6a 00                	push   $0x0
   pushl $122
-801061f3:	6a 7a                	push   $0x7a
+80106163:	6a 7a                	push   $0x7a
   jmp alltraps
-801061f5:	e9 c5 f6 ff ff       	jmp    801058bf <alltraps>
+80106165:	e9 d0 f6 ff ff       	jmp    8010583a <alltraps>
 
-801061fa <vector123>:
+8010616a <vector123>:
 .globl vector123
 vector123:
   pushl $0
-801061fa:	6a 00                	push   $0x0
+8010616a:	6a 00                	push   $0x0
   pushl $123
-801061fc:	6a 7b                	push   $0x7b
+8010616c:	6a 7b                	push   $0x7b
   jmp alltraps
-801061fe:	e9 bc f6 ff ff       	jmp    801058bf <alltraps>
+8010616e:	e9 c7 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106203 <vector124>:
+80106173 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106203:	6a 00                	push   $0x0
+80106173:	6a 00                	push   $0x0
   pushl $124
-80106205:	6a 7c                	push   $0x7c
+80106175:	6a 7c                	push   $0x7c
   jmp alltraps
-80106207:	e9 b3 f6 ff ff       	jmp    801058bf <alltraps>
+80106177:	e9 be f6 ff ff       	jmp    8010583a <alltraps>
 
-8010620c <vector125>:
+8010617c <vector125>:
 .globl vector125
 vector125:
   pushl $0
-8010620c:	6a 00                	push   $0x0
+8010617c:	6a 00                	push   $0x0
   pushl $125
-8010620e:	6a 7d                	push   $0x7d
+8010617e:	6a 7d                	push   $0x7d
   jmp alltraps
-80106210:	e9 aa f6 ff ff       	jmp    801058bf <alltraps>
+80106180:	e9 b5 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106215 <vector126>:
+80106185 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106215:	6a 00                	push   $0x0
+80106185:	6a 00                	push   $0x0
   pushl $126
-80106217:	6a 7e                	push   $0x7e
+80106187:	6a 7e                	push   $0x7e
   jmp alltraps
-80106219:	e9 a1 f6 ff ff       	jmp    801058bf <alltraps>
+80106189:	e9 ac f6 ff ff       	jmp    8010583a <alltraps>
 
-8010621e <vector127>:
+8010618e <vector127>:
 .globl vector127
 vector127:
   pushl $0
-8010621e:	6a 00                	push   $0x0
+8010618e:	6a 00                	push   $0x0
   pushl $127
-80106220:	6a 7f                	push   $0x7f
+80106190:	6a 7f                	push   $0x7f
   jmp alltraps
-80106222:	e9 98 f6 ff ff       	jmp    801058bf <alltraps>
+80106192:	e9 a3 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106227 <vector128>:
+80106197 <vector128>:
 .globl vector128
 vector128:
   pushl $0
-80106227:	6a 00                	push   $0x0
+80106197:	6a 00                	push   $0x0
   pushl $128
-80106229:	68 80 00 00 00       	push   $0x80
+80106199:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-8010622e:	e9 8c f6 ff ff       	jmp    801058bf <alltraps>
+8010619e:	e9 97 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106233 <vector129>:
+801061a3 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-80106233:	6a 00                	push   $0x0
+801061a3:	6a 00                	push   $0x0
   pushl $129
-80106235:	68 81 00 00 00       	push   $0x81
+801061a5:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-8010623a:	e9 80 f6 ff ff       	jmp    801058bf <alltraps>
+801061aa:	e9 8b f6 ff ff       	jmp    8010583a <alltraps>
 
-8010623f <vector130>:
+801061af <vector130>:
 .globl vector130
 vector130:
   pushl $0
-8010623f:	6a 00                	push   $0x0
+801061af:	6a 00                	push   $0x0
   pushl $130
-80106241:	68 82 00 00 00       	push   $0x82
+801061b1:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-80106246:	e9 74 f6 ff ff       	jmp    801058bf <alltraps>
+801061b6:	e9 7f f6 ff ff       	jmp    8010583a <alltraps>
 
-8010624b <vector131>:
+801061bb <vector131>:
 .globl vector131
 vector131:
   pushl $0
-8010624b:	6a 00                	push   $0x0
+801061bb:	6a 00                	push   $0x0
   pushl $131
-8010624d:	68 83 00 00 00       	push   $0x83
+801061bd:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-80106252:	e9 68 f6 ff ff       	jmp    801058bf <alltraps>
+801061c2:	e9 73 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106257 <vector132>:
+801061c7 <vector132>:
 .globl vector132
 vector132:
   pushl $0
-80106257:	6a 00                	push   $0x0
+801061c7:	6a 00                	push   $0x0
   pushl $132
-80106259:	68 84 00 00 00       	push   $0x84
+801061c9:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-8010625e:	e9 5c f6 ff ff       	jmp    801058bf <alltraps>
+801061ce:	e9 67 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106263 <vector133>:
+801061d3 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-80106263:	6a 00                	push   $0x0
+801061d3:	6a 00                	push   $0x0
   pushl $133
-80106265:	68 85 00 00 00       	push   $0x85
+801061d5:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-8010626a:	e9 50 f6 ff ff       	jmp    801058bf <alltraps>
+801061da:	e9 5b f6 ff ff       	jmp    8010583a <alltraps>
 
-8010626f <vector134>:
+801061df <vector134>:
 .globl vector134
 vector134:
   pushl $0
-8010626f:	6a 00                	push   $0x0
+801061df:	6a 00                	push   $0x0
   pushl $134
-80106271:	68 86 00 00 00       	push   $0x86
+801061e1:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-80106276:	e9 44 f6 ff ff       	jmp    801058bf <alltraps>
+801061e6:	e9 4f f6 ff ff       	jmp    8010583a <alltraps>
 
-8010627b <vector135>:
+801061eb <vector135>:
 .globl vector135
 vector135:
   pushl $0
-8010627b:	6a 00                	push   $0x0
+801061eb:	6a 00                	push   $0x0
   pushl $135
-8010627d:	68 87 00 00 00       	push   $0x87
+801061ed:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-80106282:	e9 38 f6 ff ff       	jmp    801058bf <alltraps>
+801061f2:	e9 43 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106287 <vector136>:
+801061f7 <vector136>:
 .globl vector136
 vector136:
   pushl $0
-80106287:	6a 00                	push   $0x0
+801061f7:	6a 00                	push   $0x0
   pushl $136
-80106289:	68 88 00 00 00       	push   $0x88
+801061f9:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-8010628e:	e9 2c f6 ff ff       	jmp    801058bf <alltraps>
+801061fe:	e9 37 f6 ff ff       	jmp    8010583a <alltraps>
 
-80106293 <vector137>:
+80106203 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106293:	6a 00                	push   $0x0
+80106203:	6a 00                	push   $0x0
   pushl $137
-80106295:	68 89 00 00 00       	push   $0x89
+80106205:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010629a:	e9 20 f6 ff ff       	jmp    801058bf <alltraps>
+8010620a:	e9 2b f6 ff ff       	jmp    8010583a <alltraps>
 
-8010629f <vector138>:
+8010620f <vector138>:
 .globl vector138
 vector138:
   pushl $0
-8010629f:	6a 00                	push   $0x0
+8010620f:	6a 00                	push   $0x0
   pushl $138
-801062a1:	68 8a 00 00 00       	push   $0x8a
+80106211:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-801062a6:	e9 14 f6 ff ff       	jmp    801058bf <alltraps>
+80106216:	e9 1f f6 ff ff       	jmp    8010583a <alltraps>
 
-801062ab <vector139>:
+8010621b <vector139>:
 .globl vector139
 vector139:
   pushl $0
-801062ab:	6a 00                	push   $0x0
+8010621b:	6a 00                	push   $0x0
   pushl $139
-801062ad:	68 8b 00 00 00       	push   $0x8b
+8010621d:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-801062b2:	e9 08 f6 ff ff       	jmp    801058bf <alltraps>
+80106222:	e9 13 f6 ff ff       	jmp    8010583a <alltraps>
 
-801062b7 <vector140>:
+80106227 <vector140>:
 .globl vector140
 vector140:
   pushl $0
-801062b7:	6a 00                	push   $0x0
+80106227:	6a 00                	push   $0x0
   pushl $140
-801062b9:	68 8c 00 00 00       	push   $0x8c
+80106229:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-801062be:	e9 fc f5 ff ff       	jmp    801058bf <alltraps>
+8010622e:	e9 07 f6 ff ff       	jmp    8010583a <alltraps>
 
-801062c3 <vector141>:
+80106233 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-801062c3:	6a 00                	push   $0x0
+80106233:	6a 00                	push   $0x0
   pushl $141
-801062c5:	68 8d 00 00 00       	push   $0x8d
+80106235:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-801062ca:	e9 f0 f5 ff ff       	jmp    801058bf <alltraps>
+8010623a:	e9 fb f5 ff ff       	jmp    8010583a <alltraps>
 
-801062cf <vector142>:
+8010623f <vector142>:
 .globl vector142
 vector142:
   pushl $0
-801062cf:	6a 00                	push   $0x0
+8010623f:	6a 00                	push   $0x0
   pushl $142
-801062d1:	68 8e 00 00 00       	push   $0x8e
+80106241:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-801062d6:	e9 e4 f5 ff ff       	jmp    801058bf <alltraps>
+80106246:	e9 ef f5 ff ff       	jmp    8010583a <alltraps>
 
-801062db <vector143>:
+8010624b <vector143>:
 .globl vector143
 vector143:
   pushl $0
-801062db:	6a 00                	push   $0x0
+8010624b:	6a 00                	push   $0x0
   pushl $143
-801062dd:	68 8f 00 00 00       	push   $0x8f
+8010624d:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-801062e2:	e9 d8 f5 ff ff       	jmp    801058bf <alltraps>
+80106252:	e9 e3 f5 ff ff       	jmp    8010583a <alltraps>
 
-801062e7 <vector144>:
+80106257 <vector144>:
 .globl vector144
 vector144:
   pushl $0
-801062e7:	6a 00                	push   $0x0
+80106257:	6a 00                	push   $0x0
   pushl $144
-801062e9:	68 90 00 00 00       	push   $0x90
+80106259:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-801062ee:	e9 cc f5 ff ff       	jmp    801058bf <alltraps>
+8010625e:	e9 d7 f5 ff ff       	jmp    8010583a <alltraps>
 
-801062f3 <vector145>:
+80106263 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-801062f3:	6a 00                	push   $0x0
+80106263:	6a 00                	push   $0x0
   pushl $145
-801062f5:	68 91 00 00 00       	push   $0x91
+80106265:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-801062fa:	e9 c0 f5 ff ff       	jmp    801058bf <alltraps>
+8010626a:	e9 cb f5 ff ff       	jmp    8010583a <alltraps>
 
-801062ff <vector146>:
+8010626f <vector146>:
 .globl vector146
 vector146:
   pushl $0
-801062ff:	6a 00                	push   $0x0
+8010626f:	6a 00                	push   $0x0
   pushl $146
-80106301:	68 92 00 00 00       	push   $0x92
+80106271:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-80106306:	e9 b4 f5 ff ff       	jmp    801058bf <alltraps>
+80106276:	e9 bf f5 ff ff       	jmp    8010583a <alltraps>
 
-8010630b <vector147>:
+8010627b <vector147>:
 .globl vector147
 vector147:
   pushl $0
-8010630b:	6a 00                	push   $0x0
+8010627b:	6a 00                	push   $0x0
   pushl $147
-8010630d:	68 93 00 00 00       	push   $0x93
+8010627d:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106312:	e9 a8 f5 ff ff       	jmp    801058bf <alltraps>
+80106282:	e9 b3 f5 ff ff       	jmp    8010583a <alltraps>
 
-80106317 <vector148>:
+80106287 <vector148>:
 .globl vector148
 vector148:
   pushl $0
-80106317:	6a 00                	push   $0x0
+80106287:	6a 00                	push   $0x0
   pushl $148
-80106319:	68 94 00 00 00       	push   $0x94
+80106289:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-8010631e:	e9 9c f5 ff ff       	jmp    801058bf <alltraps>
+8010628e:	e9 a7 f5 ff ff       	jmp    8010583a <alltraps>
 
-80106323 <vector149>:
+80106293 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106323:	6a 00                	push   $0x0
+80106293:	6a 00                	push   $0x0
   pushl $149
-80106325:	68 95 00 00 00       	push   $0x95
+80106295:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010632a:	e9 90 f5 ff ff       	jmp    801058bf <alltraps>
+8010629a:	e9 9b f5 ff ff       	jmp    8010583a <alltraps>
 
-8010632f <vector150>:
+8010629f <vector150>:
 .globl vector150
 vector150:
   pushl $0
-8010632f:	6a 00                	push   $0x0
+8010629f:	6a 00                	push   $0x0
   pushl $150
-80106331:	68 96 00 00 00       	push   $0x96
+801062a1:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-80106336:	e9 84 f5 ff ff       	jmp    801058bf <alltraps>
+801062a6:	e9 8f f5 ff ff       	jmp    8010583a <alltraps>
 
-8010633b <vector151>:
+801062ab <vector151>:
 .globl vector151
 vector151:
   pushl $0
-8010633b:	6a 00                	push   $0x0
+801062ab:	6a 00                	push   $0x0
   pushl $151
-8010633d:	68 97 00 00 00       	push   $0x97
+801062ad:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-80106342:	e9 78 f5 ff ff       	jmp    801058bf <alltraps>
+801062b2:	e9 83 f5 ff ff       	jmp    8010583a <alltraps>
 
-80106347 <vector152>:
+801062b7 <vector152>:
 .globl vector152
 vector152:
   pushl $0
-80106347:	6a 00                	push   $0x0
+801062b7:	6a 00                	push   $0x0
   pushl $152
-80106349:	68 98 00 00 00       	push   $0x98
+801062b9:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-8010634e:	e9 6c f5 ff ff       	jmp    801058bf <alltraps>
+801062be:	e9 77 f5 ff ff       	jmp    8010583a <alltraps>
 
-80106353 <vector153>:
+801062c3 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-80106353:	6a 00                	push   $0x0
+801062c3:	6a 00                	push   $0x0
   pushl $153
-80106355:	68 99 00 00 00       	push   $0x99
+801062c5:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-8010635a:	e9 60 f5 ff ff       	jmp    801058bf <alltraps>
+801062ca:	e9 6b f5 ff ff       	jmp    8010583a <alltraps>
 
-8010635f <vector154>:
+801062cf <vector154>:
 .globl vector154
 vector154:
   pushl $0
-8010635f:	6a 00                	push   $0x0
+801062cf:	6a 00                	push   $0x0
   pushl $154
-80106361:	68 9a 00 00 00       	push   $0x9a
+801062d1:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-80106366:	e9 54 f5 ff ff       	jmp    801058bf <alltraps>
+801062d6:	e9 5f f5 ff ff       	jmp    8010583a <alltraps>
 
-8010636b <vector155>:
+801062db <vector155>:
 .globl vector155
 vector155:
   pushl $0
-8010636b:	6a 00                	push   $0x0
+801062db:	6a 00                	push   $0x0
   pushl $155
-8010636d:	68 9b 00 00 00       	push   $0x9b
+801062dd:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-80106372:	e9 48 f5 ff ff       	jmp    801058bf <alltraps>
+801062e2:	e9 53 f5 ff ff       	jmp    8010583a <alltraps>
 
-80106377 <vector156>:
+801062e7 <vector156>:
 .globl vector156
 vector156:
   pushl $0
-80106377:	6a 00                	push   $0x0
+801062e7:	6a 00                	push   $0x0
   pushl $156
-80106379:	68 9c 00 00 00       	push   $0x9c
+801062e9:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-8010637e:	e9 3c f5 ff ff       	jmp    801058bf <alltraps>
+801062ee:	e9 47 f5 ff ff       	jmp    8010583a <alltraps>
 
-80106383 <vector157>:
+801062f3 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-80106383:	6a 00                	push   $0x0
+801062f3:	6a 00                	push   $0x0
   pushl $157
-80106385:	68 9d 00 00 00       	push   $0x9d
+801062f5:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-8010638a:	e9 30 f5 ff ff       	jmp    801058bf <alltraps>
+801062fa:	e9 3b f5 ff ff       	jmp    8010583a <alltraps>
 
-8010638f <vector158>:
+801062ff <vector158>:
 .globl vector158
 vector158:
   pushl $0
-8010638f:	6a 00                	push   $0x0
+801062ff:	6a 00                	push   $0x0
   pushl $158
-80106391:	68 9e 00 00 00       	push   $0x9e
+80106301:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-80106396:	e9 24 f5 ff ff       	jmp    801058bf <alltraps>
+80106306:	e9 2f f5 ff ff       	jmp    8010583a <alltraps>
 
-8010639b <vector159>:
+8010630b <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010639b:	6a 00                	push   $0x0
+8010630b:	6a 00                	push   $0x0
   pushl $159
-8010639d:	68 9f 00 00 00       	push   $0x9f
+8010630d:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-801063a2:	e9 18 f5 ff ff       	jmp    801058bf <alltraps>
+80106312:	e9 23 f5 ff ff       	jmp    8010583a <alltraps>
 
-801063a7 <vector160>:
+80106317 <vector160>:
 .globl vector160
 vector160:
   pushl $0
-801063a7:	6a 00                	push   $0x0
+80106317:	6a 00                	push   $0x0
   pushl $160
-801063a9:	68 a0 00 00 00       	push   $0xa0
+80106319:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-801063ae:	e9 0c f5 ff ff       	jmp    801058bf <alltraps>
+8010631e:	e9 17 f5 ff ff       	jmp    8010583a <alltraps>
 
-801063b3 <vector161>:
+80106323 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-801063b3:	6a 00                	push   $0x0
+80106323:	6a 00                	push   $0x0
   pushl $161
-801063b5:	68 a1 00 00 00       	push   $0xa1
+80106325:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-801063ba:	e9 00 f5 ff ff       	jmp    801058bf <alltraps>
+8010632a:	e9 0b f5 ff ff       	jmp    8010583a <alltraps>
 
-801063bf <vector162>:
+8010632f <vector162>:
 .globl vector162
 vector162:
   pushl $0
-801063bf:	6a 00                	push   $0x0
+8010632f:	6a 00                	push   $0x0
   pushl $162
-801063c1:	68 a2 00 00 00       	push   $0xa2
+80106331:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-801063c6:	e9 f4 f4 ff ff       	jmp    801058bf <alltraps>
+80106336:	e9 ff f4 ff ff       	jmp    8010583a <alltraps>
 
-801063cb <vector163>:
+8010633b <vector163>:
 .globl vector163
 vector163:
   pushl $0
-801063cb:	6a 00                	push   $0x0
+8010633b:	6a 00                	push   $0x0
   pushl $163
-801063cd:	68 a3 00 00 00       	push   $0xa3
+8010633d:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-801063d2:	e9 e8 f4 ff ff       	jmp    801058bf <alltraps>
+80106342:	e9 f3 f4 ff ff       	jmp    8010583a <alltraps>
 
-801063d7 <vector164>:
+80106347 <vector164>:
 .globl vector164
 vector164:
   pushl $0
-801063d7:	6a 00                	push   $0x0
+80106347:	6a 00                	push   $0x0
   pushl $164
-801063d9:	68 a4 00 00 00       	push   $0xa4
+80106349:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-801063de:	e9 dc f4 ff ff       	jmp    801058bf <alltraps>
+8010634e:	e9 e7 f4 ff ff       	jmp    8010583a <alltraps>
 
-801063e3 <vector165>:
+80106353 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-801063e3:	6a 00                	push   $0x0
+80106353:	6a 00                	push   $0x0
   pushl $165
-801063e5:	68 a5 00 00 00       	push   $0xa5
+80106355:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-801063ea:	e9 d0 f4 ff ff       	jmp    801058bf <alltraps>
+8010635a:	e9 db f4 ff ff       	jmp    8010583a <alltraps>
 
-801063ef <vector166>:
+8010635f <vector166>:
 .globl vector166
 vector166:
   pushl $0
-801063ef:	6a 00                	push   $0x0
+8010635f:	6a 00                	push   $0x0
   pushl $166
-801063f1:	68 a6 00 00 00       	push   $0xa6
+80106361:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-801063f6:	e9 c4 f4 ff ff       	jmp    801058bf <alltraps>
+80106366:	e9 cf f4 ff ff       	jmp    8010583a <alltraps>
 
-801063fb <vector167>:
+8010636b <vector167>:
 .globl vector167
 vector167:
   pushl $0
-801063fb:	6a 00                	push   $0x0
+8010636b:	6a 00                	push   $0x0
   pushl $167
-801063fd:	68 a7 00 00 00       	push   $0xa7
+8010636d:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106402:	e9 b8 f4 ff ff       	jmp    801058bf <alltraps>
+80106372:	e9 c3 f4 ff ff       	jmp    8010583a <alltraps>
 
-80106407 <vector168>:
+80106377 <vector168>:
 .globl vector168
 vector168:
   pushl $0
-80106407:	6a 00                	push   $0x0
+80106377:	6a 00                	push   $0x0
   pushl $168
-80106409:	68 a8 00 00 00       	push   $0xa8
+80106379:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-8010640e:	e9 ac f4 ff ff       	jmp    801058bf <alltraps>
+8010637e:	e9 b7 f4 ff ff       	jmp    8010583a <alltraps>
 
-80106413 <vector169>:
+80106383 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106413:	6a 00                	push   $0x0
+80106383:	6a 00                	push   $0x0
   pushl $169
-80106415:	68 a9 00 00 00       	push   $0xa9
+80106385:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-8010641a:	e9 a0 f4 ff ff       	jmp    801058bf <alltraps>
+8010638a:	e9 ab f4 ff ff       	jmp    8010583a <alltraps>
 
-8010641f <vector170>:
+8010638f <vector170>:
 .globl vector170
 vector170:
   pushl $0
-8010641f:	6a 00                	push   $0x0
+8010638f:	6a 00                	push   $0x0
   pushl $170
-80106421:	68 aa 00 00 00       	push   $0xaa
+80106391:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-80106426:	e9 94 f4 ff ff       	jmp    801058bf <alltraps>
+80106396:	e9 9f f4 ff ff       	jmp    8010583a <alltraps>
 
-8010642b <vector171>:
+8010639b <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010642b:	6a 00                	push   $0x0
+8010639b:	6a 00                	push   $0x0
   pushl $171
-8010642d:	68 ab 00 00 00       	push   $0xab
+8010639d:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-80106432:	e9 88 f4 ff ff       	jmp    801058bf <alltraps>
+801063a2:	e9 93 f4 ff ff       	jmp    8010583a <alltraps>
 
-80106437 <vector172>:
+801063a7 <vector172>:
 .globl vector172
 vector172:
   pushl $0
-80106437:	6a 00                	push   $0x0
+801063a7:	6a 00                	push   $0x0
   pushl $172
-80106439:	68 ac 00 00 00       	push   $0xac
+801063a9:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-8010643e:	e9 7c f4 ff ff       	jmp    801058bf <alltraps>
+801063ae:	e9 87 f4 ff ff       	jmp    8010583a <alltraps>
 
-80106443 <vector173>:
+801063b3 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-80106443:	6a 00                	push   $0x0
+801063b3:	6a 00                	push   $0x0
   pushl $173
-80106445:	68 ad 00 00 00       	push   $0xad
+801063b5:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-8010644a:	e9 70 f4 ff ff       	jmp    801058bf <alltraps>
+801063ba:	e9 7b f4 ff ff       	jmp    8010583a <alltraps>
 
-8010644f <vector174>:
+801063bf <vector174>:
 .globl vector174
 vector174:
   pushl $0
-8010644f:	6a 00                	push   $0x0
+801063bf:	6a 00                	push   $0x0
   pushl $174
-80106451:	68 ae 00 00 00       	push   $0xae
+801063c1:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-80106456:	e9 64 f4 ff ff       	jmp    801058bf <alltraps>
+801063c6:	e9 6f f4 ff ff       	jmp    8010583a <alltraps>
 
-8010645b <vector175>:
+801063cb <vector175>:
 .globl vector175
 vector175:
   pushl $0
-8010645b:	6a 00                	push   $0x0
+801063cb:	6a 00                	push   $0x0
   pushl $175
-8010645d:	68 af 00 00 00       	push   $0xaf
+801063cd:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-80106462:	e9 58 f4 ff ff       	jmp    801058bf <alltraps>
+801063d2:	e9 63 f4 ff ff       	jmp    8010583a <alltraps>
 
-80106467 <vector176>:
+801063d7 <vector176>:
 .globl vector176
 vector176:
   pushl $0
-80106467:	6a 00                	push   $0x0
+801063d7:	6a 00                	push   $0x0
   pushl $176
-80106469:	68 b0 00 00 00       	push   $0xb0
+801063d9:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-8010646e:	e9 4c f4 ff ff       	jmp    801058bf <alltraps>
+801063de:	e9 57 f4 ff ff       	jmp    8010583a <alltraps>
 
-80106473 <vector177>:
+801063e3 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-80106473:	6a 00                	push   $0x0
+801063e3:	6a 00                	push   $0x0
   pushl $177
-80106475:	68 b1 00 00 00       	push   $0xb1
+801063e5:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-8010647a:	e9 40 f4 ff ff       	jmp    801058bf <alltraps>
+801063ea:	e9 4b f4 ff ff       	jmp    8010583a <alltraps>
 
-8010647f <vector178>:
+801063ef <vector178>:
 .globl vector178
 vector178:
   pushl $0
-8010647f:	6a 00                	push   $0x0
+801063ef:	6a 00                	push   $0x0
   pushl $178
-80106481:	68 b2 00 00 00       	push   $0xb2
+801063f1:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-80106486:	e9 34 f4 ff ff       	jmp    801058bf <alltraps>
+801063f6:	e9 3f f4 ff ff       	jmp    8010583a <alltraps>
 
-8010648b <vector179>:
+801063fb <vector179>:
 .globl vector179
 vector179:
   pushl $0
-8010648b:	6a 00                	push   $0x0
+801063fb:	6a 00                	push   $0x0
   pushl $179
-8010648d:	68 b3 00 00 00       	push   $0xb3
+801063fd:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106492:	e9 28 f4 ff ff       	jmp    801058bf <alltraps>
+80106402:	e9 33 f4 ff ff       	jmp    8010583a <alltraps>
 
-80106497 <vector180>:
+80106407 <vector180>:
 .globl vector180
 vector180:
   pushl $0
-80106497:	6a 00                	push   $0x0
+80106407:	6a 00                	push   $0x0
   pushl $180
-80106499:	68 b4 00 00 00       	push   $0xb4
+80106409:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-8010649e:	e9 1c f4 ff ff       	jmp    801058bf <alltraps>
+8010640e:	e9 27 f4 ff ff       	jmp    8010583a <alltraps>
 
-801064a3 <vector181>:
+80106413 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-801064a3:	6a 00                	push   $0x0
+80106413:	6a 00                	push   $0x0
   pushl $181
-801064a5:	68 b5 00 00 00       	push   $0xb5
+80106415:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-801064aa:	e9 10 f4 ff ff       	jmp    801058bf <alltraps>
+8010641a:	e9 1b f4 ff ff       	jmp    8010583a <alltraps>
 
-801064af <vector182>:
+8010641f <vector182>:
 .globl vector182
 vector182:
   pushl $0
-801064af:	6a 00                	push   $0x0
+8010641f:	6a 00                	push   $0x0
   pushl $182
-801064b1:	68 b6 00 00 00       	push   $0xb6
+80106421:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-801064b6:	e9 04 f4 ff ff       	jmp    801058bf <alltraps>
+80106426:	e9 0f f4 ff ff       	jmp    8010583a <alltraps>
 
-801064bb <vector183>:
+8010642b <vector183>:
 .globl vector183
 vector183:
   pushl $0
-801064bb:	6a 00                	push   $0x0
+8010642b:	6a 00                	push   $0x0
   pushl $183
-801064bd:	68 b7 00 00 00       	push   $0xb7
+8010642d:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-801064c2:	e9 f8 f3 ff ff       	jmp    801058bf <alltraps>
+80106432:	e9 03 f4 ff ff       	jmp    8010583a <alltraps>
 
-801064c7 <vector184>:
+80106437 <vector184>:
 .globl vector184
 vector184:
   pushl $0
-801064c7:	6a 00                	push   $0x0
+80106437:	6a 00                	push   $0x0
   pushl $184
-801064c9:	68 b8 00 00 00       	push   $0xb8
+80106439:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-801064ce:	e9 ec f3 ff ff       	jmp    801058bf <alltraps>
+8010643e:	e9 f7 f3 ff ff       	jmp    8010583a <alltraps>
 
-801064d3 <vector185>:
+80106443 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-801064d3:	6a 00                	push   $0x0
+80106443:	6a 00                	push   $0x0
   pushl $185
-801064d5:	68 b9 00 00 00       	push   $0xb9
+80106445:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-801064da:	e9 e0 f3 ff ff       	jmp    801058bf <alltraps>
+8010644a:	e9 eb f3 ff ff       	jmp    8010583a <alltraps>
 
-801064df <vector186>:
+8010644f <vector186>:
 .globl vector186
 vector186:
   pushl $0
-801064df:	6a 00                	push   $0x0
+8010644f:	6a 00                	push   $0x0
   pushl $186
-801064e1:	68 ba 00 00 00       	push   $0xba
+80106451:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-801064e6:	e9 d4 f3 ff ff       	jmp    801058bf <alltraps>
+80106456:	e9 df f3 ff ff       	jmp    8010583a <alltraps>
 
-801064eb <vector187>:
+8010645b <vector187>:
 .globl vector187
 vector187:
   pushl $0
-801064eb:	6a 00                	push   $0x0
+8010645b:	6a 00                	push   $0x0
   pushl $187
-801064ed:	68 bb 00 00 00       	push   $0xbb
+8010645d:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-801064f2:	e9 c8 f3 ff ff       	jmp    801058bf <alltraps>
+80106462:	e9 d3 f3 ff ff       	jmp    8010583a <alltraps>
 
-801064f7 <vector188>:
+80106467 <vector188>:
 .globl vector188
 vector188:
   pushl $0
-801064f7:	6a 00                	push   $0x0
+80106467:	6a 00                	push   $0x0
   pushl $188
-801064f9:	68 bc 00 00 00       	push   $0xbc
+80106469:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-801064fe:	e9 bc f3 ff ff       	jmp    801058bf <alltraps>
+8010646e:	e9 c7 f3 ff ff       	jmp    8010583a <alltraps>
 
-80106503 <vector189>:
+80106473 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106503:	6a 00                	push   $0x0
+80106473:	6a 00                	push   $0x0
   pushl $189
-80106505:	68 bd 00 00 00       	push   $0xbd
+80106475:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-8010650a:	e9 b0 f3 ff ff       	jmp    801058bf <alltraps>
+8010647a:	e9 bb f3 ff ff       	jmp    8010583a <alltraps>
 
-8010650f <vector190>:
+8010647f <vector190>:
 .globl vector190
 vector190:
   pushl $0
-8010650f:	6a 00                	push   $0x0
+8010647f:	6a 00                	push   $0x0
   pushl $190
-80106511:	68 be 00 00 00       	push   $0xbe
+80106481:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-80106516:	e9 a4 f3 ff ff       	jmp    801058bf <alltraps>
+80106486:	e9 af f3 ff ff       	jmp    8010583a <alltraps>
 
-8010651b <vector191>:
+8010648b <vector191>:
 .globl vector191
 vector191:
   pushl $0
-8010651b:	6a 00                	push   $0x0
+8010648b:	6a 00                	push   $0x0
   pushl $191
-8010651d:	68 bf 00 00 00       	push   $0xbf
+8010648d:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106522:	e9 98 f3 ff ff       	jmp    801058bf <alltraps>
+80106492:	e9 a3 f3 ff ff       	jmp    8010583a <alltraps>
 
-80106527 <vector192>:
+80106497 <vector192>:
 .globl vector192
 vector192:
   pushl $0
-80106527:	6a 00                	push   $0x0
+80106497:	6a 00                	push   $0x0
   pushl $192
-80106529:	68 c0 00 00 00       	push   $0xc0
+80106499:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-8010652e:	e9 8c f3 ff ff       	jmp    801058bf <alltraps>
+8010649e:	e9 97 f3 ff ff       	jmp    8010583a <alltraps>
 
-80106533 <vector193>:
+801064a3 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-80106533:	6a 00                	push   $0x0
+801064a3:	6a 00                	push   $0x0
   pushl $193
-80106535:	68 c1 00 00 00       	push   $0xc1
+801064a5:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-8010653a:	e9 80 f3 ff ff       	jmp    801058bf <alltraps>
+801064aa:	e9 8b f3 ff ff       	jmp    8010583a <alltraps>
 
-8010653f <vector194>:
+801064af <vector194>:
 .globl vector194
 vector194:
   pushl $0
-8010653f:	6a 00                	push   $0x0
+801064af:	6a 00                	push   $0x0
   pushl $194
-80106541:	68 c2 00 00 00       	push   $0xc2
+801064b1:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-80106546:	e9 74 f3 ff ff       	jmp    801058bf <alltraps>
+801064b6:	e9 7f f3 ff ff       	jmp    8010583a <alltraps>
 
-8010654b <vector195>:
+801064bb <vector195>:
 .globl vector195
 vector195:
   pushl $0
-8010654b:	6a 00                	push   $0x0
+801064bb:	6a 00                	push   $0x0
   pushl $195
-8010654d:	68 c3 00 00 00       	push   $0xc3
+801064bd:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-80106552:	e9 68 f3 ff ff       	jmp    801058bf <alltraps>
+801064c2:	e9 73 f3 ff ff       	jmp    8010583a <alltraps>
 
-80106557 <vector196>:
+801064c7 <vector196>:
 .globl vector196
 vector196:
   pushl $0
-80106557:	6a 00                	push   $0x0
+801064c7:	6a 00                	push   $0x0
   pushl $196
-80106559:	68 c4 00 00 00       	push   $0xc4
+801064c9:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-8010655e:	e9 5c f3 ff ff       	jmp    801058bf <alltraps>
+801064ce:	e9 67 f3 ff ff       	jmp    8010583a <alltraps>
 
-80106563 <vector197>:
+801064d3 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-80106563:	6a 00                	push   $0x0
+801064d3:	6a 00                	push   $0x0
   pushl $197
-80106565:	68 c5 00 00 00       	push   $0xc5
+801064d5:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-8010656a:	e9 50 f3 ff ff       	jmp    801058bf <alltraps>
+801064da:	e9 5b f3 ff ff       	jmp    8010583a <alltraps>
 
-8010656f <vector198>:
+801064df <vector198>:
 .globl vector198
 vector198:
   pushl $0
-8010656f:	6a 00                	push   $0x0
+801064df:	6a 00                	push   $0x0
   pushl $198
-80106571:	68 c6 00 00 00       	push   $0xc6
+801064e1:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-80106576:	e9 44 f3 ff ff       	jmp    801058bf <alltraps>
+801064e6:	e9 4f f3 ff ff       	jmp    8010583a <alltraps>
 
-8010657b <vector199>:
+801064eb <vector199>:
 .globl vector199
 vector199:
   pushl $0
-8010657b:	6a 00                	push   $0x0
+801064eb:	6a 00                	push   $0x0
   pushl $199
-8010657d:	68 c7 00 00 00       	push   $0xc7
+801064ed:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-80106582:	e9 38 f3 ff ff       	jmp    801058bf <alltraps>
+801064f2:	e9 43 f3 ff ff       	jmp    8010583a <alltraps>
 
-80106587 <vector200>:
+801064f7 <vector200>:
 .globl vector200
 vector200:
   pushl $0
-80106587:	6a 00                	push   $0x0
+801064f7:	6a 00                	push   $0x0
   pushl $200
-80106589:	68 c8 00 00 00       	push   $0xc8
+801064f9:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-8010658e:	e9 2c f3 ff ff       	jmp    801058bf <alltraps>
+801064fe:	e9 37 f3 ff ff       	jmp    8010583a <alltraps>
 
-80106593 <vector201>:
+80106503 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106593:	6a 00                	push   $0x0
+80106503:	6a 00                	push   $0x0
   pushl $201
-80106595:	68 c9 00 00 00       	push   $0xc9
+80106505:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010659a:	e9 20 f3 ff ff       	jmp    801058bf <alltraps>
+8010650a:	e9 2b f3 ff ff       	jmp    8010583a <alltraps>
 
-8010659f <vector202>:
+8010650f <vector202>:
 .globl vector202
 vector202:
   pushl $0
-8010659f:	6a 00                	push   $0x0
+8010650f:	6a 00                	push   $0x0
   pushl $202
-801065a1:	68 ca 00 00 00       	push   $0xca
+80106511:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-801065a6:	e9 14 f3 ff ff       	jmp    801058bf <alltraps>
+80106516:	e9 1f f3 ff ff       	jmp    8010583a <alltraps>
 
-801065ab <vector203>:
+8010651b <vector203>:
 .globl vector203
 vector203:
   pushl $0
-801065ab:	6a 00                	push   $0x0
+8010651b:	6a 00                	push   $0x0
   pushl $203
-801065ad:	68 cb 00 00 00       	push   $0xcb
+8010651d:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-801065b2:	e9 08 f3 ff ff       	jmp    801058bf <alltraps>
+80106522:	e9 13 f3 ff ff       	jmp    8010583a <alltraps>
 
-801065b7 <vector204>:
+80106527 <vector204>:
 .globl vector204
 vector204:
   pushl $0
-801065b7:	6a 00                	push   $0x0
+80106527:	6a 00                	push   $0x0
   pushl $204
-801065b9:	68 cc 00 00 00       	push   $0xcc
+80106529:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-801065be:	e9 fc f2 ff ff       	jmp    801058bf <alltraps>
+8010652e:	e9 07 f3 ff ff       	jmp    8010583a <alltraps>
 
-801065c3 <vector205>:
+80106533 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-801065c3:	6a 00                	push   $0x0
+80106533:	6a 00                	push   $0x0
   pushl $205
-801065c5:	68 cd 00 00 00       	push   $0xcd
+80106535:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-801065ca:	e9 f0 f2 ff ff       	jmp    801058bf <alltraps>
+8010653a:	e9 fb f2 ff ff       	jmp    8010583a <alltraps>
 
-801065cf <vector206>:
+8010653f <vector206>:
 .globl vector206
 vector206:
   pushl $0
-801065cf:	6a 00                	push   $0x0
+8010653f:	6a 00                	push   $0x0
   pushl $206
-801065d1:	68 ce 00 00 00       	push   $0xce
+80106541:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-801065d6:	e9 e4 f2 ff ff       	jmp    801058bf <alltraps>
+80106546:	e9 ef f2 ff ff       	jmp    8010583a <alltraps>
 
-801065db <vector207>:
+8010654b <vector207>:
 .globl vector207
 vector207:
   pushl $0
-801065db:	6a 00                	push   $0x0
+8010654b:	6a 00                	push   $0x0
   pushl $207
-801065dd:	68 cf 00 00 00       	push   $0xcf
+8010654d:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-801065e2:	e9 d8 f2 ff ff       	jmp    801058bf <alltraps>
+80106552:	e9 e3 f2 ff ff       	jmp    8010583a <alltraps>
 
-801065e7 <vector208>:
+80106557 <vector208>:
 .globl vector208
 vector208:
   pushl $0
-801065e7:	6a 00                	push   $0x0
+80106557:	6a 00                	push   $0x0
   pushl $208
-801065e9:	68 d0 00 00 00       	push   $0xd0
+80106559:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-801065ee:	e9 cc f2 ff ff       	jmp    801058bf <alltraps>
+8010655e:	e9 d7 f2 ff ff       	jmp    8010583a <alltraps>
 
-801065f3 <vector209>:
+80106563 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-801065f3:	6a 00                	push   $0x0
+80106563:	6a 00                	push   $0x0
   pushl $209
-801065f5:	68 d1 00 00 00       	push   $0xd1
+80106565:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-801065fa:	e9 c0 f2 ff ff       	jmp    801058bf <alltraps>
+8010656a:	e9 cb f2 ff ff       	jmp    8010583a <alltraps>
 
-801065ff <vector210>:
+8010656f <vector210>:
 .globl vector210
 vector210:
   pushl $0
-801065ff:	6a 00                	push   $0x0
+8010656f:	6a 00                	push   $0x0
   pushl $210
-80106601:	68 d2 00 00 00       	push   $0xd2
+80106571:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-80106606:	e9 b4 f2 ff ff       	jmp    801058bf <alltraps>
+80106576:	e9 bf f2 ff ff       	jmp    8010583a <alltraps>
 
-8010660b <vector211>:
+8010657b <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010660b:	6a 00                	push   $0x0
+8010657b:	6a 00                	push   $0x0
   pushl $211
-8010660d:	68 d3 00 00 00       	push   $0xd3
+8010657d:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80106612:	e9 a8 f2 ff ff       	jmp    801058bf <alltraps>
+80106582:	e9 b3 f2 ff ff       	jmp    8010583a <alltraps>
 
-80106617 <vector212>:
+80106587 <vector212>:
 .globl vector212
 vector212:
   pushl $0
-80106617:	6a 00                	push   $0x0
+80106587:	6a 00                	push   $0x0
   pushl $212
-80106619:	68 d4 00 00 00       	push   $0xd4
+80106589:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-8010661e:	e9 9c f2 ff ff       	jmp    801058bf <alltraps>
+8010658e:	e9 a7 f2 ff ff       	jmp    8010583a <alltraps>
 
-80106623 <vector213>:
+80106593 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106623:	6a 00                	push   $0x0
+80106593:	6a 00                	push   $0x0
   pushl $213
-80106625:	68 d5 00 00 00       	push   $0xd5
+80106595:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010662a:	e9 90 f2 ff ff       	jmp    801058bf <alltraps>
+8010659a:	e9 9b f2 ff ff       	jmp    8010583a <alltraps>
 
-8010662f <vector214>:
+8010659f <vector214>:
 .globl vector214
 vector214:
   pushl $0
-8010662f:	6a 00                	push   $0x0
+8010659f:	6a 00                	push   $0x0
   pushl $214
-80106631:	68 d6 00 00 00       	push   $0xd6
+801065a1:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-80106636:	e9 84 f2 ff ff       	jmp    801058bf <alltraps>
+801065a6:	e9 8f f2 ff ff       	jmp    8010583a <alltraps>
 
-8010663b <vector215>:
+801065ab <vector215>:
 .globl vector215
 vector215:
   pushl $0
-8010663b:	6a 00                	push   $0x0
+801065ab:	6a 00                	push   $0x0
   pushl $215
-8010663d:	68 d7 00 00 00       	push   $0xd7
+801065ad:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-80106642:	e9 78 f2 ff ff       	jmp    801058bf <alltraps>
+801065b2:	e9 83 f2 ff ff       	jmp    8010583a <alltraps>
 
-80106647 <vector216>:
+801065b7 <vector216>:
 .globl vector216
 vector216:
   pushl $0
-80106647:	6a 00                	push   $0x0
+801065b7:	6a 00                	push   $0x0
   pushl $216
-80106649:	68 d8 00 00 00       	push   $0xd8
+801065b9:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-8010664e:	e9 6c f2 ff ff       	jmp    801058bf <alltraps>
+801065be:	e9 77 f2 ff ff       	jmp    8010583a <alltraps>
 
-80106653 <vector217>:
+801065c3 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-80106653:	6a 00                	push   $0x0
+801065c3:	6a 00                	push   $0x0
   pushl $217
-80106655:	68 d9 00 00 00       	push   $0xd9
+801065c5:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-8010665a:	e9 60 f2 ff ff       	jmp    801058bf <alltraps>
+801065ca:	e9 6b f2 ff ff       	jmp    8010583a <alltraps>
 
-8010665f <vector218>:
+801065cf <vector218>:
 .globl vector218
 vector218:
   pushl $0
-8010665f:	6a 00                	push   $0x0
+801065cf:	6a 00                	push   $0x0
   pushl $218
-80106661:	68 da 00 00 00       	push   $0xda
+801065d1:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-80106666:	e9 54 f2 ff ff       	jmp    801058bf <alltraps>
+801065d6:	e9 5f f2 ff ff       	jmp    8010583a <alltraps>
 
-8010666b <vector219>:
+801065db <vector219>:
 .globl vector219
 vector219:
   pushl $0
-8010666b:	6a 00                	push   $0x0
+801065db:	6a 00                	push   $0x0
   pushl $219
-8010666d:	68 db 00 00 00       	push   $0xdb
+801065dd:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-80106672:	e9 48 f2 ff ff       	jmp    801058bf <alltraps>
+801065e2:	e9 53 f2 ff ff       	jmp    8010583a <alltraps>
 
-80106677 <vector220>:
+801065e7 <vector220>:
 .globl vector220
 vector220:
   pushl $0
-80106677:	6a 00                	push   $0x0
+801065e7:	6a 00                	push   $0x0
   pushl $220
-80106679:	68 dc 00 00 00       	push   $0xdc
+801065e9:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-8010667e:	e9 3c f2 ff ff       	jmp    801058bf <alltraps>
+801065ee:	e9 47 f2 ff ff       	jmp    8010583a <alltraps>
 
-80106683 <vector221>:
+801065f3 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-80106683:	6a 00                	push   $0x0
+801065f3:	6a 00                	push   $0x0
   pushl $221
-80106685:	68 dd 00 00 00       	push   $0xdd
+801065f5:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-8010668a:	e9 30 f2 ff ff       	jmp    801058bf <alltraps>
+801065fa:	e9 3b f2 ff ff       	jmp    8010583a <alltraps>
 
-8010668f <vector222>:
+801065ff <vector222>:
 .globl vector222
 vector222:
   pushl $0
-8010668f:	6a 00                	push   $0x0
+801065ff:	6a 00                	push   $0x0
   pushl $222
-80106691:	68 de 00 00 00       	push   $0xde
+80106601:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-80106696:	e9 24 f2 ff ff       	jmp    801058bf <alltraps>
+80106606:	e9 2f f2 ff ff       	jmp    8010583a <alltraps>
 
-8010669b <vector223>:
+8010660b <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010669b:	6a 00                	push   $0x0
+8010660b:	6a 00                	push   $0x0
   pushl $223
-8010669d:	68 df 00 00 00       	push   $0xdf
+8010660d:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-801066a2:	e9 18 f2 ff ff       	jmp    801058bf <alltraps>
+80106612:	e9 23 f2 ff ff       	jmp    8010583a <alltraps>
 
-801066a7 <vector224>:
+80106617 <vector224>:
 .globl vector224
 vector224:
   pushl $0
-801066a7:	6a 00                	push   $0x0
+80106617:	6a 00                	push   $0x0
   pushl $224
-801066a9:	68 e0 00 00 00       	push   $0xe0
+80106619:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-801066ae:	e9 0c f2 ff ff       	jmp    801058bf <alltraps>
+8010661e:	e9 17 f2 ff ff       	jmp    8010583a <alltraps>
 
-801066b3 <vector225>:
+80106623 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-801066b3:	6a 00                	push   $0x0
+80106623:	6a 00                	push   $0x0
   pushl $225
-801066b5:	68 e1 00 00 00       	push   $0xe1
+80106625:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-801066ba:	e9 00 f2 ff ff       	jmp    801058bf <alltraps>
+8010662a:	e9 0b f2 ff ff       	jmp    8010583a <alltraps>
 
-801066bf <vector226>:
+8010662f <vector226>:
 .globl vector226
 vector226:
   pushl $0
-801066bf:	6a 00                	push   $0x0
+8010662f:	6a 00                	push   $0x0
   pushl $226
-801066c1:	68 e2 00 00 00       	push   $0xe2
+80106631:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-801066c6:	e9 f4 f1 ff ff       	jmp    801058bf <alltraps>
+80106636:	e9 ff f1 ff ff       	jmp    8010583a <alltraps>
 
-801066cb <vector227>:
+8010663b <vector227>:
 .globl vector227
 vector227:
   pushl $0
-801066cb:	6a 00                	push   $0x0
+8010663b:	6a 00                	push   $0x0
   pushl $227
-801066cd:	68 e3 00 00 00       	push   $0xe3
+8010663d:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-801066d2:	e9 e8 f1 ff ff       	jmp    801058bf <alltraps>
+80106642:	e9 f3 f1 ff ff       	jmp    8010583a <alltraps>
 
-801066d7 <vector228>:
+80106647 <vector228>:
 .globl vector228
 vector228:
   pushl $0
-801066d7:	6a 00                	push   $0x0
+80106647:	6a 00                	push   $0x0
   pushl $228
-801066d9:	68 e4 00 00 00       	push   $0xe4
+80106649:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-801066de:	e9 dc f1 ff ff       	jmp    801058bf <alltraps>
+8010664e:	e9 e7 f1 ff ff       	jmp    8010583a <alltraps>
 
-801066e3 <vector229>:
+80106653 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-801066e3:	6a 00                	push   $0x0
+80106653:	6a 00                	push   $0x0
   pushl $229
-801066e5:	68 e5 00 00 00       	push   $0xe5
+80106655:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-801066ea:	e9 d0 f1 ff ff       	jmp    801058bf <alltraps>
+8010665a:	e9 db f1 ff ff       	jmp    8010583a <alltraps>
 
-801066ef <vector230>:
+8010665f <vector230>:
 .globl vector230
 vector230:
   pushl $0
-801066ef:	6a 00                	push   $0x0
+8010665f:	6a 00                	push   $0x0
   pushl $230
-801066f1:	68 e6 00 00 00       	push   $0xe6
+80106661:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-801066f6:	e9 c4 f1 ff ff       	jmp    801058bf <alltraps>
+80106666:	e9 cf f1 ff ff       	jmp    8010583a <alltraps>
 
-801066fb <vector231>:
+8010666b <vector231>:
 .globl vector231
 vector231:
   pushl $0
-801066fb:	6a 00                	push   $0x0
+8010666b:	6a 00                	push   $0x0
   pushl $231
-801066fd:	68 e7 00 00 00       	push   $0xe7
+8010666d:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106702:	e9 b8 f1 ff ff       	jmp    801058bf <alltraps>
+80106672:	e9 c3 f1 ff ff       	jmp    8010583a <alltraps>
 
-80106707 <vector232>:
+80106677 <vector232>:
 .globl vector232
 vector232:
   pushl $0
-80106707:	6a 00                	push   $0x0
+80106677:	6a 00                	push   $0x0
   pushl $232
-80106709:	68 e8 00 00 00       	push   $0xe8
+80106679:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-8010670e:	e9 ac f1 ff ff       	jmp    801058bf <alltraps>
+8010667e:	e9 b7 f1 ff ff       	jmp    8010583a <alltraps>
 
-80106713 <vector233>:
+80106683 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106713:	6a 00                	push   $0x0
+80106683:	6a 00                	push   $0x0
   pushl $233
-80106715:	68 e9 00 00 00       	push   $0xe9
+80106685:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010671a:	e9 a0 f1 ff ff       	jmp    801058bf <alltraps>
+8010668a:	e9 ab f1 ff ff       	jmp    8010583a <alltraps>
 
-8010671f <vector234>:
+8010668f <vector234>:
 .globl vector234
 vector234:
   pushl $0
-8010671f:	6a 00                	push   $0x0
+8010668f:	6a 00                	push   $0x0
   pushl $234
-80106721:	68 ea 00 00 00       	push   $0xea
+80106691:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-80106726:	e9 94 f1 ff ff       	jmp    801058bf <alltraps>
+80106696:	e9 9f f1 ff ff       	jmp    8010583a <alltraps>
 
-8010672b <vector235>:
+8010669b <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010672b:	6a 00                	push   $0x0
+8010669b:	6a 00                	push   $0x0
   pushl $235
-8010672d:	68 eb 00 00 00       	push   $0xeb
+8010669d:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-80106732:	e9 88 f1 ff ff       	jmp    801058bf <alltraps>
+801066a2:	e9 93 f1 ff ff       	jmp    8010583a <alltraps>
 
-80106737 <vector236>:
+801066a7 <vector236>:
 .globl vector236
 vector236:
   pushl $0
-80106737:	6a 00                	push   $0x0
+801066a7:	6a 00                	push   $0x0
   pushl $236
-80106739:	68 ec 00 00 00       	push   $0xec
+801066a9:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-8010673e:	e9 7c f1 ff ff       	jmp    801058bf <alltraps>
+801066ae:	e9 87 f1 ff ff       	jmp    8010583a <alltraps>
 
-80106743 <vector237>:
+801066b3 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-80106743:	6a 00                	push   $0x0
+801066b3:	6a 00                	push   $0x0
   pushl $237
-80106745:	68 ed 00 00 00       	push   $0xed
+801066b5:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-8010674a:	e9 70 f1 ff ff       	jmp    801058bf <alltraps>
+801066ba:	e9 7b f1 ff ff       	jmp    8010583a <alltraps>
 
-8010674f <vector238>:
+801066bf <vector238>:
 .globl vector238
 vector238:
   pushl $0
-8010674f:	6a 00                	push   $0x0
+801066bf:	6a 00                	push   $0x0
   pushl $238
-80106751:	68 ee 00 00 00       	push   $0xee
+801066c1:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-80106756:	e9 64 f1 ff ff       	jmp    801058bf <alltraps>
+801066c6:	e9 6f f1 ff ff       	jmp    8010583a <alltraps>
 
-8010675b <vector239>:
+801066cb <vector239>:
 .globl vector239
 vector239:
   pushl $0
-8010675b:	6a 00                	push   $0x0
+801066cb:	6a 00                	push   $0x0
   pushl $239
-8010675d:	68 ef 00 00 00       	push   $0xef
+801066cd:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-80106762:	e9 58 f1 ff ff       	jmp    801058bf <alltraps>
+801066d2:	e9 63 f1 ff ff       	jmp    8010583a <alltraps>
 
-80106767 <vector240>:
+801066d7 <vector240>:
 .globl vector240
 vector240:
   pushl $0
-80106767:	6a 00                	push   $0x0
+801066d7:	6a 00                	push   $0x0
   pushl $240
-80106769:	68 f0 00 00 00       	push   $0xf0
+801066d9:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-8010676e:	e9 4c f1 ff ff       	jmp    801058bf <alltraps>
+801066de:	e9 57 f1 ff ff       	jmp    8010583a <alltraps>
 
-80106773 <vector241>:
+801066e3 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-80106773:	6a 00                	push   $0x0
+801066e3:	6a 00                	push   $0x0
   pushl $241
-80106775:	68 f1 00 00 00       	push   $0xf1
+801066e5:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-8010677a:	e9 40 f1 ff ff       	jmp    801058bf <alltraps>
+801066ea:	e9 4b f1 ff ff       	jmp    8010583a <alltraps>
 
-8010677f <vector242>:
+801066ef <vector242>:
 .globl vector242
 vector242:
   pushl $0
-8010677f:	6a 00                	push   $0x0
+801066ef:	6a 00                	push   $0x0
   pushl $242
-80106781:	68 f2 00 00 00       	push   $0xf2
+801066f1:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-80106786:	e9 34 f1 ff ff       	jmp    801058bf <alltraps>
+801066f6:	e9 3f f1 ff ff       	jmp    8010583a <alltraps>
 
-8010678b <vector243>:
+801066fb <vector243>:
 .globl vector243
 vector243:
   pushl $0
-8010678b:	6a 00                	push   $0x0
+801066fb:	6a 00                	push   $0x0
   pushl $243
-8010678d:	68 f3 00 00 00       	push   $0xf3
+801066fd:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106792:	e9 28 f1 ff ff       	jmp    801058bf <alltraps>
+80106702:	e9 33 f1 ff ff       	jmp    8010583a <alltraps>
 
-80106797 <vector244>:
+80106707 <vector244>:
 .globl vector244
 vector244:
   pushl $0
-80106797:	6a 00                	push   $0x0
+80106707:	6a 00                	push   $0x0
   pushl $244
-80106799:	68 f4 00 00 00       	push   $0xf4
+80106709:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-8010679e:	e9 1c f1 ff ff       	jmp    801058bf <alltraps>
+8010670e:	e9 27 f1 ff ff       	jmp    8010583a <alltraps>
 
-801067a3 <vector245>:
+80106713 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-801067a3:	6a 00                	push   $0x0
+80106713:	6a 00                	push   $0x0
   pushl $245
-801067a5:	68 f5 00 00 00       	push   $0xf5
+80106715:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-801067aa:	e9 10 f1 ff ff       	jmp    801058bf <alltraps>
+8010671a:	e9 1b f1 ff ff       	jmp    8010583a <alltraps>
 
-801067af <vector246>:
+8010671f <vector246>:
 .globl vector246
 vector246:
   pushl $0
-801067af:	6a 00                	push   $0x0
+8010671f:	6a 00                	push   $0x0
   pushl $246
-801067b1:	68 f6 00 00 00       	push   $0xf6
+80106721:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-801067b6:	e9 04 f1 ff ff       	jmp    801058bf <alltraps>
+80106726:	e9 0f f1 ff ff       	jmp    8010583a <alltraps>
 
-801067bb <vector247>:
+8010672b <vector247>:
 .globl vector247
 vector247:
   pushl $0
-801067bb:	6a 00                	push   $0x0
+8010672b:	6a 00                	push   $0x0
   pushl $247
-801067bd:	68 f7 00 00 00       	push   $0xf7
+8010672d:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-801067c2:	e9 f8 f0 ff ff       	jmp    801058bf <alltraps>
+80106732:	e9 03 f1 ff ff       	jmp    8010583a <alltraps>
 
-801067c7 <vector248>:
+80106737 <vector248>:
 .globl vector248
 vector248:
   pushl $0
-801067c7:	6a 00                	push   $0x0
+80106737:	6a 00                	push   $0x0
   pushl $248
-801067c9:	68 f8 00 00 00       	push   $0xf8
+80106739:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-801067ce:	e9 ec f0 ff ff       	jmp    801058bf <alltraps>
+8010673e:	e9 f7 f0 ff ff       	jmp    8010583a <alltraps>
 
-801067d3 <vector249>:
+80106743 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-801067d3:	6a 00                	push   $0x0
+80106743:	6a 00                	push   $0x0
   pushl $249
-801067d5:	68 f9 00 00 00       	push   $0xf9
+80106745:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-801067da:	e9 e0 f0 ff ff       	jmp    801058bf <alltraps>
+8010674a:	e9 eb f0 ff ff       	jmp    8010583a <alltraps>
 
-801067df <vector250>:
+8010674f <vector250>:
 .globl vector250
 vector250:
   pushl $0
-801067df:	6a 00                	push   $0x0
+8010674f:	6a 00                	push   $0x0
   pushl $250
-801067e1:	68 fa 00 00 00       	push   $0xfa
+80106751:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-801067e6:	e9 d4 f0 ff ff       	jmp    801058bf <alltraps>
+80106756:	e9 df f0 ff ff       	jmp    8010583a <alltraps>
 
-801067eb <vector251>:
+8010675b <vector251>:
 .globl vector251
 vector251:
   pushl $0
-801067eb:	6a 00                	push   $0x0
+8010675b:	6a 00                	push   $0x0
   pushl $251
-801067ed:	68 fb 00 00 00       	push   $0xfb
+8010675d:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-801067f2:	e9 c8 f0 ff ff       	jmp    801058bf <alltraps>
+80106762:	e9 d3 f0 ff ff       	jmp    8010583a <alltraps>
 
-801067f7 <vector252>:
+80106767 <vector252>:
 .globl vector252
 vector252:
   pushl $0
-801067f7:	6a 00                	push   $0x0
+80106767:	6a 00                	push   $0x0
   pushl $252
-801067f9:	68 fc 00 00 00       	push   $0xfc
+80106769:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-801067fe:	e9 bc f0 ff ff       	jmp    801058bf <alltraps>
+8010676e:	e9 c7 f0 ff ff       	jmp    8010583a <alltraps>
 
-80106803 <vector253>:
+80106773 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106803:	6a 00                	push   $0x0
+80106773:	6a 00                	push   $0x0
   pushl $253
-80106805:	68 fd 00 00 00       	push   $0xfd
+80106775:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010680a:	e9 b0 f0 ff ff       	jmp    801058bf <alltraps>
+8010677a:	e9 bb f0 ff ff       	jmp    8010583a <alltraps>
 
-8010680f <vector254>:
+8010677f <vector254>:
 .globl vector254
 vector254:
   pushl $0
-8010680f:	6a 00                	push   $0x0
+8010677f:	6a 00                	push   $0x0
   pushl $254
-80106811:	68 fe 00 00 00       	push   $0xfe
+80106781:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-80106816:	e9 a4 f0 ff ff       	jmp    801058bf <alltraps>
+80106786:	e9 af f0 ff ff       	jmp    8010583a <alltraps>
 
-8010681b <vector255>:
+8010678b <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010681b:	6a 00                	push   $0x0
+8010678b:	6a 00                	push   $0x0
   pushl $255
-8010681d:	68 ff 00 00 00       	push   $0xff
+8010678d:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106822:	e9 98 f0 ff ff       	jmp    801058bf <alltraps>
-80106827:	66 90                	xchg   %ax,%ax
-80106829:	66 90                	xchg   %ax,%ax
-8010682b:	66 90                	xchg   %ax,%ax
-8010682d:	66 90                	xchg   %ax,%ax
-8010682f:	90                   	nop
+80106792:	e9 a3 f0 ff ff       	jmp    8010583a <alltraps>
+80106797:	66 90                	xchg   %ax,%ax
+80106799:	66 90                	xchg   %ax,%ax
+8010679b:	66 90                	xchg   %ax,%ax
+8010679d:	66 90                	xchg   %ax,%ax
+8010679f:	90                   	nop
 
-80106830 <deallocuvm.part.0>:
+801067a0 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106830:	55                   	push   %ebp
-80106831:	89 e5                	mov    %esp,%ebp
-80106833:	57                   	push   %edi
-80106834:	56                   	push   %esi
-80106835:	53                   	push   %ebx
+801067a0:	55                   	push   %ebp
+801067a1:	89 e5                	mov    %esp,%ebp
+801067a3:	57                   	push   %edi
+801067a4:	56                   	push   %esi
+801067a5:	53                   	push   %ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-80106836:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
-8010683c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801067a6:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+801067ac:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106842:	83 ec 1c             	sub    $0x1c,%esp
-80106845:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+801067b2:	83 ec 1c             	sub    $0x1c,%esp
+801067b5:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-80106848:	39 d3                	cmp    %edx,%ebx
-8010684a:	73 49                	jae    80106895 <deallocuvm.part.0+0x65>
-8010684c:	89 c7                	mov    %eax,%edi
-8010684e:	eb 0c                	jmp    8010685c <deallocuvm.part.0+0x2c>
+801067b8:	39 d3                	cmp    %edx,%ebx
+801067ba:	73 49                	jae    80106805 <deallocuvm.part.0+0x65>
+801067bc:	89 c7                	mov    %eax,%edi
+801067be:	eb 0c                	jmp    801067cc <deallocuvm.part.0+0x2c>
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106850:	83 c0 01             	add    $0x1,%eax
-80106853:	c1 e0 16             	shl    $0x16,%eax
-80106856:	89 c3                	mov    %eax,%ebx
+801067c0:	83 c0 01             	add    $0x1,%eax
+801067c3:	c1 e0 16             	shl    $0x16,%eax
+801067c6:	89 c3                	mov    %eax,%ebx
   for(; a  < oldsz; a += PGSIZE){
-80106858:	39 da                	cmp    %ebx,%edx
-8010685a:	76 39                	jbe    80106895 <deallocuvm.part.0+0x65>
+801067c8:	39 da                	cmp    %ebx,%edx
+801067ca:	76 39                	jbe    80106805 <deallocuvm.part.0+0x65>
   pde = &pgdir[PDX(va)];
-8010685c:	89 d8                	mov    %ebx,%eax
-8010685e:	c1 e8 16             	shr    $0x16,%eax
+801067cc:	89 d8                	mov    %ebx,%eax
+801067ce:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-80106861:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
-80106864:	f6 c1 01             	test   $0x1,%cl
-80106867:	74 e7                	je     80106850 <deallocuvm.part.0+0x20>
+801067d1:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
+801067d4:	f6 c1 01             	test   $0x1,%cl
+801067d7:	74 e7                	je     801067c0 <deallocuvm.part.0+0x20>
   return &pgtab[PTX(va)];
-80106869:	89 de                	mov    %ebx,%esi
+801067d9:	89 de                	mov    %ebx,%esi
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-8010686b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+801067db:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-80106871:	c1 ee 0a             	shr    $0xa,%esi
-80106874:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
-8010687a:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
+801067e1:	c1 ee 0a             	shr    $0xa,%esi
+801067e4:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
+801067ea:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
     if(!pte)
-80106881:	85 f6                	test   %esi,%esi
-80106883:	74 cb                	je     80106850 <deallocuvm.part.0+0x20>
+801067f1:	85 f6                	test   %esi,%esi
+801067f3:	74 cb                	je     801067c0 <deallocuvm.part.0+0x20>
     else if((*pte & PTE_P) != 0){
-80106885:	8b 06                	mov    (%esi),%eax
-80106887:	a8 01                	test   $0x1,%al
-80106889:	75 15                	jne    801068a0 <deallocuvm.part.0+0x70>
+801067f5:	8b 06                	mov    (%esi),%eax
+801067f7:	a8 01                	test   $0x1,%al
+801067f9:	75 15                	jne    80106810 <deallocuvm.part.0+0x70>
   for(; a  < oldsz; a += PGSIZE){
-8010688b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106891:	39 da                	cmp    %ebx,%edx
-80106893:	77 c7                	ja     8010685c <deallocuvm.part.0+0x2c>
+801067fb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106801:	39 da                	cmp    %ebx,%edx
+80106803:	77 c7                	ja     801067cc <deallocuvm.part.0+0x2c>
       kfree(v);
       *pte = 0;
     }
   }
   return newsz;
 }
-80106895:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106898:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010689b:	5b                   	pop    %ebx
-8010689c:	5e                   	pop    %esi
-8010689d:	5f                   	pop    %edi
-8010689e:	5d                   	pop    %ebp
-8010689f:	c3                   	ret    
+80106805:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106808:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010680b:	5b                   	pop    %ebx
+8010680c:	5e                   	pop    %esi
+8010680d:	5f                   	pop    %edi
+8010680e:	5d                   	pop    %ebp
+8010680f:	c3                   	ret    
       if(pa == 0)
-801068a0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801068a5:	74 25                	je     801068cc <deallocuvm.part.0+0x9c>
+80106810:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106815:	74 25                	je     8010683c <deallocuvm.part.0+0x9c>
       kfree(v);
-801068a7:	83 ec 0c             	sub    $0xc,%esp
+80106817:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-801068aa:	05 00 00 00 80       	add    $0x80000000,%eax
-801068af:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+8010681a:	05 00 00 00 80       	add    $0x80000000,%eax
+8010681f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801068b2:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106822:	81 c3 00 10 00 00    	add    $0x1000,%ebx
       kfree(v);
-801068b8:	50                   	push   %eax
-801068b9:	e8 02 bc ff ff       	call   801024c0 <kfree>
+80106828:	50                   	push   %eax
+80106829:	e8 92 bc ff ff       	call   801024c0 <kfree>
       *pte = 0;
-801068be:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+8010682e:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
   for(; a  < oldsz; a += PGSIZE){
-801068c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-801068c7:	83 c4 10             	add    $0x10,%esp
-801068ca:	eb 8c                	jmp    80106858 <deallocuvm.part.0+0x28>
+80106834:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106837:	83 c4 10             	add    $0x10,%esp
+8010683a:	eb 8c                	jmp    801067c8 <deallocuvm.part.0+0x28>
         panic("kfree");
-801068cc:	83 ec 0c             	sub    $0xc,%esp
-801068cf:	68 86 74 10 80       	push   $0x80107486
-801068d4:	e8 a7 9a ff ff       	call   80100380 <panic>
-801068d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801068e0 <mappages>:
-{
-801068e0:	55                   	push   %ebp
-801068e1:	89 e5                	mov    %esp,%ebp
-801068e3:	57                   	push   %edi
-801068e4:	56                   	push   %esi
-801068e5:	53                   	push   %ebx
+8010683c:	83 ec 0c             	sub    $0xc,%esp
+8010683f:	68 06 74 10 80       	push   $0x80107406
+80106844:	e8 37 9b ff ff       	call   80100380 <panic>
+80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106850 <mappages>:
+{
+80106850:	55                   	push   %ebp
+80106851:	89 e5                	mov    %esp,%ebp
+80106853:	57                   	push   %edi
+80106854:	56                   	push   %esi
+80106855:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-801068e6:	89 d3                	mov    %edx,%ebx
-801068e8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106856:	89 d3                	mov    %edx,%ebx
+80106858:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 {
-801068ee:	83 ec 1c             	sub    $0x1c,%esp
-801068f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010685e:	83 ec 1c             	sub    $0x1c,%esp
+80106861:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801068f4:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-801068f8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801068fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80106900:	8b 45 08             	mov    0x8(%ebp),%eax
-80106903:	29 d8                	sub    %ebx,%eax
-80106905:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106908:	eb 3d                	jmp    80106947 <mappages+0x67>
-8010690a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106864:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106868:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010686d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106870:	8b 45 08             	mov    0x8(%ebp),%eax
+80106873:	29 d8                	sub    %ebx,%eax
+80106875:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106878:	eb 3d                	jmp    801068b7 <mappages+0x67>
+8010687a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106910:	89 da                	mov    %ebx,%edx
+80106880:	89 da                	mov    %ebx,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106912:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106882:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-80106917:	c1 ea 0a             	shr    $0xa,%edx
-8010691a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106920:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+80106887:	c1 ea 0a             	shr    $0xa,%edx
+8010688a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106890:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-80106927:	85 c0                	test   %eax,%eax
-80106929:	74 75                	je     801069a0 <mappages+0xc0>
+80106897:	85 c0                	test   %eax,%eax
+80106899:	74 75                	je     80106910 <mappages+0xc0>
     if(*pte & PTE_P)
-8010692b:	f6 00 01             	testb  $0x1,(%eax)
-8010692e:	0f 85 86 00 00 00    	jne    801069ba <mappages+0xda>
+8010689b:	f6 00 01             	testb  $0x1,(%eax)
+8010689e:	0f 85 86 00 00 00    	jne    8010692a <mappages+0xda>
     *pte = pa | perm | PTE_P;
-80106934:	0b 75 0c             	or     0xc(%ebp),%esi
-80106937:	83 ce 01             	or     $0x1,%esi
-8010693a:	89 30                	mov    %esi,(%eax)
+801068a4:	0b 75 0c             	or     0xc(%ebp),%esi
+801068a7:	83 ce 01             	or     $0x1,%esi
+801068aa:	89 30                	mov    %esi,(%eax)
     if(a == last)
-8010693c:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
-8010693f:	74 6f                	je     801069b0 <mappages+0xd0>
+801068ac:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
+801068af:	74 6f                	je     80106920 <mappages+0xd0>
     a += PGSIZE;
-80106941:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801068b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
   for(;;){
-80106947:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801068b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
   pde = &pgdir[PDX(va)];
-8010694a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-8010694d:	8d 34 18             	lea    (%eax,%ebx,1),%esi
-80106950:	89 d8                	mov    %ebx,%eax
-80106952:	c1 e8 16             	shr    $0x16,%eax
-80106955:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
+801068ba:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801068bd:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+801068c0:	89 d8                	mov    %ebx,%eax
+801068c2:	c1 e8 16             	shr    $0x16,%eax
+801068c5:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
   if(*pde & PTE_P){
-80106958:	8b 07                	mov    (%edi),%eax
-8010695a:	a8 01                	test   $0x1,%al
-8010695c:	75 b2                	jne    80106910 <mappages+0x30>
+801068c8:	8b 07                	mov    (%edi),%eax
+801068ca:	a8 01                	test   $0x1,%al
+801068cc:	75 b2                	jne    80106880 <mappages+0x30>
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-8010695e:	e8 1d bd ff ff       	call   80102680 <kalloc>
-80106963:	85 c0                	test   %eax,%eax
-80106965:	74 39                	je     801069a0 <mappages+0xc0>
+801068ce:	e8 ad bd ff ff       	call   80102680 <kalloc>
+801068d3:	85 c0                	test   %eax,%eax
+801068d5:	74 39                	je     80106910 <mappages+0xc0>
     memset(pgtab, 0, PGSIZE);
-80106967:	83 ec 04             	sub    $0x4,%esp
-8010696a:	89 45 d8             	mov    %eax,-0x28(%ebp)
-8010696d:	68 00 10 00 00       	push   $0x1000
-80106972:	6a 00                	push   $0x0
-80106974:	50                   	push   %eax
-80106975:	e8 e6 dc ff ff       	call   80104660 <memset>
+801068d7:	83 ec 04             	sub    $0x4,%esp
+801068da:	89 45 d8             	mov    %eax,-0x28(%ebp)
+801068dd:	68 00 10 00 00       	push   $0x1000
+801068e2:	6a 00                	push   $0x0
+801068e4:	50                   	push   %eax
+801068e5:	e8 76 dd ff ff       	call   80104660 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-8010697a:	8b 55 d8             	mov    -0x28(%ebp),%edx
+801068ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
   return &pgtab[PTX(va)];
-8010697d:	83 c4 10             	add    $0x10,%esp
+801068ed:	83 c4 10             	add    $0x10,%esp
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-80106980:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
-80106986:	83 c8 07             	or     $0x7,%eax
-80106989:	89 07                	mov    %eax,(%edi)
+801068f0:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
+801068f6:	83 c8 07             	or     $0x7,%eax
+801068f9:	89 07                	mov    %eax,(%edi)
   return &pgtab[PTX(va)];
-8010698b:	89 d8                	mov    %ebx,%eax
-8010698d:	c1 e8 0a             	shr    $0xa,%eax
-80106990:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106995:	01 d0                	add    %edx,%eax
-80106997:	eb 92                	jmp    8010692b <mappages+0x4b>
-80106999:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068fb:	89 d8                	mov    %ebx,%eax
+801068fd:	c1 e8 0a             	shr    $0xa,%eax
+80106900:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106905:	01 d0                	add    %edx,%eax
+80106907:	eb 92                	jmp    8010689b <mappages+0x4b>
+80106909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 }
-801069a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106910:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801069a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106913:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801069a8:	5b                   	pop    %ebx
-801069a9:	5e                   	pop    %esi
-801069aa:	5f                   	pop    %edi
-801069ab:	5d                   	pop    %ebp
-801069ac:	c3                   	ret    
-801069ad:	8d 76 00             	lea    0x0(%esi),%esi
-801069b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106918:	5b                   	pop    %ebx
+80106919:	5e                   	pop    %esi
+8010691a:	5f                   	pop    %edi
+8010691b:	5d                   	pop    %ebp
+8010691c:	c3                   	ret    
+8010691d:	8d 76 00             	lea    0x0(%esi),%esi
+80106920:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801069b3:	31 c0                	xor    %eax,%eax
+80106923:	31 c0                	xor    %eax,%eax
 }
-801069b5:	5b                   	pop    %ebx
-801069b6:	5e                   	pop    %esi
-801069b7:	5f                   	pop    %edi
-801069b8:	5d                   	pop    %ebp
-801069b9:	c3                   	ret    
+80106925:	5b                   	pop    %ebx
+80106926:	5e                   	pop    %esi
+80106927:	5f                   	pop    %edi
+80106928:	5d                   	pop    %ebp
+80106929:	c3                   	ret    
       panic("remap");
-801069ba:	83 ec 0c             	sub    $0xc,%esp
-801069bd:	68 c8 7f 10 80       	push   $0x80107fc8
-801069c2:	e8 b9 99 ff ff       	call   80100380 <panic>
-801069c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069ce:	66 90                	xchg   %ax,%ax
-
-801069d0 <seginit>:
-{
-801069d0:	55                   	push   %ebp
-801069d1:	89 e5                	mov    %esp,%ebp
-801069d3:	83 ec 18             	sub    $0x18,%esp
+8010692a:	83 ec 0c             	sub    $0xc,%esp
+8010692d:	68 48 7a 10 80       	push   $0x80107a48
+80106932:	e8 49 9a ff ff       	call   80100380 <panic>
+80106937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010693e:	66 90                	xchg   %ax,%ax
+
+80106940 <seginit>:
+{
+80106940:	55                   	push   %ebp
+80106941:	89 e5                	mov    %esp,%ebp
+80106943:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-801069d6:	e8 75 cf ff ff       	call   80103950 <cpuid>
+80106946:	e8 05 d0 ff ff       	call   80103950 <cpuid>
   pd[0] = size-1;
-801069db:	ba 2f 00 00 00       	mov    $0x2f,%edx
-801069e0:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-801069e6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+8010694b:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106950:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106956:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801069ea:	c7 80 18 28 11 80 ff 	movl   $0xffff,-0x7feed7e8(%eax)
-801069f1:	ff 00 00 
-801069f4:	c7 80 1c 28 11 80 00 	movl   $0xcf9a00,-0x7feed7e4(%eax)
-801069fb:	9a cf 00 
+8010695a:	c7 80 18 18 11 80 ff 	movl   $0xffff,-0x7feee7e8(%eax)
+80106961:	ff 00 00 
+80106964:	c7 80 1c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7e4(%eax)
+8010696b:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-801069fe:	c7 80 20 28 11 80 ff 	movl   $0xffff,-0x7feed7e0(%eax)
-80106a05:	ff 00 00 
-80106a08:	c7 80 24 28 11 80 00 	movl   $0xcf9200,-0x7feed7dc(%eax)
-80106a0f:	92 cf 00 
+8010696e:	c7 80 20 18 11 80 ff 	movl   $0xffff,-0x7feee7e0(%eax)
+80106975:	ff 00 00 
+80106978:	c7 80 24 18 11 80 00 	movl   $0xcf9200,-0x7feee7dc(%eax)
+8010697f:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106a12:	c7 80 28 28 11 80 ff 	movl   $0xffff,-0x7feed7d8(%eax)
-80106a19:	ff 00 00 
-80106a1c:	c7 80 2c 28 11 80 00 	movl   $0xcffa00,-0x7feed7d4(%eax)
-80106a23:	fa cf 00 
+80106982:	c7 80 28 18 11 80 ff 	movl   $0xffff,-0x7feee7d8(%eax)
+80106989:	ff 00 00 
+8010698c:	c7 80 2c 18 11 80 00 	movl   $0xcffa00,-0x7feee7d4(%eax)
+80106993:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106a26:	c7 80 30 28 11 80 ff 	movl   $0xffff,-0x7feed7d0(%eax)
-80106a2d:	ff 00 00 
-80106a30:	c7 80 34 28 11 80 00 	movl   $0xcff200,-0x7feed7cc(%eax)
-80106a37:	f2 cf 00 
+80106996:	c7 80 30 18 11 80 ff 	movl   $0xffff,-0x7feee7d0(%eax)
+8010699d:	ff 00 00 
+801069a0:	c7 80 34 18 11 80 00 	movl   $0xcff200,-0x7feee7cc(%eax)
+801069a7:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-80106a3a:	05 10 28 11 80       	add    $0x80112810,%eax
+801069aa:	05 10 18 11 80       	add    $0x80111810,%eax
   pd[1] = (uint)p;
-80106a3f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+801069af:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-80106a43:	c1 e8 10             	shr    $0x10,%eax
-80106a46:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+801069b3:	c1 e8 10             	shr    $0x10,%eax
+801069b6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-80106a4a:	8d 45 f2             	lea    -0xe(%ebp),%eax
-80106a4d:	0f 01 10             	lgdtl  (%eax)
+801069ba:	8d 45 f2             	lea    -0xe(%ebp),%eax
+801069bd:	0f 01 10             	lgdtl  (%eax)
 }
-80106a50:	c9                   	leave  
-80106a51:	c3                   	ret    
-80106a52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106a59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069c0:	c9                   	leave  
+801069c1:	c3                   	ret    
+801069c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80106a60 <switchkvm>:
+801069d0 <switchkvm>:
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106a60:	a1 c4 54 11 80       	mov    0x801154c4,%eax
-80106a65:	05 00 00 00 80       	add    $0x80000000,%eax
+801069d0:	a1 c4 44 11 80       	mov    0x801144c4,%eax
+801069d5:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106a6a:	0f 22 d8             	mov    %eax,%cr3
+801069da:	0f 22 d8             	mov    %eax,%cr3
 }
-80106a6d:	c3                   	ret    
-80106a6e:	66 90                	xchg   %ax,%ax
+801069dd:	c3                   	ret    
+801069de:	66 90                	xchg   %ax,%ax
 
-80106a70 <switchuvm>:
+801069e0 <switchuvm>:
 {
-80106a70:	55                   	push   %ebp
-80106a71:	89 e5                	mov    %esp,%ebp
-80106a73:	57                   	push   %edi
-80106a74:	56                   	push   %esi
-80106a75:	53                   	push   %ebx
-80106a76:	83 ec 1c             	sub    $0x1c,%esp
-80106a79:	8b 75 08             	mov    0x8(%ebp),%esi
+801069e0:	55                   	push   %ebp
+801069e1:	89 e5                	mov    %esp,%ebp
+801069e3:	57                   	push   %edi
+801069e4:	56                   	push   %esi
+801069e5:	53                   	push   %ebx
+801069e6:	83 ec 1c             	sub    $0x1c,%esp
+801069e9:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-80106a7c:	85 f6                	test   %esi,%esi
-80106a7e:	0f 84 cb 00 00 00    	je     80106b4f <switchuvm+0xdf>
+801069ec:	85 f6                	test   %esi,%esi
+801069ee:	0f 84 cb 00 00 00    	je     80106abf <switchuvm+0xdf>
   if(p->kstack == 0)
-80106a84:	8b 46 08             	mov    0x8(%esi),%eax
-80106a87:	85 c0                	test   %eax,%eax
-80106a89:	0f 84 da 00 00 00    	je     80106b69 <switchuvm+0xf9>
+801069f4:	8b 46 08             	mov    0x8(%esi),%eax
+801069f7:	85 c0                	test   %eax,%eax
+801069f9:	0f 84 da 00 00 00    	je     80106ad9 <switchuvm+0xf9>
   if(p->pgdir == 0)
-80106a8f:	8b 46 04             	mov    0x4(%esi),%eax
-80106a92:	85 c0                	test   %eax,%eax
-80106a94:	0f 84 c2 00 00 00    	je     80106b5c <switchuvm+0xec>
+801069ff:	8b 46 04             	mov    0x4(%esi),%eax
+80106a02:	85 c0                	test   %eax,%eax
+80106a04:	0f 84 c2 00 00 00    	je     80106acc <switchuvm+0xec>
   pushcli();
-80106a9a:	e8 b1 d9 ff ff       	call   80104450 <pushcli>
+80106a0a:	e8 41 da ff ff       	call   80104450 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a9f:	e8 4c ce ff ff       	call   801038f0 <mycpu>
-80106aa4:	89 c3                	mov    %eax,%ebx
-80106aa6:	e8 45 ce ff ff       	call   801038f0 <mycpu>
-80106aab:	89 c7                	mov    %eax,%edi
-80106aad:	e8 3e ce ff ff       	call   801038f0 <mycpu>
-80106ab2:	83 c7 08             	add    $0x8,%edi
-80106ab5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106ab8:	e8 33 ce ff ff       	call   801038f0 <mycpu>
-80106abd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106ac0:	ba 67 00 00 00       	mov    $0x67,%edx
-80106ac5:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106acc:	83 c0 08             	add    $0x8,%eax
-80106acf:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80106a0f:	e8 dc ce ff ff       	call   801038f0 <mycpu>
+80106a14:	89 c3                	mov    %eax,%ebx
+80106a16:	e8 d5 ce ff ff       	call   801038f0 <mycpu>
+80106a1b:	89 c7                	mov    %eax,%edi
+80106a1d:	e8 ce ce ff ff       	call   801038f0 <mycpu>
+80106a22:	83 c7 08             	add    $0x8,%edi
+80106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106a28:	e8 c3 ce ff ff       	call   801038f0 <mycpu>
+80106a2d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106a30:	ba 67 00 00 00       	mov    $0x67,%edx
+80106a35:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106a3c:	83 c0 08             	add    $0x8,%eax
+80106a3f:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106ad6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+80106a46:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106adb:	83 c1 08             	add    $0x8,%ecx
-80106ade:	c1 e8 18             	shr    $0x18,%eax
-80106ae1:	c1 e9 10             	shr    $0x10,%ecx
-80106ae4:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106aea:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106af0:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106af5:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80106a4b:	83 c1 08             	add    $0x8,%ecx
+80106a4e:	c1 e8 18             	shr    $0x18,%eax
+80106a51:	c1 e9 10             	shr    $0x10,%ecx
+80106a54:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80106a5a:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80106a60:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106a65:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106afc:	bb 10 00 00 00       	mov    $0x10,%ebx
+80106a6c:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106b01:	e8 ea cd ff ff       	call   801038f0 <mycpu>
-80106b06:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80106a71:	e8 7a ce ff ff       	call   801038f0 <mycpu>
+80106a76:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106b0d:	e8 de cd ff ff       	call   801038f0 <mycpu>
-80106b12:	66 89 58 10          	mov    %bx,0x10(%eax)
+80106a7d:	e8 6e ce ff ff       	call   801038f0 <mycpu>
+80106a82:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106b16:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106b19:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106b1f:	e8 cc cd ff ff       	call   801038f0 <mycpu>
-80106b24:	89 58 0c             	mov    %ebx,0xc(%eax)
+80106a86:	8b 5e 08             	mov    0x8(%esi),%ebx
+80106a89:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106a8f:	e8 5c ce ff ff       	call   801038f0 <mycpu>
+80106a94:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106b27:	e8 c4 cd ff ff       	call   801038f0 <mycpu>
-80106b2c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80106a97:	e8 54 ce ff ff       	call   801038f0 <mycpu>
+80106a9c:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106b30:	b8 28 00 00 00       	mov    $0x28,%eax
-80106b35:	0f 00 d8             	ltr    %ax
+80106aa0:	b8 28 00 00 00       	mov    $0x28,%eax
+80106aa5:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106b38:	8b 46 04             	mov    0x4(%esi),%eax
-80106b3b:	05 00 00 00 80       	add    $0x80000000,%eax
+80106aa8:	8b 46 04             	mov    0x4(%esi),%eax
+80106aab:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106b40:	0f 22 d8             	mov    %eax,%cr3
+80106ab0:	0f 22 d8             	mov    %eax,%cr3
 }
-80106b43:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b46:	5b                   	pop    %ebx
-80106b47:	5e                   	pop    %esi
-80106b48:	5f                   	pop    %edi
-80106b49:	5d                   	pop    %ebp
+80106ab3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106ab6:	5b                   	pop    %ebx
+80106ab7:	5e                   	pop    %esi
+80106ab8:	5f                   	pop    %edi
+80106ab9:	5d                   	pop    %ebp
   popcli();
-80106b4a:	e9 51 d9 ff ff       	jmp    801044a0 <popcli>
+80106aba:	e9 e1 d9 ff ff       	jmp    801044a0 <popcli>
     panic("switchuvm: no process");
-80106b4f:	83 ec 0c             	sub    $0xc,%esp
-80106b52:	68 ce 7f 10 80       	push   $0x80107fce
-80106b57:	e8 24 98 ff ff       	call   80100380 <panic>
+80106abf:	83 ec 0c             	sub    $0xc,%esp
+80106ac2:	68 4e 7a 10 80       	push   $0x80107a4e
+80106ac7:	e8 b4 98 ff ff       	call   80100380 <panic>
     panic("switchuvm: no pgdir");
-80106b5c:	83 ec 0c             	sub    $0xc,%esp
-80106b5f:	68 f9 7f 10 80       	push   $0x80107ff9
-80106b64:	e8 17 98 ff ff       	call   80100380 <panic>
+80106acc:	83 ec 0c             	sub    $0xc,%esp
+80106acf:	68 79 7a 10 80       	push   $0x80107a79
+80106ad4:	e8 a7 98 ff ff       	call   80100380 <panic>
     panic("switchuvm: no kstack");
-80106b69:	83 ec 0c             	sub    $0xc,%esp
-80106b6c:	68 e4 7f 10 80       	push   $0x80107fe4
-80106b71:	e8 0a 98 ff ff       	call   80100380 <panic>
-80106b76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106b7d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106b80 <inituvm>:
-{
-80106b80:	55                   	push   %ebp
-80106b81:	89 e5                	mov    %esp,%ebp
-80106b83:	57                   	push   %edi
-80106b84:	56                   	push   %esi
-80106b85:	53                   	push   %ebx
-80106b86:	83 ec 1c             	sub    $0x1c,%esp
-80106b89:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b8c:	8b 75 10             	mov    0x10(%ebp),%esi
-80106b8f:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b92:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106ad9:	83 ec 0c             	sub    $0xc,%esp
+80106adc:	68 64 7a 10 80       	push   $0x80107a64
+80106ae1:	e8 9a 98 ff ff       	call   80100380 <panic>
+80106ae6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106aed:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106af0 <inituvm>:
+{
+80106af0:	55                   	push   %ebp
+80106af1:	89 e5                	mov    %esp,%ebp
+80106af3:	57                   	push   %edi
+80106af4:	56                   	push   %esi
+80106af5:	53                   	push   %ebx
+80106af6:	83 ec 1c             	sub    $0x1c,%esp
+80106af9:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106afc:	8b 75 10             	mov    0x10(%ebp),%esi
+80106aff:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106b02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106b95:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b9b:	77 4b                	ja     80106be8 <inituvm+0x68>
+80106b05:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106b0b:	77 4b                	ja     80106b58 <inituvm+0x68>
   mem = kalloc();
-80106b9d:	e8 de ba ff ff       	call   80102680 <kalloc>
+80106b0d:	e8 6e bb ff ff       	call   80102680 <kalloc>
   memset(mem, 0, PGSIZE);
-80106ba2:	83 ec 04             	sub    $0x4,%esp
-80106ba5:	68 00 10 00 00       	push   $0x1000
+80106b12:	83 ec 04             	sub    $0x4,%esp
+80106b15:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106baa:	89 c3                	mov    %eax,%ebx
+80106b1a:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106bac:	6a 00                	push   $0x0
-80106bae:	50                   	push   %eax
-80106baf:	e8 ac da ff ff       	call   80104660 <memset>
+80106b1c:	6a 00                	push   $0x0
+80106b1e:	50                   	push   %eax
+80106b1f:	e8 3c db ff ff       	call   80104660 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106bb4:	58                   	pop    %eax
-80106bb5:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106bbb:	5a                   	pop    %edx
-80106bbc:	6a 06                	push   $0x6
-80106bbe:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106bc3:	31 d2                	xor    %edx,%edx
-80106bc5:	50                   	push   %eax
-80106bc6:	89 f8                	mov    %edi,%eax
-80106bc8:	e8 13 fd ff ff       	call   801068e0 <mappages>
+80106b24:	58                   	pop    %eax
+80106b25:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106b2b:	5a                   	pop    %edx
+80106b2c:	6a 06                	push   $0x6
+80106b2e:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106b33:	31 d2                	xor    %edx,%edx
+80106b35:	50                   	push   %eax
+80106b36:	89 f8                	mov    %edi,%eax
+80106b38:	e8 13 fd ff ff       	call   80106850 <mappages>
   memmove(mem, init, sz);
-80106bcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106bd0:	89 75 10             	mov    %esi,0x10(%ebp)
-80106bd3:	83 c4 10             	add    $0x10,%esp
-80106bd6:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106bd9:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106bdc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106bdf:	5b                   	pop    %ebx
-80106be0:	5e                   	pop    %esi
-80106be1:	5f                   	pop    %edi
-80106be2:	5d                   	pop    %ebp
+80106b3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106b40:	89 75 10             	mov    %esi,0x10(%ebp)
+80106b43:	83 c4 10             	add    $0x10,%esp
+80106b46:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80106b49:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80106b4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106b4f:	5b                   	pop    %ebx
+80106b50:	5e                   	pop    %esi
+80106b51:	5f                   	pop    %edi
+80106b52:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106be3:	e9 18 db ff ff       	jmp    80104700 <memmove>
+80106b53:	e9 a8 db ff ff       	jmp    80104700 <memmove>
     panic("inituvm: more than a page");
-80106be8:	83 ec 0c             	sub    $0xc,%esp
-80106beb:	68 0d 80 10 80       	push   $0x8010800d
-80106bf0:	e8 8b 97 ff ff       	call   80100380 <panic>
-80106bf5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80106c00 <loaduvm>:
-{
-80106c00:	55                   	push   %ebp
-80106c01:	89 e5                	mov    %esp,%ebp
-80106c03:	57                   	push   %edi
-80106c04:	56                   	push   %esi
-80106c05:	53                   	push   %ebx
-80106c06:	83 ec 1c             	sub    $0x1c,%esp
-80106c09:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106c0c:	8b 75 18             	mov    0x18(%ebp),%esi
+80106b58:	83 ec 0c             	sub    $0xc,%esp
+80106b5b:	68 8d 7a 10 80       	push   $0x80107a8d
+80106b60:	e8 1b 98 ff ff       	call   80100380 <panic>
+80106b65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106b70 <loaduvm>:
+{
+80106b70:	55                   	push   %ebp
+80106b71:	89 e5                	mov    %esp,%ebp
+80106b73:	57                   	push   %edi
+80106b74:	56                   	push   %esi
+80106b75:	53                   	push   %ebx
+80106b76:	83 ec 1c             	sub    $0x1c,%esp
+80106b79:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106b7c:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106c0f:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106c14:	0f 85 bb 00 00 00    	jne    80106cd5 <loaduvm+0xd5>
+80106b7f:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106b84:	0f 85 bb 00 00 00    	jne    80106c45 <loaduvm+0xd5>
   for(i = 0; i < sz; i += PGSIZE){
-80106c1a:	01 f0                	add    %esi,%eax
-80106c1c:	89 f3                	mov    %esi,%ebx
-80106c1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106b8a:	01 f0                	add    %esi,%eax
+80106b8c:	89 f3                	mov    %esi,%ebx
+80106b8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c21:	8b 45 14             	mov    0x14(%ebp),%eax
-80106c24:	01 f0                	add    %esi,%eax
-80106c26:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106b91:	8b 45 14             	mov    0x14(%ebp),%eax
+80106b94:	01 f0                	add    %esi,%eax
+80106b96:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106c29:	85 f6                	test   %esi,%esi
-80106c2b:	0f 84 87 00 00 00    	je     80106cb8 <loaduvm+0xb8>
-80106c31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b99:	85 f6                	test   %esi,%esi
+80106b9b:	0f 84 87 00 00 00    	je     80106c28 <loaduvm+0xb8>
+80106ba1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   pde = &pgdir[PDX(va)];
-80106c38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   if(*pde & PTE_P){
-80106c3b:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80106c3e:	29 d8                	sub    %ebx,%eax
+80106bab:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80106bae:	29 d8                	sub    %ebx,%eax
   pde = &pgdir[PDX(va)];
-80106c40:	89 c2                	mov    %eax,%edx
-80106c42:	c1 ea 16             	shr    $0x16,%edx
+80106bb0:	89 c2                	mov    %eax,%edx
+80106bb2:	c1 ea 16             	shr    $0x16,%edx
   if(*pde & PTE_P){
-80106c45:	8b 14 91             	mov    (%ecx,%edx,4),%edx
-80106c48:	f6 c2 01             	test   $0x1,%dl
-80106c4b:	75 13                	jne    80106c60 <loaduvm+0x60>
+80106bb5:	8b 14 91             	mov    (%ecx,%edx,4),%edx
+80106bb8:	f6 c2 01             	test   $0x1,%dl
+80106bbb:	75 13                	jne    80106bd0 <loaduvm+0x60>
       panic("loaduvm: address should exist");
-80106c4d:	83 ec 0c             	sub    $0xc,%esp
-80106c50:	68 27 80 10 80       	push   $0x80108027
-80106c55:	e8 26 97 ff ff       	call   80100380 <panic>
-80106c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106bbd:	83 ec 0c             	sub    $0xc,%esp
+80106bc0:	68 a7 7a 10 80       	push   $0x80107aa7
+80106bc5:	e8 b6 97 ff ff       	call   80100380 <panic>
+80106bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106c60:	c1 e8 0a             	shr    $0xa,%eax
+80106bd0:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106c63:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106bd3:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80106c69:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106c6e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+80106bd9:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106bde:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106c75:	85 c0                	test   %eax,%eax
-80106c77:	74 d4                	je     80106c4d <loaduvm+0x4d>
+80106be5:	85 c0                	test   %eax,%eax
+80106be7:	74 d4                	je     80106bbd <loaduvm+0x4d>
     pa = PTE_ADDR(*pte);
-80106c79:	8b 00                	mov    (%eax),%eax
+80106be9:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c7b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+80106beb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106c7e:	bf 00 10 00 00       	mov    $0x1000,%edi
+80106bee:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106c83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106bf3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106c88:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106c8e:	0f 46 fb             	cmovbe %ebx,%edi
+80106bf8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80106bfe:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c91:	29 d9                	sub    %ebx,%ecx
-80106c93:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c98:	57                   	push   %edi
-80106c99:	51                   	push   %ecx
-80106c9a:	50                   	push   %eax
-80106c9b:	ff 75 10             	push   0x10(%ebp)
-80106c9e:	e8 ed ad ff ff       	call   80101a90 <readi>
-80106ca3:	83 c4 10             	add    $0x10,%esp
-80106ca6:	39 f8                	cmp    %edi,%eax
-80106ca8:	75 1e                	jne    80106cc8 <loaduvm+0xc8>
+80106c01:	29 d9                	sub    %ebx,%ecx
+80106c03:	05 00 00 00 80       	add    $0x80000000,%eax
+80106c08:	57                   	push   %edi
+80106c09:	51                   	push   %ecx
+80106c0a:	50                   	push   %eax
+80106c0b:	ff 75 10             	push   0x10(%ebp)
+80106c0e:	e8 7d ae ff ff       	call   80101a90 <readi>
+80106c13:	83 c4 10             	add    $0x10,%esp
+80106c16:	39 f8                	cmp    %edi,%eax
+80106c18:	75 1e                	jne    80106c38 <loaduvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106caa:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106cb0:	89 f0                	mov    %esi,%eax
-80106cb2:	29 d8                	sub    %ebx,%eax
-80106cb4:	39 c6                	cmp    %eax,%esi
-80106cb6:	77 80                	ja     80106c38 <loaduvm+0x38>
+80106c1a:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80106c20:	89 f0                	mov    %esi,%eax
+80106c22:	29 d8                	sub    %ebx,%eax
+80106c24:	39 c6                	cmp    %eax,%esi
+80106c26:	77 80                	ja     80106ba8 <loaduvm+0x38>
 }
-80106cb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c28:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106cbb:	31 c0                	xor    %eax,%eax
+80106c2b:	31 c0                	xor    %eax,%eax
 }
-80106cbd:	5b                   	pop    %ebx
-80106cbe:	5e                   	pop    %esi
-80106cbf:	5f                   	pop    %edi
-80106cc0:	5d                   	pop    %ebp
-80106cc1:	c3                   	ret    
-80106cc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106cc8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c2d:	5b                   	pop    %ebx
+80106c2e:	5e                   	pop    %esi
+80106c2f:	5f                   	pop    %edi
+80106c30:	5d                   	pop    %ebp
+80106c31:	c3                   	ret    
+80106c32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106c38:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106ccb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106c3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106cd0:	5b                   	pop    %ebx
-80106cd1:	5e                   	pop    %esi
-80106cd2:	5f                   	pop    %edi
-80106cd3:	5d                   	pop    %ebp
-80106cd4:	c3                   	ret    
+80106c40:	5b                   	pop    %ebx
+80106c41:	5e                   	pop    %esi
+80106c42:	5f                   	pop    %edi
+80106c43:	5d                   	pop    %ebp
+80106c44:	c3                   	ret    
     panic("loaduvm: addr must be page aligned");
-80106cd5:	83 ec 0c             	sub    $0xc,%esp
-80106cd8:	68 c8 80 10 80       	push   $0x801080c8
-80106cdd:	e8 9e 96 ff ff       	call   80100380 <panic>
-80106ce2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106cf0 <allocuvm>:
-{
-80106cf0:	55                   	push   %ebp
-80106cf1:	89 e5                	mov    %esp,%ebp
-80106cf3:	57                   	push   %edi
-80106cf4:	56                   	push   %esi
-80106cf5:	53                   	push   %ebx
-80106cf6:	83 ec 1c             	sub    $0x1c,%esp
+80106c45:	83 ec 0c             	sub    $0xc,%esp
+80106c48:	68 48 7b 10 80       	push   $0x80107b48
+80106c4d:	e8 2e 97 ff ff       	call   80100380 <panic>
+80106c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106c60 <allocuvm>:
+{
+80106c60:	55                   	push   %ebp
+80106c61:	89 e5                	mov    %esp,%ebp
+80106c63:	57                   	push   %edi
+80106c64:	56                   	push   %esi
+80106c65:	53                   	push   %ebx
+80106c66:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106cf9:	8b 45 10             	mov    0x10(%ebp),%eax
+80106c69:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80106cfc:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106c6c:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80106cff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106d02:	85 c0                	test   %eax,%eax
-80106d04:	0f 88 b6 00 00 00    	js     80106dc0 <allocuvm+0xd0>
+80106c6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106c72:	85 c0                	test   %eax,%eax
+80106c74:	0f 88 b6 00 00 00    	js     80106d30 <allocuvm+0xd0>
   if(newsz < oldsz)
-80106d0a:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80106c7a:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80106d0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80106d10:	0f 82 9a 00 00 00    	jb     80106db0 <allocuvm+0xc0>
+80106c80:	0f 82 9a 00 00 00    	jb     80106d20 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-80106d16:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106d1c:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106c86:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80106c8c:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106d22:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106d25:	77 44                	ja     80106d6b <allocuvm+0x7b>
-80106d27:	e9 87 00 00 00       	jmp    80106db3 <allocuvm+0xc3>
-80106d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106c92:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106c95:	77 44                	ja     80106cdb <allocuvm+0x7b>
+80106c97:	e9 87 00 00 00       	jmp    80106d23 <allocuvm+0xc3>
+80106c9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     memset(mem, 0, PGSIZE);
-80106d30:	83 ec 04             	sub    $0x4,%esp
-80106d33:	68 00 10 00 00       	push   $0x1000
-80106d38:	6a 00                	push   $0x0
-80106d3a:	50                   	push   %eax
-80106d3b:	e8 20 d9 ff ff       	call   80104660 <memset>
+80106ca0:	83 ec 04             	sub    $0x4,%esp
+80106ca3:	68 00 10 00 00       	push   $0x1000
+80106ca8:	6a 00                	push   $0x0
+80106caa:	50                   	push   %eax
+80106cab:	e8 b0 d9 ff ff       	call   80104660 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106d40:	58                   	pop    %eax
-80106d41:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106d47:	5a                   	pop    %edx
-80106d48:	6a 06                	push   $0x6
-80106d4a:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106d4f:	89 f2                	mov    %esi,%edx
-80106d51:	50                   	push   %eax
-80106d52:	89 f8                	mov    %edi,%eax
-80106d54:	e8 87 fb ff ff       	call   801068e0 <mappages>
-80106d59:	83 c4 10             	add    $0x10,%esp
-80106d5c:	85 c0                	test   %eax,%eax
-80106d5e:	78 78                	js     80106dd8 <allocuvm+0xe8>
+80106cb0:	58                   	pop    %eax
+80106cb1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106cb7:	5a                   	pop    %edx
+80106cb8:	6a 06                	push   $0x6
+80106cba:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106cbf:	89 f2                	mov    %esi,%edx
+80106cc1:	50                   	push   %eax
+80106cc2:	89 f8                	mov    %edi,%eax
+80106cc4:	e8 87 fb ff ff       	call   80106850 <mappages>
+80106cc9:	83 c4 10             	add    $0x10,%esp
+80106ccc:	85 c0                	test   %eax,%eax
+80106cce:	78 78                	js     80106d48 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80106d60:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106d66:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106d69:	76 48                	jbe    80106db3 <allocuvm+0xc3>
+80106cd0:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106cd6:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106cd9:	76 48                	jbe    80106d23 <allocuvm+0xc3>
     mem = kalloc();
-80106d6b:	e8 10 b9 ff ff       	call   80102680 <kalloc>
-80106d70:	89 c3                	mov    %eax,%ebx
+80106cdb:	e8 a0 b9 ff ff       	call   80102680 <kalloc>
+80106ce0:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106d72:	85 c0                	test   %eax,%eax
-80106d74:	75 ba                	jne    80106d30 <allocuvm+0x40>
+80106ce2:	85 c0                	test   %eax,%eax
+80106ce4:	75 ba                	jne    80106ca0 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80106d76:	83 ec 0c             	sub    $0xc,%esp
-80106d79:	68 45 80 10 80       	push   $0x80108045
-80106d7e:	e8 1d 99 ff ff       	call   801006a0 <cprintf>
+80106ce6:	83 ec 0c             	sub    $0xc,%esp
+80106ce9:	68 c5 7a 10 80       	push   $0x80107ac5
+80106cee:	e8 ad 99 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-80106d83:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d86:	83 c4 10             	add    $0x10,%esp
-80106d89:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d8c:	74 32                	je     80106dc0 <allocuvm+0xd0>
-80106d8e:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d91:	89 c1                	mov    %eax,%ecx
-80106d93:	89 f8                	mov    %edi,%eax
-80106d95:	e8 96 fa ff ff       	call   80106830 <deallocuvm.part.0>
+80106cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106cf6:	83 c4 10             	add    $0x10,%esp
+80106cf9:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106cfc:	74 32                	je     80106d30 <allocuvm+0xd0>
+80106cfe:	8b 55 10             	mov    0x10(%ebp),%edx
+80106d01:	89 c1                	mov    %eax,%ecx
+80106d03:	89 f8                	mov    %edi,%eax
+80106d05:	e8 96 fa ff ff       	call   801067a0 <deallocuvm.part.0>
       return 0;
-80106d9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106d0a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106da1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106da4:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106da7:	5b                   	pop    %ebx
-80106da8:	5e                   	pop    %esi
-80106da9:	5f                   	pop    %edi
-80106daa:	5d                   	pop    %ebp
-80106dab:	c3                   	ret    
-80106dac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106d11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d14:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d17:	5b                   	pop    %ebx
+80106d18:	5e                   	pop    %esi
+80106d19:	5f                   	pop    %edi
+80106d1a:	5d                   	pop    %ebp
+80106d1b:	c3                   	ret    
+80106d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106db0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106d20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80106db3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106db6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106db9:	5b                   	pop    %ebx
-80106dba:	5e                   	pop    %esi
-80106dbb:	5f                   	pop    %edi
-80106dbc:	5d                   	pop    %ebp
-80106dbd:	c3                   	ret    
-80106dbe:	66 90                	xchg   %ax,%ax
+80106d23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d26:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d29:	5b                   	pop    %ebx
+80106d2a:	5e                   	pop    %esi
+80106d2b:	5f                   	pop    %edi
+80106d2c:	5d                   	pop    %ebp
+80106d2d:	c3                   	ret    
+80106d2e:	66 90                	xchg   %ax,%ax
     return 0;
-80106dc0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106d30:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106dc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106dca:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106dcd:	5b                   	pop    %ebx
-80106dce:	5e                   	pop    %esi
-80106dcf:	5f                   	pop    %edi
-80106dd0:	5d                   	pop    %ebp
-80106dd1:	c3                   	ret    
-80106dd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106d37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d3d:	5b                   	pop    %ebx
+80106d3e:	5e                   	pop    %esi
+80106d3f:	5f                   	pop    %edi
+80106d40:	5d                   	pop    %ebp
+80106d41:	c3                   	ret    
+80106d42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106dd8:	83 ec 0c             	sub    $0xc,%esp
-80106ddb:	68 5d 80 10 80       	push   $0x8010805d
-80106de0:	e8 bb 98 ff ff       	call   801006a0 <cprintf>
+80106d48:	83 ec 0c             	sub    $0xc,%esp
+80106d4b:	68 dd 7a 10 80       	push   $0x80107add
+80106d50:	e8 4b 99 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-80106de5:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106de8:	83 c4 10             	add    $0x10,%esp
-80106deb:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106dee:	74 0c                	je     80106dfc <allocuvm+0x10c>
-80106df0:	8b 55 10             	mov    0x10(%ebp),%edx
-80106df3:	89 c1                	mov    %eax,%ecx
-80106df5:	89 f8                	mov    %edi,%eax
-80106df7:	e8 34 fa ff ff       	call   80106830 <deallocuvm.part.0>
+80106d55:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106d58:	83 c4 10             	add    $0x10,%esp
+80106d5b:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106d5e:	74 0c                	je     80106d6c <allocuvm+0x10c>
+80106d60:	8b 55 10             	mov    0x10(%ebp),%edx
+80106d63:	89 c1                	mov    %eax,%ecx
+80106d65:	89 f8                	mov    %edi,%eax
+80106d67:	e8 34 fa ff ff       	call   801067a0 <deallocuvm.part.0>
       kfree(mem);
-80106dfc:	83 ec 0c             	sub    $0xc,%esp
-80106dff:	53                   	push   %ebx
-80106e00:	e8 bb b6 ff ff       	call   801024c0 <kfree>
+80106d6c:	83 ec 0c             	sub    $0xc,%esp
+80106d6f:	53                   	push   %ebx
+80106d70:	e8 4b b7 ff ff       	call   801024c0 <kfree>
       return 0;
-80106e05:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106e0c:	83 c4 10             	add    $0x10,%esp
+80106d75:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106d7c:	83 c4 10             	add    $0x10,%esp
 }
-80106e0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106e12:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e15:	5b                   	pop    %ebx
-80106e16:	5e                   	pop    %esi
-80106e17:	5f                   	pop    %edi
-80106e18:	5d                   	pop    %ebp
-80106e19:	c3                   	ret    
-80106e1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106e20 <deallocuvm>:
-{
-80106e20:	55                   	push   %ebp
-80106e21:	89 e5                	mov    %esp,%ebp
-80106e23:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106e26:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106e29:	8b 45 08             	mov    0x8(%ebp),%eax
+80106d7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d82:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d85:	5b                   	pop    %ebx
+80106d86:	5e                   	pop    %esi
+80106d87:	5f                   	pop    %edi
+80106d88:	5d                   	pop    %ebp
+80106d89:	c3                   	ret    
+80106d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106d90 <deallocuvm>:
+{
+80106d90:	55                   	push   %ebp
+80106d91:	89 e5                	mov    %esp,%ebp
+80106d93:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106d96:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80106d99:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106e2c:	39 d1                	cmp    %edx,%ecx
-80106e2e:	73 10                	jae    80106e40 <deallocuvm+0x20>
+80106d9c:	39 d1                	cmp    %edx,%ecx
+80106d9e:	73 10                	jae    80106db0 <deallocuvm+0x20>
 }
-80106e30:	5d                   	pop    %ebp
-80106e31:	e9 fa f9 ff ff       	jmp    80106830 <deallocuvm.part.0>
-80106e36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e3d:	8d 76 00             	lea    0x0(%esi),%esi
-80106e40:	89 d0                	mov    %edx,%eax
-80106e42:	5d                   	pop    %ebp
-80106e43:	c3                   	ret    
-80106e44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e4f:	90                   	nop
+80106da0:	5d                   	pop    %ebp
+80106da1:	e9 fa f9 ff ff       	jmp    801067a0 <deallocuvm.part.0>
+80106da6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106dad:	8d 76 00             	lea    0x0(%esi),%esi
+80106db0:	89 d0                	mov    %edx,%eax
+80106db2:	5d                   	pop    %ebp
+80106db3:	c3                   	ret    
+80106db4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106dbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106dbf:	90                   	nop
 
-80106e50 <freevm>:
+80106dc0 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106e50:	55                   	push   %ebp
-80106e51:	89 e5                	mov    %esp,%ebp
-80106e53:	57                   	push   %edi
-80106e54:	56                   	push   %esi
-80106e55:	53                   	push   %ebx
-80106e56:	83 ec 0c             	sub    $0xc,%esp
-80106e59:	8b 75 08             	mov    0x8(%ebp),%esi
+80106dc0:	55                   	push   %ebp
+80106dc1:	89 e5                	mov    %esp,%ebp
+80106dc3:	57                   	push   %edi
+80106dc4:	56                   	push   %esi
+80106dc5:	53                   	push   %ebx
+80106dc6:	83 ec 0c             	sub    $0xc,%esp
+80106dc9:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106e5c:	85 f6                	test   %esi,%esi
-80106e5e:	74 59                	je     80106eb9 <freevm+0x69>
+80106dcc:	85 f6                	test   %esi,%esi
+80106dce:	74 59                	je     80106e29 <freevm+0x69>
   if(newsz >= oldsz)
-80106e60:	31 c9                	xor    %ecx,%ecx
-80106e62:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106e67:	89 f0                	mov    %esi,%eax
-80106e69:	89 f3                	mov    %esi,%ebx
-80106e6b:	e8 c0 f9 ff ff       	call   80106830 <deallocuvm.part.0>
+80106dd0:	31 c9                	xor    %ecx,%ecx
+80106dd2:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80106dd7:	89 f0                	mov    %esi,%eax
+80106dd9:	89 f3                	mov    %esi,%ebx
+80106ddb:	e8 c0 f9 ff ff       	call   801067a0 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106e70:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106e76:	eb 0f                	jmp    80106e87 <freevm+0x37>
-80106e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e7f:	90                   	nop
-80106e80:	83 c3 04             	add    $0x4,%ebx
-80106e83:	39 df                	cmp    %ebx,%edi
-80106e85:	74 23                	je     80106eaa <freevm+0x5a>
+80106de0:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80106de6:	eb 0f                	jmp    80106df7 <freevm+0x37>
+80106de8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106def:	90                   	nop
+80106df0:	83 c3 04             	add    $0x4,%ebx
+80106df3:	39 df                	cmp    %ebx,%edi
+80106df5:	74 23                	je     80106e1a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106e87:	8b 03                	mov    (%ebx),%eax
-80106e89:	a8 01                	test   $0x1,%al
-80106e8b:	74 f3                	je     80106e80 <freevm+0x30>
+80106df7:	8b 03                	mov    (%ebx),%eax
+80106df9:	a8 01                	test   $0x1,%al
+80106dfb:	74 f3                	je     80106df0 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e8d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106dfd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e92:	83 ec 0c             	sub    $0xc,%esp
+80106e02:	83 ec 0c             	sub    $0xc,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e95:	83 c3 04             	add    $0x4,%ebx
+80106e05:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e98:	05 00 00 00 80       	add    $0x80000000,%eax
+80106e08:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e9d:	50                   	push   %eax
-80106e9e:	e8 1d b6 ff ff       	call   801024c0 <kfree>
-80106ea3:	83 c4 10             	add    $0x10,%esp
+80106e0d:	50                   	push   %eax
+80106e0e:	e8 ad b6 ff ff       	call   801024c0 <kfree>
+80106e13:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106ea6:	39 df                	cmp    %ebx,%edi
-80106ea8:	75 dd                	jne    80106e87 <freevm+0x37>
+80106e16:	39 df                	cmp    %ebx,%edi
+80106e18:	75 dd                	jne    80106df7 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106eaa:	89 75 08             	mov    %esi,0x8(%ebp)
+80106e1a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106ead:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106eb0:	5b                   	pop    %ebx
-80106eb1:	5e                   	pop    %esi
-80106eb2:	5f                   	pop    %edi
-80106eb3:	5d                   	pop    %ebp
+80106e1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e20:	5b                   	pop    %ebx
+80106e21:	5e                   	pop    %esi
+80106e22:	5f                   	pop    %edi
+80106e23:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106eb4:	e9 07 b6 ff ff       	jmp    801024c0 <kfree>
+80106e24:	e9 97 b6 ff ff       	jmp    801024c0 <kfree>
     panic("freevm: no pgdir");
-80106eb9:	83 ec 0c             	sub    $0xc,%esp
-80106ebc:	68 79 80 10 80       	push   $0x80108079
-80106ec1:	e8 ba 94 ff ff       	call   80100380 <panic>
-80106ec6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ecd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106ed0 <setupkvm>:
-{
-80106ed0:	55                   	push   %ebp
-80106ed1:	89 e5                	mov    %esp,%ebp
-80106ed3:	56                   	push   %esi
-80106ed4:	53                   	push   %ebx
+80106e29:	83 ec 0c             	sub    $0xc,%esp
+80106e2c:	68 f9 7a 10 80       	push   $0x80107af9
+80106e31:	e8 4a 95 ff ff       	call   80100380 <panic>
+80106e36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e3d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106e40 <setupkvm>:
+{
+80106e40:	55                   	push   %ebp
+80106e41:	89 e5                	mov    %esp,%ebp
+80106e43:	56                   	push   %esi
+80106e44:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106ed5:	e8 a6 b7 ff ff       	call   80102680 <kalloc>
-80106eda:	89 c6                	mov    %eax,%esi
-80106edc:	85 c0                	test   %eax,%eax
-80106ede:	74 42                	je     80106f22 <setupkvm+0x52>
+80106e45:	e8 36 b8 ff ff       	call   80102680 <kalloc>
+80106e4a:	89 c6                	mov    %eax,%esi
+80106e4c:	85 c0                	test   %eax,%eax
+80106e4e:	74 42                	je     80106e92 <setupkvm+0x52>
   memset(pgdir, 0, PGSIZE);
-80106ee0:	83 ec 04             	sub    $0x4,%esp
+80106e50:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106ee3:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
+80106e53:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106ee8:	68 00 10 00 00       	push   $0x1000
-80106eed:	6a 00                	push   $0x0
-80106eef:	50                   	push   %eax
-80106ef0:	e8 6b d7 ff ff       	call   80104660 <memset>
-80106ef5:	83 c4 10             	add    $0x10,%esp
+80106e58:	68 00 10 00 00       	push   $0x1000
+80106e5d:	6a 00                	push   $0x0
+80106e5f:	50                   	push   %eax
+80106e60:	e8 fb d7 ff ff       	call   80104660 <memset>
+80106e65:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106ef8:	8b 43 04             	mov    0x4(%ebx),%eax
+80106e68:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106efb:	83 ec 08             	sub    $0x8,%esp
-80106efe:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106f01:	ff 73 0c             	push   0xc(%ebx)
-80106f04:	8b 13                	mov    (%ebx),%edx
-80106f06:	50                   	push   %eax
-80106f07:	29 c1                	sub    %eax,%ecx
-80106f09:	89 f0                	mov    %esi,%eax
-80106f0b:	e8 d0 f9 ff ff       	call   801068e0 <mappages>
-80106f10:	83 c4 10             	add    $0x10,%esp
-80106f13:	85 c0                	test   %eax,%eax
-80106f15:	78 19                	js     80106f30 <setupkvm+0x60>
+80106e6b:	83 ec 08             	sub    $0x8,%esp
+80106e6e:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80106e71:	ff 73 0c             	push   0xc(%ebx)
+80106e74:	8b 13                	mov    (%ebx),%edx
+80106e76:	50                   	push   %eax
+80106e77:	29 c1                	sub    %eax,%ecx
+80106e79:	89 f0                	mov    %esi,%eax
+80106e7b:	e8 d0 f9 ff ff       	call   80106850 <mappages>
+80106e80:	83 c4 10             	add    $0x10,%esp
+80106e83:	85 c0                	test   %eax,%eax
+80106e85:	78 19                	js     80106ea0 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106f17:	83 c3 10             	add    $0x10,%ebx
-80106f1a:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
-80106f20:	75 d6                	jne    80106ef8 <setupkvm+0x28>
-}
-80106f22:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106f25:	89 f0                	mov    %esi,%eax
-80106f27:	5b                   	pop    %ebx
-80106f28:	5e                   	pop    %esi
-80106f29:	5d                   	pop    %ebp
-80106f2a:	c3                   	ret    
-80106f2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106f2f:	90                   	nop
+80106e87:	83 c3 10             	add    $0x10,%ebx
+80106e8a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80106e90:	75 d6                	jne    80106e68 <setupkvm+0x28>
+}
+80106e92:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106e95:	89 f0                	mov    %esi,%eax
+80106e97:	5b                   	pop    %ebx
+80106e98:	5e                   	pop    %esi
+80106e99:	5d                   	pop    %ebp
+80106e9a:	c3                   	ret    
+80106e9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106e9f:	90                   	nop
       freevm(pgdir);
-80106f30:	83 ec 0c             	sub    $0xc,%esp
-80106f33:	56                   	push   %esi
+80106ea0:	83 ec 0c             	sub    $0xc,%esp
+80106ea3:	56                   	push   %esi
       return 0;
-80106f34:	31 f6                	xor    %esi,%esi
+80106ea4:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106f36:	e8 15 ff ff ff       	call   80106e50 <freevm>
+80106ea6:	e8 15 ff ff ff       	call   80106dc0 <freevm>
       return 0;
-80106f3b:	83 c4 10             	add    $0x10,%esp
+80106eab:	83 c4 10             	add    $0x10,%esp
 }
-80106f3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106f41:	89 f0                	mov    %esi,%eax
-80106f43:	5b                   	pop    %ebx
-80106f44:	5e                   	pop    %esi
-80106f45:	5d                   	pop    %ebp
-80106f46:	c3                   	ret    
-80106f47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106f4e:	66 90                	xchg   %ax,%ax
-
-80106f50 <kvmalloc>:
-{
-80106f50:	55                   	push   %ebp
-80106f51:	89 e5                	mov    %esp,%ebp
-80106f53:	83 ec 08             	sub    $0x8,%esp
+80106eae:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106eb1:	89 f0                	mov    %esi,%eax
+80106eb3:	5b                   	pop    %ebx
+80106eb4:	5e                   	pop    %esi
+80106eb5:	5d                   	pop    %ebp
+80106eb6:	c3                   	ret    
+80106eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ebe:	66 90                	xchg   %ax,%ax
+
+80106ec0 <kvmalloc>:
+{
+80106ec0:	55                   	push   %ebp
+80106ec1:	89 e5                	mov    %esp,%ebp
+80106ec3:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106f56:	e8 75 ff ff ff       	call   80106ed0 <setupkvm>
-80106f5b:	a3 c4 54 11 80       	mov    %eax,0x801154c4
+80106ec6:	e8 75 ff ff ff       	call   80106e40 <setupkvm>
+80106ecb:	a3 c4 44 11 80       	mov    %eax,0x801144c4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106f60:	05 00 00 00 80       	add    $0x80000000,%eax
-80106f65:	0f 22 d8             	mov    %eax,%cr3
+80106ed0:	05 00 00 00 80       	add    $0x80000000,%eax
+80106ed5:	0f 22 d8             	mov    %eax,%cr3
 }
-80106f68:	c9                   	leave  
-80106f69:	c3                   	ret    
-80106f6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106ed8:	c9                   	leave  
+80106ed9:	c3                   	ret    
+80106eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106f70 <clearpteu>:
+80106ee0 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106f70:	55                   	push   %ebp
-80106f71:	89 e5                	mov    %esp,%ebp
-80106f73:	83 ec 08             	sub    $0x8,%esp
-80106f76:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106ee0:	55                   	push   %ebp
+80106ee1:	89 e5                	mov    %esp,%ebp
+80106ee3:	83 ec 08             	sub    $0x8,%esp
+80106ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-80106f79:	8b 55 08             	mov    0x8(%ebp),%edx
+80106ee9:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-80106f7c:	89 c1                	mov    %eax,%ecx
-80106f7e:	c1 e9 16             	shr    $0x16,%ecx
+80106eec:	89 c1                	mov    %eax,%ecx
+80106eee:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-80106f81:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80106f84:	f6 c2 01             	test   $0x1,%dl
-80106f87:	75 17                	jne    80106fa0 <clearpteu+0x30>
+80106ef1:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+80106ef4:	f6 c2 01             	test   $0x1,%dl
+80106ef7:	75 17                	jne    80106f10 <clearpteu+0x30>
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
   if(pte == 0)
     panic("clearpteu");
-80106f89:	83 ec 0c             	sub    $0xc,%esp
-80106f8c:	68 8a 80 10 80       	push   $0x8010808a
-80106f91:	e8 ea 93 ff ff       	call   80100380 <panic>
-80106f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106f9d:	8d 76 00             	lea    0x0(%esi),%esi
+80106ef9:	83 ec 0c             	sub    $0xc,%esp
+80106efc:	68 0a 7b 10 80       	push   $0x80107b0a
+80106f01:	e8 7a 94 ff ff       	call   80100380 <panic>
+80106f06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f0d:	8d 76 00             	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106fa0:	c1 e8 0a             	shr    $0xa,%eax
+80106f10:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106fa3:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106f13:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80106fa9:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106fae:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+80106f19:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106f1e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
   if(pte == 0)
-80106fb5:	85 c0                	test   %eax,%eax
-80106fb7:	74 d0                	je     80106f89 <clearpteu+0x19>
+80106f25:	85 c0                	test   %eax,%eax
+80106f27:	74 d0                	je     80106ef9 <clearpteu+0x19>
   *pte &= ~PTE_U;
-80106fb9:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80106f29:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106fbc:	c9                   	leave  
-80106fbd:	c3                   	ret    
-80106fbe:	66 90                	xchg   %ax,%ax
+80106f2c:	c9                   	leave  
+80106f2d:	c3                   	ret    
+80106f2e:	66 90                	xchg   %ax,%ax
 
-80106fc0 <copyuvm>:
+80106f30 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106fc0:	55                   	push   %ebp
-80106fc1:	89 e5                	mov    %esp,%ebp
-80106fc3:	57                   	push   %edi
-80106fc4:	56                   	push   %esi
-80106fc5:	53                   	push   %ebx
-80106fc6:	83 ec 1c             	sub    $0x1c,%esp
+80106f30:	55                   	push   %ebp
+80106f31:	89 e5                	mov    %esp,%ebp
+80106f33:	57                   	push   %edi
+80106f34:	56                   	push   %esi
+80106f35:	53                   	push   %ebx
+80106f36:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106fc9:	e8 02 ff ff ff       	call   80106ed0 <setupkvm>
-80106fce:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106fd1:	85 c0                	test   %eax,%eax
-80106fd3:	0f 84 bd 00 00 00    	je     80107096 <copyuvm+0xd6>
+80106f39:	e8 02 ff ff ff       	call   80106e40 <setupkvm>
+80106f3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106f41:	85 c0                	test   %eax,%eax
+80106f43:	0f 84 bd 00 00 00    	je     80107006 <copyuvm+0xd6>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106fd9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106fdc:	85 c9                	test   %ecx,%ecx
-80106fde:	0f 84 b2 00 00 00    	je     80107096 <copyuvm+0xd6>
-80106fe4:	31 f6                	xor    %esi,%esi
-80106fe6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106fed:	8d 76 00             	lea    0x0(%esi),%esi
+80106f49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106f4c:	85 c9                	test   %ecx,%ecx
+80106f4e:	0f 84 b2 00 00 00    	je     80107006 <copyuvm+0xd6>
+80106f54:	31 f6                	xor    %esi,%esi
+80106f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f5d:	8d 76 00             	lea    0x0(%esi),%esi
   if(*pde & PTE_P){
-80106ff0:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80106f60:	8b 4d 08             	mov    0x8(%ebp),%ecx
   pde = &pgdir[PDX(va)];
-80106ff3:	89 f0                	mov    %esi,%eax
-80106ff5:	c1 e8 16             	shr    $0x16,%eax
+80106f63:	89 f0                	mov    %esi,%eax
+80106f65:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-80106ff8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
-80106ffb:	a8 01                	test   $0x1,%al
-80106ffd:	75 11                	jne    80107010 <copyuvm+0x50>
+80106f68:	8b 04 81             	mov    (%ecx,%eax,4),%eax
+80106f6b:	a8 01                	test   $0x1,%al
+80106f6d:	75 11                	jne    80106f80 <copyuvm+0x50>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
-80106fff:	83 ec 0c             	sub    $0xc,%esp
-80107002:	68 94 80 10 80       	push   $0x80108094
-80107007:	e8 74 93 ff ff       	call   80100380 <panic>
-8010700c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106f6f:	83 ec 0c             	sub    $0xc,%esp
+80106f72:	68 14 7b 10 80       	push   $0x80107b14
+80106f77:	e8 04 94 ff ff       	call   80100380 <panic>
+80106f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   return &pgtab[PTX(va)];
-80107010:	89 f2                	mov    %esi,%edx
+80106f80:	89 f2                	mov    %esi,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80107012:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106f82:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-80107017:	c1 ea 0a             	shr    $0xa,%edx
-8010701a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80107020:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+80106f87:	c1 ea 0a             	shr    $0xa,%edx
+80106f8a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106f90:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80107027:	85 c0                	test   %eax,%eax
-80107029:	74 d4                	je     80106fff <copyuvm+0x3f>
+80106f97:	85 c0                	test   %eax,%eax
+80106f99:	74 d4                	je     80106f6f <copyuvm+0x3f>
     if(!(*pte & PTE_P))
-8010702b:	8b 00                	mov    (%eax),%eax
-8010702d:	a8 01                	test   $0x1,%al
-8010702f:	0f 84 9f 00 00 00    	je     801070d4 <copyuvm+0x114>
+80106f9b:	8b 00                	mov    (%eax),%eax
+80106f9d:	a8 01                	test   $0x1,%al
+80106f9f:	0f 84 9f 00 00 00    	je     80107044 <copyuvm+0x114>
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
-80107035:	89 c7                	mov    %eax,%edi
+80106fa5:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80107037:	25 ff 0f 00 00       	and    $0xfff,%eax
-8010703c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106fa7:	25 ff 0f 00 00       	and    $0xfff,%eax
+80106fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-8010703f:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80106faf:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80107045:	e8 36 b6 ff ff       	call   80102680 <kalloc>
-8010704a:	89 c3                	mov    %eax,%ebx
-8010704c:	85 c0                	test   %eax,%eax
-8010704e:	74 64                	je     801070b4 <copyuvm+0xf4>
+80106fb5:	e8 c6 b6 ff ff       	call   80102680 <kalloc>
+80106fba:	89 c3                	mov    %eax,%ebx
+80106fbc:	85 c0                	test   %eax,%eax
+80106fbe:	74 64                	je     80107024 <copyuvm+0xf4>
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80107050:	83 ec 04             	sub    $0x4,%esp
-80107053:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80107059:	68 00 10 00 00       	push   $0x1000
-8010705e:	57                   	push   %edi
-8010705f:	50                   	push   %eax
-80107060:	e8 9b d6 ff ff       	call   80104700 <memmove>
+80106fc0:	83 ec 04             	sub    $0x4,%esp
+80106fc3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80106fc9:	68 00 10 00 00       	push   $0x1000
+80106fce:	57                   	push   %edi
+80106fcf:	50                   	push   %eax
+80106fd0:	e8 2b d7 ff ff       	call   80104700 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80107065:	58                   	pop    %eax
-80107066:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-8010706c:	5a                   	pop    %edx
-8010706d:	ff 75 e4             	push   -0x1c(%ebp)
-80107070:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80107075:	89 f2                	mov    %esi,%edx
-80107077:	50                   	push   %eax
-80107078:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010707b:	e8 60 f8 ff ff       	call   801068e0 <mappages>
-80107080:	83 c4 10             	add    $0x10,%esp
-80107083:	85 c0                	test   %eax,%eax
-80107085:	78 21                	js     801070a8 <copyuvm+0xe8>
+80106fd5:	58                   	pop    %eax
+80106fd6:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106fdc:	5a                   	pop    %edx
+80106fdd:	ff 75 e4             	push   -0x1c(%ebp)
+80106fe0:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106fe5:	89 f2                	mov    %esi,%edx
+80106fe7:	50                   	push   %eax
+80106fe8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106feb:	e8 60 f8 ff ff       	call   80106850 <mappages>
+80106ff0:	83 c4 10             	add    $0x10,%esp
+80106ff3:	85 c0                	test   %eax,%eax
+80106ff5:	78 21                	js     80107018 <copyuvm+0xe8>
   for(i = 0; i < sz; i += PGSIZE){
-80107087:	81 c6 00 10 00 00    	add    $0x1000,%esi
-8010708d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80107090:	0f 87 5a ff ff ff    	ja     80106ff0 <copyuvm+0x30>
+80106ff7:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106ffd:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107000:	0f 87 5a ff ff ff    	ja     80106f60 <copyuvm+0x30>
   return d;
 
 bad:
   freevm(d);
   return 0;
 }
-80107096:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80107099:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010709c:	5b                   	pop    %ebx
-8010709d:	5e                   	pop    %esi
-8010709e:	5f                   	pop    %edi
-8010709f:	5d                   	pop    %ebp
-801070a0:	c3                   	ret    
-801070a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107006:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107009:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010700c:	5b                   	pop    %ebx
+8010700d:	5e                   	pop    %esi
+8010700e:	5f                   	pop    %edi
+8010700f:	5d                   	pop    %ebp
+80107010:	c3                   	ret    
+80107011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       kfree(mem);
-801070a8:	83 ec 0c             	sub    $0xc,%esp
-801070ab:	53                   	push   %ebx
-801070ac:	e8 0f b4 ff ff       	call   801024c0 <kfree>
+80107018:	83 ec 0c             	sub    $0xc,%esp
+8010701b:	53                   	push   %ebx
+8010701c:	e8 9f b4 ff ff       	call   801024c0 <kfree>
       goto bad;
-801070b1:	83 c4 10             	add    $0x10,%esp
+80107021:	83 c4 10             	add    $0x10,%esp
   freevm(d);
-801070b4:	83 ec 0c             	sub    $0xc,%esp
-801070b7:	ff 75 e0             	push   -0x20(%ebp)
-801070ba:	e8 91 fd ff ff       	call   80106e50 <freevm>
+80107024:	83 ec 0c             	sub    $0xc,%esp
+80107027:	ff 75 e0             	push   -0x20(%ebp)
+8010702a:	e8 91 fd ff ff       	call   80106dc0 <freevm>
   return 0;
-801070bf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-801070c6:	83 c4 10             	add    $0x10,%esp
+8010702f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107036:	83 c4 10             	add    $0x10,%esp
 }
-801070c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801070cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801070cf:	5b                   	pop    %ebx
-801070d0:	5e                   	pop    %esi
-801070d1:	5f                   	pop    %edi
-801070d2:	5d                   	pop    %ebp
-801070d3:	c3                   	ret    
+80107039:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010703c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010703f:	5b                   	pop    %ebx
+80107040:	5e                   	pop    %esi
+80107041:	5f                   	pop    %edi
+80107042:	5d                   	pop    %ebp
+80107043:	c3                   	ret    
       panic("copyuvm: page not present");
-801070d4:	83 ec 0c             	sub    $0xc,%esp
-801070d7:	68 ae 80 10 80       	push   $0x801080ae
-801070dc:	e8 9f 92 ff ff       	call   80100380 <panic>
-801070e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801070e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801070ef:	90                   	nop
+80107044:	83 ec 0c             	sub    $0xc,%esp
+80107047:	68 2e 7b 10 80       	push   $0x80107b2e
+8010704c:	e8 2f 93 ff ff       	call   80100380 <panic>
+80107051:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107058:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010705f:	90                   	nop
 
-801070f0 <uva2ka>:
+80107060 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-801070f0:	55                   	push   %ebp
-801070f1:	89 e5                	mov    %esp,%ebp
-801070f3:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107060:	55                   	push   %ebp
+80107061:	89 e5                	mov    %esp,%ebp
+80107063:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-801070f6:	8b 55 08             	mov    0x8(%ebp),%edx
+80107066:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-801070f9:	89 c1                	mov    %eax,%ecx
-801070fb:	c1 e9 16             	shr    $0x16,%ecx
+80107069:	89 c1                	mov    %eax,%ecx
+8010706b:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-801070fe:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80107101:	f6 c2 01             	test   $0x1,%dl
-80107104:	0f 84 00 01 00 00    	je     8010720a <uva2ka.cold>
+8010706e:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+80107071:	f6 c2 01             	test   $0x1,%dl
+80107074:	0f 84 00 01 00 00    	je     8010717a <uva2ka.cold>
   return &pgtab[PTX(va)];
-8010710a:	c1 e8 0c             	shr    $0xc,%eax
+8010707a:	c1 e8 0c             	shr    $0xc,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-8010710d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+8010707d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   if((*pte & PTE_P) == 0)
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107113:	5d                   	pop    %ebp
+80107083:	5d                   	pop    %ebp
   return &pgtab[PTX(va)];
-80107114:	25 ff 03 00 00       	and    $0x3ff,%eax
+80107084:	25 ff 03 00 00       	and    $0x3ff,%eax
   if((*pte & PTE_P) == 0)
-80107119:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
+80107089:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
   if((*pte & PTE_U) == 0)
-80107120:	89 c2                	mov    %eax,%edx
+80107090:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107122:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107092:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107127:	83 e2 05             	and    $0x5,%edx
+80107097:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010712a:	05 00 00 00 80       	add    $0x80000000,%eax
-8010712f:	83 fa 05             	cmp    $0x5,%edx
-80107132:	ba 00 00 00 00       	mov    $0x0,%edx
-80107137:	0f 45 c2             	cmovne %edx,%eax
-}
-8010713a:	c3                   	ret    
-8010713b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010713f:	90                   	nop
+8010709a:	05 00 00 00 80       	add    $0x80000000,%eax
+8010709f:	83 fa 05             	cmp    $0x5,%edx
+801070a2:	ba 00 00 00 00       	mov    $0x0,%edx
+801070a7:	0f 45 c2             	cmovne %edx,%eax
+}
+801070aa:	c3                   	ret    
+801070ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801070af:	90                   	nop
 
-80107140 <copyout>:
+801070b0 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107140:	55                   	push   %ebp
-80107141:	89 e5                	mov    %esp,%ebp
-80107143:	57                   	push   %edi
-80107144:	56                   	push   %esi
-80107145:	53                   	push   %ebx
-80107146:	83 ec 0c             	sub    $0xc,%esp
-80107149:	8b 75 14             	mov    0x14(%ebp),%esi
-8010714c:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010714f:	8b 55 10             	mov    0x10(%ebp),%edx
+801070b0:	55                   	push   %ebp
+801070b1:	89 e5                	mov    %esp,%ebp
+801070b3:	57                   	push   %edi
+801070b4:	56                   	push   %esi
+801070b5:	53                   	push   %ebx
+801070b6:	83 ec 0c             	sub    $0xc,%esp
+801070b9:	8b 75 14             	mov    0x14(%ebp),%esi
+801070bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+801070bf:	8b 55 10             	mov    0x10(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107152:	85 f6                	test   %esi,%esi
-80107154:	75 51                	jne    801071a7 <copyout+0x67>
-80107156:	e9 a5 00 00 00       	jmp    80107200 <copyout+0xc0>
-8010715b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010715f:	90                   	nop
+801070c2:	85 f6                	test   %esi,%esi
+801070c4:	75 51                	jne    80107117 <copyout+0x67>
+801070c6:	e9 a5 00 00 00       	jmp    80107170 <copyout+0xc0>
+801070cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801070cf:	90                   	nop
   return (char*)P2V(PTE_ADDR(*pte));
-80107160:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-80107166:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
+801070d0:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801070d6:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
-8010716c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
-80107172:	74 75                	je     801071e9 <copyout+0xa9>
+801070dc:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
+801070e2:	74 75                	je     80107159 <copyout+0xa9>
       return -1;
     n = PGSIZE - (va - va0);
-80107174:	89 fb                	mov    %edi,%ebx
+801070e4:	89 fb                	mov    %edi,%ebx
     if(n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107176:	89 55 10             	mov    %edx,0x10(%ebp)
+801070e6:	89 55 10             	mov    %edx,0x10(%ebp)
     n = PGSIZE - (va - va0);
-80107179:	29 c3                	sub    %eax,%ebx
-8010717b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80107181:	39 f3                	cmp    %esi,%ebx
-80107183:	0f 47 de             	cmova  %esi,%ebx
+801070e9:	29 c3                	sub    %eax,%ebx
+801070eb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801070f1:	39 f3                	cmp    %esi,%ebx
+801070f3:	0f 47 de             	cmova  %esi,%ebx
     memmove(pa0 + (va - va0), buf, n);
-80107186:	29 f8                	sub    %edi,%eax
-80107188:	83 ec 04             	sub    $0x4,%esp
-8010718b:	01 c1                	add    %eax,%ecx
-8010718d:	53                   	push   %ebx
-8010718e:	52                   	push   %edx
-8010718f:	51                   	push   %ecx
-80107190:	e8 6b d5 ff ff       	call   80104700 <memmove>
+801070f6:	29 f8                	sub    %edi,%eax
+801070f8:	83 ec 04             	sub    $0x4,%esp
+801070fb:	01 c1                	add    %eax,%ecx
+801070fd:	53                   	push   %ebx
+801070fe:	52                   	push   %edx
+801070ff:	51                   	push   %ecx
+80107100:	e8 fb d5 ff ff       	call   80104700 <memmove>
     len -= n;
     buf += n;
-80107195:	8b 55 10             	mov    0x10(%ebp),%edx
+80107105:	8b 55 10             	mov    0x10(%ebp),%edx
     va = va0 + PGSIZE;
-80107198:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
+80107108:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
   while(len > 0){
-8010719e:	83 c4 10             	add    $0x10,%esp
+8010710e:	83 c4 10             	add    $0x10,%esp
     buf += n;
-801071a1:	01 da                	add    %ebx,%edx
+80107111:	01 da                	add    %ebx,%edx
   while(len > 0){
-801071a3:	29 de                	sub    %ebx,%esi
-801071a5:	74 59                	je     80107200 <copyout+0xc0>
+80107113:	29 de                	sub    %ebx,%esi
+80107115:	74 59                	je     80107170 <copyout+0xc0>
   if(*pde & PTE_P){
-801071a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80107117:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pde = &pgdir[PDX(va)];
-801071aa:	89 c1                	mov    %eax,%ecx
+8010711a:	89 c1                	mov    %eax,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-801071ac:	89 c7                	mov    %eax,%edi
+8010711c:	89 c7                	mov    %eax,%edi
   pde = &pgdir[PDX(va)];
-801071ae:	c1 e9 16             	shr    $0x16,%ecx
+8010711e:	c1 e9 16             	shr    $0x16,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-801071b1:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107121:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
   if(*pde & PTE_P){
-801071b7:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
-801071ba:	f6 c1 01             	test   $0x1,%cl
-801071bd:	0f 84 4e 00 00 00    	je     80107211 <copyout.cold>
+80107127:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
+8010712a:	f6 c1 01             	test   $0x1,%cl
+8010712d:	0f 84 4e 00 00 00    	je     80107181 <copyout.cold>
   return &pgtab[PTX(va)];
-801071c3:	89 fb                	mov    %edi,%ebx
+80107133:	89 fb                	mov    %edi,%ebx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801071c5:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+80107135:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-801071cb:	c1 eb 0c             	shr    $0xc,%ebx
-801071ce:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
+8010713b:	c1 eb 0c             	shr    $0xc,%ebx
+8010713e:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   if((*pte & PTE_P) == 0)
-801071d4:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
+80107144:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
   if((*pte & PTE_U) == 0)
-801071db:	89 d9                	mov    %ebx,%ecx
-801071dd:	83 e1 05             	and    $0x5,%ecx
-801071e0:	83 f9 05             	cmp    $0x5,%ecx
-801071e3:	0f 84 77 ff ff ff    	je     80107160 <copyout+0x20>
+8010714b:	89 d9                	mov    %ebx,%ecx
+8010714d:	83 e1 05             	and    $0x5,%ecx
+80107150:	83 f9 05             	cmp    $0x5,%ecx
+80107153:	0f 84 77 ff ff ff    	je     801070d0 <copyout+0x20>
   }
   return 0;
 }
-801071e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107159:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801071ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010715c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801071f1:	5b                   	pop    %ebx
-801071f2:	5e                   	pop    %esi
-801071f3:	5f                   	pop    %edi
-801071f4:	5d                   	pop    %ebp
-801071f5:	c3                   	ret    
-801071f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801071fd:	8d 76 00             	lea    0x0(%esi),%esi
-80107200:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107161:	5b                   	pop    %ebx
+80107162:	5e                   	pop    %esi
+80107163:	5f                   	pop    %edi
+80107164:	5d                   	pop    %ebp
+80107165:	c3                   	ret    
+80107166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010716d:	8d 76 00             	lea    0x0(%esi),%esi
+80107170:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80107203:	31 c0                	xor    %eax,%eax
+80107173:	31 c0                	xor    %eax,%eax
 }
-80107205:	5b                   	pop    %ebx
-80107206:	5e                   	pop    %esi
-80107207:	5f                   	pop    %edi
-80107208:	5d                   	pop    %ebp
-80107209:	c3                   	ret    
+80107175:	5b                   	pop    %ebx
+80107176:	5e                   	pop    %esi
+80107177:	5f                   	pop    %edi
+80107178:	5d                   	pop    %ebp
+80107179:	c3                   	ret    
 
-8010720a <uva2ka.cold>:
+8010717a <uva2ka.cold>:
   if((*pte & PTE_P) == 0)
-8010720a:	a1 00 00 00 00       	mov    0x0,%eax
-8010720f:	0f 0b                	ud2    
+8010717a:	a1 00 00 00 00       	mov    0x0,%eax
+8010717f:	0f 0b                	ud2    
 
-80107211 <copyout.cold>:
-80107211:	a1 00 00 00 00       	mov    0x0,%eax
-80107216:	0f 0b                	ud2    
+80107181 <copyout.cold>:
+80107181:	a1 00 00 00 00       	mov    0x0,%eax
+80107186:	0f 0b                	ud2    
Only in xv6_original: kernel.asm:Zone.Identifier
Only in xv6_original: kernel.ld:Zone.Identifier
diff -ur xv6-public/kernel.sym xv6_original/kernel.sym
--- xv6-public/kernel.sym	2024-08-13 22:59:54.187438892 +0530
+++ xv6_original/kernel.sym	2024-08-13 20:08:50.860736400 +0530
@@ -1,10 +1,10 @@
 00000000 bio.c
 00000000 console.c
-8010ff20 cons
-8010ff58 panicked
+8010ef20 cons
+8010ef58 panicked
 80100400 consputc.part.0
 80100600 printint
-80107290 digits.0
+80107210 digits.0
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -15,19 +15,19 @@
 80101d90 namex
 00000000 ide.c
 801020e0 idestart
-80112600 idelock
-801125e0 havedisk1
-801125e4 idequeue
+80111600 idelock
+801115e0 havedisk1
+801115e4 idequeue
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8011267c shift.1
-801075c0 shiftcode
-801074c0 togglecode
-801074a0 charcode.0
-80109200 normalmap
-80109100 shiftmap
-80109000 ctlmap
+8011167c shift.1
+80107540 shiftcode
+80107440 togglecode
+80107420 charcode.0
+80108200 normalmap
+80108100 shiftmap
+80108000 ctlmap
 00000000 lapic.c
 00000000 log.c
 80102bc0 install_trans
@@ -41,464 +41,463 @@
 00000000 pipe.c
 00000000 proc.c
 801037b0 allocproc
-8010b000 first.1
-80114c54 initproc
-8010786c states.0
+8010a000 first.1
+80113c54 initproc
+801077ec states.0
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-801078e0 syscalls
+80107860 syscalls
 00000000 sysfile.c
 80104ad0 create
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105c30 uartgetc
-801154c0 uart
+80105ba0 uartgetc
+801144c0 uart
 00000000 vm.c
-80106830 deallocuvm.part.0
-801068e0 mappages
-8010b420 kmap
-8010720a uva2ka.cold
-80107211 copyout.cold
+801067a0 deallocuvm.part.0
+80106850 mappages
+8010a420 kmap
+8010717a uva2ka.cold
+80107181 copyout.cold
 80100280 consoleread
-8010677f vector242
-801061d6 vector119
+801066ef vector242
+80106146 vector119
 8010000c entry
-801060b6 vector87
-801060ad vector86
+80106026 vector87
+8010601d vector86
 80104820 safestrcpy
 80104df0 sys_close
-801067eb vector251
-801060da vector91
-80105ed0 vector33
-801063bf vector162
+8010675b vector251
+8010604a vector91
+80105e40 vector33
+8010632f vector162
 80103ff0 yield
-801126a0 log
-80112640 kmem
-80106623 vector213
-80106173 vector108
-80105c60 uartinit
-80105f2a vector43
+801116a0 log
+80111640 kmem
+80106593 vector213
+801060e3 vector108
+80105bd0 uartinit
+80105e9a vector43
 80102910 lapiceoi
-801063e3 vector165
-801064d3 vector185
+80106353 vector165
+80106443 vector185
 801023d0 ioapicinit
-801061b2 vector115
+80106122 vector115
 80101020 fileread
-801061f1 vector122
+80106161 vector122
 80105710 sys_sbrk
-80112780 ioapicid
-80106377 vector156
-801067a3 vector245
-80112634 ioapic
-80106503 vector189
-80105df4 vector7
-80105fcc vector61
-80105e7f vector24
-8010618e vector111
-80106587 vector200
-80106002 vector67
-8010629f vector138
-80106041 vector74
+80111780 ioapicid
+801062e7 vector156
+80106713 vector245
+80111634 ioapic
+80106473 vector189
+80105d64 vector7
+80105f3c vector61
+80105def vector24
+801060fe vector111
+801064f7 vector200
+80105f72 vector67
+8010620f vector138
+80105fb1 vector74
 80103cd0 sched
 80104700 memmove
-80105fa8 vector57
+80105f18 vector57
 80104a60 syscall
-8010662f vector214
-80106122 vector99
+8010659f vector214
+80106092 vector99
 80103950 cpuid
 80101b90 writei
-801062c3 vector141
+80106233 vector141
 80105690 sys_fork
-8010b520 bcache
-80106437 vector172
-80106773 vector241
+8010a520 bcache
+801063a7 vector172
+801066e3 vector241
 801043f0 getcallerpcs
 80105330 sys_mkdir
-80106803 vector253
-80105dd0 vector3
-80105dc7 vector2
+80106773 vector253
+80105d40 vector3
+80105d37 vector2
 80101cc0 namecmp
-801066cb vector227
-801065ff vector210
+8010663b vector227
+8010656f vector210
 801049e0 argstr
-801066a7 vector224
-80105f18 vector41
+80106617 vector224
+80105e88 vector41
 801006a0 cprintf
 80100ea0 filedup
 801020a0 namei
-80105e64 vector21
+80105dd4 vector21
 80100040 binit
-80106473 vector177
-801061cd vector118
-8010601d vector70
-80106014 vector69
-80106743 vector237
-80105fe7 vector64
-80105e9a vector27
-80106257 vector132
-801064df vector186
+801063e3 vector177
+8010613d vector118
+80105f8d vector70
+80105f84 vector69
+801066b3 vector237
+80105f57 vector64
+80105e0a vector27
+801061c7 vector132
+8010644f vector186
 80104cf0 sys_read
-80106653 vector217
+801065c3 vector217
 80104890 fetchint
-80106ed0 setupkvm
+80106e40 setupkvm
 80104760 memcpy
-80106e50 freevm
-80105dbe vector1
-8010647f vector178
-80105efd vector38
+80106dc0 freevm
+80105d2e vector1
+801063ef vector178
+80105e6d vector38
 801024c0 kfree
-8010674f vector238
+801066bf vector238
 801038f0 mycpu
 801018b0 iput
-80106263 vector133
-80106038 vector73
-801062e7 vector144
-8010680f vector254
+801061d3 vector133
+80105fa8 vector73
+80106257 vector144
+8010677f vector254
 80101520 readsb
-8010b004 nextpid
-80106134 vector101
-8010660b vector211
+8010a004 nextpid
+801060a4 vector101
+8010657b vector211
 80103210 mpinit
-8010644f vector174
-8010678b vector243
+801063bf vector174
+801066fb vector243
 80100e10 fileinit
 801043d0 initlock
-80106227 vector128
-80107140 copyout
-80106080 vector81
+80106197 vector128
+801070b0 copyout
+80105ff0 vector81
 80104040 sleep
 80102930 microdelay
-80105e22 vector13
-80105f72 vector51
-80105e39 vector16
-8010fe80 input
-80106767 vector240
-80105f8d vector54
-80105e52 vector19
-801060e3 vector92
-80106797 vector244
+80105d92 vector13
+80105ee2 vector51
+80105da9 vector16
+8010ee80 input
+801066d7 vector240
+80105efd vector54
+80105dc2 vector19
+80106053 vector92
+80106707 vector244
 80101a60 stati
-801062b7 vector140
+80106227 vector140
 801056c0 sys_kill
-80105f3c vector45
-8010606e vector79
+80105eac vector45
+80105fde vector79
 80103530 pipeclose
-801066e3 vector229
-8010638f vector158
+80106653 vector229
+801062ff vector158
 80104e50 sys_fstat
 80100590 consolewrite
-80105f06 vector39
-80106407 vector168
+80105e76 vector39
+80106377 vector168
 80102dd0 end_op
-80105ee2 vector35
-801061a0 vector113
+80105e52 vector35
+80106110 vector113
 80102560 freerange
-8010620c vector125
-80106cf0 allocuvm
-801058d7 trapret
-80106647 vector216
-80105fde vector63
-80105e91 vector26
-80106533 vector193
+8010617c vector125
+80106c60 allocuvm
+80105852 trapret
+801065b7 vector216
+80105f4e vector63
+80105e01 vector26
+801064a3 vector193
 801027f0 lapicinit
-80106557 vector196
-801065f3 vector209
-80105dd9 vector4
-8010641f vector170
-801154d0 stack
-80106287 vector136
-80105e0d vector10
-801065cf vector206
+801064c7 vector196
+80106563 vector209
+80105d49 vector4
+8010638f vector170
+801144d0 stack
+801061f7 vector136
+80105d7d vector10
+8010653f vector206
 80101860 iunlock
 80105760 sys_sleep
-8010681b vector255
-801064a3 vector181
-80105fba vector59
-801060a4 vector85
-8010609b vector84
-801064bb vector183
-8010639b vector159
-80106617 vector212
+8010678b vector255
+80106413 vector181
+80105f2a vector59
+80106014 vector85
+8010600b vector84
+8010642b vector183
+8010630b vector159
+80106587 vector212
 80104ec0 sys_link
-80105f4e vector47
-801066d7 vector228
-80105f21 vector42
-801061a9 vector114
-801070f0 uva2ka
-8010645b vector175
-801062db vector143
+80105ebe vector47
+80106647 vector228
+80105e91 vector42
+80106119 vector114
+80107060 uva2ka
+801063cb vector175
+8010624b vector143
 80100e30 filealloc
 80104100 wakeup
-8010623f vector130
-801067af vector246
-80105e04 vector9
-801062cf vector142
-8010612b vector100
-80106593 vector201
-80106f70 clearpteu
+801061af vector130
+8010671f vector246
+80105d74 vector9
+8010623f vector142
+8010609b vector100
+80106503 vector201
+80106ee0 clearpteu
 80103970 myproc
-801058f0 tvinit
-80105fc3 vector60
-80105e76 vector23
+80105860 tvinit
+80105f33 vector60
+80105de6 vector23
 80101750 idup
-80106737 vector236
+801066a7 vector236
 801027d0 kbdintr
 801051f0 sys_open
-801066fb vector231
-80105ff9 vector66
-80105eac vector29
+8010666b vector231
+80105f69 vector66
+80105e1c vector29
 80101a90 readi
-8010627b vector135
+801061eb vector135
 80100880 consoleintr
 80104160 kill
-8010605c vector77
+80105fcc vector77
 80101610 ialloc
-80106497 vector180
-801154c4 kpgdir
-801065e7 vector208
+80106407 vector180
+801144c4 kpgdir
+80106557 vector208
 801029d0 cmostime
-80105da0 uartintr
-80106119 vector98
-80106110 vector97
-80106467 vector176
-8010653f vector194
-80105ec7 vector32
-801164d0 end
-8010657b vector199
-8010624b vector131
-801067f7 vector252
+80105d10 uartintr
+80106089 vector98
+80106080 vector97
+801063d7 vector176
+801064af vector194
+80105e37 vector32
+801154d0 end
+801064eb vector199
+801061bb vector131
+80106767 vector252
 801010b0 filewrite
-80105db5 vector0
+80105d25 vector0
 80104920 argint
 80100ab0 exec
-801062f3 vector145
+80106263 vector145
 80104d70 sys_write
 80104540 release
 801048d0 fetchstr
-8010616a vector107
-80105f0f vector40
+801060da vector107
+80105e7f vector40
 80103ec0 wait
-8010613d vector102
-8010a000 entrypgdir
+801060ad vector102
+80109000 entrypgdir
 0010000c _start
-80105f9f vector56
-8010600b vector68
-80105deb vector6
-8010b48c _binary_initcode_end
+80105f0f vector56
+80105f7b vector68
+80105d5b vector6
+8010a48c _binary_initcode_end
 80100000 multiboot_header
-80106233 vector129
+801061a3 vector129
 80103c30 scheduler
 80101ce0 dirlookup
-80106563 vector197
+801064d3 vector197
 80100ef0 fileclose
 80102d60 begin_op
-80106347 vector152
-80106f50 kvmalloc
-801066ef vector230
+801062b7 vector152
+80106ec0 kvmalloc
+8010665f vector230
 80104770 strncmp
-80105ef4 vector37
-801065c3 vector205
-801063b3 vector161
-80114c80 tickslock
+80105e64 vector37
+80106533 vector205
+80106323 vector161
+80113c80 tickslock
 801035d0 pipewrite
 801047c0 strncpy
-80106026 vector71
-80106fc0 copyuvm
-8010ff60 ftable
-801063a7 vector160
+80105f96 vector71
+80106f30 copyuvm
+8010ef60 ftable
+80106317 vector160
 80104970 argptr
-8010663b vector215
-80106383 vector157
+801065ab vector215
+801062f3 vector157
 80104c70 sys_dup
-80106197 vector112
+80106107 vector112
 80100380 panic
 80103880 forkret
-801064af vector182
-80105e1b vector12
+8010641f vector182
+80105d8b vector12
 801046b0 memcmp
 801026f0 kbdgetc
-8010617c vector109
-80105e5b vector20
+801060ec vector109
+80105dcb vector20
 80103b10 fork
-80105f84 vector53
-80105e49 vector18
+80105ef4 vector53
+80105db9 vector18
 0000008a _binary_entryother_size
-801127a0 cpus
+801117a0 cpus
 80104340 releasesleep
-801060fe vector95
+8010606e vector95
 80104500 holding
-801125b4 sb
+801115b4 sb
 801045a0 acquire
-801066bf vector226
+8010662f vector226
 801020c0 nameiparent
-80105f60 vector49
-80105f33 vector44
-80112680 lapic
-80106065 vector78
-801058bf alltraps
-80106443 vector173
-801061c4 vector117
-80106089 vector82
-8010668f vector222
-80105dfd vector8
-80106323 vector149
+80105ed0 vector49
+80105ea3 vector44
+80111680 lapic
+80105fd5 vector78
+8010583a alltraps
+801063b3 vector173
+80106134 vector117
+80105ff9 vector82
+801065ff vector222
+80105d6d vector8
+80106293 vector149
 801016d0 iupdate
-80109000 data
+80108000 data
 80104660 memset
-80106707 vector232
+80106677 vector232
 80103060 main
-80106a60 switchkvm
-80106161 vector106
-80106677 vector220
-801060d1 vector90
-801063cb vector163
-8010671f vector234
+801069d0 switchkvm
+801060d1 vector106
+801065e7 vector220
+80106041 vector90
+8010633b vector163
+8010668f vector234
 80102f40 log_write
 801042e0 acquiresleep
 80105010 sys_unlink
-80105fd5 vector62
-80105e88 vector25
-8010656f vector198
-801061df vector120
-8010b48c _binary_entryother_start
+80105f45 vector62
+80105df8 vector25
+801064df vector198
+8010614f vector120
+8010a48c _binary_entryother_start
 80102610 kinit1
-80105f69 vector50
-80105e30 vector15
-8010633b vector151
-80106092 vector83
-801060c8 vector89
-801060bf vector88
-801059a0 trap
+80105ed9 vector50
+80105da0 vector15
+801062ab vector151
+80106002 vector83
+80106038 vector89
+8010602f vector88
+80105910 trap
 80105810 sys_uptime
-8010648b vector179
-80105ed9 vector34
-80105f45 vector46
-8010626f vector134
-8010669b vector223
-80114cc0 idt
-8010665f vector218
+801063fb vector179
+80105e49 vector34
+80105eb5 vector46
+801061df vector134
+8010660b vector223
+80113cc0 idt
+801065cf vector218
 801038d0 pinit
-80106e20 deallocuvm
-801066b3 vector225
+80106d90 deallocuvm
+80106623 vector225
 801028f0 lapicid
-801064eb vector187
+8010645b vector187
 80103a90 growproc
 80104380 holdingsleep
-80112784 ncpu
-80105eb5 vector30
+80111784 ncpu
+80105e25 vector30
 801039a0 userinit
 801000d0 bread
-8010621e vector127
+8010618e vector127
 801036d0 piperead
-80114c60 ticks
-80106527 vector192
-801063ef vector166
+80113c60 ticks
+80106497 vector192
+8010635f vector166
 80100a60 consoleinit
-80106053 vector76
-8010604a vector75
+80105fc3 vector76
+80105fba vector75
 80102240 ideintr
-8010654b vector195
-8010632f vector150
-80105fb1 vector58
-801067c7 vector248
-801061fa vector123
-80106107 vector96
-80105ebe vector31
-801065ab vector203
-801062ab vector139
-80106353 vector153
-801063d7 vector164
+801064bb vector195
+8010629f vector150
+80105f21 vector58
+80106737 vector248
+8010616a vector123
+80106077 vector96
+80105e2e vector31
+8010651b vector203
+8010621b vector139
+801062c3 vector153
+80106347 vector164
 801041e0 procdump
-801061e8 vector121
-80105d40 uartputc
-80105de2 vector5
-801063fb vector167
-8010636b vector155
-801067d3 vector249
+80106158 vector121
+80105cb0 uartputc
+80105d52 vector5
+8010636b vector167
+801062db vector155
+80106743 vector249
 801001f0 brelse
-801067df vector250
-80106203 vector124
-80106185 vector110
-801065b7 vector204
+8010674f vector250
+80106173 vector124
+801060f5 vector110
+80106527 vector204
 80101780 ilock
 801054d0 sys_exec
-80106293 vector137
-8010b460 _binary_initcode_start
+80106203 vector137
+8010a460 _binary_initcode_start
 8010487b swtch
-801067bb vector247
-80105e6d vector22
-8010659f vector202
-801069d0 seginit
+8010672b vector247
+80105ddd vector22
+8010650f vector202
+80106940 seginit
 80101a10 iunlockput
-8010602f vector72
-80105f96 vector55
-80106215 vector126
-80105ff0 vector65
-80105ea3 vector28
-8010b516 _binary_entryother_end
-80106413 vector169
+80105f9f vector72
+80105f06 vector55
+80106185 vector126
+80105f60 vector65
+80105e13 vector28
+8010a516 _binary_entryother_end
+80106383 vector169
 801001b0 bwrite
-80106713 vector233
-80105970 idtinit
+80106683 vector233
+801058e0 idtinit
 80103d90 exit
 801056b0 sys_wait
 801056a0 sys_exit
 80101fe0 dirlink
 0000002c _binary_initcode_size
-8010630b vector147
+8010627b vector147
 801042a0 initsleeplock
 801021c0 ideinit
-80106c00 loaduvm
-8010614f vector104
-801061bb vector116
-80112d20 ptable
+80106b70 loaduvm
+801060bf vector104
+8010612b vector116
+80111d20 ptable
 80102480 ioapicenable
 801044a0 popcli
-8010b008 vectors
-80105f7b vector52
-80105e42 vector17
-801064c7 vector184
+8010a008 vectors
+80105eeb vector52
+80105db2 vector17
+80106437 vector184
 80104860 strlen
 801055c0 sys_pipe
 80101560 iinit
 80103410 picinit
-801065db vector207
-80106b80 inituvm
-8010650f vector190
-8010675b vector239
-801060f5 vector94
-801060ec vector93
+8010654b vector207
+80106af0 inituvm
+8010647f vector190
+801066cb vector239
+80106065 vector94
+8010605c vector93
 80102cc0 initlog
-801064f7 vector188
-80105f57 vector48
+80106467 vector188
+80105ec7 vector48
 801022e0 iderw
-8010666b vector219
-80106317 vector148
-80106683 vector221
+801065db vector219
+80106287 vector148
+801065f3 vector221
 80102680 kalloc
-80110900 devsw
+8010f900 devsw
 80105700 sys_getpid
-80105840 sys_draw
-80106077 vector80
-8010642b vector171
-8010635f vector154
-80105eeb vector36
+80105fe7 vector80
+8010639b vector171
+801062cf vector154
+80105e5b vector36
 80103430 pipealloc
-8010672b vector235
-80106158 vector105
+8010669b vector235
+801060c8 vector105
 80105420 sys_chdir
-80110960 icache
-801062ff vector146
-8010651b vector191
-80106146 vector103
+8010f960 icache
+8010626f vector146
+8010648b vector191
+801060b6 vector103
 80105390 sys_mknod
 80102940 lapicstartap
-80106a70 switchuvm
+801069e0 switchuvm
 80104450 pushcli
 801025b0 kinit2
-80105e14 vector11
-80105e29 vector14
+80105d84 vector11
+80105d99 vector14
 80100fd0 filestat
Only in xv6_original: kernel.sym:Zone.Identifier
Only in xv6_original: kernel:Zone.Identifier
diff -ur xv6-public/kill.asm xv6_original/kill.asm
--- xv6-public/kill.asm	2024-08-13 23:00:03.017437941 +0530
+++ xv6_original/kill.asm	2024-08-13 20:08:57.530736700 +0530
@@ -585,11 +585,10 @@
  34b:	b8 0e 00 00 00       	mov    $0xe,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
-
-00000353 <draw>:
- 353:	b8 16 00 00 00       	mov    $0x16,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
+ 353:	66 90                	xchg   %ax,%ax
+ 355:	66 90                	xchg   %ax,%ax
+ 357:	66 90                	xchg   %ax,%ax
+ 359:	66 90                	xchg   %ax,%ax
  35b:	66 90                	xchg   %ax,%ax
  35d:	66 90                	xchg   %ax,%ax
  35f:	90                   	nop
Only in xv6_original: kill.asm:Zone.Identifier
Only in xv6_original: kill.c:Zone.Identifier
Only in xv6_original: kill.d:Zone.Identifier
Binary files xv6-public/kill.o and xv6_original/kill.o differ
Only in xv6_original: kill.o:Zone.Identifier
diff -ur xv6-public/kill.sym xv6_original/kill.sym
--- xv6-public/kill.sym	2024-08-13 23:00:03.027437939 +0530
+++ xv6_original/kill.sym	2024-08-13 20:08:57.530736700 +0530
@@ -37,7 +37,6 @@
 00000313 link
 000002b3 exit
 00000240 atoi
-00000353 draw
 000000f0 strlen
 000002f3 open
 00000140 strchr
Only in xv6_original: kill.sym:Zone.Identifier
Only in xv6_original: lapic.c:Zone.Identifier
Only in xv6_original: lapic.d:Zone.Identifier
Only in xv6_original: lapic.o:Zone.Identifier
diff -ur xv6-public/ln.asm xv6_original/ln.asm
--- xv6-public/ln.asm	2024-08-13 23:00:03.087437933 +0530
+++ xv6_original/ln.asm	2024-08-13 20:08:57.560736700 +0530
@@ -581,11 +581,10 @@
  34b:	b8 0e 00 00 00       	mov    $0xe,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
-
-00000353 <draw>:
- 353:	b8 16 00 00 00       	mov    $0x16,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
+ 353:	66 90                	xchg   %ax,%ax
+ 355:	66 90                	xchg   %ax,%ax
+ 357:	66 90                	xchg   %ax,%ax
+ 359:	66 90                	xchg   %ax,%ax
  35b:	66 90                	xchg   %ax,%ax
  35d:	66 90                	xchg   %ax,%ax
  35f:	90                   	nop
Only in xv6_original: ln.asm:Zone.Identifier
Only in xv6_original: ln.c:Zone.Identifier
Only in xv6_original: ln.d:Zone.Identifier
Binary files xv6-public/ln.o and xv6_original/ln.o differ
Only in xv6_original: ln.o:Zone.Identifier
diff -ur xv6-public/ln.sym xv6_original/ln.sym
--- xv6-public/ln.sym	2024-08-13 23:00:03.087437933 +0530
+++ xv6_original/ln.sym	2024-08-13 20:08:57.570736700 +0530
@@ -37,7 +37,6 @@
 00000313 link
 000002b3 exit
 00000240 atoi
-00000353 draw
 000000f0 strlen
 000002f3 open
 00000140 strchr
Only in xv6_original: ln.sym:Zone.Identifier
Only in xv6_original: log.c:Zone.Identifier
Only in xv6_original: log.d:Zone.Identifier
Only in xv6_original: log.o:Zone.Identifier
diff -ur xv6-public/ls.asm xv6_original/ls.asm
--- xv6-public/ls.asm	2024-08-13 23:00:03.187437925 +0530
+++ xv6_original/ls.asm	2024-08-13 20:08:57.610736700 +0530
@@ -866,11 +866,10 @@
  62b:	b8 0e 00 00 00       	mov    $0xe,%eax
  630:	cd 40                	int    $0x40
  632:	c3                   	ret    
-
-00000633 <draw>:
- 633:	b8 16 00 00 00       	mov    $0x16,%eax
- 638:	cd 40                	int    $0x40
- 63a:	c3                   	ret    
+ 633:	66 90                	xchg   %ax,%ax
+ 635:	66 90                	xchg   %ax,%ax
+ 637:	66 90                	xchg   %ax,%ax
+ 639:	66 90                	xchg   %ax,%ax
  63b:	66 90                	xchg   %ax,%ax
  63d:	66 90                	xchg   %ax,%ax
  63f:	90                   	nop
Only in xv6_original: ls.asm:Zone.Identifier
Only in xv6_original: ls.c:Zone.Identifier
Only in xv6_original: ls.d:Zone.Identifier
Binary files xv6-public/ls.o and xv6_original/ls.o differ
Only in xv6_original: ls.o:Zone.Identifier
diff -ur xv6-public/ls.sym xv6_original/ls.sym
--- xv6-public/ls.sym	2024-08-13 23:00:03.187437925 +0530
+++ xv6_original/ls.sym	2024-08-13 20:08:57.620736700 +0530
@@ -40,7 +40,6 @@
 00000100 ls
 00000593 exit
 00000520 atoi
-00000633 draw
 000003d0 strlen
 000005d3 open
 00000420 strchr
Only in xv6_original: ls.sym:Zone.Identifier
Only in xv6_original: main.c:Zone.Identifier
Only in xv6_original: main.d:Zone.Identifier
Only in xv6_original: main.o:Zone.Identifier
Only in xv6_original: memide.c:Zone.Identifier
Only in xv6_original: memlayout.h:Zone.Identifier
diff -ur xv6-public/mkdir.asm xv6_original/mkdir.asm
--- xv6-public/mkdir.asm	2024-08-13 23:00:03.247437919 +0530
+++ xv6_original/mkdir.asm	2024-08-13 20:08:57.650736700 +0530
@@ -603,11 +603,10 @@
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
-
-00000373 <draw>:
- 373:	b8 16 00 00 00       	mov    $0x16,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
  37b:	66 90                	xchg   %ax,%ax
  37d:	66 90                	xchg   %ax,%ax
  37f:	90                   	nop
Only in xv6_original: mkdir.asm:Zone.Identifier
Only in xv6_original: mkdir.c:Zone.Identifier
Only in xv6_original: mkdir.d:Zone.Identifier
Binary files xv6-public/mkdir.o and xv6_original/mkdir.o differ
Only in xv6_original: mkdir.o:Zone.Identifier
diff -ur xv6-public/mkdir.sym xv6_original/mkdir.sym
--- xv6-public/mkdir.sym	2024-08-13 23:00:03.257437917 +0530
+++ xv6_original/mkdir.sym	2024-08-13 20:08:57.660736700 +0530
@@ -37,7 +37,6 @@
 00000333 link
 000002d3 exit
 00000260 atoi
-00000373 draw
 00000110 strlen
 00000313 open
 00000160 strchr
Only in xv6_original: mkdir.sym:Zone.Identifier
Only in xv6_original: mkfs.c:Zone.Identifier
Only in xv6_original: mkfs:Zone.Identifier
Only in xv6_original: mmu.h:Zone.Identifier
Only in xv6_original: mp.c:Zone.Identifier
Only in xv6_original: mp.d:Zone.Identifier
Only in xv6_original: mp.h:Zone.Identifier
Only in xv6_original: mp.o:Zone.Identifier
Only in xv6_original: param.h:Zone.Identifier
Only in xv6_original: picirq.c:Zone.Identifier
Only in xv6_original: picirq.d:Zone.Identifier
Only in xv6_original: picirq.o:Zone.Identifier
Only in xv6_original: pipe.c:Zone.Identifier
Only in xv6_original: pipe.d:Zone.Identifier
Only in xv6_original: pipe.o:Zone.Identifier
Only in xv6_original: pr.pl:Zone.Identifier
Only in xv6_original: printf.c:Zone.Identifier
Only in xv6_original: printf.d:Zone.Identifier
Only in xv6_original: printf.o:Zone.Identifier
Only in xv6_original: printpcs:Zone.Identifier
Only in xv6_original: proc.c:Zone.Identifier
Only in xv6_original: proc.d:Zone.Identifier
Only in xv6_original: proc.h:Zone.Identifier
Only in xv6_original: proc.o:Zone.Identifier
Only in xv6_original: qemu:Zone.Identifier
diff -ur xv6-public/rm.asm xv6_original/rm.asm
--- xv6-public/rm.asm	2024-08-13 23:00:03.317437911 +0530
+++ xv6_original/rm.asm	2024-08-13 20:08:57.690736700 +0530
@@ -603,11 +603,10 @@
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
-
-00000373 <draw>:
- 373:	b8 16 00 00 00       	mov    $0x16,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
  37b:	66 90                	xchg   %ax,%ax
  37d:	66 90                	xchg   %ax,%ax
  37f:	90                   	nop
Only in xv6_original: rm.asm:Zone.Identifier
Only in xv6_original: rm.c:Zone.Identifier
Only in xv6_original: rm.d:Zone.Identifier
Binary files xv6-public/rm.o and xv6_original/rm.o differ
Only in xv6_original: rm.o:Zone.Identifier
diff -ur xv6-public/rm.sym xv6_original/rm.sym
--- xv6-public/rm.sym	2024-08-13 23:00:03.327437912 +0530
+++ xv6_original/rm.sym	2024-08-13 20:08:57.690736700 +0530
@@ -37,7 +37,6 @@
 00000333 link
 000002d3 exit
 00000260 atoi
-00000373 draw
 00000110 strlen
 00000313 open
 00000160 strchr
Only in xv6_original: rm.sym:Zone.Identifier
Only in xv6_original: runoff.list:Zone.Identifier
Only in xv6_original: runoff.spec:Zone.Identifier
Only in xv6_original: runoff1:Zone.Identifier
Only in xv6_original: runoff:Zone.Identifier
diff -ur xv6-public/sh.asm xv6_original/sh.asm
--- xv6-public/sh.asm	2024-08-13 23:00:03.557437887 +0530
+++ xv6_original/sh.asm	2024-08-13 20:08:57.800736700 +0530
@@ -2120,11 +2120,10 @@
      ebb:	b8 0e 00 00 00       	mov    $0xe,%eax
      ec0:	cd 40                	int    $0x40
      ec2:	c3                   	ret    
-
-00000ec3 <draw>:
-     ec3:	b8 16 00 00 00       	mov    $0x16,%eax
-     ec8:	cd 40                	int    $0x40
-     eca:	c3                   	ret    
+     ec3:	66 90                	xchg   %ax,%ax
+     ec5:	66 90                	xchg   %ax,%ax
+     ec7:	66 90                	xchg   %ax,%ax
+     ec9:	66 90                	xchg   %ax,%ax
      ecb:	66 90                	xchg   %ax,%ax
      ecd:	66 90                	xchg   %ax,%ax
      ecf:	90                   	nop
Only in xv6_original: sh.asm:Zone.Identifier
Only in xv6_original: sh.c:Zone.Identifier
Only in xv6_original: sh.d:Zone.Identifier
Binary files xv6-public/sh.o and xv6_original/sh.o differ
Only in xv6_original: sh.o:Zone.Identifier
diff -ur xv6-public/sh.sym xv6_original/sh.sym
--- xv6-public/sh.sym	2024-08-13 23:00:03.567437888 +0530
+++ xv6_original/sh.sym	2024-08-13 20:08:57.800736700 +0530
@@ -57,7 +57,6 @@
 00000e83 link
 00000e23 exit
 00000db0 atoi
-00000ec3 draw
 00000c60 strlen
 00000e63 open
 00000cb0 strchr
Only in xv6_original: sh.sym:Zone.Identifier
Only in xv6_original: show1:Zone.Identifier
Only in xv6_original: sign.pl:Zone.Identifier
Only in xv6_original: sleep1.p:Zone.Identifier
Only in xv6_original: sleeplock.c:Zone.Identifier
Only in xv6_original: sleeplock.d:Zone.Identifier
Only in xv6_original: sleeplock.h:Zone.Identifier
Only in xv6_original: sleeplock.o:Zone.Identifier
Only in xv6_original: spinlock.c:Zone.Identifier
Only in xv6_original: spinlock.d:Zone.Identifier
Only in xv6_original: spinlock.h:Zone.Identifier
Only in xv6_original: spinlock.o:Zone.Identifier
Only in xv6_original: spinp:Zone.Identifier
Only in xv6_original: stat.h:Zone.Identifier
diff -ur xv6-public/stressfs.asm xv6_original/stressfs.asm
--- xv6-public/stressfs.asm	2024-08-13 23:00:03.637437880 +0530
+++ xv6_original/stressfs.asm	2024-08-13 20:08:57.840736700 +0530
@@ -684,11 +684,10 @@
  42b:	b8 0e 00 00 00       	mov    $0xe,%eax
  430:	cd 40                	int    $0x40
  432:	c3                   	ret    
-
-00000433 <draw>:
- 433:	b8 16 00 00 00       	mov    $0x16,%eax
- 438:	cd 40                	int    $0x40
- 43a:	c3                   	ret    
+ 433:	66 90                	xchg   %ax,%ax
+ 435:	66 90                	xchg   %ax,%ax
+ 437:	66 90                	xchg   %ax,%ax
+ 439:	66 90                	xchg   %ax,%ax
  43b:	66 90                	xchg   %ax,%ax
  43d:	66 90                	xchg   %ax,%ax
  43f:	90                   	nop
Only in xv6_original: stressfs.asm:Zone.Identifier
Only in xv6_original: stressfs.c:Zone.Identifier
Only in xv6_original: stressfs.d:Zone.Identifier
Binary files xv6-public/stressfs.o and xv6_original/stressfs.o differ
Only in xv6_original: stressfs.o:Zone.Identifier
diff -ur xv6-public/stressfs.sym xv6_original/stressfs.sym
--- xv6-public/stressfs.sym	2024-08-13 23:00:03.637437880 +0530
+++ xv6_original/stressfs.sym	2024-08-13 20:08:57.850736700 +0530
@@ -37,7 +37,6 @@
 000003f3 link
 00000393 exit
 00000320 atoi
-00000433 draw
 000001d0 strlen
 000003d3 open
 00000220 strchr
Only in xv6_original: stressfs.sym:Zone.Identifier
Only in xv6_original: string.c:Zone.Identifier
Only in xv6_original: string.d:Zone.Identifier
Only in xv6_original: string.o:Zone.Identifier
Only in xv6_original: swtch.S:Zone.Identifier
Only in xv6_original: swtch.o:Zone.Identifier
diff -ur xv6-public/syscall.c xv6_original/syscall.c
--- xv6-public/syscall.c	2024-08-13 20:59:00.220436657 +0530
+++ xv6_original/syscall.c	2024-08-13 18:12:51.721491300 +0530
@@ -85,7 +85,6 @@
 extern int sys_chdir(void);
 extern int sys_close(void);
 extern int sys_dup(void);
-extern int sys_draw(void); // Edited line, added draw to the list.
 extern int sys_exec(void);
 extern int sys_exit(void);
 extern int sys_fork(void);
@@ -127,7 +126,6 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_draw]    sys_draw,   // Edited line, added the draw function pointer.
 };
 
 void
Only in xv6_original: syscall.c:Zone.Identifier
Only in xv6_original: syscall.d:Zone.Identifier
diff -ur xv6-public/syscall.h xv6_original/syscall.h
--- xv6-public/syscall.h	2024-08-13 20:54:53.970467192 +0530
+++ xv6_original/syscall.h	2024-08-13 18:12:51.721491300 +0530
@@ -20,4 +20,3 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-#define SYS_draw   22  // Edited line, added the index of the new system call to the list.
\ No newline at end of file
Only in xv6_original: syscall.h:Zone.Identifier
Binary files xv6-public/syscall.o and xv6_original/syscall.o differ
Only in xv6_original: syscall.o:Zone.Identifier
diff -ur xv6-public/sysfile.c xv6_original/sysfile.c
--- xv6-public/sysfile.c	2024-08-13 22:10:13.087764317 +0530
+++ xv6_original/sysfile.c	2024-08-13 18:12:51.721491300 +0530
@@ -442,58 +442,3 @@
   fd[1] = fd1;
   return 0;
 }
-
-// function to execute the 'draw' syscall
-// int 
-// sys_draw(void){
-//   char *buf, *path = "draw_ascii.txt"; // specifying the path of the ascii text.
-//   int n, fd;
-//   struct file *f;
-//   struct inode *ip;
-//   int task_fail = -1;
-//   int flag = 0;
-//   int INT_MAX_R= 7461;
-//   struct proc *curproc = myproc();
-
-//   if(argint(1, &n) < 0 || argptr(0, &buf, n) < 0) // functions to get the argint and argptr from the user program stack.
-//   {
-//     return task_fail;
-//   }
-
-//   if(n < INT_MAX_R)
-//   {
-//     return task_fail;
-//   }
-
-//   begin_op();
-
-//   if((ip = namei(path)) == 0)
-//   {
-//     end_op();
-//     return task_fail;
-//   }
-
-//   ilock(ip);
-//   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-//     if(f)
-//       fileclose(f);
-//     iunlockput(ip);
-//     end_op();
-//     return task_fail;
-//   }
-//   iunlock(ip);
-//   end_op();
-
-//   f->type = FD_INODE;
-//   f->ip = ip;
-//   f->off = 0;
-//   f->readable = 1;
-//   f->writable = 0;
-
-//   int bytesRead = fileread(f, buf, n);
-
-//   curproc->ofile[fd] = 0;
-//   fileclose(f);
-
-//   return bytesRead;
-// }
\ No newline at end of file
Only in xv6_original: sysfile.c:Zone.Identifier
Only in xv6_original: sysfile.d:Zone.Identifier
Only in xv6_original: sysfile.o:Zone.Identifier
diff -ur xv6-public/sysproc.c xv6_original/sysproc.c
--- xv6-public/sysproc.c	2024-08-13 22:53:19.427485024 +0530
+++ xv6_original/sysproc.c	2024-08-13 18:12:51.721491300 +0530
@@ -89,20 +89,3 @@
   release(&tickslock);
   return xticks;
 }
-
-// function to implement the draw function call.
-int
-sys_draw(void){
-  void* buff;
-  uint size;
-
-  argptr(0, (void*)&buff, sizeof(buff));
-  argptr(1, (void*)&size, sizeof(size));
-
-  char ascii_text [] = "                    ***********************\n               *********************************\n           *******   *     *       *    *    *******\n        *******   ***      **     **     ***   *******\n      ******   *****       *********      *****    *****\n    ******  ********       *********       ******    *****\n   ****   **********       *********       *********   *****\n  ****  **************    ***********     ************   ****\n ****  *************************************************  ****\n****  ***************************************************  ****\n****  ****************************************************  ****\n****  ****************************************************  ****\n ****  ***************************************************  ****\n  ****  *******     ****  ***********  ****     *********  ****\n   ****   *****      *      *******      *      ********  ****\n    *****   ****             *****             ******   *****\n      *****   **              ***              **    ******\n       ******   *              *              *   *******\n         *******                                *******\n            ********                         *******\n               *********************************\n                    ***********************\n";
-  if(sizeof(ascii_text) > size){
-    return -1;
-  }
-  strncpy((char*)buff, ascii_text, size);
-  return sizeof(ascii_text);
-}
\ No newline at end of file
Only in xv6_original: sysproc.c:Zone.Identifier
Only in xv6_original: sysproc.d:Zone.Identifier
Binary files xv6-public/sysproc.o and xv6_original/sysproc.o differ
Only in xv6_original: sysproc.o:Zone.Identifier
Only in xv6_original: toc.ftr:Zone.Identifier
Only in xv6_original: toc.hdr:Zone.Identifier
Only in xv6_original: trap.c:Zone.Identifier
Only in xv6_original: trap.d:Zone.Identifier
Only in xv6_original: trap.o:Zone.Identifier
Only in xv6_original: trapasm.S:Zone.Identifier
Only in xv6_original: trapasm.o:Zone.Identifier
Only in xv6_original: traps.h:Zone.Identifier
Only in xv6_original: types.h:Zone.Identifier
Only in xv6_original: uart.c:Zone.Identifier
Only in xv6_original: uart.d:Zone.Identifier
Only in xv6_original: uart.o:Zone.Identifier
Only in xv6_original: ulib.c:Zone.Identifier
Only in xv6_original: ulib.d:Zone.Identifier
Only in xv6_original: ulib.o:Zone.Identifier
Only in xv6_original: umalloc.c:Zone.Identifier
Only in xv6_original: umalloc.d:Zone.Identifier
Only in xv6_original: umalloc.o:Zone.Identifier
diff -ur xv6-public/user.h xv6_original/user.h
--- xv6-public/user.h	2024-08-13 21:08:31.220365180 +0530
+++ xv6_original/user.h	2024-08-13 18:12:51.721491300 +0530
@@ -23,7 +23,6 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-int draw(void*, uint size); // Edited line, added prototype definition of syscall.
 
 // ulib.c
 int stat(const char*, struct stat*);
Only in xv6_original: user.h:Zone.Identifier
diff -ur xv6-public/usertests.asm xv6_original/usertests.asm
--- xv6-public/usertests.asm	2024-08-13 23:00:04.197437825 +0530
+++ xv6_original/usertests.asm	2024-08-13 20:08:58.150736700 +0530
@@ -6030,11 +6030,10 @@
     396b:	b8 0e 00 00 00       	mov    $0xe,%eax
     3970:	cd 40                	int    $0x40
     3972:	c3                   	ret    
-
-00003973 <draw>:
-    3973:	b8 16 00 00 00       	mov    $0x16,%eax
-    3978:	cd 40                	int    $0x40
-    397a:	c3                   	ret    
+    3973:	66 90                	xchg   %ax,%ax
+    3975:	66 90                	xchg   %ax,%ax
+    3977:	66 90                	xchg   %ax,%ax
+    3979:	66 90                	xchg   %ax,%ax
     397b:	66 90                	xchg   %ax,%ax
     397d:	66 90                	xchg   %ax,%ax
     397f:	90                   	nop
Only in xv6_original: usertests.asm:Zone.Identifier
Only in xv6_original: usertests.c:Zone.Identifier
Only in xv6_original: usertests.d:Zone.Identifier
Binary files xv6-public/usertests.o and xv6_original/usertests.o differ
Only in xv6_original: usertests.o:Zone.Identifier
diff -ur xv6-public/usertests.sym xv6_original/usertests.sym
--- xv6-public/usertests.sym	2024-08-13 23:00:04.197437825 +0530
+++ xv6_original/usertests.sym	2024-08-13 20:08:58.150736700 +0530
@@ -77,7 +77,6 @@
 000038d3 exit
 00003860 atoi
 00001ae0 linkunlink
-00003973 draw
 00008570 name
 00003710 strlen
 00003913 open
Only in xv6_original: usertests.sym:Zone.Identifier
diff -ur xv6-public/usys.S xv6_original/usys.S
--- xv6-public/usys.S	2024-08-13 21:03:20.680404912 +0530
+++ xv6_original/usys.S	2024-08-13 18:12:51.721491300 +0530
@@ -29,4 +29,3 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-SYSCALL(draw)
\ No newline at end of file
Only in xv6_original: usys.S:Zone.Identifier
Binary files xv6-public/usys.o and xv6_original/usys.o differ
Only in xv6_original: usys.o:Zone.Identifier
Only in xv6_original: vectors.S:Zone.Identifier
Only in xv6_original: vectors.o:Zone.Identifier
Only in xv6_original: vectors.pl:Zone.Identifier
Only in xv6_original: vm.c:Zone.Identifier
Only in xv6_original: vm.d:Zone.Identifier
Only in xv6_original: vm.o:Zone.Identifier
diff -ur xv6-public/wc.asm xv6_original/wc.asm
--- xv6-public/wc.asm	2024-08-13 23:00:04.247437821 +0530
+++ xv6_original/wc.asm	2024-08-13 20:08:58.200736700 +0530
@@ -719,11 +719,10 @@
  46b:	b8 0e 00 00 00       	mov    $0xe,%eax
  470:	cd 40                	int    $0x40
  472:	c3                   	ret    
-
-00000473 <draw>:
- 473:	b8 16 00 00 00       	mov    $0x16,%eax
- 478:	cd 40                	int    $0x40
- 47a:	c3                   	ret    
+ 473:	66 90                	xchg   %ax,%ax
+ 475:	66 90                	xchg   %ax,%ax
+ 477:	66 90                	xchg   %ax,%ax
+ 479:	66 90                	xchg   %ax,%ax
  47b:	66 90                	xchg   %ax,%ax
  47d:	66 90                	xchg   %ax,%ax
  47f:	90                   	nop
Only in xv6_original: wc.asm:Zone.Identifier
Only in xv6_original: wc.c:Zone.Identifier
Only in xv6_original: wc.d:Zone.Identifier
Binary files xv6-public/wc.o and xv6_original/wc.o differ
Only in xv6_original: wc.o:Zone.Identifier
diff -ur xv6-public/wc.sym xv6_original/wc.sym
--- xv6-public/wc.sym	2024-08-13 23:00:04.247437821 +0530
+++ xv6_original/wc.sym	2024-08-13 20:08:58.200736700 +0530
@@ -39,7 +39,6 @@
 00000433 link
 000003d3 exit
 00000360 atoi
-00000473 draw
 00000210 strlen
 00000413 open
 00000260 strchr
Only in xv6_original: wc.sym:Zone.Identifier
Only in xv6_original: x86.h:Zone.Identifier
Binary files xv6-public/xv6.img and xv6_original/xv6.img differ
Only in xv6_original: xv6.img:Zone.Identifier
diff -ur xv6-public/zombie.asm xv6_original/zombie.asm
--- xv6-public/zombie.asm	2024-08-13 23:00:04.297437816 +0530
+++ xv6_original/zombie.asm	2024-08-13 20:08:58.230736700 +0530
@@ -556,11 +556,10 @@
  31b:	b8 0e 00 00 00       	mov    $0xe,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
-
-00000323 <draw>:
- 323:	b8 16 00 00 00       	mov    $0x16,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
+ 323:	66 90                	xchg   %ax,%ax
+ 325:	66 90                	xchg   %ax,%ax
+ 327:	66 90                	xchg   %ax,%ax
+ 329:	66 90                	xchg   %ax,%ax
  32b:	66 90                	xchg   %ax,%ax
  32d:	66 90                	xchg   %ax,%ax
  32f:	90                   	nop
Only in xv6_original: zombie.asm:Zone.Identifier
Only in xv6_original: zombie.c:Zone.Identifier
Only in xv6_original: zombie.d:Zone.Identifier
Only in xv6_original: zombie.o:Zone.Identifier
diff -ur xv6-public/zombie.sym xv6_original/zombie.sym
--- xv6-public/zombie.sym	2024-08-13 23:00:04.297437816 +0530
+++ xv6_original/zombie.sym	2024-08-13 20:08:58.240736700 +0530
@@ -37,7 +37,6 @@
 000002e3 link
 00000283 exit
 00000210 atoi
-00000323 draw
 000000c0 strlen
 000002c3 open
 00000110 strchr
Only in xv6_original: zombie.sym:Zone.Identifier
